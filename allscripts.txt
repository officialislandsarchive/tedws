-- Workspace.NPC.Gideon.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Gideon.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Maya.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Maya.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Oberon.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Oberon.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Moola.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.4.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.5.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.2.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.6.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.3.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.1.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.PropDVwastaken.AnimationPlayer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- ReplicatedFirst.PlaceInitialiser
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:33
-- Luau version 6, Types version 3
-- Time taken: 0.000263 seconds

game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)
game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)

-- StarterPlayer.StarterPlayerScripts.KnitControllerLoader
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:48
-- Luau version 6, Types version 3
-- Time taken: 0.000800 seconds

for _, v_upvr in pairs(game:GetService("Players").LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("Controllers"):GetChildren()) do
	if v_upvr:IsA("ModuleScript") then
		local pcall_result1, pcall_result2 = pcall(function() -- Line 17
			--[[ Upvalues[1]:
				[1]: v_upvr (readonly)
			]]
			require(v_upvr)
		end)
		if pcall_result1 then
		else
			print(pcall_result2)
			warn(string.format("Controller '%s' errored while loading!", v_upvr.Name))
		end
	end
end
require(game:GetService("ReplicatedStorage").Packages.Knit).Start():catch(warn):await()

-- StarterPlayer.StarterPlayerScripts.RbxCharacterSounds
-- Ignored

-- StarterPlayer.StarterPlayerScripts.RbxCharacterSounds.AtomicBinding
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.ClickToMoveController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.VRNavigation
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.DynamicThumbstick
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.PathDisplay
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.VehicleController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.TouchThumbstick
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.BaseCharacterController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.ClickToMoveDisplay
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.Gamepad
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.TouchJump
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.Keyboard
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ZoomController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ZoomController.Popper
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraUtils
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraToggleStateController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.Poppercam
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.OrbitalCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.Invisicam
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.BaseOcclusion
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.LegacyCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ClassicCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRVehicleCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.TransparencyController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraInput
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraUI
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera.VehicleCameraCore
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera.VehicleCameraConfig
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.BaseCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRBaseCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.MouseLockController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CommonUtils.ConnectionUtil
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CommonUtils.FlagUtil
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerScriptsLoader
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:49
-- Luau version 6, Types version 3
-- Time taken: 0.000262 seconds

require(script.Parent:WaitForChild("PlayerModule"))

-- StarterPlayer.StarterPlayerScripts.Controllers.PlayerController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:50
-- Luau version 6, Types version 3
-- Time taken: 0.014359 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "PlayerController";
})
any_CreateController_result1_upvr.Inventory = {}
any_CreateController_result1_upvr.Masteries = nil
any_CreateController_result1_upvr.Coins = 0
any_CreateController_result1_upvr.EquippedIndex = 1
any_CreateController_result1_upvr.UsingAnimation = nil
any_CreateController_result1_upvr.IsUsingTool = false
any_CreateController_result1_upvr.ToolUsed = Instance.new("BindableEvent")
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_5_upvr = {}
local tbl_4_upvr = {}
local var10_upvw
local tbl_3_upvr = {}
local var12_upvw
function any_CreateController_result1_upvr.EquipItem(arg1, arg2) -- Line 34
	--[[ Upvalues[7]:
		[1]: var10_upvw (read and write)
		[2]: tbl_3_upvr (readonly)
		[3]: var12_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: LocalPlayer_upvr (readonly)
		[6]: any_RequireDefinitions_result1_upvr (readonly)
		[7]: tbl_5_upvr (readonly)
	]]
	local var17
	if var10_upvw then
		var10_upvw:Stop()
		var10_upvw = nil
	end
	var17 = tbl_3_upvr
	local pairs_result1, pairs_result2, pairs_result3_3 = pairs(var17)
	for i, _ in pairs_result1, pairs_result2, pairs_result3_3 do
		tbl_3_upvr[i] = false
	end
	if var12_upvw then
		var12_upvw:Destroy()
		var12_upvw = nil
	end
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		pairs_result2 = LocalPlayer_upvr.Character:FindFirstChild("ServerTool")
		if pairs_result2 then
			pairs_result2 = LocalPlayer_upvr.Character.ServerTool:Destroy
			pairs_result2()
		end
		pairs_result2 = arg2
		if pairs_result2 then
			pairs_result2 = any_RequireDefinitions_result1_upvr[arg2.Catagory][arg2.Id]
		end
		if not pairs_result2 then return end
		local any_GetModelFromDef_result1 = CoreUtil_upvr:GetModelFromDef(arg2)
		if any_GetModelFromDef_result1 and LocalPlayer_upvr.Character and LocalPlayer_upvr.Character:FindFirstChild("RightHand") then
			local var22
			if var22 then
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var22 = pairs_result2.Animations.HoldingAnim
					return var22
				end
				if not pairs_result2.Animations or not INLINED() then
					var22 = CoreUtil_upvr.DefultHoldingAnimationId
				end
				var10_upvw = CoreUtil_upvr:LoadAnimation(LocalPlayer_upvr.Character.Humanoid.Animator, var22)
				var10_upvw:Play()
			end
			var12_upvw = CoreUtil_upvr:EquipTool(LocalPlayer_upvr.Character, pairs_result2, any_GetModelFromDef_result1)
		end
		local any_EquipItem_result1 = tbl_5_upvr.InventoryService:EquipItem(arg2.Index)
		tbl_3_upvr[any_EquipItem_result1] = true
		local _, _ = any_EquipItem_result1:andThen():await()
		if tbl_3_upvr[any_EquipItem_result1] and var12_upvw then
			var12_upvw:Destroy()
		elseif LocalPlayer_upvr.Character:FindFirstChild("ServerTool") then
			LocalPlayer_upvr.Character.ServerTool:Destroy()
		end
		tbl_3_upvr[any_EquipItem_result1] = nil
	end
end
local function ZoneChanged_upvr(arg1) -- Line 84, Named "ZoneChanged"
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: tbl_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	if CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
		workspace.Camera.CFrame = CFrame.lookAt(LocalPlayer_upvr.Character.Head.Position + (-LocalPlayer_upvr.Character.HumanoidRootPart.CFrame.LookVector + Vector3.new(0, 0.5, 0)) * (workspace.CurrentCamera.CFrame.Position - LocalPlayer_upvr.Character.Head.Position).Magnitude, LocalPlayer_upvr.Character.Head.Position)
	end
	if arg1 == "ToForestPortal" or arg1 == "ToMinesPortal" then
		-- KONSTANTWARNING: GOTO [93] #57
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [76] 48. Error Block 14 start (CF ANALYSIS FAILED)
	if arg1 == "ForestPortal" then
	elseif arg1 == "MinesPortal" then
	end
	-- KONSTANTERROR: [76] 48. Error Block 14 end (CF ANALYSIS FAILED)
end
local function CharacterAdded_upvr(arg1) -- Line 108, Named "CharacterAdded"
	--[[ Upvalues[3]:
		[1]: tbl_5_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
	]]
	arg1:WaitForChild("Humanoid").Died:Connect(function() -- Line 114
		--[[ Upvalues[1]:
			[1]: tbl_5_upvr (copied, readonly)
		]]
		tbl_5_upvr.PlayerService:RequestRespawn():andThen():await()
	end)
	task.wait()
	any_CreateController_result1_upvr:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_CreateController_result1_upvr.Inventory, any_CreateController_result1_upvr.EquippedIndex))
end
local ContextActionService_upvr = game:GetService("ContextActionService")
local UserInputService_upvr = game:GetService("UserInputService")
local TweenService_upvr = game:GetService("TweenService")
local RunService_upvr = game:GetService("RunService")
local var31_upvw = 1
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 124
	--[[ Upvalues[14]:
		[1]: tbl_5_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_4_upvr (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
		[5]: ContextActionService_upvr (readonly)
		[6]: ZoneChanged_upvr (readonly)
		[7]: UserInputService_upvr (readonly)
		[8]: CoreUtil_upvr (readonly)
		[9]: LocalPlayer_upvr (readonly)
		[10]: TweenService_upvr (readonly)
		[11]: CharacterAdded_upvr (readonly)
		[12]: RunService_upvr (readonly)
		[13]: any_RequireDefinitions_result1_upvr (readonly)
		[14]: var31_upvw (read and write)
	]]
	tbl_5_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_5_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_4_upvr.UIController = Knit_upvr.GetController("UIController")
	tbl_4_upvr.SoundController = Knit_upvr.GetController("SoundController")
	local any_await_result1_2, any_await_result2 = tbl_5_upvr.PlayerService:GetMasteries():andThen():await()
	_ = any_await_result1_2 -- Setting global
	any_CreateController_result1_upvr.Masteries = any_await_result2
	local any_await_result1_3, any_await_result2_2 = tbl_5_upvr.PlayerService:GetCoins():andThen():await()
	_ = any_await_result1_3 -- Setting global
	any_CreateController_result1_upvr.Coins = any_await_result2_2
	local any_await_result1, any_await_result2_6 = tbl_5_upvr.PlayerService:GetSettings():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Settings = any_await_result2_6
	tbl_4_upvr.SoundController:AdjustVolume("SFX", any_CreateController_result1_upvr.Settings.Audio.SFX * 4)
	tbl_4_upvr.SoundController:AdjustVolume("SFX", any_CreateController_result1_upvr.Settings.Audio.Music * 4)
	tbl_4_upvr.UIController:UpdateCoinCounts()
	tbl_5_upvr.PlayerService.CoinsUpdated:Connect(function(arg1_9) -- Line 140
		--[[ Upvalues[2]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
			[2]: tbl_4_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.Coins = arg1_9
		tbl_4_upvr.UIController:UpdateCoinCounts()
	end)
	ContextActionService_upvr:BindAction("Dash", function(arg1_10, arg2) -- Line 145
		--[[ Upvalues[1]:
			[1]: tbl_5_upvr (copied, readonly)
		]]
		if arg2 == Enum.UserInputState.Begin then
			tbl_5_upvr.PlayerService:Dash()
		end
	end, true, Enum.KeyCode.Q)
	ContextActionService_upvr:SetImage("Dash", "rbxassetid://17738191561")
	local any_GetButton_result1_4 = ContextActionService_upvr:GetButton("Dash")
	if any_GetButton_result1_4 then
		any_GetButton_result1_4.ZIndex = 3
		any_GetButton_result1_4.AnchorPoint = Vector2.new(0, 1)
		any_GetButton_result1_4.Position = UDim2.new(0.2, 0, 0, 0)
	end
	tbl_5_upvr.PlayerService.ZoneChanged:Connect(ZoneChanged_upvr)
	UserInputService_upvr.InputBegan:Connect(function(arg1_11, arg2) -- Line 163
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 and arg1_11.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_12, arg2) -- Line 169
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool and arg1_12.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	UserInputService_upvr.TouchStarted:Connect(function(arg1_13, arg2) -- Line 175
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.TouchEnded:Connect(function(arg1_14, arg2) -- Line 181
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	ContextActionService_upvr:BindAction("Sprint", function(arg1_15, arg2, arg3) -- Line 187
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
		else
			local var84
			if arg2 ~= Enum.UserInputState.Begin and arg2 ~= Enum.UserInputState.End then return end
			local Character_3 = LocalPlayer_upvr.Character
			if arg2 ~= Enum.UserInputState.Begin then
				Character_3 = false
			else
				Character_3 = true
			end
			var84 = 70
			if Character_3 then
				-- KONSTANTWARNING: GOTO [34] #25
			end
			if Character_3 then
				var84 = 20
			else
				var84 = 16
			end
			Character_3.Humanoid.WalkSpeed = var84
			var84 = TweenService_upvr
			local _ = {
				FieldOfView = var84 + 0;
			}
			var84 = var84:Create(workspace.Camera, TweenInfo.new(0.25), _):Play
			var84()
		end
	end, true, Enum.KeyCode.LeftShift, Enum.KeyCode.ButtonR2)
	ContextActionService_upvr:SetImage("Sprint", "rbxassetid://18398835421")
	local any_GetButton_result1_3 = ContextActionService_upvr:GetButton("Sprint")
	if any_GetButton_result1_3 then
		any_GetButton_result1_3.ZIndex = 3
		any_GetButton_result1_3.AnchorPoint = Vector2.new(0, 0)
		any_GetButton_result1_3.Position = UDim2.new(0.6, 0, 0.1, 0)
	end
	tbl_5_upvr.PlayerService:RequestRespawn():andThen():await()
	if LocalPlayer_upvr.Character then
		CharacterAdded_upvr(LocalPlayer_upvr.Character)
	end
	LocalPlayer_upvr.CharacterAdded:Connect(CharacterAdded_upvr)
	while RunService_upvr.RenderStepped:Wait() do
		if any_CreateController_result1_upvr.IsUsingTool then
			local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_CreateController_result1_upvr.Inventory, any_CreateController_result1_upvr.EquippedIndex)
			local var89
			if any_GetSlotFromIndex_result1_2 then
				var89 = any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1_2.Id]
				if not var89 then
					var89 = any_RequireDefinitions_result1_upvr.Food[any_GetSlotFromIndex_result1_2.Id]
				end
				if var89 then
					if var89.LevelReq and not CoreUtil_upvr:IsMasterySucceeded(arg1.Masteries, var89.LevelReq) then
						tbl_4_upvr.UIController:WarningMessage("You are too low level to use this tool")
						wait(1)
					else
						local var90
						local Character_2 = var90.Character
						local function INLINED_5() -- Internal function, doesn't exist in bytecode
							var90 = Character_2:FindFirstChild("Humanoid")
							return var90
						end
						local function INLINED_6() -- Internal function, doesn't exist in bytecode
							local Animator_2 = var90:FindFirstChild("Animator")
							return Animator_2
						end
						if Character_2 and INLINED_5() and (var89.Catagory ~= "Food" or var90.Health ~= var90.MaxHealth) or INLINED_6() then
							local ServerTool_2 = Character_2:FindFirstChild("ServerTool")
							if ServerTool_2 and ServerTool_2:FindFirstChild("Handle") then
								local tbl_2 = {}
								for i_2, v_2 in pairs(ServerTool_2.Handle:GetChildren()) do
									if v_2:IsA("Sound") then
										table.insert(tbl_2, v_2)
									end
								end
								if #tbl_2 ~= 0 then
									i_2 = #tbl_2
									tbl_2[math.random(1, i_2)]:Play()
								end
							end
							local var98
							if any_CreateController_result1_upvr.UsingAnimation then
								var98 = any_CreateController_result1_upvr
								var98.UsingAnimation:Stop()
								var98 = nil
								any_CreateController_result1_upvr.UsingAnimation = var98
							end
							var98 = var89.Animations
							local ActionCombo_2 = var98.ActionCombo
							if not ActionCombo_2 then
								ActionCombo_2 = {}
								var98 = CoreUtil_upvr.DefultSwingAnimationId
								ActionCombo_2[1] = var98
							end
							var98 = ActionCombo_2[var31_upvw]
							if not var98 then
								var98 = 1
								var31_upvw = var98
							end
							var98 = any_CreateController_result1_upvr
							var98.UsingAnimation = CoreUtil_upvr:LoadAnimation(Animator_2, ActionCombo_2[var31_upvw])
							var98 = any_CreateController_result1_upvr.UsingAnimation:Play
							var98()
							var98 = any_CreateController_result1_upvr.UsingAnimation:AdjustSpeed
							var98(var89.AnimSpeed)
							var98 = var31_upvw
							var98 += 1
							var31_upvw = var98
							local function INLINED_7() -- Internal function, doesn't exist in bytecode
								var98 = LocalPlayer_upvr:GetMouse().Button1Up
								return var98
							end
							if var89.Catagory ~= "Food" or not INLINED_7() then
								var98 = nil
							end
							CoreUtil_upvr:CustomYeild(1, any_CreateController_result1_upvr.UsingAnimation.Stopped, any_CreateController_result1_upvr.UsingAnimation.Ended, var98)
							any_CreateController_result1_upvr.UsingAnimation:Stop()
							task.wait()
							if var89.Catagory == "Food" and any_CreateController_result1_upvr.IsUsingTool then
								tbl_5_upvr.PlayerService:EatFood():andThen():await()
								task.wait()
							else
								any_CreateController_result1_upvr.ToolUsed:Fire()
								if var89.Use then
									var89.Use(game.Players.LocalPlayer)
									tbl_5_upvr.PlayerService:ToolUsed(var89)
								end
							end
						end
					end
				end
			end
		end
	end
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:51
-- Luau version 6, Types version 3
-- Time taken: 0.005667 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "BlockController";
})
any_CreateController_result1_upvr.BlockPartSelected = nil
local tbl_3 = {}
any_CreateController_result1_upvr.Blocks = tbl_3
if game.PlaceId == CoreUtil_upvr.PlaceIds.Island then
	tbl_3 = false
else
	tbl_3 = true
end
any_CreateController_result1_upvr.IsMainHub = tbl_3
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_2_upvr = {}
local tbl_upvr = {}
function SoundEffects(arg1, arg2) -- Line 30
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local Part_upvr = Instance.new("Part")
	Part_upvr.Anchored = true
	Part_upvr.CanCollide = false
	Part_upvr.Transparency = 1
	Part_upvr.Position = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1))
	Part_upvr.Size = Vector3.new(1, 1, 1)
	Part_upvr.Parent = workspace
	local Sound_upvr = Instance.new("Sound")
	Sound_upvr.SoundId = arg2
	Sound_upvr:AddTag("SFX")
	Sound_upvr.Volume = 2
	Sound_upvr.Parent = Part_upvr
	Sound_upvr:Play()
	coroutine.wrap(function() -- Line 47
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: Sound_upvr (readonly)
			[3]: Part_upvr (readonly)
		]]
		CoreUtil_upvr:CustomYeild(Sound_upvr.TimeLength, Sound_upvr.Ended)
		Part_upvr:Destroy()
	end)()
end
function any_CreateController_result1_upvr.UpdateBlockSurroundings(arg1, arg2, arg3) -- Line 55
	--[[ Upvalues[4]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	local var34
	if any_CreateController_result1_upvr.IsMainHub then return end
	local any_GetAdjacentPositions_result1 = CoreUtil_upvr:GetAdjacentPositions(arg2)
	var34 = arg2
	table.insert(any_GetAdjacentPositions_result1, var34)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(any_GetAdjacentPositions_result1)
	for _, v in pairs_result1, pairs_result2, pairs_result3 do
		local any_GetValueAtPosition_result1_2 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, v)
		if any_GetValueAtPosition_result1_2 ~= 0 then
			local tbl = {}
			for i_2, v_2 in pairs(CoreUtil_upvr:GetAdjacentPositions(v)) do
				local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, v_2)
				local var45
				if any_GetValueAtPosition_result1 then
					var45 = any_GetValueAtPosition_result1
					if var45 then
						var45 = any_RequireDefinitions_result1_upvr.Block[any_GetValueAtPosition_result1.Id]
					end
					if any_GetValueAtPosition_result1 and var45 and not var45.SeeThrough then
						table.insert(tbl, v_2)
					end
				end
			end
			local var46
			if #tbl == 6 and var46 then
				var46.Parent = ReplicatedStorage_upvr
				table.insert({}, var46)
			elseif #tbl ~= 6 and var46 then
				i_2 = tbl
				CoreUtil_upvr:UpdateBlockTextures(var46, i_2)
				table.insert({}, {
					Part = var46;
					Positions = tbl;
				})
			elseif #tbl ~= 6 and not var46 then
				i_2 = any_GetValueAtPosition_result1_2.Id
				v_2 = CoreUtil_upvr:ToWorldPos(any_GetValueAtPosition_result1_2.Position)
				var45 = workspace.ClientBlocks
				i_2 = CoreUtil_upvr:CreateBlockModel(i_2, v_2, any_GetValueAtPosition_result1_2.Rotation, var45)
				table.insert({}, i_2)
			end
		end
	end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		pairs_result3 = arg3:await()
		return pairs_result3
	end
	if arg3:getStatus() ~= "Started" or not INLINED() then
		if arg3:getStatus() ~= "Resolved" then
			pairs_result3 = false
		else
			pairs_result3 = true
		end
	end
	local var48 = pairs_result3
	if var48 then
		pairs_result3 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		pairs_result3 = pairs_result3({})
		local var38_result1, var38_result2, var38_result3 = pairs_result3({})
		for _, v_3 in var38_result1, var38_result2, var38_result3 do
			v_3:Destroy()
		end
		var38_result1 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var38_result1 = var38_result1({})
		local var38_result1_result1, var38_result1_result2, var38_result1_result3 = var38_result1({})
		for _, v_4 in var38_result1_result1, var38_result1_result2, var38_result1_result3 do
			v_4:Destroy()
		end
		var38_result1_result1 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var38_result1_result1 = var38_result1_result1({})
		for _, v_5 in var38_result1_result1({}) do
			CoreUtil_upvr:UpdateBlockTextures(v_5.Part, v_5.Positions)
		end
	end
	return var48
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_CreateController_result1_upvr.DamageBlock(arg1, arg2, arg3, arg4) -- Line 126
	--[[ Upvalues[5]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: tbl_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local BlockObj = arg2.BlockObj
	local var61
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [109] 75. Error Block 23 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [109.6]
	if nil then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if nil.Parent then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			nil.Parent = workspace
		end
	end
	var61 = any_CreateController_result1_upvr.Blocks[BlockObj.RegenObjPath.World][BlockObj.RegenObjPath.Level]
	var61[BlockObj.RegenObjPath.Index].BlockObj = BlockObj
	do
		return
	end
	-- KONSTANTERROR: [109] 75. Error Block 23 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [138] 93. Error Block 24 start (CF ANALYSIS FAILED)
	var61 = any_RequireDefinitions_result1_upvr.Block[BlockObj.Id].SoundData.Mining
	SoundEffects(BlockObj.Position, var61[math.random(1, #any_RequireDefinitions_result1_upvr.Block[BlockObj.Id].SoundData.Mining)])
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var61 = BlockObj.RegenObjPath
		return var61
	end
	if not any_CreateController_result1_upvr.IsMainHub or not INLINED_2() then
		var61 = BlockObj.Position
	end
	tbl_2_upvr.BlockService:DamageBlock(arg3, var61)
	-- KONSTANTERROR: [138] 93. Error Block 24 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.PlaceBlock(arg1, arg2, arg3, arg4) -- Line 169
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: tbl_2_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
	]]
	local any_ToDataPos_result1 = CoreUtil_upvr:ToDataPos(arg3)
	if not CoreUtil_upvr:BlockValidation(LocalPlayer_upvr, arg2, any_ToDataPos_result1, arg4) then
	else
		SoundEffects(arg3, any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing[math.random(1, #any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing)])
		any_CreateController_result1_upvr:UpdateBlockSurroundings(any_ToDataPos_result1, tbl_2_upvr.BlockService:PlaceBlock(arg2, any_ToDataPos_result1, arg4))
		CoreUtil_upvr:CreateBlockModel(arg2, arg3, arg4, workspace.ClientBlocks):Destroy()
	end
end
function ServerMainHubUpdate(arg1) -- Line 185
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks = arg1
end
function UpdateBlockHealth(arg1, arg2) -- Line 190
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	tbl_upvr.MiningHandler:UpdateBlockHealth(arg1, arg2)
end
function DestroyBlocks(arg1) -- Line 194
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks[arg1.World][arg1.Level][arg1.Index].BlockObj = nil
end
function PlaceBlocks(arg1) -- Line 198
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks[arg1.BlockObj.RegenObjPath.World][arg1.BlockObj.RegenObjPath.Level][arg1.BlockObj.RegenObjPath.Index].BlockObj = arg1.BlockObj
end
local tbl_upvr_2 = {}
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 202
	--[[ Upvalues[5]:
		[1]: tbl_2_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: tbl_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_2_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_2_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_2_upvr.BlockService = Knit_upvr.GetService("BlockService")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr.MiningHandler = require(script.MiningHandler)
	tbl_2_upvr.BlockService.UpdateBlockHealth:Connect(UpdateBlockHealth)
	tbl_2_upvr.BlockService.UpdateClientMainHub:Connect(ServerMainHubUpdate)
	tbl_2_upvr.BlockService.DestroyClientBlocks:Connect(DestroyBlocks)
	tbl_2_upvr.BlockService.PlaceClientBlocks:Connect(PlaceBlocks)
	local any_await_result1, any_await_result2 = tbl_2_upvr.BlockService:GetBlocks():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Blocks = any_await_result2
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.MiningHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:52
-- Luau version 6, Types version 3
-- Time taken: 0.005064 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr = Knit.GetController("BlockController")
local module = {}
local LocalPlayer_upvr = game.Players.LocalPlayer
local Mining_upvr = workspace.HighlightContrainer.Mining
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local var10_upvw
local function _() -- Line 29, Named "RemoveSelectedMinePart"
	--[[ Upvalues[2]:
		[1]: var10_upvw (read and write)
		[2]: Mining_upvr (readonly)
	]]
	if var10_upvw then
		Mining_upvr.Adornee = nil
		var10_upvw:Disconnect()
		var10_upvw = nil
	end
end
local TweenService_upvr = game:GetService("TweenService")
function MiningEffects(arg1) -- Line 37
	--[[ Upvalues[4]:
		[1]: var10_upvw (read and write)
		[2]: TweenService_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: mouse_upvr (readonly)
	]]
	if not arg1 and var10_upvw.Block and var10_upvw.Block:IsA("BasePart") then
		TweenService_upvr:Create(var10_upvw.Block, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, true), {
			Size = var10_upvw.Block.Size * 1.05;
		}):Play()
	end
	for _ = 1, 5 do
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		local var16
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var16 = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(var10_upvw.BlockObj.Position))
			return var16
		end
		if not arg1 or not INLINED() then
			var16 = mouse_upvr.Hit.Position
		end
		Part_upvr.Position = var16
		var16 = 1
		Part_upvr.Transparency = var16
		var16 = "Particle"
		Part_upvr.CollisionGroup = var16
		var16 = game.ReplicatedStorage.Prefabs.UI.BreakParticle:Clone()
		var16.Parent = Part_upvr
		var16.Adornee = Part_upvr
		var16.Frame.BackgroundColor3 = var10_upvw.BlockDef.AccentColor
		local var17 = math.random() / 3 + 0.4
		var16.Size = UDim2.fromScale(var17, var17)
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, math.clamp(math.random(), 0.5, 1), math.random() * 2 - 1) * math.random() * 20
		task.delay(1, function() -- Line 65
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
	mouse_upvr.TargetFilter = workspace.ParticleStorage
end
function module.UpdateBlockHealth(arg1, arg2, arg3) -- Line 77
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: var10_upvw (read and write)
	]]
	any_GetController_result1_upvr.Blocks[arg2.RegenObjPath.World][arg2.RegenObjPath.Level][arg2.RegenObjPath.Index].BlockObj = arg2
	if var10_upvw and var10_upvw.BlockObj and arg2.Index == var10_upvw.BlockObj.Index then
		local var19 = arg3
		if not var19 then
			var19 = arg2.Health
		end
		var10_upvw.BlockObj.Health = var19
		var10_upvw:UpdateHealth()
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
any_GetController_result1_upvr_2.ToolUsed.Event:Connect(function() -- Line 91
	--[[ Upvalues[5]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: var10_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	if not any_GetController_result1_upvr_2.IsUsingTool or not var10_upvw then
	else
		local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
		if not any_GetSlotFromIndex_result1 then return end
		local var23 = any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1.Id]
		if not var23 then return end
		if var10_upvw.BlockDef ~= nil then
			local var24 = var23.DamageTable[var10_upvw.BlockDef.DamageCatagory]
			if not var24 then
				var24 = var23.DamageTable.Misc
			end
			MiningEffects(false)
			any_GetController_result1_upvr:DamageBlock(var10_upvw, var24)
		end
	end
end)
local MinePart_upvr = require(script.MinePart)
game:GetService("RunService").RenderStepped:Connect(function(arg1) -- Line 114
	--[[ Upvalues[8]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: mouse_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: Mining_upvr (readonly)
		[7]: var10_upvw (read and write)
		[8]: MinePart_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var27
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var27 = mouse_upvr.Target
			return workspace.Island:IsAncestorOf(var27)
		end
		if not mouse_upvr.Target or not INLINED_2() then return end
		var27 = LocalPlayer_upvr
		local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
		var27 = false
		if mouse_upvr.Target:FindFirstAncestorWhichIsA("Model") ~= workspace then
			var27 = mouse_upvr.Target:FindFirstAncestorWhichIsA("Model")
		end
		if not var27 or not var27.PrimaryPart then
		end
		if any_GetSlotFromIndex_result1_2 and any_GetSlotFromIndex_result1_2.Catagory == "Tool" and (var27.Character:GetPivot().Position - mouse_upvr.Target.Position).Magnitude <= CoreUtil_upvr.PlacementRange then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			any_GetController_result1_upvr.BlockPartSelected = var27 or mouse_upvr.Target
		else
			any_GetController_result1_upvr.BlockPartSelected = nil
		end
		Mining_upvr.Adornee = any_GetController_result1_upvr.BlockPartSelected
		if not any_GetController_result1_upvr_2.IsUsingTool or not any_GetController_result1_upvr.BlockPartSelected then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			return
		end
		if not var10_upvw or any_GetController_result1_upvr.BlockPartSelected ~= var10_upvw.Block then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, {
				World = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("World");
				Level = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("Level");
				Index = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("Index");
			})
			if not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1 == 0 then
				var10_upvw = nil
				return
			end
			var10_upvw = MinePart_upvr.new(any_GetValueAtPosition_result1)
		end
	end
end)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.MiningHandler.MinePart
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:53
-- Luau version 6, Types version 3
-- Time taken: 0.002143 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module_upvr = {}
module_upvr.__index = module_upvr
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):RequireDefinitions()
local BlockService_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetService("BlockService")
function module_upvr.new(arg1) -- Line 15
	--[[ Upvalues[3]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: BlockService_upvr (readonly)
	]]
	if not arg1 then return end
	local tbl = {}
	local SOME = workspace.Island:WaitForChild(arg1.Index, 5)
	if not SOME then
		SOME = workspace.ClientBlocks:WaitForChild(arg1.Index)
	end
	tbl.Block = SOME
	tbl.BlockHealthUI = nil
	tbl.BlockObj = arg1
	tbl.BlockDef = any_RequireDefinitions_result1_upvr.Block[arg1.Id]
	local setmetatable_result1_upvr = setmetatable(tbl, module_upvr)
	setmetatable_result1_upvr:Initialise()
	setmetatable_result1_upvr:UpdateHealth()
	BlockService_upvr:GetBlockHealth({
		World = arg1.RegenObjPath.World;
		Level = arg1.RegenObjPath.Level;
		Index = arg1.RegenObjPath.Index;
	}):andThen(function(arg1_2) -- Line 33
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if not setmetatable_result1_upvr.BlockObj then
		else
			setmetatable_result1_upvr.BlockObj.Health = arg1_2
			setmetatable_result1_upvr:UpdateHealth()
		end
	end)
	return setmetatable_result1_upvr
end
function module_upvr.Initialise(arg1) -- Line 43
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	arg1.BlockHealthUI = ReplicatedStorage_upvr.Prefabs.UI.BlockHealth:Clone()
	if arg1.Block:IsA("Model") then
		arg1.BlockHealthUI.Parent = arg1.Block.PrimaryPart
		arg1.BlockHealthUI.Adornee = arg1.Block.PrimaryPart
	else
		arg1.BlockHealthUI.Parent = arg1.Block
		arg1.BlockHealthUI.Adornee = arg1.Block
	end
end
function module_upvr.Damage(arg1, arg2) -- Line 58
	if not arg1.BlockObj.Health then
	else
		arg1.BlockObj.Health = math.clamp(arg1.BlockObj.Health - arg2, 0, arg1.BlockDef.Health)
		if arg1.BlockObj.Health == 0 then
			return true
		end
		arg1:UpdateHealth()
	end
end
function module_upvr.UpdateHealth(arg1) -- Line 75
	if arg1.BlockHealthUI and arg1.BlockObj.Health and arg1.BlockDef.Health then
		if arg1.BlockObj.Health == arg1.BlockDef.Health or arg1.BlockObj.Health == 0 then
			arg1.BlockHealthUI.Frame.Visible = false
		else
			arg1.BlockHealthUI.Frame.Visible = true
		end
		arg1.BlockHealthUI.Frame.Bar.Size = UDim2.fromScale(arg1.BlockObj.Health / arg1.BlockDef.Health, 1)
	end
end
function module_upvr.Disconnect(arg1) -- Line 92
	if arg1.BlockHealthUI then
		arg1.BlockHealthUI:Destroy()
	end
	arg1.BlockHealthUI = nil
	arg1.Block = nil
	arg1.BlockObj = nil
	arg1.BlockDef = nil
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.PlacingHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:54
-- Luau version 6, Types version 3
-- Time taken: 0.008182 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local UserInputService_upvr = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local var8_upvw
local var9_upvw
local var10_upvw = Vector3.new(0, 0, 0)
local var11_upvw = false
local LocalPlayer_upvr = game.Players.LocalPlayer
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RaycastParams_new_result1_upvr = RaycastParams.new()
local function UpdatePreviewPart_upvr(arg1) -- Line 35, Named "UpdatePreviewPart"
	--[[ Upvalues[4]:
		[1]: var8_upvw (read and write)
		[2]: RaycastParams_new_result1_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	local var40
	if var40 then
		var40 = var8_upvw.Name
		if var40 == arg1 then return end
	end
	var40 = var8_upvw
	if var40 then
		var40 = var8_upvw:Destroy
		var40()
		var40 = nil
		var8_upvw = var40
	end
	if not arg1 then
	else
		var40 = RaycastParams_new_result1_upvr:AddToFilter
		var40(LocalPlayer_upvr.Character)
		var40 = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg1):Clone()
		var8_upvw = var40
		var40 = var8_upvw
		var40.Parent = workspace.GhostPart
		var40 = 0
		if var8_upvw:FindFirstChild("Stages") then
			for _, v_2 in pairs(var8_upvw.Stages:GetChildren()) do
				if var40 < tonumber(v_2.Name) then
					var40 = tonumber(v_2.Name)
				end
			end
		end
		for _, v_3 in pairs(workspace.GhostPart:GetDescendants()) do
			if v_3:IsA("BasePart") then
				local Name_3 = v_3.Parent.Name
				if Name_3 == "Stages" then
					if tonumber(v_3.Name) ~= var40 then
						Name_3 = 1
					else
						Name_3 = 0.5
					end
					v_3.Transparency = Name_3
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
				v_3.CanCollide = false
				v_3.CanQuery = false
			elseif v_3:IsA("Texture") then
				local Name_2 = v_3.Parent.Parent.Name
				if Name_2 == "Stages" then
					if tonumber(v_3.Parent.Name) ~= var40 then
						Name_2 = 1
					else
						Name_2 = 0.5
					end
					v_3.Transparency = Name_2
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
			end
		end
	end
end
function MouseTargetGridPosition() -- Line 88
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: RaycastParams_new_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
	]]
	local any_GetMouseLocation_result1 = UserInputService_upvr:GetMouseLocation()
	local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1.X, any_GetMouseLocation_result1.Y)
	local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, RaycastParams_new_result1_upvr)
	if not workspace_Raycast_result1 then return end
	local any_RoundPosToGridPos_result1 = CoreUtil_upvr:RoundPosToGridPos(workspace_Raycast_result1.Position + workspace_Raycast_result1.Normal * 3 / 2)
	if (LocalPlayer_upvr.Character:GetPivot().Position - any_RoundPosToGridPos_result1).magnitude < CoreUtil_upvr.PlacementRange then
		return any_RoundPosToGridPos_result1, true
	end
	return any_RoundPosToGridPos_result1, false
end
function PositionPreviewPart() -- Line 105
	--[[ Upvalues[6]:
		[1]: var9_upvw (read and write)
		[2]: var8_upvw (read and write)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: mouse_upvr (readonly)
		[5]: var10_upvw (read and write)
		[6]: CoreUtil_upvr (readonly)
	]]
	local MouseTargetGridPosition_result1, _ = MouseTargetGridPosition()
	var9_upvw = MouseTargetGridPosition_result1
	if not var9_upvw or not var8_upvw then
	else
		if any_RequireDefinitions_result1_upvr.Block[var8_upvw.Name].CanBeRotated then
			if var9_upvw and mouse_upvr.Hit and var9_upvw.Y < mouse_upvr.Hit.Position.Y then
				var10_upvw = Vector3.new(180, var10_upvw.Y, var10_upvw.Z)
			elseif var9_upvw and mouse_upvr.Hit then
				var10_upvw = Vector3.new(0, var10_upvw.Y, var10_upvw.Z)
			end
			CoreUtil_upvr:SetRotation(var8_upvw, var10_upvw)
		end
		CoreUtil_upvr:SetPosition(var8_upvw, var9_upvw)
	end
end
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
function PlaceBlock(arg1) -- Line 126
	--[[ Upvalues[9]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: var9_upvw (read and write)
		[5]: UpdatePreviewPart_upvr (readonly)
		[6]: var10_upvw (read and write)
		[7]: any_GetController_result1_upvr_2 (readonly)
		[8]: var11_upvw (read and write)
		[9]: mouse_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1_3_upvr = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
	if any_GetSlotFromIndex_result1_3_upvr and any_GetSlotFromIndex_result1_3_upvr.Catagory == "Block" and any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_3_upvr.Id].CanBePlaced then
		local var80_upvr
		if var80_upvr then
			var80_upvr = any_GetSlotFromIndex_result1_3_upvr.Stack
			var80_upvr -= 1
			any_GetSlotFromIndex_result1_3_upvr.Stack = var80_upvr
			var80_upvr = UpdatePreviewPart_upvr
			var80_upvr(nil)
			local function INLINED_2() -- Internal function, doesn't exist in bytecode
				var80_upvr = var10_upvw
				return var80_upvr
			end
			if not any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_3_upvr.Id].CanBeRotated or not INLINED_2() then
				var80_upvr = Vector3.new(0, 0, 0)
			end
			coroutine.wrap(function() -- Line 136
				--[[ Upvalues[4]:
					[1]: any_GetController_result1_upvr_2 (copied, readonly)
					[2]: any_GetSlotFromIndex_result1_3_upvr (readonly)
					[3]: var9_upvw (copied, read and write)
					[4]: var80_upvr (readonly)
				]]
				any_GetController_result1_upvr_2:PlaceBlock(any_GetSlotFromIndex_result1_3_upvr.Id, var9_upvw, var80_upvr)
			end)()
			if any_GetSlotFromIndex_result1_3_upvr.Stack == 0 or not arg1 then return end
			var11_upvw = true
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			local tbl = {}
			table.insert(tbl, mouse_upvr.Button1Up:Connect(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_2 (readonly)
				]]
				BindableEvent_upvr_2:Fire()
			end))
			local var86_upvw
			table.insert(tbl, mouse_upvr.Move:Connect(function() -- Line 152
				--[[ Upvalues[7]:
					[1]: var9_upvw (read and write)
					[2]: mouse_upvr (copied, readonly)
					[3]: var86_upvw (read and write)
					[4]: any_GetSlotFromIndex_result1_3_upvr (readonly)
					[5]: BindableEvent_upvr_2 (readonly)
					[6]: any_GetController_result1_upvr_2 (copied, readonly)
					[7]: var80_upvr (readonly)
				]]
				local MouseTargetGridPosition_result1_2_upvr, MouseTargetGridPosition_result2 = MouseTargetGridPosition()
				if MouseTargetGridPosition_result1_2_upvr and MouseTargetGridPosition_result2 and (var9_upvw - MouseTargetGridPosition_result1_2_upvr).magnitude == 3 then
					if not mouse_upvr.Target or mouse_upvr.Target.Position == var9_upvw then return end
					if not var86_upvw then
						var86_upvw = (MouseTargetGridPosition_result1_2_upvr - var9_upvw).unit
					end
					if var86_upvw == (MouseTargetGridPosition_result1_2_upvr - var9_upvw).unit then
						var9_upvw = MouseTargetGridPosition_result1_2_upvr
						local var89 = any_GetSlotFromIndex_result1_3_upvr
						var89.Stack -= 1
						if any_GetSlotFromIndex_result1_3_upvr.Stack == 0 then
							BindableEvent_upvr_2:Fire()
						end
						coroutine.wrap(function() -- Line 163
							--[[ Upvalues[4]:
								[1]: any_GetController_result1_upvr_2 (copied, readonly)
								[2]: any_GetSlotFromIndex_result1_3_upvr (copied, readonly)
								[3]: MouseTargetGridPosition_result1_2_upvr (readonly)
								[4]: var80_upvr (copied, readonly)
							]]
							any_GetController_result1_upvr_2:PlaceBlock(any_GetSlotFromIndex_result1_3_upvr.Id, MouseTargetGridPosition_result1_2_upvr, var80_upvr)
						end)()
					end
				end
			end))
			BindableEvent_upvr_2.Event:Wait()
			BindableEvent_upvr_2:Destroy()
			for _, v in pairs(tbl) do
				v:Disconnect()
			end
			var11_upvw = false
		end
	end
end
UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 183
	if arg1.UserInputType == Enum.UserInputType.MouseButton1 and not arg2 then
		PlaceBlock(true)
	end
end)
UserInputService_upvr.TouchTap:Connect(function(arg1, arg2) -- Line 189
	if arg2 then
	else
		wait()
		PlaceBlock()
	end
end)
ContextActionService:BindAction("Rotate", function(arg1, arg2, arg3) -- Line 23, Named "RotatePreview"
	--[[ Upvalues[1]:
		[1]: var10_upvw (read and write)
	]]
	if arg2 ~= Enum.UserInputState.Begin then
	elseif var10_upvw then
		var10_upvw += Vector3.new(var10_upvw.X, 90, var10_upvw.Z)
		if 360 < var10_upvw.Y then
			var10_upvw = Vector3.new(var10_upvw.X, var10_upvw.Y - 360, var10_upvw.Z)
			return
		end
		if var10_upvw.Y < 0 then
			var10_upvw = Vector3.new(var10_upvw.X, var10_upvw.Y + 360, var10_upvw.Z)
		end
	end
end, true, Enum.KeyCode.R, Enum.KeyCode.ButtonL2)
ContextActionService:SetPosition("Rotate", UDim2.new(-1.8, 0, 0, 0))
ContextActionService:SetImage("Rotate", "rbxassetid://17738191723")
local any_GetButton_result1 = ContextActionService:GetButton("Rotate")
if any_GetButton_result1 then
	any_GetButton_result1.ZIndex = 3
end
game:GetService("RunService").RenderStepped:Connect(function() -- Line 201
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: var11_upvw (read and write)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: UpdatePreviewPart_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
	if not var11_upvw and any_GetSlotFromIndex_result1 and any_GetSlotFromIndex_result1.Catagory == "Block" and any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1.Id].CanBePlaced then
		UpdatePreviewPart_upvr(any_GetSlotFromIndex_result1.Id)
		PositionPreviewPart()
	else
		UpdatePreviewPart_upvr(nil)
	end
end)
return {}

-- StarterPlayer.StarterPlayerScripts.Controllers.CombatController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:56
-- Luau version 6, Types version 3
-- Time taken: 0.002418 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "CombatController";
})
any_CreateController_result1_upvr.Camps = {}
local tbl_upvr = {}
local tbl_upvr_2 = {}
local TweenService_upvr = game:GetService("TweenService")
function AttackEffects(arg1, arg2) -- Line 22
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	if not arg1 or not arg1.Parent or not arg1:FindFirstChild("Humanoid") or arg1.Humanoid.Health == 0 then
	else
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		Part_upvr.Position = arg1.PrimaryPart.Position
		Part_upvr.Transparency = 1
		Part_upvr.CanCollide = false
		local clone = game.ReplicatedStorage.Prefabs.UI.CritUI:Clone()
		clone.Parent = Part_upvr
		clone.Adornee = Part_upvr
		clone.TextLabel.Text = arg2
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, 5, math.random() * 2 - 1) * 8
		TweenService_upvr:Create(clone.TextLabel, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		}):Play()
		task.delay(1, function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr and Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local LocalPlayer_upvr = game.Players.LocalPlayer
function Attack() -- Line 55
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: tbl_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 50 start (CF ANALYSIS FAILED)
	local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(tbl_upvr_2.PlayerController.Inventory, tbl_upvr_2.PlayerController.EquippedIndex)
	if not any_GetSlotFromIndex_result1 then return end
	if not any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1.Id] then return end
	local Character = LocalPlayer_upvr.Character
	if not Character then return end
	if not Character:FindFirstChild("Humanoid") then return end
	if not Character:FindFirstChild("HumanoidRootPart") then return end
	local OverlapParams_new_result1 = OverlapParams.new()
	OverlapParams_new_result1.FilterType = Enum.RaycastFilterType.Exclude
	OverlapParams_new_result1.FilterDescendantsInstances = {LocalPlayer_upvr.Character}
	local pairs_result1, pairs_result2, pairs_result3 = pairs(workspace:GetPartBoundsInRadius(LocalPlayer_upvr.Character.PrimaryPart.Position, CoreUtil_upvr.AttackRadius, OverlapParams_new_result1))
	-- KONSTANTERROR: [0] 1. Error Block 50 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [116] 83. Error Block 19 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [116] 83. Error Block 19 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [81] 57. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [116.14]
	-- KONSTANTERROR: [81] 57. Error Block 12 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 140
	--[[ Upvalues[4]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.MobService = Knit_upvr.GetService("MobService")
	tbl_upvr_2.BlockController = Knit_upvr.GetController("BlockController")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr_2.PlayerController.ToolUsed.Event:Connect(Attack)
	tbl_upvr.MobService.UpdateClientCamps:Connect(function(arg1_2) -- Line 152
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.Camps = arg1_2
	end)
	local any_await_result1, any_await_result2 = tbl_upvr.MobService:GetCamps():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Camps = any_await_result2
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.NPCController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:57
-- Luau version 6, Types version 3
-- Time taken: 0.001579 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1 = Knit_upvr.CreateController({
	Name = "NPCController";
})
local tbl_upvr_3 = {}
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local Streamable_upvr = require(ReplicatedStorage.Packages.Streamable).Streamable
local tbl_upvr_4 = {}
function Initialise() -- Line 24
	--[[ Upvalues[4]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: Streamable_upvr (readonly)
		[3]: tbl_upvr_4 (readonly)
		[4]: tbl_upvr_3 (readonly)
	]]
	for _, v_upvr in pairs(any_RequireDefinitions_result1_upvr.Npc) do
		local function _(arg1, arg2) -- Line 28
			--[[ Upvalues[3]:
				[1]: tbl_upvr_4 (copied, readonly)
				[2]: v_upvr (readonly)
				[3]: tbl_upvr_3 (copied, readonly)
			]]
			tbl_upvr_4[v_upvr.Id] = tbl_upvr_3.NPCModule.new(arg1.Parent, v_upvr.Gender)
			arg1:WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 33
				--[[ Upvalues[2]:
					[1]: tbl_upvr_4 (copied, readonly)
					[2]: v_upvr (copied, readonly)
				]]
				tbl_upvr_4[v_upvr.Id]:Activate()
			end)
			arg2:Add(function() -- Line 37
				--[[ Upvalues[2]:
					[1]: tbl_upvr_4 (copied, readonly)
					[2]: v_upvr (copied, readonly)
				]]
				tbl_upvr_4[v_upvr.Id]:Destroy()
				tbl_upvr_4[v_upvr.Id] = nil
			end)
		end
	end
end
local tbl_upvr_2 = {}
local tbl_upvr = {}
function any_CreateController_result1.KnitStart(arg1) -- Line 48
	--[[ Upvalues[5]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: tbl_upvr_3 (readonly)
	]]
	tbl_upvr_2.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_2.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.UIController = Knit_upvr.GetController("UIController")
	if CoreUtil_upvr.PlaceIds.Citadel ~= game.PlaceId then
	else
		tbl_upvr_3.NPCModule = require(script.NPCObject)
		Initialise()
	end
end
return any_CreateController_result1

-- StarterPlayer.StarterPlayerScripts.Controllers.NPCController.NPCObject
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:58
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1, arg2) -- Line 12
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {
		Id = arg1.Name;
	}
	module.Model = arg1
	module.Gender = arg2
	return setmetatable(module, module_2_upvr)
end
local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
function module_2_upvr.Activate(arg1) -- Line 26
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Shop", true, arg1)
end
function module_2_upvr.Destroy(arg1) -- Line 31
end
return module_2_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:59
-- Luau version 6, Types version 3
-- Time taken: 0.012078 seconds

local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "UIController";
})
any_CreateController_result1_upvr.ShiftDown = false
any_CreateController_result1_upvr.Processing = true
any_CreateController_result1_upvr.ButtonNoises = {}
local var7_upvw
local LocalPlayer_upvr = Players_upvr.LocalPlayer
local tbl_5_upvr = {}
any_CreateController_result1_upvr.Modules = {}
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):RequireDefinitions()
function any_CreateController_result1_upvr.UpdateItemDisplay(arg1, arg2, arg3) -- Line 29
	--[[ Upvalues[2]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	arg2.ImageLabel.Image = ""
	local pairs_result1_2, _, pairs_result3 = pairs(arg2.ViewportFrame:GetChildren())
	local var22
	for _, v in pairs_result1_2, var22, pairs_result3 do
		if v:IsA("BasePart") or v:IsA("Model") or v:IsA("Camera") then
			v:Destroy()
		end
	end
	if arg2:FindFirstChild("Empty") then
		if not arg3 then
			var22 = true
		else
			var22 = false
		end
		arg2.Empty.Visible = var22
	end
	if not arg3 then
		if arg2:FindFirstChild("Stack") then
			var22 = false
			arg2.Stack.Visible = var22
		end
	else
		var22 = any_RequireDefinitions_result1_upvr[arg3.Catagory]
		local var23 = var22[arg3.Id]
		var22 = type(var23.DisplayImage)
		if var22 == "string" then
			var22 = arg2.ImageLabel
			var22.Image = var23.DisplayImage
		else
			var22 = arg3.Catagory
			local function INLINED() -- Internal function, doesn't exist in bytecode
				var22 = ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg3.Catagory)
				return var22
			end
			if not var22 or not INLINED() then return end
			var22 = ReplicatedStorage_upvr.Prefabs[arg3.Catagory]:FindFirstChild(arg3.Id)
			local var24 = var22
			if not var24 then return end
			arg2.ViewportFrame.CurrentCamera = Instance.new("Camera", arg2.ViewportFrame)
			local clone_4 = var24:Clone()
			clone_4.Parent = arg2.ViewportFrame
			if clone_4:IsA("Model") then
				clone_4:SetPrimaryPartCFrame(CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295))
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_4.PrimaryPart.Position + Vector3.new(4, 4, 0), clone_4.PrimaryPart.Position)
			else
				clone_4.CFrame = CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295)
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_4.Position + Vector3.new(4, 4, 0), clone_4.Position)
			end
		end
		var24 = arg2:FindFirstChild("Stack")
		if var24 then
			var24 = arg3.Stack
			if 1 < var24 then
				var24 = arg2.Stack
				var24.Text = tostring(arg3.Stack)
				var24 = arg2.Stack
				var24.Visible = true
				return
			end
			var24 = arg2.Stack
			var24.Visible = false
		end
	end
end
function any_CreateController_result1_upvr.WarningMessage(arg1, arg2) -- Line 88
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: var7_upvw (read and write)
		[3]: TweenService_upvr (readonly)
	]]
	local clone_2_upvr = ReplicatedStorage_upvr.Prefabs.UI.WarningMessage:Clone()
	clone_2_upvr.Parent = var7_upvw.HUD.WarningsBox
	clone_2_upvr.Text = arg2
	TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(0.2), {
		Size = UDim2.fromScale(1, 0.33);
	}):Play()
	task.delay(6, function() -- Line 96
		--[[ Upvalues[2]:
			[1]: TweenService_upvr (copied, readonly)
			[2]: clone_2_upvr (readonly)
		]]
		local any_Create_result1 = TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		})
		any_Create_result1:Play()
		any_Create_result1.Completed:Wait()
		clone_2_upvr:Destroy()
	end)
end
function any_CreateController_result1_upvr.Notification(arg1, arg2, arg3) -- Line 106
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: var7_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	if arg2 == "Level" then
		local clone = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.LevelTemp:Clone()
		clone.Main.Details.Title.Text = arg3.Catagory
		clone.Main.Details.SubCat.Text = arg3.SubCatagory.." Lvl "..arg3.LevelEarned
		any_CreateController_result1_upvr:UpdateItemDisplay(clone.Main.Details.Item, arg3.Definition)
	elseif arg2 == "PlayerLevel" then
		local clone_5 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.PlayerLevelTemp:Clone()
		clone_5.Main.Details.Title.Text = "New Level Earned"
		clone_5.Main.Details.SubCat.Text = "Player".." Lvl "..arg3.LevelEarned
	elseif arg2 == "Gift" then
		workspace.Sound.UI.RecievedGift:Play()
		local clone_3 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.GiftReceived:Clone()
		clone_3.Main.GiftName.Title.Text = arg3[2]:upper()
		clone_3.Main.Data.SubTitle.Text = "from "..arg3[1]:upper()
	end
	clone_3.Parent = var7_upvw.HUD.Notifications
	TweenService_upvr:Create(clone_3, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(1, 0.2);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_3.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(3.25)
	TweenService_upvr:Create(clone_3.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(1, 0);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_3, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(0.25)
	clone_3:Destroy()
end
function any_CreateController_result1_upvr.TeleportUI(arg1, arg2) -- Line 147
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: TweenService_upvr (readonly)
	]]
	if arg2 then
		local _ = 0
	else
	end
	if arg2 then
		var7_upvw.TeleportLoad.Visible = true
	end
	local tbl_9 = {"rbxassetid://136221297607101", "rbxassetid://95153176556549", "rbxassetid://131416737565810", "rbxassetid://91565459811987", "rbxassetid://115354466163250", "rbxassetid://107682877629212", "rbxassetid://113329646531178", "rbxassetid://76143816516289", "rbxassetid://85863130967708"}
	local tbl_4 = {"\"The sky calls to us.\" - Carl Sagan", "Underlings can help auto farm, mine and cut wood on your island", "Level up your combat, forestry, farming and mining masteries to unlock new items", "Use chests to store and organize items for easy access", "You can change your portal and sky from Island settings", "Certain achievements can unlock new items or perks like extra HP", "Eating certain crops can restore your health", "Farming crops is a great way to earn coins", "Farming crops is a great way to earn coins", "Level up your mining mastery to unlock better tools", "Underlings can be unlocked from leveling your masteries", "You can join your friend's island using the command /join <username>", "You can craft colored clay using color dyes and clay", "On PC you can press the E key to open your inventory", "\"Not all those who wander are lost.\" - J.R.R. Tolkien", "“The sky is not the limit, it’s just the beginning.” – Chuck Yeager", "“The sky is home to the dreamers of the earth.” – Leonardo da Vinci ", "You can rotate items using the R key on PC", "You can use any tool or weapon to attack mobs or break blocks but they may do less damage than the intended tool", "Feeling lonely? Your friends can join you using /join <youruser>", "If unwanted players are joining your Island you can disable joins in your Island Settings", "Killing mobs can cause them to drop rare items used for crafting", "Gather wood from the Forest or place an underling to auto cut wood", "Upgrading your sword can help you kill mobs faster", "\"Those who visit the GrimThorn are never seen again...\" - Villager", "High Realms is currently in Beta, you may experience issues", "When crops are ready to be harvested you'll see a sparkle effect"}
	var7_upvw.TeleportLoad.Quote.TextLabel.Text = tbl_4[math.random(1, #tbl_4)]
	var7_upvw.TeleportLoad.ImageLabel.Image = tbl_9[math.random(1, #tbl_9)]
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Quote, TweenInfo.new(1), {
		BackgroundTransparency = 1;
	}):Play()
	local tbl_2 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_2.TextTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Quote.TextLabel, TweenInfo.new(1), tbl_2):Play()
	local tbl_6 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_6.TextTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Title.TextLabel, TweenInfo.new(1), tbl_6):Play()
	local tbl = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl.ImageTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.ImageLabel, TweenInfo.new(1), tbl):Play()
	local tbl_8 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_8.ImageTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Logo, TweenInfo.new(1), tbl_8):Play()
	if not arg2 then
		task.delay(1, function() -- Line 209
			--[[ Upvalues[1]:
				[1]: var7_upvw (copied, read and write)
			]]
			var7_upvw.TeleportLoad.Visible = false
		end)
	else
		coroutine.wrap(function() -- Line 211
			--[[ Upvalues[2]:
				[1]: var7_upvw (copied, read and write)
				[2]: TweenService_upvr (copied, readonly)
			]]
			local var48 = 1
			while var7_upvw.TeleportLoad.Visible do
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['1'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				wait(0.33)
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['2'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				wait(0.33)
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['3'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				local wait = wait
				wait(0.33)
				if var48 == 1 then
					wait = 0
				else
					wait = 1
				end
			end
		end)()
	end
end
function any_CreateController_result1_upvr.UpdateCoinCounts(arg1) -- Line 231
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: tbl_5_upvr (readonly)
	]]
	var7_upvw.HUD.CoinCounter.Main.Display.Text = tbl_5_upvr.PlayerController.Coins
	var7_upvw.Shop.Titles.CoinCount.TextLabel.Text = tbl_5_upvr.PlayerController.Coins
end
function any_CreateController_result1_upvr.ToggleUI(arg1, arg2, arg3, ...) -- Line 237
	--[[ Upvalues[2]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: var7_upvw (read and write)
	]]
	if any_CreateController_result1_upvr.Processing then
	else
		var7_upvw.HUD.Visible = false
		any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(false)
		any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(false, ...)
		any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(false, ...)
		any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(false)
		any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(false, ...)
		any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(false, ...)
		if arg3 and arg2 == "Shop" then
			any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(true, ...)
			return
		end
		if arg3 and arg2 == "Inventory" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true)
			return
		end
		if arg3 and arg2 == "Crafting" then
			any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(true, ...)
			return
		end
		if arg3 and arg2 == "Stats" then
			any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(true)
			return
		end
		if arg3 and arg2 == "Underling" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Underling", ...)
			return
		end
		if arg3 and arg2 == "Chest" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Chest", ...)
			return
		end
		if arg3 and arg2 == "Store" then
			any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(true, ...)
			return
		end
		if arg3 and arg2 == "Settings" then
			any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(true, ...)
			return
		end
		var7_upvw.HUD.Visible = true
	end
end
local var53_upvw = 0
function UpdateHealthUI(arg1) -- Line 274
	--[[ Upvalues[4]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: var7_upvw (read and write)
		[3]: var53_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	local Humanoid_2 = LocalPlayer_upvr.Character.Humanoid
	if arg1 / Humanoid_2.MaxHealth == 1 then
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(0, 0.839216, 0.0980392), Color3.new(0.0705882, 0.517647, 0))
	elseif 0.35 <= arg1 / Humanoid_2.MaxHealth then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(0.890196, 0.858824, 0), Color3.new(0.635294, 0.552941, 0.141176))
	elseif arg1 / Humanoid_2.MaxHealth < 0.35 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(158, 0, 0), Color3.new(0.886275, 0.45098, 0.0156863))
	end
	var7_upvw.HUD.HPBar.Progress.Size = UDim2.fromScale(arg1 / Humanoid_2.MaxHealth, 0.5)
	var7_upvw.HUD.HPBar.HP.Text = tostring(math.ceil(arg1)..'/'..Humanoid_2.MaxHealth)
	if 1 < var53_upvw - arg1 then
		TweenService_upvr:Create(var7_upvw.RadialBg, TweenInfo.new(0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.In, 0, true), {
			ImageTransparency = 0.33;
		}):Play()
	end
	var53_upvw = arg1
end
local function CharAdded_upvr(arg1) -- Line 299, Named "CharAdded"
	local Humanoid = arg1:WaitForChild("Humanoid")
	Humanoid.HealthChanged:Connect(UpdateHealthUI)
	UpdateHealthUI(Humanoid.Health)
end
local function ChatMessage_upvr(arg1, arg2) -- Line 305, Named "ChatMessage"
	--[[ Upvalues[1]:
		[1]: tbl_5_upvr (readonly)
	]]
	if not tbl_5_upvr.PlayerController.Settings.General.ChatNotifications then
	else
		game:GetService("TextChatService"):WaitForChild("TextChannels").RBXSystem:DisplaySystemMessage(string.format("<font color=\"rgb(%d, %d, %d)\">", math.floor(arg1.R * 255), math.floor(arg1.G * 255), math.floor(arg1.B * 255)).."[SERVER] : "..arg2.."</font>")
	end
end
local function InitialiseBasicUISFX_upvr() -- Line 322, Named "InitialiseBasicUISFX"
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	for _, v_2_upvr in pairs(var7_upvw:GetDescendants()) do
		if v_2_upvr:IsA("TextButton") or v_2_upvr:IsA("ImageButton") then
			if any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] then
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 329
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr]:Play()
				end)
			else
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 335
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					local var64
					local function INLINED_2() -- Internal function, doesn't exist in bytecode
						var64 = workspace.Sound.UI.ButtonClick1
						return var64
					end
					if math.random(1, 2) ~= 1 or not INLINED_2() then
						var64 = workspace.Sound.UI.ButtonClick2
					end
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] = var64
					var64:Play()
				end)
			end
		end
	end
end
function any_CreateController_result1_upvr.KnitInit(arg1) -- Line 345
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: LocalPlayer_upvr (readonly)
	]]
	var7_upvw = game.StarterGui:WaitForChild("MainGui")
	var7_upvw.Parent = LocalPlayer_upvr:WaitForChild("PlayerGui")
	LocalPlayer_upvr.PlayerGui.ChildAdded:Connect(function(arg1_2) -- Line 350
		if arg1_2.Name == "MainGui" then
			arg1_2:Destroy()
		end
	end)
end
local tbl_7_upvr = {}
local UserInputService_upvr = game:GetService("UserInputService")
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 354
	--[[ Upvalues[11]:
		[1]: tbl_7_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_5_upvr (readonly)
		[4]: ChatMessage_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: var7_upvw (read and write)
		[7]: LocalPlayer_upvr (readonly)
		[8]: CharAdded_upvr (readonly)
		[9]: UserInputService_upvr (readonly)
		[10]: InitialiseBasicUISFX_upvr (readonly)
		[11]: Players_upvr (readonly)
	]]
	tbl_7_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_7_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_7_upvr.MarketService = Knit_upvr.GetService("MarketService")
	tbl_7_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_5_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_7_upvr.DataHandlerService.ChatMessage:Connect(ChatMessage_upvr)
	tbl_7_upvr.PlayerService.Warn:Connect(function(arg1_3) -- Line 365
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:WarningMessage(arg1_3)
	end)
	tbl_7_upvr.MarketService.GiftNotif:Connect(function(arg1_4, arg2) -- Line 369
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		local tbl_3 = {}
		tbl_3[1] = arg1_4
		tbl_3[2] = arg2
		any_CreateController_result1_upvr:Notification("Gift", tbl_3)
	end)
	for i_3, v_3_upvr in pairs(workspace.Underlings:GetChildren()) do
		v_3_upvr:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 374
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: v_3_upvr (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, v_3_upvr)
		end)
	end
	workspace.Underlings.ChildAdded:Connect(function(arg1_5) -- Line 373, Named "RigUnderling"
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		arg1_5:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 374
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: arg1_5 (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, arg1_5)
		end)
	end)
	var7_upvw.ItemDetails.Title:GetPropertyChangedSignal("TextBounds"):Connect(function() -- Line 382
		--[[ Upvalues[1]:
			[1]: var7_upvw (copied, read and write)
		]]
		local TextBounds = var7_upvw.ItemDetails.Title.TextBounds
		var7_upvw.ItemDetails.Size = UDim2.new(0, TextBounds.X + 10, 0, TextBounds.Y + 10)
	end)
	LocalPlayer_upvr.CharacterAdded:Connect(CharAdded_upvr)
	if LocalPlayer_upvr.Character then
		i_3 = "Humanoid"
		local SOME = LocalPlayer_upvr.Character:WaitForChild(i_3)
		v_3_upvr = UpdateHealthUI
		SOME.HealthChanged:Connect(v_3_upvr)
		i_3 = SOME.Health
		UpdateHealthUI(i_3)
	end
	any_CreateController_result1_upvr.Modules.InventoryHandler = require(script.InventoryHandler)
	any_CreateController_result1_upvr.Modules.CraftingHandler = require(script.CraftingHandler)
	any_CreateController_result1_upvr.Modules.StatsHandler = require(script.StatsHandler)
	any_CreateController_result1_upvr.Modules.ShopHandler = require(script.ShopHandler)
	any_CreateController_result1_upvr.Modules.StoreHandler = require(script.StoreHandler)
	any_CreateController_result1_upvr.Modules.TaskHandler = require(script.TaskHandler)
	any_CreateController_result1_upvr.Modules.SettingsHandler = require(script.SettingsHandler)
	any_CreateController_result1_upvr.Modules.PopUpHandler = require(script.PopUpHandler)
	UserInputService_upvr.InputBegan:Connect(function(arg1_6) -- Line 401
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_6.KeyCode == Enum.KeyCode.LeftShift then
			any_CreateController_result1_upvr.ShiftDown = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_7) -- Line 405
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_7.KeyCode == Enum.KeyCode.LeftShift then
			any_CreateController_result1_upvr.ShiftDown = false
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_8) -- Line 410
		if arg1_8.KeyCode.Name == "F2" then
			if game.Players.LocalPlayer.PlayerGui.MainGui.Enabled then
				game.Players.LocalPlayer.PlayerGui.MainGui.Enabled = false
				return
			end
			game.Players.LocalPlayer.PlayerGui.MainGui.Enabled = true
		end
	end)
	tbl_7_upvr.PlayerService.Teleporting:Connect(function() -- Line 420
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:TeleportUI(true)
	end)
	InitialiseBasicUISFX_upvr()
	any_CreateController_result1_upvr.Processing = false
	local MouseLockController = Players_upvr.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("CameraModule"):WaitForChild("MouseLockController")
	local BoundKeys = MouseLockController:FindFirstChild("BoundKeys")
	if BoundKeys then
		BoundKeys.Value = "LeftControl,RightControl"
	else
		local StringValue = Instance.new("StringValue")
		StringValue.Name = "BoundKeys"
		StringValue.Value = "LeftControl,RightControl"
		StringValue.Parent = MouseLockController
	end
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:00
-- Luau version 6, Types version 3
-- Time taken: 0.015624 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local any_GetController_result1_upvr_3 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {
	InventorySpace = 0;
	FocusedStorages = {};
	CollectionUIObjects = {};
}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local tbl_upvr = {}
local tbl_4_upvr = {}
local tbl_6_upvr = {}
function UpdateSearch() -- Line 28
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
	]]
	local string_lower_result1 = string.lower(MainGui_upvr.Inventory.Main.SearchBG.SearchBar.Text)
	for _, v in pairs(tbl_6_upvr) do
		local var21 = 9
		if v.Index > var21 then
			if v.Item then
				local var22 = false
				if string_lower_result1 ~= "" then
					var22 = not string.find(string.lower(v.Item.Id), string_lower_result1)
				end
				var21 = not var22
				v.UI.Visible = var21
			else
				if string_lower_result1 ~= "" then
					var21 = false
				else
					var21 = true
				end
				v.UI.Visible = var21
			end
		end
	end
end
function InitialiseToolBar() -- Line 40
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_4_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	local ToolBar = MainGui_upvr:WaitForChild("HUD"):WaitForChild("ToolBar")
	for i_2 = 1, 9 do
		table.insert(tbl_4_upvr, tbl_upvr.ToolBar.new(i_2, ToolBar:FindFirstChild(i_2)))
	end
end
function InitialiseBackpack() -- Line 48
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	for i_3 = 1, module_upvr.InventorySpace do
		table.insert(tbl_6_upvr, tbl_upvr.Backpack.new(i_3))
	end
end
function UpdateToolBar(arg1, arg2) -- Line 54
	--[[ Upvalues[1]:
		[1]: tbl_4_upvr (readonly)
	]]
	tbl_4_upvr[arg1]:UpdateItem(arg2)
end
function UpdateBackpack(arg1, arg2) -- Line 59
	--[[ Upvalues[1]:
		[1]: tbl_6_upvr (readonly)
	]]
	tbl_6_upvr[arg1]:UpdateItem(arg2)
end
function UpdateStorageSlot(arg1, arg2) -- Line 64
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	local next_result1_2 = next(module_upvr.FocusedStorages)
	local var28
	if next_result1_2 == "Underling" then
		var28 = tbl_upvr.Underling.InventoryObjects[arg1]
	elseif next_result1_2 == "Chest" then
		var28 = tbl_upvr.Chests.InventoryObjects[arg1]
	end
	var28:UpdateItem(arg2)
end
function UpdateStorage(arg1, arg2) -- Line 79
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if not arg1 or not arg2 then
	else
		local var31 = module_upvr.FocusedStorages[arg1]
		if var31 then
		end
		local var32 = var31
		if var32 then
			var32 = var31.Data.StorageCap
		end
		for i_9 = 1, var32 do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_9)
			if any_GetSlotFromIndex_result1 or CoreUtil_upvr:GetSlotFromIndex(var31.Data.Storage, i_9) then
				UpdateStorageSlot(i_9, any_GetSlotFromIndex_result1)
			end
		end
	end
end
function UpdateInventory(arg1) -- Line 100
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_3 (readonly)
	]]
	for i_4 = 1, module_upvr.InventorySpace do
		local any_GetSlotFromIndex_result1_3 = CoreUtil_upvr:GetSlotFromIndex(arg1, i_4)
		local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, i_4)
		if any_GetSlotFromIndex_result1_3 or any_GetSlotFromIndex_result1_2 then
			if any_GetSlotFromIndex_result1_2 and not any_GetSlotFromIndex_result1_3 and 0 < i_4 and i_4 < 10 and i_4 == any_GetController_result1_upvr_3.EquippedIndex then
				any_GetController_result1_upvr_3:EquipItem(nil)
			end
			UpdateBackpack(i_4, any_GetSlotFromIndex_result1_3)
			if 0 < i_4 and i_4 < 10 then
			end
		end
	end
	any_GetController_result1_upvr_3.Inventory = arg1
end
function UpdateInventorySpace(arg1) -- Line 124
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.InventorySpace = arg1
end
function GetInventoryFromData(arg1) -- Line 128
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
	]]
	if not arg1 or not arg1.Inventory then return end
	local var37 = module_upvr.FocusedStorages[string.split(arg1.Inventory, '&')[1]]
	if not var37 or not var37.Data.Storage then
	end
	return any_GetController_result1_upvr_3.Inventory
end
function QuickSwap(arg1) -- Line 138
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local next_result1, next_result2 = next(module_upvr.FocusedStorages)
	if not next_result1 then
		next_result1 = "Inventory"
	end
	local tbl_2 = {}
	if arg1.Inventory == "Inventory" then
		if next_result2 then
			-- KONSTANTWARNING: GOTO [24] #17
		end
	end
	local var45 = 1
	local var46 = 1
	if next_result1 == "Inventory" then
		if 0 < arg1.Index and arg1.Index < 10 then
			var45 = 10
			var46 = module_upvr.InventorySpace
		else
			var45 = 1
			var46 = 9
		end
	elseif arg1.Inventory == "Inventory" then
		var45 = 1
		var46 = next_result2.Data.StorageCap
	else
		var45 = 1
		var46 = module_upvr.InventorySpace
	end
	tbl_2.Index = CoreUtil_upvr:GetFirstFreeInventorySpace(var46, any_GetController_result1_upvr_3.Inventory, {
		Min = var45;
		Max = var46;
	})
	if next_result1 == "Inventory" or arg1.Inventory ~= "Inventory" or not next_result1..'&'..next_result2.Index then
	end
	tbl_2.Inventory = "Inventory"
	if tbl_2.Index then
		SwapBackpackItem(arg1, tbl_2)
	end
end
function UpdateStorageServer(arg1, arg2, arg3) -- Line 178
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var48 = module_upvr.FocusedStorages[arg1]
	if var48 and var48.Index == arg2 then
		UpdateStorage(arg1, arg3)
	end
end
function SwapBackpackItem(arg1, arg2) -- Line 185
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
		[4]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 53 start (CF ANALYSIS FAILED)
	local var49
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var49 = next(module_upvr.FocusedStorages)
		return var49
	end
	if arg1.Inventory ~= "Storage" or not INLINED_2() then
		var49 = arg1.Inventory
	end
	arg1.Inventory = var49
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var49 = next(module_upvr.FocusedStorages)
		return var49
	end
	if arg2.Inventory ~= "Storage" or not INLINED_3() then
		var49 = arg2.Inventory
	end
	arg2.Inventory = var49
	var49 = module_upvr.FocusedStorages[arg1.Inventory]
	local var50 = module_upvr.FocusedStorages[arg2.Inventory]
	if not var49 or not arg1.Inventory..'&'..var49.Index then
	end
	arg1.Inventory = arg1.Inventory
	if not var50 or not arg2.Inventory..'&'..var50.Index then
	end
	arg2.Inventory = arg2.Inventory
	if arg1.Inventory ~= arg2.Inventory then
		-- KONSTANTWARNING: GOTO [74] #48
	end
	-- KONSTANTERROR: [0] 1. Error Block 53 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [73] 47. Error Block 57 start (CF ANALYSIS FAILED)
	CoreUtil_upvr:SwapInventorySlots(true, GetInventoryFromData(arg1), GetInventoryFromData(arg2), arg1.Index, arg2.Index)
	InventoryService_upvr:SwapInventoryIndexes(arg1.Inventory, arg2.Inventory, arg1.Index, arg2.Index)
	UpdateInventory(any_GetController_result1_upvr_3.Inventory)
	UpdateStorage(next(module_upvr.FocusedStorages))
	if arg1.Inventory == "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, arg1.Index) then
		UpdateBackpack(arg1.Index, nil)
		if 0 < arg1.Index and arg1.Index < 10 then
			-- KONSTANTWARNING: GOTO [181] #119
		end
	elseif arg1.Inventory ~= "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(var49.Data.Storage, arg1.Index) then
		UpdateStorageSlot(arg1.Index, nil)
	end
	if any_GetController_result1_upvr_3.EquippedIndex == arg1.Index and arg1.Inventory == "Inventory" or any_GetController_result1_upvr_3.EquippedIndex == arg2.Index and arg2.Inventory == "Inventory" then
		any_GetController_result1_upvr_3:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, any_GetController_result1_upvr_3.EquippedIndex))
	end
	-- KONSTANTERROR: [73] 47. Error Block 57 end (CF ANALYSIS FAILED)
end
function CollectionUI(arg1, arg2) -- Line 222
	--[[ Upvalues[5]:
		[1]: module_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: MainGui_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: TweenService_upvr (readonly)
	]]
	local children = workspace.Sound.ItemPickup:GetChildren()
	children[math.random(1, #children)]:Play()
	local var52 = module_upvr.CollectionUIObjects[arg1.Id]
	if var52 then
		var52.Stack += arg2
		var52.UI.Title.Text = tostring("+ "..arg1.Id..' '..var52.Stack)
		var52.Timer = 5
	else
		local tbl = {
			Timer = 5;
		}
		tbl.Stack = arg2
		local var54 = tbl
		module_upvr.CollectionUIObjects[arg1.Id] = var54
		var54.UI = ReplicatedStorage_upvr.Prefabs.UI.CollectionItem:Clone()
		var54.UI.Title.Text = tostring("+ "..arg1.Id..' '..arg2)
		var54.UI.Parent = MainGui_upvr.HUD.LootNotifications
		any_GetController_result1_upvr:UpdateItemDisplay(var54.UI, arg1)
		TweenService_upvr:Create(var54.UI, TweenInfo.new(0.2), {
			Size = UDim2.new(0.99, 0, 0, 50);
		}):Play()
		wait(0.2)
		TweenService_upvr:Create(var54.UI.ImageLabel, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.ViewportFrame, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.Title, TweenInfo.new(0.2), {
			TextTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.Title.UIStroke, TweenInfo.new(0.2), {
			Transparency = 0;
		}):Play()
	end
end
function CollectionCleanUp() -- Line 267
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	while wait(1) do
		for i_5, v_2 in pairs(module_upvr.CollectionUIObjects) do
			v_2.Timer -= 1
			if v_2.Timer == 0 then
				module_upvr.CollectionUIObjects[i_5] = nil
				TweenService_upvr:Create(v_2.UI.ViewportFrame, TweenInfo.new(0.2), {
					ImageTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title, TweenInfo.new(0.2), {
					TextTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title.UIStroke, TweenInfo.new(0.2), {
					Transparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.ImageLabel, TweenInfo.new(0.2), {
					ImageTransparency = 1;
					BackgroundTransparency = 1;
				}):Play()
				wait(0.2)
				TweenService_upvr:Create(v_2.UI, TweenInfo.new(0.2), {
					Size = UDim2.new(0, 0, 0, 0);
				}):Play()
				wait(0.2)
				v_2.UI:Destroy()
			end
		end
	end
end
function EquipUpdate(arg1) -- Line 289
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_3 (readonly)
		[2]: tbl_4_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	local var74 = false
	if any_GetController_result1_upvr_3.EquippedIndex ~= arg1.Index then
		var74 = arg1.Index
	end
	any_GetController_result1_upvr_3.EquippedIndex = var74
	local pairs_result1_2, pairs_result2_2, pairs_result3_3 = pairs(tbl_4_upvr)
	for _, v_3 in pairs_result1_2, pairs_result2_2, pairs_result3_3 do
		if v_3.Index == any_GetController_result1_upvr_3.EquippedIndex then
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.2, 1.3);
			}):Play()
			v_3.UI.UIStroke.Thickness = 4
		else
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.111, 1);
			}):Play()
			v_3.UI.UIStroke.Thickness = 1
		end
	end
	pairs_result3_3 = any_GetController_result1_upvr_3.EquippedIndex
	local var80 = pairs_result3_3
	if var80 then
		var80 = arg1.Item
	end
	any_GetController_result1_upvr_3:EquipItem(var80)
end
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
local Streamable_upvr = require(ReplicatedStorage_upvr.Packages.Streamable).Streamable
function ChestAdded(arg1) -- Line 308
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: Streamable_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: InventoryService_upvr (readonly)
	]]
	local any_split_result1 = arg1:split('/')
	if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, {
		X = tonumber(any_split_result1[1]);
		Y = tonumber(any_split_result1[2]);
		Z = tonumber(any_split_result1[3]);
	}) then
		warn("Chest not registered")
	else
		local _ = function(arg1_2, arg2) -- Line 317
			--[[ Upvalues[3]:
				[1]: any_GetController_result1_upvr (copied, readonly)
				[2]: InventoryService_upvr (copied, readonly)
				[3]: arg1 (readonly)
			]]
			arg1_2:WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 319
				--[[ Upvalues[3]:
					[1]: any_GetController_result1_upvr (copied, readonly)
					[2]: InventoryService_upvr (copied, readonly)
					[3]: arg1 (copied, readonly)
				]]
				if any_GetController_result1_upvr.Proccessing then return end
				any_GetController_result1_upvr.Proccessing = true
				local _, any_await_result2_2 = InventoryService_upvr:GetChestData(arg1):andThen():await()
				if not any_await_result2_2 then return end
				any_GetController_result1_upvr:ToggleUI("Chest", true, any_await_result2_2, arg1)
				any_GetController_result1_upvr.Proccessing = false
			end)
			arg2:Add(function() -- Line 328
				warn("Chest despawned")
			end)
		end
	end
end
local MobService_upvr = Knit.GetService("MobService")
function module_upvr.ToggleInventory(arg1, arg2, arg3, arg4, arg5) -- Line 336
	--[[ Upvalues[6]:
		[1]: module_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: MobService_upvr (readonly)
		[5]: tbl_upvr (readonly)
		[6]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	for i_7, _ in pairs(module_upvr.FocusedStorages) do
		module_upvr.FocusedStorages[i_7] = nil
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 19 start (CF ANALYSIS FAILED)
	MainGui_upvr.Inventory.Main.Position = UDim2.fromScale(0.33, 0.5)
	any_GetController_result1_upvr.Processing = true
	if arg3 == "Underling" then
		local _, any_await_result2 = MobService_upvr:GetUnderlingFromIndex(arg4.Name):andThen():await()
		if any_await_result2 then
			module_upvr.FocusedStorages.Underling = any_await_result2
			tbl_upvr.Underling:InitialiseUnderlingUI(any_await_result2)
			-- KONSTANTWARNING: GOTO [78] #54
		end
	elseif arg3 == "Chest" then
		local tbl_5 = {}
		tbl_5.Index = arg5
		tbl_5.Data = arg4
		module_upvr.FocusedStorages.Chest = tbl_5
		tbl_upvr.Chests:InitialiseChestUI(tbl_5)
	end
	-- KONSTANTERROR: [15] 12. Error Block 19 end (CF ANALYSIS FAILED)
end
tbl_upvr.ToolBar = require(script.ToolBar)
tbl_upvr.Backpack = require(script.Backpack)
tbl_upvr.Underling = require(script.Underling)
tbl_upvr.Chests = require(script.Chests)
game:GetService("ContextActionService"):BindAction("ToggleInventory", function(arg1, arg2) -- Line 387
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
	end
end, false, Enum.KeyCode.E, Enum.KeyCode.ButtonY)
MainGui_upvr.HUD.ToolBar.InventoryButton.Button.MouseButton1Up:Connect(function() -- Line 391
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
end)
MainGui_upvr.Inventory.Main.Close.MouseButton1Up:Connect(function() -- Line 395
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Inventory", false)
end)
coroutine.wrap(CollectionCleanUp)()
tbl_upvr.ToolBar.EquipUpdate.Event:Connect(EquipUpdate)
tbl_upvr.Backpack.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Backpack.QuickSwapUpdate.Event:Connect(QuickSwap)
tbl_upvr.Underling.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Underling.QuickSwapUpdate.Event:Connect(QuickSwap)
tbl_upvr.Chests.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Chests.QuickSwapUpdate.Event:Connect(QuickSwap)
local any_await_result1_2, any_await_result2_4 = InventoryService_upvr:GetInventory():andThen():await()
_ = any_await_result1_2 -- Setting global
any_GetController_result1_upvr_3.Inventory = any_await_result2_4
local any_await_result1, any_await_result2_3 = InventoryService_upvr:GetInventorySpace():andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.InventorySpace = any_await_result2_3
InventoryService_upvr.InventoryUpdate:Connect(UpdateInventory)
InventoryService_upvr.StorageUpdate:Connect(UpdateStorageServer)
InventoryService_upvr.InventorySpaceUpdate:Connect(UpdateInventorySpace)
InventoryService_upvr.ItemCollected:Connect(CollectionUI)
MainGui_upvr.Inventory.Main.SearchBG.SearchBar.Changed:Connect(UpdateSearch)
Knit.GetService("MarketService").InventorySpace:Connect(function(arg1) -- Line 421
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	for i_8 = module_upvr.InventorySpace, arg1 do
		table.insert(tbl_6_upvr, tbl_upvr.Backpack.new(i_8))
	end
	module_upvr.InventorySpace = arg1
end)
InitialiseToolBar()
InitialiseBackpack()
UpdateInventory(any_GetController_result1_upvr_3.Inventory)
EquipUpdate(tbl_4_upvr[1])
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.ToolBar
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:01
-- Luau version 6, Types version 3
-- Time taken: 0.002077 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.EquipUpdate = Instance.new("BindableEvent")
NumberToEnum = {Enum.KeyCode.One, Enum.KeyCode.Two, Enum.KeyCode.Three, Enum.KeyCode.Four, Enum.KeyCode.Five, Enum.KeyCode.Six, Enum.KeyCode.Seven, Enum.KeyCode.Eight, Enum.KeyCode.Nine} -- Setting global
function module_upvr.new(arg1, arg2) -- Line 30
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl = {}
	tbl.Index = arg1
	tbl.UI = arg2
	tbl.Item = nil
	tbl.Selected = false
	local setmetatable_result1 = setmetatable(tbl, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local ContextActionService_upvr = game:GetService("ContextActionService")
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local RunService_upvr = game:GetService("RunService")
local mouse_upvr = game.Players.LocalPlayer:GetMouse()
function module_upvr.Initialise(arg1) -- Line 47
	--[[ Upvalues[4]:
		[1]: ContextActionService_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: mouse_upvr (readonly)
	]]
	ContextActionService_upvr:BindAction("Equip"..tostring(arg1.Index), function(arg1_2, arg2) -- Line 49
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 ~= Enum.UserInputState.End then
		else
			arg1:ToolSelected()
		end
	end, false, NumberToEnum[arg1.Index])
	arg1.UI.Button.MouseButton1Up:Connect(function() -- Line 54
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:ToolSelected()
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 59
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (copied, readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 71
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
function module_upvr.UpdateItem(arg1, arg2) -- Line 79
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
function module_upvr.ToolSelected(arg1) -- Line 84
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.EquipUpdate:Fire(arg1)
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.Backpack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:02
-- Luau version 6, Types version 3
-- Time taken: 0.006250 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.SwapUpdate = Instance.new("BindableEvent")
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
function module_upvr.new(arg1) -- Line 20
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl_3 = {}
	tbl_3.Index = arg1
	tbl_3.UI = nil
	tbl_3.Item = nil
	local setmetatable_result1 = setmetatable(tbl_3, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local UserInputService_upvr = game:GetService("UserInputService")
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local RunService_upvr = game:GetService("RunService")
function module_upvr.Initialise(arg1) -- Line 36
	--[[ Upvalues[6]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: module_upvr (readonly)
		[5]: MainGui_upvr (readonly)
		[6]: RunService_upvr (readonly)
	]]
	local LocalPlayer_upvr = game.Players.LocalPlayer
	local Main_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui"):WaitForChild("Inventory"):WaitForChild("Main")
	local mouse_upvr = LocalPlayer_upvr:GetMouse()
	if 0 < arg1.Index and arg1.Index < 10 then
		arg1.UI = Main_upvr:WaitForChild("Toolbar"):WaitForChild(arg1.Index)
	else
		arg1.UI = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
		arg1.UI.Name = arg1.Index
		arg1.UI.Parent = Main_upvr:WaitForChild("Backpack"):WaitForChild("ScrollingFrame")
	end
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 52
		--[[ Upvalues[9]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (readonly)
			[3]: mouse_upvr (readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: MainGui_upvr (copied, readonly)
			[7]: Main_upvr (readonly)
			[8]: RunService_upvr (copied, readonly)
			[9]: UserInputService_upvr (copied, readonly)
		]]
		local UserInputType_upvr = arg1_2.UserInputType
		local var48
		if not arg1.Item or UserInputType_upvr ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr ~= Enum.UserInputType.Touch then
		else
			var48 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var48.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Inventory";
				})
				MainGui_upvr.ItemDetails.Visible = false
				return
			end
			var48 = arg1
			local clone_upvr = arg1.UI:Clone()
			clone_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var48.UI.AbsoluteSize.Y)
			var48 = 0
			clone_upvr.Position = UDim2.new(-50, -50, var48, 0)
			clone_upvr.ZIndex = 11
			clone_upvr.Parent = Main_upvr.Parent
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr:FindFirstChild("DisplayNum") then
				clone_upvr.DisplayNum.Visible = false
			end
			local tbl = {}
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			var48 = tbl
			table.insert(var48, RunService_upvr.RenderStepped:Connect(function() -- Line 85
				--[[ Upvalues[2]:
					[1]: clone_upvr (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var48 = tbl
			table.insert(var48, UserInputService_upvr.InputEnded:Connect(function(arg1_4) -- Line 89
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr (readonly)
					[2]: BindableEvent_upvr_2 (readonly)
				]]
				if arg1_4.UserInputType == UserInputType_upvr then
					BindableEvent_upvr_2:Fire()
				end
			end))
			var48 = MainGui_upvr.Inventory.Main.Backpack
			var48 = false
			var48.ScrollingFrame.ScrollingEnabled = var48
			BindableEvent_upvr_2.Event:Wait()
			var48 = MainGui_upvr.Inventory.Main.Backpack
			var48 = true
			var48.ScrollingFrame.ScrollingEnabled = var48
			var48 = tbl
			local pairs_result1_3, pairs_result2_4, pairs_result3_2 = pairs(var48)
			for _, v in pairs_result1_3, pairs_result2_4, pairs_result3_2 do
				v:Disconnect()
			end
			clone_upvr:Destroy()
			pairs_result2_4 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1, pairs_result2, pairs_result3 = pairs(pairs_result2_4)
			for _, v_2 in pairs_result1, pairs_result2, pairs_result3 do
				local tonumber_result1_2 = tonumber(v_2.Name)
				if tonumber_result1_2 then
					if v_2.Parent.Parent.Name == "Backpack" or v_2.Parent.Name == "Toolbar" then
						tonumber_result1_2 = "Inventory"
					else
						tonumber_result1_2 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Inventory";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1_2;
					})
					MainGui_upvr.ItemDetails.Visible = false
				end
			end
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ViewportFrame.Visible = pairs_result2
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ImageLabel.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if arg1.Item then
				if 1 < arg1.Item.Stack then
					pairs_result2 = true
					-- KONSTANTWARNING: GOTO [341] #228
				end
			end
			pairs_result2 = false
			pairs_result2.Stack.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if not arg1.Item then
				pairs_result2 = true
			else
				pairs_result2 = false
			end
			pairs_result2.Empty.Visible = pairs_result2
		end
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 123
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 135
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
function module_upvr.UpdateItem(arg1, arg2) -- Line 143
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:03
-- Luau version 6, Types version 3
-- Time taken: 0.006473 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local LocalPlayer_upvr = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
local tbl_7_upvr = {}
module_upvr.InventoryObjects = {}
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
module_upvr.SwapUpdate = Instance.new("BindableEvent")
tbl_7_upvr.__index = tbl_7_upvr
function tbl_7_upvr.new(arg1, arg2, arg3) -- Line 26
	--[[ Upvalues[1]:
		[1]: tbl_7_upvr (readonly)
	]]
	local tbl_3 = {}
	tbl_3.Index = arg1
	tbl_3.Item = arg2
	tbl_3.UI = arg3
	local setmetatable_result1 = setmetatable(tbl_3, tbl_7_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
function tbl_7_upvr.UpdateItem(arg1, arg2) -- Line 42
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
local UserInputService_upvr = game:GetService("UserInputService")
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RunService_upvr = game:GetService("RunService")
function tbl_7_upvr.Initialise(arg1) -- Line 47
	--[[ Upvalues[7]:
		[1]: UserInputService_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: mouse_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: module_upvr (readonly)
		[6]: MainGui_upvr (readonly)
		[7]: RunService_upvr (readonly)
	]]
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 51
		--[[ Upvalues[8]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: mouse_upvr (copied, readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: MainGui_upvr (copied, readonly)
			[7]: RunService_upvr (copied, readonly)
			[8]: UserInputService_upvr (copied, readonly)
		]]
		local UserInputType_upvr_2 = arg1_2.UserInputType
		local var49
		if not arg1.Item or UserInputType_upvr_2 ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr_2 ~= Enum.UserInputType.Touch then
		else
			var49 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var49.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Storage";
				})
				MainGui_upvr.ItemDetails.Visible = false
				return
			end
			var49 = arg1
			local clone_upvr = arg1.UI:Clone()
			clone_upvr.Parent = MainGui_upvr.Inventory.Parent
			clone_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var49.UI.AbsoluteSize.Y)
			clone_upvr.ZIndex = 11
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr:FindFirstChild("DisplayNum") then
				clone_upvr.DisplayNum.Visible = false
			end
			local tbl_5 = {}
			local BindableEvent_upvr = Instance.new("BindableEvent")
			var49 = tbl_5
			table.insert(var49, RunService_upvr.RenderStepped:Connect(function() -- Line 86
				--[[ Upvalues[2]:
					[1]: clone_upvr (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var49 = tbl_5
			table.insert(var49, UserInputService_upvr.InputEnded:Connect(function(arg1_4) -- Line 90
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr_2 (readonly)
					[2]: BindableEvent_upvr (readonly)
				]]
				if arg1_4.UserInputType == UserInputType_upvr_2 then
					BindableEvent_upvr:Fire()
				end
			end))
			var49 = MainGui_upvr.Inventory.Main.Backpack
			var49 = false
			var49.ScrollingFrame.ScrollingEnabled = var49
			BindableEvent_upvr.Event:Wait()
			var49 = MainGui_upvr.Inventory.Main.Backpack
			var49 = true
			var49.ScrollingFrame.ScrollingEnabled = var49
			var49 = tbl_5
			local pairs_result1_4, pairs_result2_3, pairs_result3 = pairs(var49)
			for _, v in pairs_result1_4, pairs_result2_3, pairs_result3 do
				v:Disconnect()
			end
			clone_upvr:Destroy()
			pairs_result2_3 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1, pairs_result2, pairs_result3_3 = pairs(pairs_result2_3)
			for _, v_2 in pairs_result1, pairs_result2, pairs_result3_3 do
				local tonumber_result1 = tonumber(v_2.Name)
				if tonumber_result1 then
					if v_2.Parent.Parent.Name == "Backpack" then
						tonumber_result1 = "Inventory"
					else
						tonumber_result1 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1;
					})
					MainGui_upvr.ItemDetails.Visible = false
				end
			end
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ViewportFrame.Visible = pairs_result2
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ImageLabel.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if arg1.Item then
				if 0 < arg1.Item.Stack then
					pairs_result2 = true
					-- KONSTANTWARNING: GOTO [328] #219
				end
			end
			pairs_result2 = false
			pairs_result2.Stack.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if not arg1.Item then
				pairs_result2 = true
			else
				pairs_result2 = false
			end
			pairs_result2.Empty.Visible = pairs_result2
		end
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 125
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (copied, readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 137
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
function tbl_7_upvr.Destroy(arg1) -- Line 145
	arg1.UI:Destroy()
end
function module_upvr.InitialiseUnderlingUI(arg1, arg2) -- Line 149
	--[[ Upvalues[6]:
		[1]: MainGui_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: tbl_7_upvr (readonly)
	]]
	if not arg2 then
	else
		MainGui_upvr.Inventory.Underling.Title.Text = ""
		MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info.Title.Text = ""
		any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info, nil)
		for _, v_3 in pairs(module_upvr.InventoryObjects) do
			v_3:Destroy()
		end
		module_upvr.InventoryObjects = {}
		any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info, arg2.Def)
		for i_4 = 1, arg2.Def.MaxInventory do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_4)
			local clone = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
			clone.Name = i_4
			clone.Parent = MainGui_upvr.Inventory.Underling.UnderlingInventory.ScrollingFrame
			clone.Empty.BackgroundColor3 = Color3.fromRGB(201, 217, 255)
			local any_new_result1 = tbl_7_upvr.new(i_4, any_GetSlotFromIndex_result1, clone)
			any_new_result1:UpdateItem(any_GetSlotFromIndex_result1)
			table.insert(module_upvr.InventoryObjects, any_new_result1)
		end
		MainGui_upvr.Inventory.Underling.Visible = true
	end
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.Chests
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:04
-- Luau version 6, Types version 3
-- Time taken: 0.006208 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local LocalPlayer_upvr = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
local tbl_7_upvr = {}
module_upvr.InventoryObjects = {}
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
module_upvr.SwapUpdate = Instance.new("BindableEvent")
tbl_7_upvr.__index = tbl_7_upvr
function tbl_7_upvr.new(arg1, arg2, arg3) -- Line 26
	--[[ Upvalues[1]:
		[1]: tbl_7_upvr (readonly)
	]]
	local tbl_3 = {}
	tbl_3.Index = arg1
	tbl_3.Item = arg2
	tbl_3.UI = arg3
	local setmetatable_result1 = setmetatable(tbl_3, tbl_7_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
function tbl_7_upvr.UpdateItem(arg1, arg2) -- Line 42
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
local UserInputService_upvr = game:GetService("UserInputService")
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RunService_upvr = game:GetService("RunService")
function tbl_7_upvr.Initialise(arg1) -- Line 47
	--[[ Upvalues[7]:
		[1]: UserInputService_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: mouse_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: module_upvr (readonly)
		[6]: MainGui_upvr (readonly)
		[7]: RunService_upvr (readonly)
	]]
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 51
		--[[ Upvalues[8]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: mouse_upvr (copied, readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: MainGui_upvr (copied, readonly)
			[7]: RunService_upvr (copied, readonly)
			[8]: UserInputService_upvr (copied, readonly)
		]]
		local UserInputType_upvr_2 = arg1_2.UserInputType
		local var49
		if not arg1.Item or UserInputType_upvr_2 ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr_2 ~= Enum.UserInputType.Touch then
		else
			var49 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var49.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Storage";
				})
				MainGui_upvr.ItemDetails.Visible = false
				return
			end
			var49 = arg1
			local clone_upvr = arg1.UI:Clone()
			clone_upvr.Parent = MainGui_upvr.Inventory.Parent
			clone_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var49.UI.AbsoluteSize.Y)
			clone_upvr.ZIndex = 11
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr:FindFirstChild("DisplayNum") then
				clone_upvr.DisplayNum.Visible = false
			end
			local tbl_5 = {}
			local BindableEvent_upvr = Instance.new("BindableEvent")
			var49 = tbl_5
			table.insert(var49, RunService_upvr.RenderStepped:Connect(function() -- Line 84
				--[[ Upvalues[2]:
					[1]: clone_upvr (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var49 = tbl_5
			table.insert(var49, UserInputService_upvr.InputEnded:Connect(function(arg1_4) -- Line 88
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr_2 (readonly)
					[2]: BindableEvent_upvr (readonly)
				]]
				if arg1_4.UserInputType == UserInputType_upvr_2 then
					BindableEvent_upvr:Fire()
				end
			end))
			var49 = MainGui_upvr.Inventory.Main.Backpack
			var49 = false
			var49.ScrollingFrame.ScrollingEnabled = var49
			BindableEvent_upvr.Event:Wait()
			var49 = MainGui_upvr.Inventory.Main.Backpack
			var49 = true
			var49.ScrollingFrame.ScrollingEnabled = var49
			var49 = tbl_5
			local pairs_result1_4, pairs_result2_3, pairs_result3 = pairs(var49)
			for _, v in pairs_result1_4, pairs_result2_3, pairs_result3 do
				v:Disconnect()
			end
			clone_upvr:Destroy()
			pairs_result2_3 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1, pairs_result2, pairs_result3_3 = pairs(pairs_result2_3)
			for _, v_2 in pairs_result1, pairs_result2, pairs_result3_3 do
				local tonumber_result1 = tonumber(v_2.Name)
				if tonumber_result1 then
					if v_2:IsDescendantOf(MainGui_upvr.Inventory.Main) then
						tonumber_result1 = "Inventory"
					else
						tonumber_result1 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1;
					})
					MainGui_upvr.ItemDetails.Visible = false
				end
			end
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ViewportFrame.Visible = pairs_result2
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ImageLabel.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if arg1.Item then
				if 0 < arg1.Item.Stack then
					pairs_result2 = true
					-- KONSTANTWARNING: GOTO [329] #221
				end
			end
			pairs_result2 = false
			pairs_result2.Stack.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if not arg1.Item then
				pairs_result2 = true
			else
				pairs_result2 = false
			end
			pairs_result2.Empty.Visible = pairs_result2
		end
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 121
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (copied, readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 133
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
function tbl_7_upvr.Destroy(arg1) -- Line 141
	arg1.UI:Destroy()
end
function module_upvr.InitialiseChestUI(arg1, arg2) -- Line 145
	--[[ Upvalues[5]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: tbl_7_upvr (readonly)
	]]
	if not arg2 then
	else
		for _, v_3 in pairs(module_upvr.InventoryObjects) do
			v_3:Destroy()
		end
		module_upvr.InventoryObjects = {}
		for i_4 = 1, CoreUtil_upvr.ChestStorageSpace do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_4)
			ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone().Name = i_4
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone().Parent = MainGui_upvr.Inventory.Chest.Storage.ScrollingFrame
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone().Empty.BackgroundColor3 = Color3.fromRGB(201, 217, 255)
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			local any_new_result1 = tbl_7_upvr.new(i_4, any_GetSlotFromIndex_result1, ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone())
			any_new_result1:UpdateItem(any_GetSlotFromIndex_result1)
			table.insert(module_upvr.InventoryObjects, any_new_result1)
		end
		MainGui_upvr.Inventory.Chest.Visible = true
	end
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.CraftingHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:05
-- Luau version 6, Types version 3
-- Time taken: 0.015690 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local var8_upvw = 1
local var9_upvw
local var10_upvw = false
local var11_upvw = false
local var12_upvw = false
local tbl_5_upvr = {
	Light = {
		Sufficient = Color3.fromRGB(165, 165, 165);
		Insufficient = Color3.fromRGB(145, 0, 0);
	};
	Dark = {
		Sufficient = Color3.fromRGB(102, 102, 102);
		Insufficient = Color3.fromRGB(82, 0, 0);
	};
}
function UpdateSearch() -- Line 44
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	local string_lower_result1 = string.lower(MainGui_upvr.Crafting.CraftingGrid.SearchBar.Text)
	for _, v in pairs(MainGui_upvr.Crafting.CraftingGrid.ScrollingFrame:GetChildren()) do
		if v:IsA("GuiButton") then
			local var24 = false
			if string_lower_result1 ~= "" then
				var24 = not string.find(string.lower(v.Name), string_lower_result1)
			end
			v.Visible = not var24
		end
	end
end
function UpdateYield(arg1, arg2) -- Line 59
	--[[ Upvalues[7]:
		[1]: var9_upvw (read and write)
		[2]: var8_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: var12_upvw (read and write)
		[6]: var11_upvw (read and write)
		[7]: MainGui_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 24 start (CF ANALYSIS FAILED)
	if arg1 == "Sub" then
		var8_upvw = math.clamp(var8_upvw - arg2 or 1, 1, CoreUtil_upvr.MaxCraftingYield)
	else
		var8_upvw = math.clamp(var8_upvw + arg2 or 1, 1, CoreUtil_upvr.MaxCraftingYield)
	end
	local pairs_result1_3, pairs_result2, pairs_result3_5 = pairs(var9_upvw.CraftIngredients)
	-- KONSTANTERROR: [0] 1. Error Block 24 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [69] 55. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [69] 55. Error Block 12 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 33. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [69.10]
	-- KONSTANTERROR: [41] 33. Error Block 6 end (CF ANALYSIS FAILED)
end
function ToggleEnchant(arg1) -- Line 86
end
function ToggleCraft(arg1) -- Line 92
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Craft = MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.CraftTab.Craft
	local var30
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var30 = Color3.fromRGB(255, 255, 255)
		return var30
	end
	if not arg1 or not INLINED() then
		var30 = Color3.fromRGB(191, 191, 191)
	end
	Craft.TextColor3 = var30
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var30 = Color3.fromRGB(85, 255, 0)
		return var30
	end
	if not arg1 or not INLINED_2() then
		var30 = Color3.fromRGB(131, 131, 131)
	end
	Craft.BackgroundColor3 = var30
	var30 = Craft.UIStroke
	if not arg1 or not Color3.fromRGB(36, 108, 0) then
	end
	var30.Color = Color3.fromRGB(51, 51, 51)
end
function ValidateCraft(arg1) -- Line 99
	--[[ Upvalues[5]:
		[1]: var10_upvw (read and write)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: var8_upvw (read and write)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	var10_upvw = CoreUtil_upvr:ValidateCraft(any_GetController_result1_upvr_2.Inventory, arg1, var8_upvw)
	if #any_GetController_result1_upvr_2.Inventory == any_GetController_result1_upvr.Modules.InventoryHandler.InventorySpace and not CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id) then
		var10_upvw = false
	end
	if arg1.LevelReq and not CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1.LevelReq) then
		var10_upvw = false
	end
	return var10_upvw
end
function InitialiseIngredients(arg1) -- Line 112
	--[[ Upvalues[7]:
		[1]: MainGui_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: var8_upvw (read and write)
		[6]: tbl_5_upvr (readonly)
		[7]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var51
	for _, v_2 in pairs(MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.CraftInfo.Ingredients:GetChildren()) do
		if not v_2:IsA("UIListLayout") and not v_2:IsA("UIGridLayout") and not v_2:IsA("UIStroke") then
			v_2:Destroy()
		end
	end
	for i_3, v_3 in pairs(arg1.CraftIngredients) do
		local var55
		if i_3 ~= "Output" and i_3 ~= "BenchType" then
			var55 = ReplicatedStorage_upvr
			local clone_2 = var55.Prefabs.UI.IngredientTemplate:Clone()
			var55 = i_3
			local any_GetItemInInventory_result1_3 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, i_3)
			if 0 % 2 == 0 then
				var55 = "Light"
			else
				var55 = "Dark"
			end
			if not any_GetItemInInventory_result1_3 or not any_GetItemInInventory_result1_3.Stack then
			end
			if not any_GetItemInInventory_result1_3 or any_GetItemInInventory_result1_3.Stack < v_3 * var8_upvw then
				clone_2.Title.TextColor3 = Color3.fromRGB(255, 39, 39)
				clone_2.BackgroundColor3 = tbl_5_upvr[var55].Sufficient
			else
				clone_2.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				clone_2.BackgroundColor3 = tbl_5_upvr[var55].Sufficient
			end
			clone_2.Title.Text = i_3..' '..0.." / "..tostring(v_3 * var8_upvw)
			clone_2.Parent = MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.CraftInfo.Ingredients
			any_GetController_result1_upvr:UpdateItemDisplay(clone_2, CoreUtil_upvr:GetDefinitionFromId(var55))
		end
	end
	return nil
end
function UpdateCrafting(arg1) -- Line 156
	--[[ Upvalues[6]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: var8_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local ScrollingFrame = MainGui_upvr.Crafting.CraftingMain.ScrollingFrame
	var9_upvw = arg1
	any_GetController_result1_upvr:UpdateItemDisplay(ScrollingFrame.CraftInfo, arg1)
	local pairs_result1_6, _, pairs_result3_9 = pairs(ScrollingFrame:GetDescendants())
	local var89
	for i_4, v_4 in pairs_result1_6, var89, pairs_result3_9 do
		local var90
		local function INLINED_9() -- Internal function, doesn't exist in bytecode
			var90 = v_4:IsA("TextButton")
			return var90
		end
		local function INLINED_10() -- Internal function, doesn't exist in bytecode
			var90 = v_4:IsA("ImageLabel")
			return var90
		end
		local function INLINED_11() -- Internal function, doesn't exist in bytecode
			var90 = v_4:IsA("ImageButton")
			return var90
		end
		local function INLINED_12() -- Internal function, doesn't exist in bytecode
			var90 = v_4:IsA("ViewportFrame")
			return var90
		end
		local function INLINED_13() -- Internal function, doesn't exist in bytecode
			var90 = v_4:IsA("ScrollingFrame")
			return var90
		end
		if var90 or INLINED_9() or INLINED_10() or INLINED_11() or INLINED_12() or INLINED_13() then
			if arg1 then
				var90 = true
			else
				var90 = false
			end
			v_4.Visible = var90
		end
	end
	if not arg1 then
	else
		if arg1.LevelReq then
			i_4 = any_GetController_result1_upvr_2
			i_4 = arg1.LevelReq
			if not CoreUtil_upvr:IsMasterySucceeded(i_4.Masteries, i_4) then
				local _, any_GetCatagorysFromLevelReq_result2_2 = CoreUtil_upvr:GetCatagorysFromLevelReq(arg1.LevelReq)
				var90 = any_GetController_result1_upvr_2
				v_4 = var90.Masteries
				var90 = arg1.LevelReq
				local _, _, any_IsMasterySucceeded_result3 = CoreUtil_upvr:IsMasterySucceeded(v_4, var90)
				var90 = ScrollingFrame.CraftInfo.ImageLabel.LevelReq
				var90.Text = any_GetCatagorysFromLevelReq_result2_2:upper().." LEVEL "..tostring(any_IsMasterySucceeded_result3).." REQUIRED"
				var90 = ScrollingFrame.CraftInfo.ImageLabel.LevelReq
				var90.Visible = true
				-- KONSTANTWARNING: GOTO [130] #93
			end
		end
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.CraftInfo.ImageLabel
		any_GetCatagorysFromLevelReq_result2_2 = false
		any_GetCatagorysFromLevelReq_result2_2.LevelReq.Visible = any_GetCatagorysFromLevelReq_result2_2
		var8_upvw = 1
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.Amount
		local function INLINED_14() -- Internal function, doesn't exist in bytecode
			any_GetCatagorysFromLevelReq_result2_2 = tostring(arg1.CraftIngredients.Output * var8_upvw)
			return any_GetCatagorysFromLevelReq_result2_2
		end
		if not arg1.CraftIngredients.Output or not INLINED_14() then
			any_GetCatagorysFromLevelReq_result2_2 = tostring(var8_upvw)
		end
		any_GetCatagorysFromLevelReq_result2_2.AmountLabel.Text = any_GetCatagorysFromLevelReq_result2_2
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.CraftInfo.ImageLabel
		any_GetCatagorysFromLevelReq_result2_2 = arg1.Id
		any_GetCatagorysFromLevelReq_result2_2.Title.Text = any_GetCatagorysFromLevelReq_result2_2
		any_GetCatagorysFromLevelReq_result2_2 = arg1
		InitialiseIngredients(any_GetCatagorysFromLevelReq_result2_2)
		any_GetCatagorysFromLevelReq_result2_2 = ValidateCraft(arg1)
		ToggleCraft(any_GetCatagorysFromLevelReq_result2_2)
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local tbl_2_upvr = {}
function InitialiseCrafting(arg1) -- Line 192
	--[[ Upvalues[9]:
		[1]: var9_upvw (read and write)
		[2]: MainGui_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: tbl_2_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: CoreUtil_upvr (readonly)
		[7]: any_GetController_result1_upvr_2 (readonly)
		[8]: var8_upvw (read and write)
		[9]: any_GetController_result1_upvr (readonly)
	]]
	local tbl_4 = {}
	UpdateCrafting(var9_upvw)
	for _, v_5 in pairs(MainGui_upvr.Crafting.CraftingGrid.ScrollingFrame:GetChildren()) do
		if not v_5:IsA("UIListLayout") and not v_5:IsA("UIGridLayout") then
			v_5:Destroy()
		end
	end
	for _, v_6 in pairs(any_RequireDefinitions_result1_upvr) do
		for _, v_7_upvr in pairs(v_6) do
			local var177
			if v_7_upvr.CraftIngredients then
				var177 = v_7_upvr.Id
				tbl_2_upvr[var177] = v_7_upvr
				var177 = ReplicatedStorage_upvr.Prefabs.UI
				local clone_3 = var177.CraftingSlotTemplate:Clone()
				var177 = 0
				clone_3.Name = v_7_upvr.Id
				clone_3.Frame.Title.Text = v_7_upvr.Id
				clone_3.Frame.Shader.Visible = false
				for i_8, v_8 in pairs(v_7_upvr.CraftIngredients) do
					local any_GetItemInInventory_result1_2 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, i_8)
					local var183
					if i_8 ~= "Output" then
						local function INLINED_19() -- Internal function, doesn't exist in bytecode
							var183 = math.clamp(v_8 * var8_upvw - any_GetItemInInventory_result1_2.Stack, 0, math.huge)
							return var183
						end
						if not any_GetItemInInventory_result1_2 or not INLINED_19() then
							var183 = v_8 * var8_upvw
						end
						var177 += var183
						local function INLINED_20() -- Internal function, doesn't exist in bytecode
							var183 = any_GetItemInInventory_result1_2.Stack
							return var183 < v_8 * var8_upvw
						end
						local function INLINED_21() -- Internal function, doesn't exist in bytecode
							var183 = v_7_upvr.LevelReq
							return var183
						end
						local function INLINED_22() -- Internal function, doesn't exist in bytecode
							var183 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, v_7_upvr.LevelReq)
							return var183
						end
						if not any_GetItemInInventory_result1_2 or INLINED_20() or INLINED_21() and not INLINED_22() then
							var183 = v_7_upvr.LevelReq
							if var183 then
								var183 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, v_7_upvr.LevelReq)
								if not var183 then
									var183 = clone_3.Frame.Title
									var183.TextColor3 = Color3.fromRGB(214, 0, 0)
								end
							end
							var183 = clone_3.Frame.Shader
							var183.Visible = true
						end
					end
				end
				table.insert(tbl_4, {
					UI = clone_3;
					IngredientsMissing = var177;
					LevelReq = v_7_upvr.LevelReq;
				})
				any_GetController_result1_upvr:UpdateItemDisplay(clone_3.Frame, v_7_upvr)
				clone_3.MouseButton1Up:Connect(function() -- Line 237
					--[[ Upvalues[2]:
						[1]: any_GetController_result1_upvr (copied, readonly)
						[2]: v_7_upvr (readonly)
					]]
					if any_GetController_result1_upvr.Processing then
					else
						UpdateCrafting(v_7_upvr)
					end
				end)
			end
		end
	end
	table.sort(tbl_4, function(arg1_3, arg2) -- Line 248
		--[[ Upvalues[2]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: any_GetController_result1_upvr_2 (copied, readonly)
		]]
		local any_IsMasterySucceeded_result1, any_IsMasterySucceeded_result2_3 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1_3.LevelReq)
		local Masteries = any_GetController_result1_upvr_2.Masteries
		local any_IsMasterySucceeded_result1_4, any_IsMasterySucceeded_result2 = CoreUtil_upvr:IsMasterySucceeded(Masteries, arg2.LevelReq)
		if any_IsMasterySucceeded_result1 == nil then
			Masteries = true
		else
			Masteries = false
		end
		local var192 = Masteries
		if any_IsMasterySucceeded_result1_4 == nil then
			Masteries = true
		else
			Masteries = false
		end
		if var192 == true and Masteries == true then
			if (any_IsMasterySucceeded_result2_3 or 0) >= (any_IsMasterySucceeded_result2 or 0) then
				Masteries = false
			else
				Masteries = true
			end
			return Masteries
		end
		if var192 == true then
			Masteries = true
			return Masteries
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if Masteries == true then
			Masteries = false
			return Masteries
		end
		if arg1_3.IngredientsMissing >= arg2.IngredientsMissing then
			Masteries = false
		else
			Masteries = true
		end
		return Masteries
	end)
	for _, v_9 in pairs(tbl_4) do
		v_9.UI.Parent = MainGui_upvr.Crafting.CraftingGrid.ScrollingFrame
	end
	UpdateSearch()
end
function module.ToggleCrafting(arg1, arg2, arg3) -- Line 280
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		if arg2 then
			InitialiseCrafting(arg3)
		end
		MainGui_upvr.Crafting.Visible = arg2
	end
end
MainGui_upvr.Crafting.CraftingGrid.SearchBar.Changed:Connect(UpdateSearch)
game:GetService("ContextActionService"):BindAction("Toggle Crafting", function(arg1, arg2) -- Line 289
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Crafting", not MainGui_upvr.Crafting.Visible)
	end
end, false, Enum.KeyCode.C, Enum.KeyCode.ButtonX)
MainGui_upvr.HUD.RightPanel.CraftButton.Button.MouseButton1Up:Connect(function() -- Line 293
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Crafting", not MainGui_upvr.Crafting.Visible)
end)
local InventoryService_upvr = Knit.GetService("InventoryService")
MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.CraftTab.Craft.MouseButton1Up:Connect(function() -- Line 297
	--[[ Upvalues[5]:
		[1]: var10_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
		[4]: var9_upvw (read and write)
		[5]: var8_upvw (read and write)
	]]
	if var10_upvw and not any_GetController_result1_upvr.Processing then
		any_GetController_result1_upvr.Processing = true
		local _, any_await_result2 = InventoryService_upvr:Craft(var9_upvw, var8_upvw):andThen():await()
		if any_await_result2 then
			workspace.Sound.UI.Craft:Play()
			InitialiseCrafting()
			UpdateCrafting(var9_upvw)
		else
			any_GetController_result1_upvr:WarningMessage("Error crafting")
		end
		any_GetController_result1_upvr.Processing = false
	end
end)
local tbl_3_upvr = {1, 2, 5, 10, 50, 100}
MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Add.MouseButton1Down:Connect(function() -- Line 315
	--[[ Upvalues[5]:
		[1]: var12_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_3_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: MainGui_upvr (readonly)
	]]
	if not var12_upvw and any_GetController_result1_upvr.Processing then
	else
		local _ = 1
		var12_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Add.MouseButton1Up)
		while wait() and var12_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Subtract.MouseButton1Down:Connect(function() -- Line 334
	--[[ Upvalues[5]:
		[1]: var11_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_3_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: MainGui_upvr (readonly)
	]]
	if not var11_upvw and any_GetController_result1_upvr.Processing then
	else
		local _ = 1
		var11_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Subtract.MouseButton1Up)
		while wait() and var11_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Add.MouseButton1Up:Connect(function() -- Line 352
	--[[ Upvalues[1]:
		[1]: var12_upvw (read and write)
	]]
	var12_upvw = false
end)
MainGui_upvr.Crafting.CraftingMain.ScrollingFrame.Amount.Subtract.MouseButton1Up:Connect(function() -- Line 356
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = false
end)
MainGui_upvr.Crafting.Titles.Close.MouseButton1Up:Connect(function() -- Line 360
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Crafting", false)
end)
ToggleEnchant(false)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.ShopHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:07
-- Luau version 6, Types version 3
-- Time taken: 0.018110 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local var8_upvw = 1
local var9_upvw
local var10_upvw
local var11_upvw = false
local var12_upvw = false
local var13_upvw = "Buy"
local var14_upvw = false
local var15_upvw = false
function UpdateSearch() -- Line 29
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
	]]
	local string_lower_result1 = string.lower(MainGui_upvr.Shop.ShopGrid.SearchBar.Text)
	for _, v in pairs(MainGui_upvr.Shop.ShopGrid.ScrollingFrame:GetChildren()) do
		if v:IsA("GuiButton") then
			local var24 = false
			if string_lower_result1 ~= "" then
				var24 = not string.find(string.lower(v.Name), string_lower_result1)
			end
			v.Visible = not var24
		end
	end
end
function UpdateYield(arg1, arg2) -- Line 43
	--[[ Upvalues[8]:
		[1]: var13_upvw (read and write)
		[2]: var9_upvw (read and write)
		[3]: var8_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: var15_upvw (read and write)
		[7]: var14_upvw (read and write)
		[8]: MainGui_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var25
	if var13_upvw ~= "Buy" or not var9_upvw.EconomyInfo.BuyPrice then
	end
	if arg1 == "Sub" then
		var25 = var8_upvw - arg2 or 1
		var8_upvw = math.clamp(var25, 1, CoreUtil_upvr.MaxEconomyYield)
	else
		var25 = var8_upvw + arg2 or 1
		var8_upvw = math.clamp(var25, 1, CoreUtil_upvr.MaxEconomyYield)
	end
	local any_GetItemInInventory_result1_2 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, var9_upvw.Id)
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var25 = math.clamp(any_GetItemInInventory_result1_2.Stack, 0, CoreUtil_upvr.MaxEconomyYield)
		return var25
	end
	if not any_GetItemInInventory_result1_2 or not INLINED() then
		var25 = 0
	end
	if var8_upvw == var8_upvw then return end
	if var15_upvw or var14_upvw or var13_upvw == "Buy" and any_GetController_result1_upvr_2.Coins < var9_upvw.EconomyInfo.BuyPrice * var8_upvw then
		var8_upvw = math.floor(any_GetController_result1_upvr_2.Coins / var9_upvw.EconomyInfo.BuyPrice)
	elseif var15_upvw or var14_upvw or var13_upvw == "Sell" and var25 < var8_upvw then
		var8_upvw = var25
	end
	if var13_upvw ~= "Buy" or not var8_upvw then
	end
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.AmountLabel.Text = tostring('('..var8_upvw..'/'..var25..')')
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ItemInfo.Total.Text = tostring(var9_upvw.EconomyInfo.SellPrice * var8_upvw)
	local ValidateAction_result1 = ValidateAction(var9_upvw)
	ToggleAction(ValidateAction_result1)
	return ValidateAction_result1
end
function ToggleAction(arg1) -- Line 76
	--[[ Upvalues[5]:
		[1]: MainGui_upvr (readonly)
		[2]: var13_upvw (read and write)
		[3]: var12_upvw (read and write)
		[4]: var9_upvw (read and write)
		[5]: var11_upvw (read and write)
	]]
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action.Text = var13_upvw
	var12_upvw = ValidateMax(var9_upvw)
	var11_upvw = arg1
	local var29
	if var13_upvw == "Buy" then
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 255, 255)
			return var29
		end
		if not arg1 or not INLINED_2() then
			var29 = Color3.fromRGB(191, 191, 191)
		end
		var29.Action.TextColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(85, 255, 0)
			return var29
		end
		if not arg1 or not INLINED_3() then
			var29 = Color3.fromRGB(131, 131, 131)
		end
		var29.Action.BackgroundColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(36, 108, 0)
			return var29
		end
		if not arg1 or not INLINED_4() then
			var29 = Color3.fromRGB(51, 51, 51)
		end
		var29.UIStroke.Color = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton
		local function INLINED_5() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 255, 255)
			return var29
		end
		if not var12_upvw or not INLINED_5() then
			var29 = Color3.fromRGB(191, 191, 191)
		end
		var29.Action.TextColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton
		local function INLINED_6() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(85, 255, 0)
			return var29
		end
		if not var12_upvw or not INLINED_6() then
			var29 = Color3.fromRGB(131, 131, 131)
		end
		var29.Action.BackgroundColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton.Action
		local function INLINED_7() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(36, 108, 0)
			return var29
		end
		if not var12_upvw or not INLINED_7() then
			var29 = Color3.fromRGB(51, 51, 51)
		end
		var29.UIStroke.Color = var29
	else
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_8() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 255, 255)
			return var29
		end
		if not arg1 or not INLINED_8() then
			var29 = Color3.fromRGB(191, 191, 191)
		end
		var29.Action.TextColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_9() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 0, 0)
			return var29
		end
		if not arg1 or not INLINED_9() then
			var29 = Color3.fromRGB(131, 131, 131)
		end
		var29.Action.BackgroundColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action
		local function INLINED_10() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(108, 0, 0)
			return var29
		end
		if not arg1 or not INLINED_10() then
			var29 = Color3.fromRGB(51, 51, 51)
		end
		var29.UIStroke.Color = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton
		local function INLINED_11() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 255, 255)
			return var29
		end
		if not var12_upvw or not INLINED_11() then
			var29 = Color3.fromRGB(191, 191, 191)
		end
		var29.Action.TextColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton
		local function INLINED_12() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(255, 0, 0)
			return var29
		end
		if not var12_upvw or not INLINED_12() then
			var29 = Color3.fromRGB(131, 131, 131)
		end
		var29.Action.BackgroundColor3 = var29
		var29 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton.Action
		local function INLINED_13() -- Internal function, doesn't exist in bytecode
			var29 = Color3.fromRGB(108, 0, 0)
			return var29
		end
		if not var12_upvw or not INLINED_13() then
			var29 = Color3.fromRGB(51, 51, 51)
		end
		var29.UIStroke.Color = var29
	end
end
function ValidateMax(arg1) -- Line 106
	--[[ Upvalues[4]:
		[1]: var13_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
	]]
	if not arg1 then
		return false
	end
	if var13_upvw == "Buy" then
		if arg1.EconomyInfo.BuyPrice * 1000 <= any_GetController_result1_upvr_2.Coins and (not arg1.LevelReq or CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1.LevelReq)) then
			if #any_GetController_result1_upvr_2.Inventory == any_GetController_result1_upvr.Modules.InventoryHandler.InventorySpace and not CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id) then
				return false
			end
			return true
		end
		return false
	end
	local any_GetItemInInventory_result1_6 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id)
	if any_GetItemInInventory_result1_6 and 1 <= any_GetItemInInventory_result1_6.Stack then
		return true
	end
	return false
end
function ValidateAction(arg1) -- Line 129
	--[[ Upvalues[5]:
		[1]: var13_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: var8_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	if var13_upvw == "Buy" then
		if arg1.EconomyInfo.BuyPrice * var8_upvw <= any_GetController_result1_upvr_2.Coins and (not arg1.LevelReq or CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1.LevelReq)) then
			if #any_GetController_result1_upvr_2.Inventory == any_GetController_result1_upvr.Modules.InventoryHandler.InventorySpace and not CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id) then
				return false
			end
			return true
		end
		return false
	end
	local any_GetItemInInventory_result1_3 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id)
	if any_GetItemInInventory_result1_3 and var8_upvw <= any_GetItemInInventory_result1_3.Stack then
		return true
	end
	return false
end
function UpdateShop(arg1) -- Line 152
	--[[ Upvalues[7]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: var13_upvw (read and write)
		[5]: var8_upvw (read and write)
		[6]: CoreUtil_upvr (readonly)
		[7]: any_GetController_result1_upvr_2 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local ScrollingFrame = MainGui_upvr.Shop.ShopMain.ScrollingFrame
	var9_upvw = arg1
	any_GetController_result1_upvr:UpdateItemDisplay(ScrollingFrame.ItemInfo, arg1)
	local pairs_result1, _, pairs_result3 = pairs(ScrollingFrame:GetDescendants())
	local var65
	for i_2, v_2 in pairs_result1, var65, pairs_result3 do
		local var66
		local function INLINED_22() -- Internal function, doesn't exist in bytecode
			var66 = v_2:IsA("TextButton")
			return var66
		end
		local function INLINED_23() -- Internal function, doesn't exist in bytecode
			var66 = v_2:IsA("ImageLabel")
			return var66
		end
		local function INLINED_24() -- Internal function, doesn't exist in bytecode
			var66 = v_2:IsA("ImageButton")
			return var66
		end
		local function INLINED_25() -- Internal function, doesn't exist in bytecode
			var66 = v_2:IsA("ViewportFrame")
			return var66
		end
		local function INLINED_26() -- Internal function, doesn't exist in bytecode
			var66 = v_2:IsA("ScrollingFrame")
			return var66
		end
		if var66 or INLINED_22() or INLINED_23() or INLINED_24() or INLINED_25() or INLINED_26() then
			if arg1 then
				var66 = true
			else
				var66 = false
			end
			v_2.Visible = var66
		end
	end
	var65 = ScrollingFrame.ItemInfo.ImageLabel
	var65 = false
	var65.LevelReq.Visible = var65
	if var13_upvw ~= "Sell" then
		var65 = false
	else
		var65 = true
	end
	ScrollingFrame.MaxButton.Visible = var65
	if not arg1 then
	else
		var8_upvw = 1
		if var13_upvw == "Buy" and arg1.LevelReq then
			i_2 = any_GetController_result1_upvr_2
			i_2 = arg1.LevelReq
			if not CoreUtil_upvr:IsMasterySucceeded(i_2.Masteries, i_2) then
				local _, any_GetCatagorysFromLevelReq_result2_2 = CoreUtil_upvr:GetCatagorysFromLevelReq(arg1.LevelReq)
				var66 = any_GetController_result1_upvr_2
				v_2 = var66.Masteries
				var66 = arg1.LevelReq
				local _, any_IsMasterySucceeded_result2_2, any_IsMasterySucceeded_result3_2 = CoreUtil_upvr:IsMasterySucceeded(v_2, var66)
				var66 = ScrollingFrame.ItemInfo.ImageLabel.LevelReq
				var66.Text = any_GetCatagorysFromLevelReq_result2_2:upper().." LEVEL "..tostring(any_IsMasterySucceeded_result3_2).." REQUIRED"
				var66 = ScrollingFrame.ItemInfo.ImageLabel.LevelReq
				var66.Visible = true
			end
		end
		any_IsMasterySucceeded_result2_2 = any_GetController_result1_upvr_2
		any_IsMasterySucceeded_result3_2 = var9_upvw
		any_IsMasterySucceeded_result2_2 = any_IsMasterySucceeded_result3_2.Id
		local any_GetItemInInventory_result1_4 = CoreUtil_upvr:GetItemInInventory(any_IsMasterySucceeded_result2_2.Inventory, any_IsMasterySucceeded_result2_2)
		local function INLINED_27() -- Internal function, doesn't exist in bytecode
			any_IsMasterySucceeded_result3_2 = var66.MaxEconomyYield
			var66 = CoreUtil_upvr
			any_IsMasterySucceeded_result2_2 = 0
			return math.clamp(any_GetItemInInventory_result1_4.Stack, any_IsMasterySucceeded_result2_2, any_IsMasterySucceeded_result3_2)
		end
		if not any_GetItemInInventory_result1_4 or not INLINED_27() then
		end
		any_IsMasterySucceeded_result2_2 = var13_upvw
		local function INLINED_28() -- Internal function, doesn't exist in bytecode
			any_IsMasterySucceeded_result2_2 = arg1.EconomyInfo
			return any_IsMasterySucceeded_result2_2.BuyPrice
		end
		if any_IsMasterySucceeded_result2_2 ~= "Buy" or not INLINED_28() then
			any_IsMasterySucceeded_result2_2 = arg1.EconomyInfo
			local SellPrice = any_IsMasterySucceeded_result2_2.SellPrice
		end
		var66 = var13_upvw
		if var66 ~= "Buy" or not var8_upvw then
			var66 = '('..var8_upvw..'/'..0..')'
		end
		ScrollingFrame.Amount.AmountLabel.Text = tostring(var66)
		local function INLINED_29() -- Internal function, doesn't exist in bytecode
			var66 = SellPrice * var8_upvw
			return tostring(var66)
		end
		if not SellPrice or not INLINED_29() then
			var66 = SellPrice
		end
		ScrollingFrame.ItemInfo.Total.Text = tostring(var66)
		var66 = var13_upvw
		if var66 == "Buy" then
		else
		end
		ScrollingFrame.MaxButton.Action.Text = "MAX SELL"
		if var13_upvw == "Buy" then
			ScrollingFrame.ItemInfo.Title.Text = arg1.Id
		elseif any_GetItemInInventory_result1_4 then
			var66 = arg1.Id
			ScrollingFrame.ItemInfo.Title.Text = var66..'('..any_GetItemInInventory_result1_4.Stack..')'
		end
		var66 = arg1
		ToggleAction(ValidateAction(var66))
	end
end
local tbl_upvw = {}
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function Initialise(arg1) -- Line 200
	--[[ Upvalues[8]:
		[1]: tbl_upvw (read and write)
		[2]: MainGui_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: var13_upvw (read and write)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: CoreUtil_upvr (readonly)
		[7]: ReplicatedStorage_upvr (readonly)
		[8]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 73 start (CF ANALYSIS FAILED)
	UpdateShop(nil)
	tbl_upvw = {}
	local _, pairs_result2_3, pairs_result3_4 = pairs(MainGui_upvr.Shop.ShopGrid.ScrollingFrame:GetChildren())
	local var87
	for _, v_3 in var87, pairs_result2_3, pairs_result3_4 do
		if not v_3:IsA("UIListLayout") and not v_3:IsA("UIGridLayout") then
			v_3:Destroy()
		end
	end
	local function INLINED_30() -- Internal function, doesn't exist in bytecode
		var87 = any_RequireDefinitions_result1_upvr.Npc[arg1.Id]
		return var87
	end
	if not arg1 or not INLINED_30() then return end
	local function INLINED_31() -- Internal function, doesn't exist in bytecode
		var87 = any_RequireDefinitions_result1_upvr.Npc[arg1.Id].Store
		return var87
	end
	if var13_upvw ~= "Buy" or not INLINED_31() then
		var87 = any_GetController_result1_upvr_2.Inventory
	end
	local pairs_result1_4, pairs_result2_2, pairs_result3_3 = pairs(var87)
	-- KONSTANTERROR: [0] 1. Error Block 73 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [234] 157. Error Block 45 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [234] 157. Error Block 45 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 48. Error Block 57 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [234.9]
	local function INLINED_32() -- Internal function, doesn't exist in bytecode
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		return "UIGridLayout"
	end
	if nil ~= "Buy" or not INLINED_32() then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	-- KONSTANTERROR: [67] 48. Error Block 57 end (CF ANALYSIS FAILED)
end
local InventoryService_upvr = Knit.GetService("InventoryService")
local PlayerService_upvr = Knit.GetService("PlayerService")
function Action(arg1) -- Line 291
	--[[ Upvalues[11]:
		[1]: var12_upvw (read and write)
		[2]: var11_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: var13_upvw (read and write)
		[5]: InventoryService_upvr (readonly)
		[6]: var9_upvw (read and write)
		[7]: var8_upvw (read and write)
		[8]: CoreUtil_upvr (readonly)
		[9]: any_GetController_result1_upvr_2 (readonly)
		[10]: PlayerService_upvr (readonly)
		[11]: var10_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if arg1 and var12_upvw or not arg1 and var11_upvw or not any_GetController_result1_upvr.Processing then
		any_GetController_result1_upvr.Processing = true
		local var93
		local var94
		if var13_upvw == "Buy" then
			if arg1 then
			else
			end
			local any_await_result1_2, any_await_result2_2 = InventoryService_upvr:Buy(var9_upvw, var8_upvw):andThen():await()
			_ = any_await_result1_2 -- Setting global
			var93 = any_await_result2_2
		else
			var94 = var9_upvw
			local any_GetItemInInventory_result1_5 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, var94.Id)
			if not any_GetItemInInventory_result1_5 then
				any_GetItemInInventory_result1_5 = {}
			end
			local function INLINED_33() -- Internal function, doesn't exist in bytecode
				var94 = any_GetItemInInventory_result1_5.Stack
				return var94
			end
			if not arg1 or not INLINED_33() then
				var94 = var8_upvw
			end
			local any_await_result1, any_await_result2 = InventoryService_upvr:Sell(var9_upvw, var94):andThen():await()
			_ = any_await_result1 -- Setting global
			var93 = any_await_result2
		end
		if var93 then
			if var13_upvw == "Buy" then
				workspace.Sound.UI.ShopPurchase:Play()
			elseif arg1 then
				workspace.Sound.UI.ShopLargeSell:Play()
			elseif 0 < var8_upvw and var8_upvw <= 10 then
				workspace.Sound.UI.ShopSmallSell:Play()
			elseif 10 < var8_upvw and var8_upvw <= 50 then
				workspace.Sound.UI.ShopMediumSell:Play()
			else
				workspace.Sound.UI.ShopLargeSell:Play()
			end
			PlayerService_upvr:GetCoins():andThen():await()
			UpdateShop(var9_upvw)
		else
			any_GetController_result1_upvr:WarningMessage("Error purchasing")
		end
		if var10_upvw then
			Initialise(var10_upvw)
		end
		any_GetController_result1_upvr.Processing = false
	end
end
function module.ToggleShop(arg1, arg2, arg3) -- Line 338
	--[[ Upvalues[2]:
		[1]: var10_upvw (read and write)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 and arg3 then
		if arg3.Gender == "Male" then
			workspace.Sound.UI.MaleNpcNoise:Play()
		else
			workspace.Sound.UI.FemaleNpcNoise:Play()
		end
		var10_upvw = arg3
		Initialise(arg3)
	end
	if not arg2 then
		var10_upvw = nil
	end
	MainGui_upvr.Shop.Visible = arg2
end
MainGui_upvr.Shop.ShopGrid.SearchBar.Changed:Connect(UpdateSearch)
MainGui_upvr.Shop.ShopGrid.Toggle.MouseButton1Up:Connect(function() -- Line 361
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: var13_upvw (read and write)
		[3]: var10_upvw (read and write)
	]]
	if var13_upvw == "Buy" then
		var13_upvw = "Sell"
		MainGui_upvr.Shop.ShopGrid.Toggle.Text = "SWITCH TO BUY"
		MainGui_upvr.Shop.ShopGrid.Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
		MainGui_upvr.Shop.ShopGrid.Toggle.BackgroundColor3 = Color3.fromRGB(85, 255, 0)
		MainGui_upvr.Shop.ShopGrid.Toggle.UIStrokeA.Color = Color3.fromRGB(36, 108, 0)
	else
		var13_upvw = "Buy"
		MainGui_upvr.Shop.ShopGrid.Toggle.Text = "SWITCH TO SELL"
		MainGui_upvr.Shop.ShopGrid.Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
		MainGui_upvr.Shop.ShopGrid.Toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		MainGui_upvr.Shop.ShopGrid.Toggle.UIStrokeA.Color = Color3.fromRGB(108, 0, 0)
	end
	Initialise(var10_upvw)
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action.MouseButton1Up:Connect(function() -- Line 383
	Action(false)
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton.Action.MouseButton1Up:Connect(function() -- Line 387
	Action(true)
end)
local tbl_upvr = {1, 2, 5, 10, 50, 100}
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Down:Connect(function() -- Line 394
	--[[ Upvalues[5]:
		[1]: var15_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: MainGui_upvr (readonly)
	]]
	if not var15_upvw and any_GetController_result1_upvr.Processing then
	else
		var15_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Up)
		while task.wait() and var15_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			UpdateYield("Add", tbl_upvr[1])
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Down:Connect(function() -- Line 412
	--[[ Upvalues[5]:
		[1]: var14_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: MainGui_upvr (readonly)
	]]
	if not var14_upvw and any_GetController_result1_upvr.Processing then
	else
		var14_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Up)
		while wait() and var14_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			UpdateYield("Sub", tbl_upvr[1])
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Up:Connect(function() -- Line 429
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	var15_upvw = false
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Up:Connect(function() -- Line 433
	--[[ Upvalues[1]:
		[1]: var14_upvw (read and write)
	]]
	var14_upvw = false
end)
MainGui_upvr.Shop.Titles.Close.MouseButton1Up:Connect(function() -- Line 437
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Shop", false)
end)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StoreHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:08
-- Luau version 6, Types version 3
-- Time taken: 0.006613 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local MarketService_upvr = Knit.GetService("MarketService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {
	StoreObjects = {};
}
local LocalPlayer = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui")
local var9_upvw
local var10_upvw = 0
local function _(arg1) -- Line 52, Named "ToggleGiftUI"
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
	]]
	MainGui_upvr.GiftPlayer.Visible = arg1
	if var9_upvw and arg1 then
		MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
		var9_upvw.Def.Id:upper()
	end
end
local function _(arg1, arg2) -- Line 57, Named "BuyStoreItem"
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MarketService_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr.Processing = true
		local _, any_await_result2_3 = MarketService_upvr:PurchaseItem(arg1.Id, arg2):andThen():await()
		if any_await_result2_3 and arg1.Def.ProductType == "GamePass" then
			arg1:Bought()
		end
		any_GetController_result1_upvr.Processing = false
	end
end
local function _(arg1, arg2, arg3) -- Line 71, Named "GiftStoreItem"
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MarketService_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr.Processing = true
		local _, _ = MarketService_upvr:GiftItem(arg1.Id, arg2, arg3):andThen():await()
		any_GetController_result1_upvr.Processing = false
	end
end
local function ResizeStoreCellsize_upvr() -- Line 78, Named "ResizeStoreCellsize"
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	local X = MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.AbsoluteWindowSize.X
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0, X, 0, X * 0.376)
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.UIGridLayout.AbsoluteContentSize.Y)
	wait(1)
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local StoreObj_upvr = require(script.StoreObj)
function module_upvr.Initialise(arg1) -- Line 88
	--[[ Upvalues[11]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: StoreObj_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: module_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
		[7]: MarketService_upvr (readonly)
		[8]: var9_upvw (read and write)
		[9]: var10_upvw (read and write)
		[10]: CoreUtil_upvr (readonly)
		[11]: ResizeStoreCellsize_upvr (readonly)
	]]
	local _, pairs_result2_5, pairs_result3_2 = pairs(any_RequireDefinitions_result1_upvr.Store)
	local var49
	for i, v in var49, pairs_result2_5, pairs_result3_2 do
		local any_new_result1_upvr = StoreObj_upvr.new(v)
		if v.Type == "Theme" then
			any_new_result1_upvr.UI = ReplicatedStorage_upvr.Prefabs.UI.ThemePassTemp:Clone()
			any_new_result1_upvr.UiParent = MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame
			any_new_result1_upvr.UI.ImageLabel.Image = v.DisplayData.Background
			for i_2, v_2 in pairs(v.DisplayData.Title) do
				any_new_result1_upvr.UI.Title[tostring(i_2)].Text = v_2
				any_new_result1_upvr.UI.Title[tostring(i_2)].UIStroke.Color = v.DisplayData.TitleStroke
			end
			for i_3, v_3 in pairs(v.DisplayData.Products) do
				any_new_result1_upvr.UI.Products[i_3].Title.Text = v_3.Title
				any_new_result1_upvr.UI.Products[i_3].Title.UIStroke.Color = v.DisplayData.TitleStroke
				any_new_result1_upvr.UI.Products[i_3].ImageLabel.Image = v_3.Image
			end
			for _, v_4 in pairs(any_new_result1_upvr.UI.Options:GetChildren()) do
				if #v.Price < tonumber(v_4.Name) then
					v_4.Visible = false
				end
			end
			for i_5_upvr, v_5 in pairs(v.Price) do
				any_new_result1_upvr.UI.LayoutOrder = -v.LayoutOrder
				any_new_result1_upvr.UI.Options[i_5_upvr].Description.Text = v.DisplayData.Purchases[i_5_upvr].Description
				any_new_result1_upvr.UI.Options[i_5_upvr].Description.UIStroke.Color = v.DisplayData.TitleStroke
				any_new_result1_upvr.UI.Options[i_5_upvr].Buy.Amount.Text = v_5
				if not table.find(module_upvr.Passes, v.Id) then
					any_new_result1_upvr.UI.Options[i_5_upvr].Buy.MouseButton1Down:Connect(function() -- Line 140
						--[[ Upvalues[4]:
							[1]: any_new_result1_upvr (readonly)
							[2]: i_5_upvr (readonly)
							[3]: any_GetController_result1_upvr (copied, readonly)
							[4]: MarketService_upvr (copied, readonly)
						]]
						local var64 = any_new_result1_upvr
						if any_GetController_result1_upvr.Processing then
						else
							any_GetController_result1_upvr.Processing = true
							local _, any_await_result2 = MarketService_upvr:PurchaseItem(var64.Id, i_5_upvr):andThen():await()
							if any_await_result2 and var64.Def.ProductType == "GamePass" then
								var64:Bought()
							end
							any_GetController_result1_upvr.Processing = false
						end
					end)
				else
					any_new_result1_upvr.UI.Options[i_5_upvr].Buy.Amount.Text = "Owned"
				end
				if v.Giftable then
					any_new_result1_upvr.UI.Options[i_5_upvr].Gift.Visible = true
					any_new_result1_upvr.UI.Options[i_5_upvr].Gift.MouseButton1Down:Connect(function() -- Line 149
						--[[ Upvalues[5]:
							[1]: var9_upvw (copied, read and write)
							[2]: any_new_result1_upvr (readonly)
							[3]: var10_upvw (copied, read and write)
							[4]: i_5_upvr (readonly)
							[5]: MainGui_upvr (copied, readonly)
						]]
						var9_upvw = any_new_result1_upvr
						var10_upvw = i_5_upvr
						MainGui_upvr.GiftPlayer.Visible = true
						if var9_upvw then
							MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
							var9_upvw.Def.Id:upper()
						end
					end)
				end
			end
		else
			i_5_upvr = MainGui_upvr
			any_new_result1_upvr.UiParent = i_5_upvr.Store.Main.StoreGrid.ScrollingFrame
			any_new_result1_upvr.UI = ReplicatedStorage_upvr.Prefabs.UI.GamePassTemp:Clone()
			any_new_result1_upvr.UI.LayoutOrder = -v.LayoutOrder
			any_new_result1_upvr.UI.ProductName.Text = v.Id
			any_new_result1_upvr.UI.Description.Text = v.DisplayData.Description
			any_new_result1_upvr.UI.Buy.Amount.Text = v.Price[1]
			any_new_result1_upvr.UI.ImageLabel.Image = v.DisplayData.DisplayImage
			if not table.find(module_upvr.Passes, v.Id) then
				any_new_result1_upvr.UI.Buy.MouseButton1Down:Connect(function() -- Line 177
					--[[ Upvalues[3]:
						[1]: any_new_result1_upvr (readonly)
						[2]: any_GetController_result1_upvr (copied, readonly)
						[3]: MarketService_upvr (copied, readonly)
					]]
					local var69 = any_new_result1_upvr
					if any_GetController_result1_upvr.Processing then
					else
						any_GetController_result1_upvr.Processing = true
						local _, any_await_result2_4 = MarketService_upvr:PurchaseItem(var69.Id, 1):andThen():await()
						if any_await_result2_4 and var69.Def.ProductType == "GamePass" then
							var69:Bought()
						end
						any_GetController_result1_upvr.Processing = false
					end
				end)
			else
				any_new_result1_upvr.UI.Buy.Amount.Text = "Owned"
			end
			if v.Giftable then
				any_new_result1_upvr.UI.Gift.Visible = true
				any_new_result1_upvr.UI.Gift.MouseButton1Down:Connect(function() -- Line 186
					--[[ Upvalues[4]:
						[1]: var9_upvw (copied, read and write)
						[2]: any_new_result1_upvr (readonly)
						[3]: var10_upvw (copied, read and write)
						[4]: MainGui_upvr (copied, readonly)
					]]
					var9_upvw = any_new_result1_upvr
					var10_upvw = 1
					MainGui_upvr.GiftPlayer.Visible = true
					if var9_upvw then
						MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
						var9_upvw.Def.Id:upper()
					end
				end)
			end
		end
		module_upvr.StoreObjects[i] = any_new_result1_upvr
	end
	var49 = ""
	for _, v_6 in pairs(CoreUtil_upvr.StoreOrder) do
		if module_upvr.StoreObjects[v_6] then
			var49 = var49..'1'
			module_upvr.StoreObjects[v_6].UI.Name = var49
			module_upvr.StoreObjects[v_6].UI.Parent = module_upvr.StoreObjects[v_6].UiParent
			module_upvr.StoreObjects[v_6] = nil
		end
	end
	for _, v_7 in pairs(module_upvr.StoreObjects) do
		var49 = var49..'1'
		v_7.UI.Name = var49
		v_7.UI.Parent = v_7.UiParent
	end
	ResizeStoreCellsize_upvr()
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(ResizeStoreCellsize_upvr)
end
function module_upvr.ToggleStore(arg1, arg2) -- Line 236
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		if arg2 then
			workspace.Sound.UI.OpenStore:Play()
		end
		MainGui_upvr.Store.Visible = arg2
	end
end
local any_await_result1, any_await_result2_2 = MarketService_upvr:GetPasses(LocalPlayer):andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.Passes = any_await_result2_2
game:GetService("ContextActionService"):BindAction("ToggleStore", function(arg1, arg2) -- Line 246
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Store", not MainGui_upvr.Store.Visible)
	end
end, false, Enum.KeyCode.B)
MainGui_upvr.HUD.RightPanel.ShopButton.Button.MouseButton1Up:Connect(function() -- Line 250
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Store", not MainGui_upvr.Store.Visible)
end)
MainGui_upvr.Store.Main.Close.MouseButton1Up:Connect(function() -- Line 254
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Store", false)
end)
MainGui_upvr.GiftPlayer.Main.Gift.MouseButton1Up:Connect(function() -- Line 258
	--[[ Upvalues[5]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: var10_upvw (read and write)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: MarketService_upvr (readonly)
	]]
	local Text_upvr = MainGui_upvr.GiftPlayer.Main.Username.Text
	local var86_upvw
	pcall(function() -- Line 263
		--[[ Upvalues[2]:
			[1]: var86_upvw (read and write)
			[2]: Text_upvr (readonly)
		]]
		var86_upvw = game.Players:GetUserIdFromNameAsync(Text_upvr)
	end)
	if var86_upvw then
		if any_GetController_result1_upvr.Processing then
		else
			any_GetController_result1_upvr.Processing = true
			local _, _ = MarketService_upvr:GiftItem(var9_upvw.Id, var10_upvw, MainGui_upvr.GiftPlayer.Main.Username.Text):andThen():await()
			any_GetController_result1_upvr.Processing = false
		end
		var9_upvw = nil
		var10_upvw = 0
		MainGui_upvr.GiftPlayer.Visible = false
	else
		any_GetController_result1_upvr:WarningMessage(Text_upvr.." Is not a valid player")
	end
end)
MainGui_upvr.GiftPlayer.Main.Close.MouseButton1Up:Connect(function() -- Line 279
	--[[ Upvalues[3]:
		[1]: var9_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: MainGui_upvr (readonly)
	]]
	var9_upvw = nil
	var10_upvw = 0
	MainGui_upvr.GiftPlayer.Visible = false
end)
module_upvr:Initialise()
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StoreHandler.StoreObj
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:09
-- Luau version 6, Types version 3
-- Time taken: 0.000881 seconds

local _ = require(game:GetService("ReplicatedStorage").Packages.Knit)
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1) -- Line 18
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {
		Id = arg1.Id;
		UI = nil;
		UiParent = nil;
	}
	module.Def = arg1
	return setmetatable(module, module_2_upvr)
end
function module_2_upvr.Bought(arg1) -- Line 33
	if arg1.Def.Type == "Theme" then
		for i, _ in pairs(arg1.Def.Price) do
			arg1.UI.Options[i].Buy.Amount.Text = "Owned"
		end
	else
		arg1.UI.Buy.Amount.Text = "Owned"
	end
end
return module_2_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.SettingsHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:10
-- Luau version 6, Types version 3
-- Time taken: 0.005593 seconds

local RunService_upvr = game:GetService("RunService")
local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_3 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr_2 = Knit.GetController("SoundController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
function SnapSlider(arg1, arg2) -- Line 28
	if arg2 ~= 0 or not arg1 then
	end
	return math.floor(arg1 / arg2 + 0.5) * arg2
end
local TweenService_upvr = game:GetService("TweenService")
function MovePill(arg1, arg2) -- Line 33
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	local tbl = {}
	local var11
	if arg1 then
		var11 = 0
	else
		var11 = 1
	end
	tbl.AnchorPoint = Vector2.new(var11, 0.5)
	TweenService_upvr:Create(arg2, TweenInfo.new(0.1), tbl):Play()
end
function SetToggleBackground(arg1, arg2) -- Line 38
	if arg1 then
		arg2.BackgroundColor3 = Color3.fromRGB(68, 255, 0)
	else
		arg2.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	end
end
function FunctionalisePillToggle(arg1, arg2) -- Line 47
	local BindableEvent_upvr = Instance.new("BindableEvent")
	MovePill(arg2, arg1.Pill)
	SetToggleBackground(arg2, arg1)
	arg1.Button.MouseButton1Down:Connect(function() -- Line 56
		--[[ Upvalues[3]:
			[1]: arg2 (read and write)
			[2]: BindableEvent_upvr (readonly)
			[3]: arg1 (readonly)
		]]
		arg2 = not arg2
		BindableEvent_upvr:Fire(arg2)
		MovePill(arg2, arg1.Pill)
		SetToggleBackground(arg2, arg1)
	end)
	return BindableEvent_upvr
end
local var14_upvw = 1
local tbl_2_upvr = {}
local UserInputService_upvr = game:GetService("UserInputService")
function FunctionaliseSlider(arg1) -- Line 68
	--[[ Upvalues[4]:
		[1]: var14_upvw (read and write)
		[2]: tbl_2_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
	]]
	local var17_upvr = var14_upvw
	table.insert(tbl_2_upvr, var14_upvw, false)
	var14_upvw += 1
	local BindableEvent_upvr_2 = Instance.new("BindableEvent")
	local var20_upvw = 0
	arg1.Button.MouseButton1Down:Connect(function() -- Line 77
		--[[ Upvalues[7]:
			[1]: tbl_2_upvr (copied, readonly)
			[2]: var17_upvr (readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: UserInputService_upvr (copied, readonly)
			[5]: arg1 (readonly)
			[6]: var20_upvw (read and write)
			[7]: BindableEvent_upvr_2 (readonly)
		]]
		tbl_2_upvr[var17_upvr] = true
		while tbl_2_upvr[var17_upvr] and RunService_upvr.RenderStepped:Wait() do
			local Position = arg1.Button.Position
			local SnapSlider_result1 = SnapSlider((UserInputService_upvr:GetMouseLocation().X - arg1.AbsolutePosition.X) / arg1.AbsoluteSize.X, 0.01)
			local clamped = math.clamp(SnapSlider_result1, 0, 1)
			if clamped ~= var20_upvw then
				BindableEvent_upvr_2:Fire(clamped)
			end
			var20_upvw = math.clamp(SnapSlider_result1, 0, 1)
			arg1.Button.Position = UDim2.new(var20_upvw, 0, Position.Y.Scale, Position.Y.Offset)
		end
		BindableEvent_upvr_2:Fire(var20_upvw, true)
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_2) -- Line 97
		--[[ Upvalues[2]:
			[1]: tbl_2_upvr (copied, readonly)
			[2]: var17_upvr (readonly)
		]]
		if arg1_2.UserInputType == Enum.UserInputType.MouseButton1 then
			tbl_2_upvr[var17_upvr] = false
		end
	end)
	UserInputService_upvr.TouchEnded:Connect(function() -- Line 103
		--[[ Upvalues[2]:
			[1]: tbl_2_upvr (copied, readonly)
			[2]: var17_upvr (readonly)
		]]
		tbl_2_upvr[var17_upvr] = false
	end)
	return BindableEvent_upvr_2
end
function module.ToggleSettings(arg1, arg2) -- Line 111
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		MainGui_upvr.Settings.Visible = arg2
	end
end
local Players_upvr = game:GetService("Players")
local function toggleOtherPlayerTitles_upvr(arg1) -- Line 116, Named "toggleOtherPlayerTitles"
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v in pairs(Players_upvr:GetPlayers()) do
		if not v.Character then return end
		local Head_2 = v.Character:FindFirstChild("Head")
		if Head_2 then
			local PlayerTitleGui = Head_2:FindFirstChild("PlayerTitleGui")
			local var46
			if PlayerTitleGui then
				PlayerTitleGui.Enabled = arg1
				if arg1 then
					var46 = 0
				else
					var46 = 100
				end
				v.NameDisplayDistance = var46
			end
		end
	end
end
FunctionaliseSlider(MainGui_upvr.Settings.Main.Titles.SFX.Slider).Event:Connect(function(arg1, arg2) -- Line 135
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: PlayerService_upvr (readonly)
	]]
	any_GetController_result1_upvr_2:AdjustVolume("SFX", arg1 * 4)
	if arg2 then
		PlayerService_upvr:UpdateAudio("SFX", arg1)
	end
end)
FunctionaliseSlider(MainGui_upvr.Settings.Main.Titles.Music.Slider).Event:Connect(function(arg1, arg2) -- Line 141
	--[[ Upvalues[2]:
		[1]: PlayerService_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
	]]
	if arg2 then
		PlayerService_upvr:UpdateAudio("Music", arg1)
	end
	any_GetController_result1_upvr_2:AdjustVolume("Music", arg1 * 4)
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.AutoClimb.Toggle, false).Event:Connect(function(arg1) -- Line 147
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.PlayerTitles.Toggle, any_GetController_result1_upvr_3.Settings.General.PlayerTitles).Event:Connect(function(arg1) -- Line 152
	--[[ Upvalues[2]:
		[1]: PlayerService_upvr (readonly)
		[2]: toggleOtherPlayerTitles_upvr (readonly)
	]]
	PlayerService_upvr:TogglePlayerTitle(arg1)
	toggleOtherPlayerTitles_upvr(arg1)
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.ChatNotifications.Toggle, any_GetController_result1_upvr_3.Settings.General.ChatNotifications).Event:Connect(function(arg1) -- Line 158
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_3 (readonly)
		[2]: PlayerService_upvr (readonly)
	]]
	any_GetController_result1_upvr_3.Settings.General.ChatNotifications = arg1
	PlayerService_upvr:ToggleChatNotifcations(arg1)
end)
coroutine.wrap(function() -- Line 165
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: MainGui_upvr (readonly)
	]]
	repeat
		RunService_upvr.RenderStepped:Wait()
	until not any_GetController_result1_upvr_3.Settings or any_GetController_result1_upvr_2.Initialised == true
	MainGui_upvr.Settings.Main.Titles.Music.Slider.Button.Position = UDim2.fromScale(any_GetController_result1_upvr_3.Settings.Audio.Music, 0.5)
	MainGui_upvr.Settings.Main.Titles.SFX.Slider.Button.Position = UDim2.fromScale(any_GetController_result1_upvr_3.Settings.Audio.SFX, 0.5)
	any_GetController_result1_upvr_2:AdjustVolume("SFX", any_GetController_result1_upvr_3.Settings.Audio.SFX * 4)
	any_GetController_result1_upvr_2:AdjustVolume("Music", any_GetController_result1_upvr_3.Settings.Audio.Music * 4)
end)()
MainGui_upvr.HUD.RightPanel.Settings.ImageButton.MouseButton1Up:Connect(function() -- Line 175
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Settings", not MainGui_upvr.Crafting.Visible)
end)
MainGui_upvr.Settings.Close.MouseButton1Up:Connect(function() -- Line 179
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Settings", false)
end)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StatsHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:11
-- Luau version 6, Types version 3
-- Time taken: 0.002017 seconds

local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local tbl_upvr = {}
local var9_upvw = "Mastery"
function ChangePage(arg1) -- Line 25
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: MainGui_upvr (readonly)
	]]
	var9_upvw = arg1
	for _, v in pairs(MainGui_upvr.Stats.Pages:GetChildren()) do
		local var17
		if v.Name ~= arg1 then
			var17 = false
		else
			var17 = true
		end
		v.Visible = var17
	end
end
function UpdatePages() -- Line 32
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	tbl_upvr.MasteryHandler:UpdateMasteries()
end
function module.ToggleStats(arg1, arg2) -- Line 36
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		if arg2 then
			UpdatePages()
		end
		MainGui_upvr.Stats.Visible = arg2
	end
end
MainGui_upvr.HUD.RightPanel.StatsButton.Button.MouseButton1Up:Connect(function() -- Line 43
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Stats", not MainGui_upvr.Stats.Visible)
end)
game:GetService("ContextActionService"):BindAction("Toggle Stats", function(arg1, arg2) -- Line 46
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Stats", not MainGui_upvr.Stats.Visible)
	end
end, false, Enum.KeyCode.J)
MainGui_upvr.Stats.Titles.Close.MouseButton1Up:Connect(function() -- Line 50
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Stats", false)
end)
for _, v_2_upvr in pairs(MainGui_upvr.Stats.Navigation:GetChildren()) do
	if v_2_upvr:IsA("TextButton") then
		v_2_upvr.MouseButton1Up:Connect(function() -- Line 56
			--[[ Upvalues[2]:
				[1]: v_2_upvr (readonly)
				[2]: MainGui_upvr (readonly)
			]]
			ChangePage(v_2_upvr.Name)
			MainGui_upvr.Stats.Titles.Mastery.Text = string.upper(v_2_upvr.Name)
		end)
	end
end
tbl_upvr.MasteryHandler = require(script.MasteryHandler)
tbl_upvr.BadgeHandler = require(script.BadgeHandler)
tbl_upvr.StatisticsHandler = require(script.StatisticsHandler)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StatsHandler.MasteryHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:12
-- Luau version 6, Types version 3
-- Time taken: 0.013206 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module_upvr = {}
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local any_GetLevelReqDefs_result1_upvr = CoreUtil_upvr:GetLevelReqDefs()
local Mastery = MainGui.Stats.Pages.Mastery
local CategoriesTabs_upvr = Mastery.CategoriesTabs
local LevelSteps_upvr = Mastery.LevelSteps
local SubCategoriesTabs_upvr = Mastery.SubCategoriesTabs
local SubCategoriesNavigation_upvr = Mastery.SubCategoriesNavigation
local var15_upvw = 1
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(195, 244, 241)
local Color3_fromRGB_result1_upvr_3 = Color3.fromRGB(11, 244, 84)
local Color3_fromRGB_result1_upvr = Color3.fromRGB(8, 190, 54)
local Color3_fromRGB_result1_upvr_4 = Color3.fromRGB(100, 100, 100)
local var20_upvw = "Combat"
local var21_upvw = "Overall"
local tbl_upvr = {}
local MasteryInfo_upvr = Mastery.MasteryInfo
local function displayLevelStepsInfo_upvr(arg1, arg2) -- Line 60, Named "displayLevelStepsInfo"
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: MasteryInfo_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var24 = any_GetController_result1_upvr_2.Masteries[arg1][arg2] or 0
	local var25
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var25 = CoreUtil_upvr:MasteryLevelFromXP(var24)
		return var25
	end
	if arg2 ~= "Overall" or not INLINED() then
		var25 = CoreUtil_upvr:SubMasteryLevelFromXP(var24)
	end
	if arg2 ~= "Overall" or not CoreUtil_upvr.MasteryFromXP then
		local SubMasteryFromXP = CoreUtil_upvr.SubMasteryFromXP
	end
	MasteryInfo_upvr.Level.Text = "LVL "..tostring(var25)
	MasteryInfo_upvr.NextLevel.Text = "LVL "..tostring(var25 + 1)
	if not SubMasteryFromXP[var25 + 1] then
		MasteryInfo_upvr.NextLevel.Text = "MAX LVL"
	end
	if not SubMasteryFromXP[var25] then
	elseif not SubMasteryFromXP[var25 + 1] then
	elseif not (var24 / SubMasteryFromXP[var25 + 1]) then
	end
	MasteryInfo_upvr.XPBarBG.XPBar.Size = UDim2.fromScale(math.clamp(0, 0, 1), 1)
	local var27
	if not var27 and SubMasteryFromXP[var25] then
		var27 = SubMasteryFromXP[var25]
	elseif not SubMasteryFromXP[var25] and 0 < var25 then
		var27 = tostring(var24)
	end
	MasteryInfo_upvr.XPBarBG.OverallXP.Text = tostring(math.ceil(var24))..'/'..var27
end
local XPBar_upvr = MainGui.HUD.XPBar
local var29_upvw
local var30_upvw = false
function module_upvr.UpdateMasteries(arg1) -- Line 85
	--[[ Upvalues[12]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: XPBar_upvr (readonly)
		[4]: var29_upvw (read and write)
		[5]: PlayerService_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
		[7]: any_GetLevelReqDefs_result1_upvr (readonly)
		[8]: LevelSteps_upvr (readonly)
		[9]: var30_upvw (read and write)
		[10]: displayLevelStepsInfo_upvr (readonly)
		[11]: var20_upvw (read and write)
		[12]: var21_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 83 start (CF ANALYSIS FAILED)
	local any_PlayerLevelFromXP_result1, _ = CoreUtil_upvr:PlayerLevelFromXP(any_GetController_result1_upvr_2.Masteries.Overall)
	local var44
	for i, v in pairs(CoreUtil_upvr.PlayerFromXP) do
		if i <= any_PlayerLevelFromXP_result1 and var44 < v then
			var44 = v
		end
	end
	if not CoreUtil_upvr.PlayerFromXP[any_PlayerLevelFromXP_result1 + 1] then
	else
	end
	XPBar_upvr.Progress.Size = UDim2.fromScale((any_GetController_result1_upvr_2.Masteries.Overall - var44) / (CoreUtil_upvr.PlayerFromXP[any_PlayerLevelFromXP_result1 + 1] - var44), 0.5)
	XPBar_upvr.Level.Text = tostring(any_PlayerLevelFromXP_result1)
	if var29_upvw and var29_upvw < any_PlayerLevelFromXP_result1 then
		workspace.Sound.UI.LevelUp:Play()
		local tbl_upvr_2 = {
			LevelEarned = any_PlayerLevelFromXP_result1;
		}
		PlayerService_upvr:LevelUpFX()
		coroutine.wrap(function() -- Line 110
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_upvr (copied, readonly)
				[2]: tbl_upvr_2 (readonly)
			]]
			any_GetController_result1_upvr:Notification("PlayerLevel", tbl_upvr_2)
		end)()
	end
	var29_upvw = any_PlayerLevelFromXP_result1
	tbl_upvr_2 = pairs(any_GetLevelReqDefs_result1_upvr)
	local pairs_result1_2, pairs_result2, pairs_result3_7 = pairs(any_GetLevelReqDefs_result1_upvr)
	-- KONSTANTERROR: [0] 1. Error Block 83 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [375] 264. Error Block 55 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [375] 264. Error Block 55 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [101] 74. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [101] 74. Error Block 14 end (CF ANALYSIS FAILED)
end
local function displayLevelSteps_upvr(arg1, arg2) -- Line 194, Named "displayLevelSteps"
	--[[ Upvalues[1]:
		[1]: LevelSteps_upvr (readonly)
	]]
	for _, v_2 in pairs(LevelSteps_upvr:GetChildren()) do
		if v_2:IsA("Frame") then
			local Category = v_2:GetAttribute("Category")
			local SubCategory = v_2:GetAttribute("SubCategory")
			if Category and SubCategory and Category == arg1 and SubCategory == arg2 then
				v_2.Visible = true
			else
				v_2.Visible = false
			end
		end
	end
end
local function setSubCategoryTabHighlightsColor_upvr(arg1) -- Line 210, Named "setSubCategoryTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr_3 (readonly)
	]]
	for _, v_3 in pairs(SubCategoriesTabs_upvr:GetChildren()) do
		if v_3:IsA("GuiButton") then
			v_3.UIStroke.Color = Color3_fromRGB_result1_upvr_2
		end
	end
	arg1.UIStroke.Color = Color3_fromRGB_result1_upvr_3
end
local function setCategoryTabHighlightsColor_upvr(arg1) -- Line 220, Named "setCategoryTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: CategoriesTabs_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr_3 (readonly)
	]]
	for _, v_4 in pairs(CategoriesTabs_upvr:GetChildren()) do
		if v_4:IsA("GuiButton") then
			v_4.UIStroke.Color = Color3_fromRGB_result1_upvr_2
		end
	end
	arg1.UIStroke.Color = Color3_fromRGB_result1_upvr_3
end
local function handleSubCategoriesPages_upvr(arg1, arg2) -- Line 229, Named "handleSubCategoriesPages"
	--[[ Upvalues[6]:
		[1]: tbl_upvr (readonly)
		[2]: setSubCategoryTabHighlightsColor_upvr (readonly)
		[3]: var15_upvw (read and write)
		[4]: SubCategoriesNavigation_upvr (readonly)
		[5]: Color3_fromRGB_result1_upvr_4 (readonly)
		[6]: Color3_fromRGB_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 30 start (CF ANALYSIS FAILED)
	local var85
	for i_5 = 1, #tbl_upvr do
		if tbl_upvr[i_5]:IsA("GuiButton") and tbl_upvr[i_5]:GetAttribute("Category") == arg2 then
			var85 += 1
			table.insert({}, {
				button = tbl_upvr[i_5];
				pageIndex = math.ceil(var85 / 10);
			})
			if arg1 == 1 and tbl_upvr[i_5]:GetAttribute("SubCategory") == "Overall" then
				setSubCategoryTabHighlightsColor_upvr(tbl_upvr[i_5])
			end
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 30 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 49. Error Block 35 start (CF ANALYSIS FAILED)
	var15_upvw = math.ceil(var85 / 10)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	for _, v_5 in pairs({}) do
		if v_5.pageIndex == arg1 then
			v_5.button.Visible = true
		else
			v_5.button.Visible = false
		end
	end
	-- KONSTANTERROR: [61] 49. Error Block 35 end (CF ANALYSIS FAILED)
end
function FunctionaliseCategoriesTabs() -- Line 283
	--[[ Upvalues[7]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: CategoriesTabs_upvr (readonly)
		[3]: setCategoryTabHighlightsColor_upvr (readonly)
		[4]: var20_upvw (read and write)
		[5]: displayLevelSteps_upvr (readonly)
		[6]: displayLevelStepsInfo_upvr (readonly)
		[7]: handleSubCategoriesPages_upvr (readonly)
	]]
	local function displaySubCategoriesTabs_upvr(arg1) -- Line 284, Named "displaySubCategoriesTabs"
		--[[ Upvalues[1]:
			[1]: SubCategoriesTabs_upvr (copied, readonly)
		]]
		for _, v_6 in pairs(SubCategoriesTabs_upvr:GetChildren()) do
			if v_6:IsA("GuiButton") then
				local Category_2 = v_6:GetAttribute("Category")
				if Category_2 and Category_2 == arg1 then
					v_6.Visible = true
				else
					v_6.Visible = false
				end
			end
		end
	end
	for _, v_7_upvr in pairs(CategoriesTabs_upvr:GetChildren()) do
		local Category_3_upvr = v_7_upvr:GetAttribute("Category")
		if v_7_upvr:GetAttribute("Category") == "Combat" then
			setCategoryTabHighlightsColor_upvr(v_7_upvr)
		end
		if v_7_upvr:IsA("GuiButton") and Category_3_upvr then
			v_7_upvr.MouseButton1Click:Connect(function() -- Line 304
				--[[ Upvalues[8]:
					[1]: var20_upvw (copied, read and write)
					[2]: Category_3_upvr (readonly)
					[3]: displaySubCategoriesTabs_upvr (readonly)
					[4]: displayLevelSteps_upvr (copied, readonly)
					[5]: displayLevelStepsInfo_upvr (copied, readonly)
					[6]: setCategoryTabHighlightsColor_upvr (copied, readonly)
					[7]: v_7_upvr (readonly)
					[8]: handleSubCategoriesPages_upvr (copied, readonly)
				]]
				var20_upvw = Category_3_upvr
				displaySubCategoriesTabs_upvr(Category_3_upvr)
				displayLevelSteps_upvr(Category_3_upvr, "Overall")
				displayLevelStepsInfo_upvr(Category_3_upvr, "Overall")
				setCategoryTabHighlightsColor_upvr(v_7_upvr)
				handleSubCategoriesPages_upvr(1, Category_3_upvr)
			end)
		end
	end
	displaySubCategoriesTabs_upvr("Combat")
end
function FunctionaliseSubCategoriesTabs() -- Line 319
	--[[ Upvalues[5]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: setSubCategoryTabHighlightsColor_upvr (readonly)
		[3]: var21_upvw (read and write)
		[4]: displayLevelSteps_upvr (readonly)
		[5]: displayLevelStepsInfo_upvr (readonly)
	]]
	for _, v_8_upvr in pairs(SubCategoriesTabs_upvr:GetChildren()) do
		local Category_4_upvr = v_8_upvr:GetAttribute("Category")
		local SubCategory_upvr = v_8_upvr:GetAttribute("SubCategory")
		if SubCategory_upvr == "Overall" and Category_4_upvr == "Combat" then
			setSubCategoryTabHighlightsColor_upvr(v_8_upvr)
		end
		if v_8_upvr:IsA("GuiButton") and Category_4_upvr and SubCategory_upvr then
			v_8_upvr.MouseButton1Click:Connect(function() -- Line 327
				--[[ Upvalues[7]:
					[1]: var21_upvw (copied, read and write)
					[2]: SubCategory_upvr (readonly)
					[3]: displayLevelSteps_upvr (copied, readonly)
					[4]: Category_4_upvr (readonly)
					[5]: displayLevelStepsInfo_upvr (copied, readonly)
					[6]: setSubCategoryTabHighlightsColor_upvr (copied, readonly)
					[7]: v_8_upvr (readonly)
				]]
				var21_upvw = SubCategory_upvr
				displayLevelSteps_upvr(Category_4_upvr, SubCategory_upvr)
				displayLevelStepsInfo_upvr(Category_4_upvr, SubCategory_upvr)
				setSubCategoryTabHighlightsColor_upvr(v_8_upvr)
			end)
		end
	end
	displayLevelSteps_upvr("Combat", "Overall")
	displayLevelStepsInfo_upvr("Combat", "Overall")
end
function FunctionaliseSubCategoriesNavigation() -- Line 341
	--[[ Upvalues[6]:
		[1]: SubCategoriesNavigation_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_4 (readonly)
		[3]: Color3_fromRGB_result1_upvr (readonly)
		[4]: handleSubCategoriesPages_upvr (readonly)
		[5]: var20_upvw (read and write)
		[6]: var15_upvw (read and write)
	]]
	local var111_upvw = 1
	SubCategoriesNavigation_upvr.Left.MouseButton1Click:Connect(function() -- Line 344
		--[[ Upvalues[6]:
			[1]: var111_upvw (read and write)
			[2]: SubCategoriesNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_4 (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr (copied, readonly)
			[5]: handleSubCategoriesPages_upvr (copied, readonly)
			[6]: var20_upvw (copied, read and write)
		]]
		var111_upvw -= 1
		if var111_upvw == 1 then
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
			SubCategoriesNavigation_upvr.Left.Interactable = false
		elseif var111_upvw < 1 then
			var111_upvw = 1
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
			SubCategoriesNavigation_upvr.Left.Interactable = false
		else
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr
			SubCategoriesNavigation_upvr.Left.Interactable = true
		end
		handleSubCategoriesPages_upvr(var111_upvw, var20_upvw)
	end)
	SubCategoriesNavigation_upvr.Right.MouseButton1Click:Connect(function() -- Line 360
		--[[ Upvalues[6]:
			[1]: var111_upvw (read and write)
			[2]: var15_upvw (copied, read and write)
			[3]: SubCategoriesNavigation_upvr (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr_4 (copied, readonly)
			[5]: handleSubCategoriesPages_upvr (copied, readonly)
			[6]: var20_upvw (copied, read and write)
		]]
		var111_upvw += 1
		if var15_upvw < var111_upvw then
			var111_upvw = var15_upvw
			SubCategoriesNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
			SubCategoriesNavigation_upvr.Right.Interactable = false
		end
		handleSubCategoriesPages_upvr(var111_upvw, var20_upvw)
	end)
	SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
	SubCategoriesNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
	SubCategoriesNavigation_upvr.Left.Interactable = false
	SubCategoriesNavigation_upvr.Right.Interactable = false
end
function InitialiseMasteries() -- Line 376
	--[[ Upvalues[11]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: PlayerService_upvr (readonly)
		[3]: any_GetLevelReqDefs_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: CategoriesTabs_upvr (readonly)
		[6]: CoreUtil_upvr (readonly)
		[7]: tbl_upvr (readonly)
		[8]: SubCategoriesTabs_upvr (readonly)
		[9]: LevelSteps_upvr (readonly)
		[10]: any_GetController_result1_upvr (readonly)
		[11]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if not any_GetController_result1_upvr_2.Masteries then
		local any_await_result1, any_await_result2 = PlayerService_upvr:GetMasteries():andThen():await()
		_ = any_await_result1 -- Setting global
		any_GetController_result1_upvr_2.Masteries = any_await_result2
	end
	for i_10, v_9 in pairs(any_GetLevelReqDefs_result1_upvr) do
		local clone_3 = ReplicatedStorage_upvr.Prefabs.UI.CategoryTabTemplate:Clone()
		clone_3.Text = i_10
		clone_3:SetAttribute("Category", i_10)
		clone_3.Parent = CategoriesTabs_upvr
		for i_11, v_10 in pairs(v_9) do
			local clone = ReplicatedStorage_upvr.Prefabs.UI.SubCategoryTabTemplate:Clone()
			clone.Text = i_11
			clone.Visible = false
			local var156 = CoreUtil_upvr.MasteryLayoutOrder[i_10][i_11]
			if var156 then
				clone.LayoutOrder = var156
			end
			table.insert(tbl_upvr, clone)
			clone:SetAttribute("Category", i_10)
			clone:SetAttribute("SubCategory", i_11)
			clone.Parent = SubCategoriesTabs_upvr
			for i_12, v_11 in pairs(v_10) do
				table.insert({}, {
					LevelReq = i_12;
					Rewards = v_11;
				})
				local var163
			end
			table.sort(var163, function(arg1, arg2) -- Line 414
				local var165
				if arg1.LevelReq >= arg2.LevelReq then
					var165 = false
				else
					var165 = true
				end
				return var165
			end)
			for _, v_12 in pairs(var163) do
				local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.LevelStep:Clone()
				clone_2.Name = tostring(1)..'-'..i_10..'-'..i_11
				clone_2.Level.Text = "Level "..tostring(v_12.LevelReq)
				clone_2.XP.Text = tostring(any_GetController_result1_upvr_2.Masteries[i_10][i_11] or 0)..'/'..CoreUtil_upvr.PlayerFromXP[v_12.LevelReq]
				clone_2:SetAttribute("Category", i_10)
				clone_2:SetAttribute("SubCategory", i_11)
				clone_2.Parent = LevelSteps_upvr
				if v_12.Rewards.SetItems then
					any_GetController_result1_upvr:UpdateItemDisplay(clone_2.Item, CoreUtil_upvr:GetDefinitionFromId(v_12.Rewards.SetItems[1].ItemId))
					clone_2.ItemName.Text = v_12.Rewards.SetItems[1].ItemId
				elseif v_12.Rewards.UnlockedItems then
					any_GetController_result1_upvr:UpdateItemDisplay(clone_2.Item, CoreUtil_upvr:GetDefinitionFromId(v_12.Rewards.UnlockedItems[1].ItemId))
					clone_2.ItemName.Text = v_12.Rewards.UnlockedItems[1].ItemId
				end
			end
		end
	end
	table.sort(tbl_upvr, function(arg1, arg2) -- Line 442
		local var171
		if arg1.LayoutOrder >= arg2.LayoutOrder then
			var171 = false
		else
			var171 = true
		end
		return var171
	end)
	FunctionaliseCategoriesTabs()
	FunctionaliseSubCategoriesTabs()
	FunctionaliseSubCategoriesNavigation()
	module_upvr:UpdateMasteries()
end
PlayerService_upvr.UpdateMasteries:Connect(function(arg1) -- Line 452
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: module_upvr (readonly)
	]]
	any_GetController_result1_upvr_2.Masteries = arg1
	module_upvr:UpdateMasteries()
end)
InitialiseMasteries()
var30_upvw = true
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StatsHandler.BadgeHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:13
-- Luau version 6, Types version 3
-- Time taken: 0.004442 seconds

local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local PlayerService_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetService("PlayerService")
local module_upvr = {
	BadgeObjects = {};
	BadgesInitialised = false;
}
local Catagorys_upvr = Players_upvr.LocalPlayer.PlayerGui:WaitForChild("MainGui"):WaitForChild("Stats"):WaitForChild("Pages"):WaitForChild("Achievements"):WaitForChild("Catagorys")
local function _(arg1, arg2) -- Line 40, Named "SetBadgeVisibility"
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var6 = module_upvr.BadgeObjects[arg1]
	if not var6 then
	else
		var6.UI.EquipButton.Visible = arg2
		if arg2 then
			var6.UI.BadgeImage.ImageTransparency = 0
			var6.UI.BadgeTitle.TextTransparency = 0
			var6.UI.BadgeDesc.TextTransparency = 0
			return
		end
		var6.UI.BadgeImage.ImageTransparency = 0.8
		var6.UI.BadgeTitle.TextTransparency = 0.8
		var6.UI.BadgeDesc.TextTransparency = 0.8
	end
end
local function ResizeBadges_upvr() -- Line 62, Named "ResizeBadges"
	--[[ Upvalues[1]:
		[1]: Catagorys_upvr (readonly)
	]]
	Catagorys_upvr.CanvasSize = UDim2.fromOffset(0, Catagorys_upvr.UIGridLayout.AbsoluteContentSize.Y + 15)
	task.wait(1)
end
function module_upvr.UpdateEarnedBadge(arg1, arg2) -- Line 70
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	repeat
		task.wait()
	until module_upvr.BadgesInitialised
	local var7 = module_upvr.BadgeObjects[arg2]
	if not var7 then
	else
		var7[arg2].HasBadge = true
		local var8 = module_upvr.BadgeObjects[arg2]
		if not var8 then return end
		var8.UI.EquipButton.Visible = true
		var8.UI.BadgeImage.ImageTransparency = 0
		var8.UI.BadgeTitle.TextTransparency = 0
		var8.UI.BadgeDesc.TextTransparency = 0
	end
end
local BadgeService_upvr = game:GetService("BadgeService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function InitialiseBadges() -- Line 85
	--[[ Upvalues[8]:
		[1]: BadgeService_upvr (readonly)
		[2]: Players_upvr (readonly)
		[3]: PlayerService_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: Catagorys_upvr (readonly)
		[7]: module_upvr (readonly)
		[8]: ResizeBadges_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local function GetBadgeData_upvr(arg1) -- Line 87, Named "GetBadgeData"
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: GetBadgeData_upvr (readonly)
		]]
		local pcall_result1_2, pcall_result2 = pcall(function() -- Line 88
			--[[ Upvalues[2]:
				[1]: BadgeService_upvr (copied, readonly)
				[2]: arg1 (readonly)
			]]
			return BadgeService_upvr:GetBadgeInfoAsync(arg1)
		end)
		if not pcall_result1_2 or not pcall_result2 then
			task.wait(1)
			return GetBadgeData_upvr(arg1)
		end
		return pcall_result2
	end
	local function GetOwnedBadges_upvr(arg1) -- Line 99, Named "GetOwnedBadges"
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: Players_upvr (copied, readonly)
		]]
		local module_upvr_2 = {}
		local tbl_upvr_2 = {}
		local tbl_upvr = {}
		local function checkBadges_upvr(arg1_2) -- Line 106, Named "checkBadges"
			--[[ Upvalues[5]:
				[1]: tbl_upvr (readonly)
				[2]: BadgeService_upvr (copied, readonly)
				[3]: Players_upvr (copied, readonly)
				[4]: tbl_upvr_2 (readonly)
				[5]: module_upvr_2 (readonly)
			]]
			for i = 1, #arg1_2, 10 do
				table.clear(tbl_upvr)
				table.move(arg1_2, i, i + 10, #tbl_upvr, tbl_upvr)
				local pcall_result1, pcall_result2_2 = pcall(function() -- Line 111
					--[[ Upvalues[3]:
						[1]: BadgeService_upvr (copied, readonly)
						[2]: Players_upvr (copied, readonly)
						[3]: tbl_upvr (copied, readonly)
					]]
					return BadgeService_upvr:CheckUserBadgesAsync(Players_upvr.LocalPlayer.UserId, tbl_upvr)
				end)
				if not pcall_result1 then
					warn("Error while checking if player", Players_upvr.LocalPlayer.Name, "has badges:", pcall_result2_2)
					for _, v in pairs(tbl_upvr) do
						table.insert(tbl_upvr_2, v)
					end
				end
				if pcall_result2_2 and typeof(pcall_result2_2) ~= "string" then
					for _, v_2 in pairs(pcall_result2_2) do
						table.insert(module_upvr_2, v_2)
					end
				end
			end
		end
		checkBadges_upvr(arg1)
		if 0 < #tbl_upvr_2 then
			print("Retrying", #tbl_upvr_2, "badges")
			task.delay(60, function() -- Line 134
				--[[ Upvalues[3]:
					[1]: checkBadges_upvr (readonly)
					[2]: tbl_upvr_2 (readonly)
					[3]: module_upvr_2 (readonly)
				]]
				checkBadges_upvr(tbl_upvr_2)
				return module_upvr_2
			end)
		else
			return module_upvr_2
		end
	end
	local _, any_await_result2 = PlayerService_upvr:GetEquippedAchievement(Players_upvr.LocalPlayer):andThen():await()
	local var34_upvw
	task.spawn(function() -- Line 146
		--[[ Upvalues[3]:
			[1]: var34_upvw (read and write)
			[2]: GetOwnedBadges_upvr (readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		var34_upvw = GetOwnedBadges_upvr(CoreUtil_upvr.Badges)
	end)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(CoreUtil_upvr.Badges)
	local var39
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [161] 113. Error Block 25 start (CF ANALYSIS FAILED)
	var39.UI.BadgeImage.ImageTransparency = 0.8
	var39.UI.BadgeTitle.TextTransparency = 0.8
	var39.UI.BadgeDesc.TextTransparency = 0.8
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [182.9]
	if any_await_result2 == nil then
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [184.12]
		var39 = nil.UI.EquipButton
		var39 = "Equipped"
		var39.EquipLabel.Text = var39
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var39 = nil.UI.EquipButton
		var39 = "Equip"
		var39.EquipLabel.Text = var39
	end
	local function resetButtons_upvr() -- Line 185, Named "resetButtons"
		--[[ Upvalues[1]:
			[1]: module_upvr (copied, readonly)
		]]
		for _, v_3 in pairs(module_upvr.BadgeObjects) do
			v_3.UI.EquipButton.EquipLabel.Text = "Equip"
			if v_3.HasBadge then
				v_3.UI.EquipButton.Visible = true
			else
				v_3.UI.EquipButton.Visible = false
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	var39 = nil.UI.EquipButton.MouseButton1Click
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [211.10]
	local var46_upvr
	local var47_upvr
	local var48_upvr
	var39 = var39:Connect
	var39(function() -- Line 196
		--[[ Upvalues[5]:
			[1]: PlayerService_upvr (copied, readonly)
			[2]: var46_upvr (readonly)
			[3]: var47_upvr (readonly)
			[4]: resetButtons_upvr (readonly)
			[5]: var48_upvr (readonly)
		]]
		PlayerService_upvr:EquipAchievement(var46_upvr, var47_upvr)
		resetButtons_upvr()
		var48_upvr.UI.EquipButton.EquipLabel.Text = "Equipped"
	end)
	-- KONSTANTERROR: [161] 113. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [34] 28. Error Block 35 start (CF ANALYSIS FAILED)
	if var34_upvw then
		if var48_upvr ~= nil then
			-- KONSTANTWARNING: GOTO [59] #48
		end
	else
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if not nil.UI.EquipButton or not var39 then
	end
	if not var39 then
		-- KONSTANTWARNING: GOTO [182] #125
	end
	-- KONSTANTERROR: [34] 28. Error Block 35 end (CF ANALYSIS FAILED)
end
PlayerService_upvr.BadgeEarned:Connect(function(arg1) -- Line 216
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:UpdateEarnedBadge(arg1)
end)
coroutine.wrap(InitialiseBadges)()
module_upvr.BadgesInitialised = true
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.StatsHandler.StatisticsHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:14
-- Luau version 6, Types version 3
-- Time taken: 0.001727 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TaskService = require(ReplicatedStorage_upvr.Packages.Knit).GetService("TaskService")
local MainGui_upvr = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
function InitialiseStatistics(arg1) -- Line 23
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local ScrollingFrame = MainGui_upvr.Stats.Pages.PlayerStats.ScrollingFrame
	for _, v in pairs(ScrollingFrame:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end
	for i_2, v_2 in pairs(arg1) do
		local clone = ReplicatedStorage_upvr.Prefabs.UI.StatsPrefabs.Category:Clone()
		clone.Title.Text = i_2
		clone.Parent = ScrollingFrame
		for i_3, v_3 in pairs(v_2) do
			local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.StatsPrefabs.Stat:Clone()
			clone_2.Stat.Text = i_3.." : "..tostring(v_3)
			clone_2.Parent = ScrollingFrame
		end
	end
end
TaskService.StatsUpdated:Connect(function(arg1) -- Line 52
	InitialiseStatistics(arg1)
end)
local any_await_result1, any_await_result2 = TaskService:GetStats():andThen():await()
if any_await_result1 then
	InitialiseStatistics(any_await_result2)
end
return {}

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.TaskHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:15
-- Luau version 6, Types version 3
-- Time taken: 0.002338 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local module_upvr = {
	TaskSlotObjects = {};
}
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage.CommonModules.CoreUtil):RequireDefinitions()
local _ = {
	Empty = "rbxassetid://17714797185";
	Check = "rbxassetid://17714796919";
	ExclemationMark = "rbxassetid://10100312307";
}
local TaskSlotObject_upvr = require(script.TaskSlotObject)
function NewTask(arg1) -- Line 27
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TaskSlotObject_upvr (readonly)
	]]
	if module_upvr.TaskSlotObjects[arg1.Index] or arg1.Def.Hidden == true then
	else
		local any_new_result1 = TaskSlotObject_upvr.new(arg1)
		module_upvr.TaskSlotObjects[arg1.Index] = any_new_result1
		any_new_result1:Initialise()
	end
end
function UpdateTask(arg1) -- Line 38
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_RequireDefinitions_result1_upvr (readonly)
	]]
	local var12 = module_upvr.TaskSlotObjects[arg1.Index]
	if not var12 or arg1.Def.Hidden == true then
	else
		var12.TaskObject = arg1
		for i_2, v_2 in pairs(arg1.Progress) do
			local TaskParams = arg1.Def.TaskParams
			local var19 = TaskParams[i_2]
			local var20
			if var20 then
				TaskParams = true
			else
				var20 = any_RequireDefinitions_result1_upvr.TaskType[var12.Def.TaskIds[i_2]]
				TaskParams = var20.IsCompleted
				var20 = game.Players.LocalPlayer
				TaskParams = TaskParams(var20, var12.TaskObject.Progress[i_2], var19)
			end
			if arg1.InstaComplete then
				var20 = true
			else
				var20 = any_RequireDefinitions_result1_upvr.TaskType[var12.Def.TaskIds[i_2]].IsCompleted(game.Players.LocalPlayer, v_2, var19)
			end
			if not TaskParams and var20 then
				if arg1.Progress[i_2 + 1] and arg1.Def.Structured then
					var12:AddTab(arg1.Def.TaskDisplay[i_2 + 1].Title)
				else
					var12:Destroy()
					module_upvr.TaskSlotObjects[arg1.Index] = nil
					return
				end
			end
			var12:UpdateTab(i_2, v_2)
		end
	end
end
function SubtaskActivation(arg1, arg2, arg3) -- Line 73
	--[[ Upvalues[1]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
	]]
	if not arg1 then
	else
		any_RequireDefinitions_result1_upvr.TaskType[arg2.Def.TaskIds[arg3]].ActivationFunction(arg2, arg3)
	end
end
local TaskService_upvr = require(ReplicatedStorage.Packages.Knit).GetService("TaskService")
coroutine.wrap(function() -- Line 79
	--[[ Upvalues[1]:
		[1]: TaskService_upvr (readonly)
	]]
	local _, any_await_result2 = TaskService_upvr:GetTasks():andThen():await()
	for _, v in pairs(any_await_result2) do
		NewTask(v)
	end
	TaskService_upvr.NewTask:Connect(NewTask)
	TaskService_upvr.UpdateTask:Connect(UpdateTask)
	TaskService_upvr.Subtask:Connect(SubtaskActivation)
end)()
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.TaskHandler.TaskSlotObject
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:16
-- Luau version 6, Types version 3
-- Time taken: 0.002768 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local _ = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {}
module_upvr.__index = module_upvr
local tbl_upvr = {
	Empty = "rbxassetid://17714722979";
	Check = "rbxassetid://17714722979";
	ExclemationMark = "rbxassetid://10100312307";
}
function module_upvr.new(arg1) -- Line 24
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local module = {
		Id = arg1.Id;
		Def = arg1.Def;
	}
	module.TaskObject = arg1
	module.UITabs = {}
	module.UI = ReplicatedStorage_upvr.Prefabs.UI.TaskUI:Clone()
	module.Initialised = false
	return setmetatable(module, module_upvr)
end
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function module_upvr.Initialise(arg1) -- Line 42
	--[[ Upvalues[4]:
		[1]: MainGui_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	arg1.UI.QuestTitle.Text = arg1.Id:upper()
	arg1.UI.Parent = MainGui_upvr.HUD.QuestDisplay
	TweenService_upvr:Create(arg1.UI, TweenInfo.new(1), {
		Size = UDim2.fromScale(1, 0.1);
	}):Play()
	task.wait(1)
	for i, v in pairs(arg1.TaskObject.Progress) do
		local var18 = arg1.Def.TaskDisplay[i]
		arg1:AddTab(var18.Title..CoreUtil_upvr:ProgressTextDecode(var18.ProgressText, arg1.TaskObject, i))
		if arg1.InstaComplete then break end
		if not arg1.Def.Structured or not any_RequireDefinitions_result1_upvr.TaskType[arg1.Def.TaskIds[i]].IsCompleted(game.Players.LocalPlayer, v, arg1.Def.TaskParams[i]) then break end
	end
	for _, v_2 in pairs(arg1.UI:GetDescendants()) do
		if v_2:IsA("ImageLabel") then
			TweenService_upvr:Create(v_2, TweenInfo.new(1), {
				ImageTransparency = 0;
			}):Play()
		elseif v_2:IsA("TextLabel") then
			TweenService_upvr:Create(v_2, TweenInfo.new(1), {
				TextTransparency = 0;
			}):Play()
		end
	end
	arg1.Initialised = true
end
function module_upvr.AddTab(arg1, arg2) -- Line 80
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	local clone = ReplicatedStorage_upvr.Prefabs.UI.TaskDesc:Clone()
	clone.Parent = arg1.UI.Main
	clone.Name = tostring(#arg1.UITabs + 1)
	clone.QuestName.Text = arg2
	clone.QuestStatus.Image = tbl_upvr.Empty
	if arg1.Initialised then
		TweenService_upvr:Create(clone.QuestStatus, TweenInfo.new(1), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(clone.QuestName, TweenInfo.new(1), {
			TextTransparency = 0;
		}):Play()
	end
	table.insert(arg1.UITabs, clone)
end
function module_upvr.Destroy(arg1) -- Line 97
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	for _, v_3 in pairs(arg1.UI:GetDescendants()) do
		if v_3:IsA("ImageLabel") then
			TweenService_upvr:Create(v_3, TweenInfo.new(1), {
				ImageTransparency = 1;
			}):Play()
		elseif v_3:IsA("TextLabel") then
			TweenService_upvr:Create(v_3, TweenInfo.new(1), {
				TextTransparency = 1;
			}):Play()
		end
	end
	task.wait(1)
	TweenService_upvr:Create(arg1.UI, TweenInfo.new(1), {
		Size = UDim2.fromScale(0.4, 0);
	}):Play()
	task.wait(1)
	arg1.UI:Destroy()
end
function module_upvr.UpdateTab(arg1, arg2, arg3) -- Line 116
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local var35 = arg1.UITabs[arg2]
	if not var35 then
	else
		var35.QuestName.Text = arg1.Def.TaskDisplay[arg2].Title..CoreUtil_upvr:ProgressTextDecode(arg1.Def.TaskDisplay[arg2].ProgressText, arg1.TaskObject, arg2)
	end
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.PopUpHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:17
-- Luau version 6, Types version 3
-- Time taken: 0.003318 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local PlayerService = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {}
local PopupFrame_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui"):WaitForChild("PopupFrame")
local var7_upvw = 1
function ChangePage(arg1) -- Line 25
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	local var16
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var16 = #PopupFrame_upvr.PageFrame.Pages:GetChildren()
		return var16
	end
	if #PopupFrame_upvr.PageFrame.Pages:GetChildren() >= arg1 or not INLINED() then
		var16 = arg1
	end
	var7_upvw = var16
	var16 = pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren())
	for _, v in pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren()) do
		local var20
		if tonumber(v.Name) ~= var7_upvw then
			var20 = false
		else
			var20 = true
		end
		for _, v_2 in pairs(v:GetChildren()) do
			if v_2:IsA("GuiObject") then
				v_2.Visible = var20
			end
		end
	end
end
local TweenService_upvr = game:GetService("TweenService")
function InitialisePage(arg1, arg2) -- Line 35
	--[[ Upvalues[3]:
		[1]: TweenService_upvr (readonly)
		[2]: PopupFrame_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg1 then
		TweenService_upvr:Create(PopupFrame_upvr, TweenInfo.new(1), {
			Position = UDim2.fromScale(0.5, 2);
		}):Play()
		task.delay(1, function() -- Line 39
			--[[ Upvalues[1]:
				[1]: PopupFrame_upvr (copied, readonly)
			]]
			PopupFrame_upvr.Visible = false
		end)
	end
	PopupFrame_upvr.Title.TextLabel.Text = ""
	for _, v_3 in pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren()) do
		v_3:Destroy()
	end
	if not arg1 then
	else
		local SOME = ReplicatedStorage_upvr.Prefabs.UI.PopUps:FindFirstChild(arg1)
		if not SOME then return end
		PopupFrame_upvr.Title.TextLabel.Text = arg2
		for _, v_4 in pairs(SOME:GetChildren()) do
			local clone = v_4:Clone()
			for _, v_5 in pairs(clone:GetChildren()) do
				if v_5:IsA("GuiObject") then
					v_5.Visible = false
				end
			end
			clone.Parent = PopupFrame_upvr.PageFrame.Pages
		end
		ChangePage(1)
		PopupFrame_upvr.Visible = true
		TweenService_upvr:Create(PopupFrame_upvr, TweenInfo.new(1), {
			Position = UDim2.fromScale(0.5, 0.5);
		}):Play()
	end
end
function module_upvr.TogglePopup(arg1, arg2, arg3, arg4) -- Line 75
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	if any_GetController_result1_upvr.UIProcessing then
		repeat
			wait()
		until not any_GetController_result1_upvr.UIProcessing
	end
	any_GetController_result1_upvr.UIProcessing = true
	InitialisePage(arg2 and arg3, arg4)
	any_GetController_result1_upvr.UIProcessing = false
end
PopupFrame_upvr.Close.MouseButton1Up:Connect(function() -- Line 82
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:TogglePopup(false)
end)
PopupFrame_upvr.PageFrame.PageForward.MouseButton1Up:Connect(function() -- Line 86
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	ChangePage(math.clamp(var7_upvw + 1, 1, #PopupFrame_upvr.PageFrame.Pages:GetChildren()))
end)
PopupFrame_upvr.PageFrame.PageBack.MouseButton1Up:Connect(function() -- Line 90
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	ChangePage(math.clamp(var7_upvw - 1, 1, #PopupFrame_upvr.PageFrame.Pages:GetChildren()))
end)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
PopupFrame_upvr.Parent.HUD.RightPanel.UpdateNotes.ImageButton.MouseButton1Up:Connect(function() -- Line 94
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if any_GetController_result1_upvr.UIProcessing then
	else
		any_GetController_result1_upvr.UIProcessing = true
		InitialisePage(CoreUtil_upvr.Version, "NEW UPDATE "..CoreUtil_upvr.Version)
		any_GetController_result1_upvr.UIProcessing = false
	end
end)
local _, any_await_result2 = PlayerService:GameHasUpdated():andThen():await()
local _, any_await_result2_2_upvr = PlayerService:ShowPlayerTutorial():andThen():await()
if any_await_result2 then
	module_upvr:TogglePopup(true, any_await_result2, "NEW UPDATE "..any_await_result2)
end
coroutine.wrap(function() -- Line 107
	--[[ Upvalues[3]:
		[1]: PopupFrame_upvr (readonly)
		[2]: any_await_result2_2_upvr (readonly)
		[3]: module_upvr (readonly)
	]]
	repeat
		wait()
	until PopupFrame_upvr.Visible == false
	if any_await_result2_2_upvr then
		module_upvr:TogglePopup(true, "Tutorial", "Tutorial")
	end
end)()
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.SoundController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:19
-- Luau version 6, Types version 3
-- Time taken: 0.003536 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "SoundController";
})
any_CreateController_result1_upvr.ChangeTrackEvent = Instance.new("BindableEvent")
any_CreateController_result1_upvr.CurrentTrack = workspace.Sound.HubMusic
any_CreateController_result1_upvr.SoundVolumes = {
	SFX = 1;
	Music = 1;
}
any_CreateController_result1_upvr.SoundInstances = {
	SFX = {};
	Music = {};
}
function InitialiseSound(arg1) -- Line 28
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1_3 = arg1:GetTags()[1]
	local module = {
		Type = _1_3;
		DefultVolume = arg1.Volume;
	}
	arg1.Volume *= any_CreateController_result1_upvr.SoundVolumes[_1_3]
	any_CreateController_result1_upvr.SoundInstances[_1_3][arg1] = module
	return module
end
function DestroySound(arg1) -- Line 43
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.SoundInstances[arg1:GetTags()[1]][arg1] = nil
end
function any_CreateController_result1_upvr.AdjustVolume(arg1, arg2, arg3) -- Line 49
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.SoundVolumes[arg2] = arg3
	for i, v in pairs(any_CreateController_result1_upvr.SoundInstances[arg2]) do
		i.Volume = v.DefultVolume * arg3
	end
end
function any_CreateController_result1_upvr.PlaySound(arg1, arg2) -- Line 56
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1_2 = arg2:GetTags()[1]
	if not _1_2 then
		warn("No Tag on sound")
	else
		if not any_CreateController_result1_upvr.SoundInstances[_1_2][arg2] then
		end
		arg2:Play()
	end
end
function any_CreateController_result1_upvr.ChangeTrack(arg1, arg2) -- Line 68
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.CurrentTrack = arg2
	any_CreateController_result1_upvr.ChangeTrackEvent:Fire()
end
function any_CreateController_result1_upvr.StopSound(arg1, arg2) -- Line 73
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1 = arg2:GetTags()[1]
	if not _1 then
		warn("No Tag on sound")
	else
		if not any_CreateController_result1_upvr.SoundInstances[_1][arg2] then
			warn("No data on sound")
			return
		end
		arg2:Stop()
	end
end
function InitialiseRadio() -- Line 85
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	local tbl = {}
	local var22 = 1
	if CoreUtil_upvr.PlaceIds.Island == game.PlaceId then
		tbl = {workspace.Sound.IslandMusicDay, workspace.Sound.IslandMusicNight}
	elseif CoreUtil_upvr.PlaceIds.Citadel == game.PlaceId then
		tbl = {workspace.Sound.HubMusic}
	elseif CoreUtil_upvr.PlaceIds.Mines == game.PlaceId then
		tbl = {workspace.Sound.MinesMusic}
	elseif CoreUtil_upvr.PlaceIds.Forest == game.PlaceId then
		tbl = {workspace.Sound.ForestMusic}
	end
	for i_2, v_2 in pairs(tbl) do
		v_2:Play()
		v_2:Pause()
	end
	any_CreateController_result1_upvr.CurrentTrack = tbl[var22]
	while true do
		any_CreateController_result1_upvr.CurrentTrack:Resume()
		i_2 = nil
		v_2 = any_CreateController_result1_upvr.ChangeTrackEvent.Event
		CoreUtil_upvr:CustomYeild(i_2, v_2, any_CreateController_result1_upvr.CurrentTrack.DidLoop, any_CreateController_result1_upvr.CurrentTrack.Ended)
		any_CreateController_result1_upvr.CurrentTrack:Pause()
		i_2 = var22 + 1
		local var30
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var30 = var22 + 1
			return var30
		end
		if not tbl[i_2] or not INLINED() then
			var30 = 1
		end
		var30 = any_CreateController_result1_upvr
		var30.CurrentTrack = tbl[var30]
	end
end
local tbl_upvr = {}
local tbl_2_upvr = {}
local CollectionService_upvr = game:GetService("CollectionService")
local Promise_upvr = require(Knit_upvr.Util.Promise)
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 119
	--[[ Upvalues[6]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_2_upvr (readonly)
		[4]: CollectionService_upvr (readonly)
		[5]: Promise_upvr (readonly)
		[6]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_2_upvr.UIController = Knit_upvr.GetController("UIController")
	tbl_2_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	for _, v_3 in pairs(CollectionService_upvr:GetTagged("SFX")) do
		InitialiseSound(v_3)
	end
	for _, v_4 in pairs(CollectionService_upvr:GetTagged("Music")) do
		InitialiseSound(v_4)
	end
	CollectionService_upvr:GetInstanceAddedSignal("SFX"):Connect(InitialiseSound)
	CollectionService_upvr:GetInstanceAddedSignal("Music"):Connect(InitialiseSound)
	Promise_upvr.new(InitialiseRadio)
	any_CreateController_result1_upvr.Initialised = true
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterCharacterScripts.Health
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- StarterPlayer.StarterCharacterScripts.firstPersonHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:20
-- Luau version 6, Types version 3
-- Time taken: 0.001374 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_upvr = {"Chest", "Crafting", "Inventory", "IslandSettings", "Settings", "Shop", "Stats", "Store", "Underling"}
local CurrentCamera_upvr = workspace.CurrentCamera
function isFirstPerson() -- Line 19
	--[[ Upvalues[3]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: CurrentCamera_upvr (readonly)
	]]
	local Character = LocalPlayer_upvr.Character
	if Character == nil or not Character:FindFirstChild("Head") then
		return false
	end
	if UserInputService_upvr.MouseBehavior == Enum.MouseBehavior.LockCenter and (Character.Head.CFrame.p - CurrentCamera_upvr.CFrame.p).magnitude < 3 then
		return true
	end
	return false
end
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
function isGuiOnScreen() -- Line 29
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	for _, v in pairs(tbl_upvr) do
		if MainGui_upvr:FindFirstChild(v) and MainGui_upvr[v].Visible then
			return true
		end
	end
	return false
end
game:GetService("RunService").RenderStepped:Connect(function() -- Line 39
	--[[ Upvalues[2]:
		[1]: UserInputService_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local isFirstPerson_result1 = isFirstPerson()
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 3 start (CF ANALYSIS FAILED)
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.Default
	-- KONSTANTERROR: [8] 7. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 10. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 10. Error Block 4 end (CF ANALYSIS FAILED)
end)

-- StarterPack.MobileOptimize
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:47
-- Luau version 6, Types version 3
-- Time taken: 0.002563 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local HUD = MainGui:WaitForChild("HUD")
local Crafting = MainGui:WaitForChild("Crafting")
local Inventory = MainGui:WaitForChild("Inventory")
local Shop = MainGui:WaitForChild("Shop")
local Players_upvr = game:GetService("Players")
local GuiService_upvr = game:GetService("GuiService")
local function _() -- Line 15, Named "isMobileDevice"
	--[[ Upvalues[3]:
		[1]: Players_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: GuiService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var11
	if GuiService_upvr:IsTenFootInterface() == false then
		var11 = false
		if UserInputService_upvr.MouseEnabled == false then
			if UserInputService_upvr.KeyboardEnabled ~= false then
				var11 = false
			else
				var11 = true
			end
		end
	end
	if Players_upvr.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("TouchGui") == nil then
	else
	end
	if UserInputService_upvr.TouchEnabled then
	end
	return var11 or true
end
if UserInputService_upvr.TouchEnabled and not UserInputService_upvr.KeyboardEnabled and not UserInputService_upvr.MouseEnabled then
	HUD:WaitForChild("ToolBar").Size = UDim2.new(0.54, 0, 0.14, 0)
	HUD:WaitForChild("RightPanel").Size = UDim2.new(0.05, 0, 0.5, 0)
	HUD:WaitForChild("RightPanel").Position = UDim2.new(1, 0, 0.4, 0)
	HUD:WaitForChild("XPBar").Size = UDim2.new(0.4, 0, 0.05, 0)
	HUD:WaitForChild("HPBar").Size = UDim2.new(0.4, 0, 0.05, 0)
	HUD:WaitForChild("HPBar").Position = UDim2.new(0.5, 0, 0.8, 0)
	HUD:WaitForChild("CoinCounter").Size = UDim2.new(0.25, 0, 0.06, 0)
	HUD:WaitForChild("CoinCounter").Main.Size = UDim2.new(1, 0, 1, 0)
	HUD:WaitForChild("CoinCounter").Position = UDim2.new(1, 0, 0, 0)
	HUD:WaitForChild("CoinCounter").Main.Position = UDim2.new(0.05, 0, 0.5, 0)
	HUD:WaitForChild("CoinCounter").Main.Display.Size = UDim2.new(0.8, 0, 1, 0)
	HUD:WaitForChild("QuestDisplay").Position = UDim2.new(0, 0, 0.2, 0)
	Crafting.Size = UDim2.new(0.7, 0, 0.7, 0)
	Crafting.CraftingGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0, 45, 0, 60)
	MainGui:WaitForChild("Store").Main.Size = UDim2.new(0.55, 0, 0.935, 0)
	Shop.Size = UDim2.new(0.7, 0, 0.7, 0)
	Shop.ShopGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0, 45, 0, 60)
	MainGui:WaitForChild("Stats").Size = UDim2.new(0.8, 0, 0.8, 0)
	MainGui:WaitForChild("Settings").Size = UDim2.new(0.45, 0, 1, 0)
	Inventory.Chest.AnchorPoint = Vector2.new(1, 0.5)
	Inventory.Chest.Position = UDim2.new(1, 0, 0.5, 0)
	Inventory.Chest.Size = UDim2.new(0.25, 0, 0.563, 0)
	Inventory.Underling.AnchorPoint = Vector2.new(1, 0.5)
	Inventory.Underling.Position = UDim2.new(1, 0, 0.5, 0)
	Inventory.Main.Size = UDim2.new(0.6, 0, 0.75, 0)
elseif UserInputService_upvr.TouchEnabled or not UserInputService_upvr.KeyboardEnabled or not UserInputService_upvr.MouseEnabled then
end

-- CoreGui.RobloxGui.Modules.BackpackScript


-- CoreGui.RobloxGui.Modules.LoadingScreen.Actions.SetGameProductInfo


-- CoreGui.RobloxGui.Modules.LoadingScreen.Actions.SetIsSubjectToChinaPolicies


-- CoreGui.RobloxGui.Modules.LoadingScreen.Actions.SetUniverseId


-- CoreGui.RobloxGui.Modules.LoadingScreen.Components.AppTopBannerContainer


-- CoreGui.RobloxGui.Modules.LoadingScreen.LoadingScreen


-- CoreGui.RobloxGui.Modules.LoadingScreen.Reducers.LoadingScreenReducer


-- CoreGui.RobloxGui.Modules.LoadingScreen.Thunks.GetGameProductInfo


-- CoreGui.RobloxGui.Modules.LoadingScreen.Thunks.GetIsSubjectToChinaPolicies


-- CoreGui.RobloxGui.Modules.LoadingScreen.Thunks.GetUniverseId


-- CoreGui.RobloxGui.Modules.KeyboardUINavigation


-- CoreGui.RobloxGui.Modules.BlockingUtility


-- CoreGui.RobloxGui.Modules.ContactList


-- CoreGui.RobloxGui.Modules.ContactList.Actions.CloseCFM


-- CoreGui.RobloxGui.Modules.ContactList.Actions.CloseDialog


-- CoreGui.RobloxGui.Modules.ContactList.Actions.OpenOrUpdateCFM


-- CoreGui.RobloxGui.Modules.ContactList.Actions.OpenOrUpdateDialog


-- CoreGui.RobloxGui.Modules.ContactList.Actions.SetCurrentPage


-- CoreGui.RobloxGui.Modules.ContactList.Actions.SetCurrentTag


-- CoreGui.RobloxGui.Modules.ContactList.Actions.UpdateLastFriend


-- CoreGui.RobloxGui.Modules.ContactList.Analytics


-- CoreGui.RobloxGui.Modules.ContactList.Analytics.EventNamesEnum


-- CoreGui.RobloxGui.Modules.ContactList.Analytics.EventStreamActionList


-- CoreGui.RobloxGui.Modules.ContactList.Analytics.useAnalytics


-- CoreGui.RobloxGui.Modules.ContactList.Components.CallBar


-- CoreGui.RobloxGui.Modules.ContactList.Components.CallBarContainer


-- CoreGui.RobloxGui.Modules.ContactList.Components.CallDialogContainer


-- CoreGui.RobloxGui.Modules.ContactList.Components.CallHistory.CallHistoryContainer


-- CoreGui.RobloxGui.Modules.ContactList.Components.CallHistory.CallHistoryItem


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListApp


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListCommon.ConfigureFriendMenu


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListCommon.Constants


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListCommon.NoItemView


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListContainer


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListHeader


-- CoreGui.RobloxGui.Modules.ContactList.Components.ContactListSearchBar


-- CoreGui.RobloxGui.Modules.ContactList.Components.FriendList.FriendListContainer


-- CoreGui.RobloxGui.Modules.ContactList.Components.FriendList.FriendListItem


-- CoreGui.RobloxGui.Modules.ContactList.Components.FriendList.SectionHeader


-- CoreGui.RobloxGui.Modules.ContactList.Components.PlayerMenuContainer


-- CoreGui.RobloxGui.Modules.ContactList.ContactList.storybook


-- CoreGui.RobloxGui.Modules.ContactList.Context


-- CoreGui.RobloxGui.Modules.ContactList.Context.ContactListContext


-- CoreGui.RobloxGui.Modules.ContactList.dependencies


-- CoreGui.RobloxGui.Modules.ContactList.Enums.CallState


-- CoreGui.RobloxGui.Modules.ContactList.Enums.ErrorType


-- CoreGui.RobloxGui.Modules.ContactList.Enums.FriendAction


-- CoreGui.RobloxGui.Modules.ContactList.Enums.Pages


-- CoreGui.RobloxGui.Modules.ContactList.Hooks.useStartCallCallback


-- CoreGui.RobloxGui.Modules.ContactList.initCall


-- CoreGui.RobloxGui.Modules.ContactList.Reducer


-- CoreGui.RobloxGui.Modules.ContactList.Reducer.Dialog


-- CoreGui.RobloxGui.Modules.ContactList.Reducer.LastRemovedFriend


-- CoreGui.RobloxGui.Modules.ContactList.Reducer.Navigation


-- CoreGui.RobloxGui.Modules.ContactList.Reducer.PlayerMenu


-- CoreGui.RobloxGui.Modules.ContactList.teleportToRootPlace


-- CoreGui.RobloxGui.Modules.NewChat


-- CoreGui.RobloxGui.Modules.Common.Action


-- CoreGui.RobloxGui.Modules.Common.Analytics


-- CoreGui.RobloxGui.Modules.Common.AnalyticsReporters.Diag


-- CoreGui.RobloxGui.Modules.Common.AnalyticsReporters.EventStream


-- CoreGui.RobloxGui.Modules.Common.AnalyticsReporters.GoogleAnalytics


-- CoreGui.RobloxGui.Modules.Common.AnalyticsReporters.Influx


-- CoreGui.RobloxGui.Modules.Common.AvatarChatConstants


-- CoreGui.RobloxGui.Modules.Common.AvatarUtil


-- CoreGui.RobloxGui.Modules.Common.CommonUtil


-- CoreGui.RobloxGui.Modules.Common.ConnectionUtil


-- CoreGui.RobloxGui.Modules.Common.Constants


-- CoreGui.RobloxGui.Modules.Common.EventConnection


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-asteroids


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-context


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-counter


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-events


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-ref


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-rodux


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-router


-- CoreGui.RobloxGui.Modules.Common.Examples.Roact-stress


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagEnableForkedChatAnalytics


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagFetchBlockListFromServer


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagInExperienceUserProfileSettingsEnabled


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagMoveUGCValidationFunctionFeature


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagWaveEmoteOnAvatarContextMenuWithExpChat


-- CoreGui.RobloxGui.Modules.Common.Flags.FFlagWhisperEmoteOnAvatarContextMenuWithExpChat


-- CoreGui.RobloxGui.Modules.Common.Flags.FStringRccInExperienceNameEnabledAllowList


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagContactListClientEnabled


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagContactListEnabled


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagEnableInGameMenuDurationLogger


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagEnableIXPInGame


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagEnableVoiceDefaultServerScript


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagPlayerViewRemoteEnabled


-- CoreGui.RobloxGui.Modules.Common.Flags.GetFFlagPlayerViewValidateRequesteeEnabled


-- CoreGui.RobloxGui.Modules.Common.Flags.GetIXPServiceWrapperWaitRefactor


-- CoreGui.RobloxGui.Modules.Common.FocusNavigationEffectsWrapper


-- CoreGui.RobloxGui.Modules.Common.Functional


-- CoreGui.RobloxGui.Modules.Common.GetHasGuiHidingPermission


-- CoreGui.RobloxGui.Modules.Common.Hooks.useLocalPlayer


-- CoreGui.RobloxGui.Modules.Common.Hooks.usePlayerCurrentScreenOrientation


-- CoreGui.RobloxGui.Modules.Common.Hooks.usePlayerGui


-- CoreGui.RobloxGui.Modules.Common.Hooks.useScreenSize


-- CoreGui.RobloxGui.Modules.Common.httpRequest


-- CoreGui.RobloxGui.Modules.Common.HumanoidReadyUtil


-- CoreGui.RobloxGui.Modules.Common.Immutable


-- CoreGui.RobloxGui.Modules.Common.IXPServiceWrapper


-- CoreGui.RobloxGui.Modules.Common.LegacyThumbnailUrls


-- CoreGui.RobloxGui.Modules.Common.LuaErrorReporter


-- CoreGui.RobloxGui.Modules.Common.memoize


-- CoreGui.RobloxGui.Modules.Common.NoYield


-- CoreGui.RobloxGui.Modules.Common.ObjectPool


-- CoreGui.RobloxGui.Modules.Common.PerfUtils


-- CoreGui.RobloxGui.Modules.Common.PolicyService


-- CoreGui.RobloxGui.Modules.Common.RagdollRigging


-- CoreGui.RobloxGui.Modules.Common.removePII


-- CoreGui.RobloxGui.Modules.Common.renderWithCoreScriptsStyleProvider


-- CoreGui.RobloxGui.Modules.Common.Roact


-- CoreGui.RobloxGui.Modules.Common.RoactRodux


-- CoreGui.RobloxGui.Modules.Common.RoactUtilities.ExternalEventConnection


-- CoreGui.RobloxGui.Modules.Common.RobloxTelemetryConfigs.LuaShellErrors


-- CoreGui.RobloxGui.Modules.Common.Rodux


-- CoreGui.RobloxGui.Modules.Common.Signal


-- CoreGui.RobloxGui.Modules.Common.Spring


-- CoreGui.RobloxGui.Modules.Common.StringUtilities.ParseQuery


-- CoreGui.RobloxGui.Modules.Common.StringUtilities.StringReplaceAll


-- CoreGui.RobloxGui.Modules.Common.StringUtilities.StringSplit


-- CoreGui.RobloxGui.Modules.Common.StringUtilities.StringTrim


-- CoreGui.RobloxGui.Modules.Common.Symbol


-- CoreGui.RobloxGui.Modules.Common.Text


-- CoreGui.RobloxGui.Modules.Common.Url


-- CoreGui.RobloxGui.Modules.PlayerList.ActionCreator


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.AddGameStat


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.AddPlayer


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.AddPlayerToTeam


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.AddTeam


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.ClosePlayerDropDown


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.OpenPlayerDropDown


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.RemoveGameStat


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.RemovePlayer


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.RemovePlayerFromTeam


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.RemoveTeam


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetGameStatAddId


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetGameStatText


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetHasPermissionToVoiceChat


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetInspectMenuEnabled


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetIsUsingGamepad


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetMinimized


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPerformanceStatsVisible


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerAvatarIcon


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerFollowRelationship


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerFriendStatus


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerIsBlocked


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerIsCreator


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerIsFollowing


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerIsLocalPlayer


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerLeaderstat


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerListEnabled


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerListVisibility


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetPlayerSpecialGroupIcon


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetScreenSize


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetSettings


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetSmallTouchDevice


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetSubjectToChinaPolicies


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetTeamColor


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetTeamName


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetTempHideKey


-- CoreGui.RobloxGui.Modules.PlayerList.Actions.SetTenFootInterface


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.ContextActionsBinder


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.CoreGuiConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.EventConnection


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.EventConnections


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.GuiServiceConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.LayoutValues


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.LayoutValuesContext


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.LeaderstatsConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.PlayerServiceConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.ScreenSizeConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.SocialConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.TeamServiceConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.TopStatConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Connection.UserInputServiceConnector


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.CellExtender


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.DropDownButton


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.DropDownButtonAnimator


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.DropDownPlayerHeader


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.EntryFrame


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.FriendDropDownButton


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerDropDown


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerListApp


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerListDisplay


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerListSorter


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.PlayerNameTag


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.StatEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.TeamEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.Presentation.TitleBar


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationCommon.IconButton


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationCommon.PlayerIcon


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationCommon.TenFootSideBar


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationCommon.VoiceChatShield


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.DropDownButton


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.DropDownButtonAnimator


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.DropDownPlayerHeader


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.FriendDropDownButton


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerDropDown


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerListApp


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerListDisplay


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerListSorter


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.PlayerNameTag


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.StatEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.TeamEntry


-- CoreGui.RobloxGui.Modules.PlayerList.Components.PresentationMobile.TitleBar


-- CoreGui.RobloxGui.Modules.PlayerList.CreateLayoutValues


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.FFlagLeaderstatsWithASideOfClient


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.FFlagPlayerListFixBackgroundFlicker


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.FFlagPlayerListFixMobileScrolling


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.FFlagRefactorPlayerNameTag


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.GetFFlagEnablePreferredTextSizeStyleFixesInPlayerList


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.GetFFlagFixDropDownVisibility


-- CoreGui.RobloxGui.Modules.PlayerList.Flags.GetFFlagPlayerListChromePushdown


-- CoreGui.RobloxGui.Modules.PlayerList.FormatStatString


-- CoreGui.RobloxGui.Modules.PlayerList.GetFakeNeutralTeam


-- CoreGui.RobloxGui.Modules.PlayerList.GlobalConfig


-- CoreGui.RobloxGui.Modules.PlayerList.Hooks.usePlayerCombinedName


-- CoreGui.RobloxGui.Modules.PlayerList.PlayerListInitialVisibleState


-- CoreGui.RobloxGui.Modules.PlayerList.PlayerListManager


-- CoreGui.RobloxGui.Modules.PlayerList.PlayerListMaster


-- CoreGui.RobloxGui.Modules.PlayerList.PlayerListSwitcher


-- CoreGui.RobloxGui.Modules.PlayerList.PlayerSorting


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.DisplayOptions


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.GameStats


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerDropDown


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerIconInfo


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerKeys


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerRelationship


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.Players


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerStats


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.PlayerTeam


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.Reducer


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.ScreenSize


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.Settings


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.TeamColors


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.TeamNames


-- CoreGui.RobloxGui.Modules.PlayerList.Reducers.Teams


-- CoreGui.RobloxGui.Modules.PlayerList.TestProviders


-- CoreGui.RobloxGui.Modules.PlayerList.Thunks.BlockPlayer


-- CoreGui.RobloxGui.Modules.PlayerList.Thunks.MakePlayerInfoRequests


-- CoreGui.RobloxGui.Modules.PlayerList.Thunks.RequestFriendship


-- CoreGui.RobloxGui.Modules.PlayerList.Thunks.UnblockPlayer


-- CoreGui.RobloxGui.Modules.ActionBindingsTab


-- CoreGui.RobloxGui.Modules.Ads.AdTeleportPromptHandler


-- CoreGui.RobloxGui.Modules.Ads.AdTeleportPromptUI


-- CoreGui.RobloxGui.Modules.PlayingSounds


-- CoreGui.RobloxGui.Modules.AggregatedData


-- CoreGui.RobloxGui.Modules.Interfaces.playerInterface


-- CoreGui.RobloxGui.Modules.ApolloClient


-- CoreGui.RobloxGui.Modules.ApolloClient.ApolloClient


-- CoreGui.RobloxGui.Modules.FTUX


-- CoreGui.RobloxGui.Modules.FTUX.Components.FTUXPanel


-- CoreGui.RobloxGui.Modules.FTUX.Components.FTUXSlideshow


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.Button


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.Description


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.EndItem


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.Header


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.Stepper


-- CoreGui.RobloxGui.Modules.FTUX.Components.Slideshow.Title


-- CoreGui.RobloxGui.Modules.FTUX.Components.Tooltips.ToolTip


-- CoreGui.RobloxGui.Modules.FTUX.Components.Tooltips.VRFTUXToolTips


-- CoreGui.RobloxGui.Modules.FTUX.Enums.ButtonEnum


-- CoreGui.RobloxGui.Modules.FTUX.Enums.PlatformEnum


-- CoreGui.RobloxGui.Modules.FTUX.Events.EventHandler


-- CoreGui.RobloxGui.Modules.FTUX.Events.Events


-- CoreGui.RobloxGui.Modules.FTUX.Events.EventType


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.FirstPersonToggleEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.HapticFeedbackEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.HapticFeedbackTwiceEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.JumpEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.LeaveGameIconHighlightEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.MovementTooltipEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.MoveToGoalEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.PerspectiveTooltipEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.SoundFeedbackEvent


-- CoreGui.RobloxGui.Modules.FTUX.Events.VR.VRFTUXEventHandler


-- CoreGui.RobloxGui.Modules.FTUX.Features.EnableSafetyBubbleDummy


-- CoreGui.RobloxGui.Modules.FTUX.Features.GetFeatures


-- CoreGui.RobloxGui.Modules.FTUX.Flags.GetFFlagDebugEnableVRFTUXExperienceInStudio


-- CoreGui.RobloxGui.Modules.FTUX.Flags.GetFFlagEnableVRFTUXExperience


-- CoreGui.RobloxGui.Modules.FTUX.Resources.FTUXConstants


-- CoreGui.RobloxGui.Modules.FTUX.Resources.FTUXEventTypes


-- CoreGui.RobloxGui.Modules.FTUX.Resources.FTUXSlideshowData


-- CoreGui.RobloxGui.Modules.FTUX.Utility.GenerateDummy


-- CoreGui.RobloxGui.Modules.FTUX.Utility.IsFTUXExperience


-- CoreGui.RobloxGui.Modules.FTUX.Utility.MockFTUXStyleAndLocalizationComponent


-- CoreGui.RobloxGui.Modules.ChatUtil


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.ContextMenuGui


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.ContextMenuItems


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.ContextMenuUtil


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.PlayerCarousel


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.SelectedCharacterIndicator


-- CoreGui.RobloxGui.Modules.AvatarContextMenu.ThemeHandler


-- CoreGui.RobloxGui.Modules.PlayerPermissionsModule


-- CoreGui.RobloxGui.Modules.Flags.FFlagAvatarChatCoreScriptSupport


-- CoreGui.RobloxGui.Modules.Flags.FFlagAvatarContextMenuItemsChatButtonRefactor


-- CoreGui.RobloxGui.Modules.Flags.FFlagCoreScriptShowTeleportPrompt


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableAutomaticSizeVerticalOffsetWidthFix


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableAvatarChatToggleUIUpgradeForLegacyChatService


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableBundlePurchaseChecks


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableCollectibleCheckToPurchaseItem


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableRestrictedAssetSaleLocationInspectAndBuy


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableRichTextForBubbleChat


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableTempFixCollectibleBundlePurchase


-- CoreGui.RobloxGui.Modules.Flags.FFlagEnableVoiceChatStorybookFix


-- CoreGui.RobloxGui.Modules.Flags.FFlagErrorPromptResizesHeight


-- CoreGui.RobloxGui.Modules.Flags.FFlagExtendedExpMenuPortraitLayout


-- CoreGui.RobloxGui.Modules.Flags.FFlagFixProximityPromptAncestry


-- CoreGui.RobloxGui.Modules.Flags.FFlagMobilePlayerList


-- CoreGui.RobloxGui.Modules.Flags.FFlagMuteNonFriendsEvent


-- CoreGui.RobloxGui.Modules.Flags.FFlagPlayerIconAvatarFix


-- CoreGui.RobloxGui.Modules.Flags.FFlagProximityPromptGamepadIcons


-- CoreGui.RobloxGui.Modules.Flags.FFlagRemoveKickWhitespaceSub


-- CoreGui.RobloxGui.Modules.Flags.FFlagUseRoactGlobalConfigInCoreScripts


-- CoreGui.RobloxGui.Modules.Flags.FFlagVRBottomBarDebugPositionConfig


-- CoreGui.RobloxGui.Modules.Flags.FFlagVRBottomBarHighlightedLeaveGameIcon


-- CoreGui.RobloxGui.Modules.Flags.FFlagVRMoveVoiceIndicatorToBottomBar


-- CoreGui.RobloxGui.Modules.Flags.FIntSafetyBubbleRadius


-- CoreGui.RobloxGui.Modules.Flags.FIntSafetyBubbleTransparencyPercent


-- CoreGui.RobloxGui.Modules.Flags.FIntVoiceChatTooltipDelay


-- CoreGui.RobloxGui.Modules.Flags.FIntVRBottomBarPositionOffsetDepthNumber


-- CoreGui.RobloxGui.Modules.Flags.FIntVRBottomBarPositionOffsetVerticalNumber


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAbuseReportEnableReportSentPage


-- CoreGui.RobloxGui.Modules.Flags.getFFlagAddApolloClientToExperienceChat


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAddVoiceExposureLayer


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAllowUsernameOverlayInScreenshotHud


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAlwaysMountVoicePrompt


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAlwaysShowVRToggle


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagAvatarChatServiceEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagBatchVoiceParticipantsUpdates


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagBetaBadge


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagBetaBadgeLearnMoreLinkFormview


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagBubbleChatInexistantAdorneeFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagBubbleVoiceIndicatorSetting


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationForceSetting


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationHoldoutEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationLaunchEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationNewDefaults


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationSettingEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChatTranslationWaitForIXP


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagChromeUsePreferredTransparency


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagClearUserFromRecentVoiceDataOnLeave


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagClearVoiceStateOnRejoin


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagConsolidateBubbleChat


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeDefaultOpen


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeFollowupFTUX


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeFollowupOcclusion


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeFollowupUnibar


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromePinnedChat


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeUnibar


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeV3Baseline


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeV3Captures


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeV3DockedMic


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeV3Icon


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagDisableChromeV3StaticSelfView


-- CoreGui.RobloxGui.Modules.Flags.getFFlagDoNotPromptCameraPermissionsOnMount


-- CoreGui.RobloxGui.Modules.Flags.getFFlagEnableAlwaysAvailableCamera


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableAlwaysOpenUnibar


-- CoreGui.RobloxGui.Modules.Flags.getFFlagEnableAnalyticsForCameraDevicePermissions


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableConfigurableReportAbuseIXP


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableConnectDisconnectButtonAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableErrorIconFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableFeedbackReportDialogAdjustments


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInExpJoinVoiceAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInExpMicPermissionsAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInExpVoiceConsentAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInExpVoiceUpsell


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInGameMenuModernization


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInGameMenuModernizationBigText


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInGameMenuModernizationStickyBar


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableInvitePromptLoadingState


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableLuaVoiceChatAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableNewInviteMenu


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableNewInviteMenuCustomization


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableNewInviteMenuIXP


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableNewInviteSendEndpoint


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableNudgeAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableSeamlessVoiceConnectDisconnectButton


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableSeamlessVoiceUX


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableSharedInviteStore


-- CoreGui.RobloxGui.Modules.Flags.getFFlagEnableShimmeringIconLegacyChatService


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableSoundSessionTelemetry


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableTeleportBackButton


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableTopBannerInLoadingScreen


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableUniveralVoiceToasts


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceChatManualReconnect


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceChatMuteOnBlock


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceChatSpeakerIcons


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceChatVoiceUISync


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceDefaultChannel


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceMuteAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceNudge


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoicePromptReasonText


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceRccCheck


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVoiceReverseNudge


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagEnableVRHubStateListener


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagExtraInviteModalStringValidation


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagFixChromeReferences


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagFixMissingPlayerGuiCrash


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagFlashingDotUseAsyncInit


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagForceChatBubbleColorCS


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagGetClientReplicatorCheck


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagGetRawMicrophonePermissions


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagInvertMuteAllPermissionButton


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagInviteListStyleFixes


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagJoinWithoutMicPermissions


-- CoreGui.RobloxGui.Modules.Flags.getFFlagLegacyConnectingMicStateFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagLocalMutedNilFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagLuaConsumePlayerModerated


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagLuaInExperienceCoreScriptsGameInviteUnification


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagMicConnectingToast


-- CoreGui.RobloxGui.Modules.Flags.getFFlagMicrophoneDevicePermissionsPromptLogging


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagMicStatesFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagMuteButtonRaceConditionFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagNewEventIngestPlayerScriptsDimensions


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagOldMenuUseSpeakerIcons


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagOptimizeHelpMenuInputEvent


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagPassShouldRequestPermsArg


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagPauseMuteFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagPlayerListAnimateMic


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagPlayerViewRemoteEventTimeoutEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagRecordRecording


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagRemoveAssetVersionEndpoint


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagRemoveInGameChatBubbleChatReferences


-- CoreGui.RobloxGui.Modules.Flags.getFFlagRenderVoiceBubbleAfterAsyncInit


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagReportAbuseThankYouPageSizeFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagReportFirstExperienceCancelled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagReportMenuCellToUseAutomaticSize


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagReportSentPageV2Enabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagRequestServerStatsFix


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagRtMessaging


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagScreenshotHudApi


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagSeamlessVoiceFTUX


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagSelfieViewV4


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagSendDevicePermissionsModalAnalytics


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShareInviteLinkContextMenuABTestEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShareInviteLinkContextMenuV1ABTestEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShareInviteLinkContextMenuV3ABTestEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShowLikelySpeakingBubbles


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShowMicConnectingIconAndToast


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagShowSpeakerIconWithChatBubbles


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagSubscriptionFailureUX


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagSwitchInExpTranslationsPackage


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagThrottleInviteSendEndpoint


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUpdateHealthBar


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUpdateNudgeV3VoiceBanUI


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUpdateSelfieViewOnBan


-- CoreGui.RobloxGui.Modules.Flags.getFFlagUseCameraDevicesListener


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUseLuaSignalrConsumer


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUserIsChatTranslationEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagUXForCameraPerformanceIXPEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceAbuseReportsEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceARRemoveOffsiteLinksForVoice


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceARUnblockingUnmutingEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceBanShowToastOnSubsequentJoins


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceChatServiceManagerUseAvatarChat


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceChatUILogging


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceChatWatchForMissedSignalROnEventReceived


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceRecordingIndicatorsEnabled


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceUseAudioRoutingAPI


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceUserAgency3


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagVoiceUserAgencyEnableIXP


-- CoreGui.RobloxGui.Modules.Flags.GetFFlagWrapBlockModalScreenInProvider


-- CoreGui.RobloxGui.Modules.Flags.GetFIntCanHideGuiGroupId


-- CoreGui.RobloxGui.Modules.Flags.GetFIntEducationalPopupDisplayMaxCount


-- CoreGui.RobloxGui.Modules.Flags.GetFIntFacialAnimationStreamingHeartbeatStatsIntervalSec


-- CoreGui.RobloxGui.Modules.Flags.GetFIntPlayerViewRemoteEventTimeout


-- CoreGui.RobloxGui.Modules.Flags.GetFIntSoundSessionTelemetryThrottle


-- CoreGui.RobloxGui.Modules.Flags.GetFIntThrottleInviteSendEndpointDelay


-- CoreGui.RobloxGui.Modules.Flags.GetFIntThrottleParticipantsUpdateMs


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVoiceChatDeviceChangeDebounceDelay


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVoiceJoinM3ToastDurationSeconds


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVoiceReverseNudgeUXDisplayTimeSeconds


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVoiceToxicityToastDurationSeconds


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVoiceUsersInteractionExpiryTimeSeconds


-- CoreGui.RobloxGui.Modules.Flags.GetFIntVRScaleGuiDistance


-- CoreGui.RobloxGui.Modules.Flags.GetFStringChatTranslationEnabledLocales


-- CoreGui.RobloxGui.Modules.Flags.GetFStringChatTranslationLayerName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringInExperienceNotificationsLayer


-- CoreGui.RobloxGui.Modules.Flags.GetFStringInGameMenuModernizationBigTextForcedUserIds


-- CoreGui.RobloxGui.Modules.Flags.GetFStringInGameMenuModernizationStickyBarForcedUserIds


-- CoreGui.RobloxGui.Modules.Flags.GetFStringLuaAppConsoleExperienceMenuLayer


-- CoreGui.RobloxGui.Modules.Flags.GetFStringLuaAppExperienceMenuLayer


-- CoreGui.RobloxGui.Modules.Flags.GetFStringReportAbuseIXPLayer


-- CoreGui.RobloxGui.Modules.Flags.GetFStringTeleportBackButtonIXPCustomLayerName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringTeleportBackButtonSettingsHubIXPCustomFieldName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringTeleportBackButtonTopBarIXPCustomFieldName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringUXForCameraPerformanceIXPLayerName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringVoiceBetaBadgeLearnMore


-- CoreGui.RobloxGui.Modules.Flags.GetFStringVoiceExposureIXPLayerName


-- CoreGui.RobloxGui.Modules.Flags.GetFStringVoiceUserAgencyIXPLayerName


-- CoreGui.RobloxGui.Modules.Flags.getIsUserProfileOnLeaderboardEnabled


-- CoreGui.RobloxGui.Modules.Flags.isEngineTruncationEnabledForIngameSettings


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.AddAnalyticsInfo


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.CloseOpenPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.CreateOutfitConfirmed


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.GameNameFetched


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.OpenPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Actions.ScreenSizeUpdated


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.AvatarEditorPromptsPolicy


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.AvatarEditorPromptsApp


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Connection


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Connection.ContextActionsBinder


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.HumanoidViewport


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.ItemsList


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.ItemsList.ListEntry


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.ItemsList.ListSection


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.AllowInventoryReadAccessPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.CreateOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.DeleteOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.EnterOutfitNamePrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.PromptWithAvatarViewport


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.PromptWithTextField


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.RenameOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.SaveAvatarPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.SetFavoritePrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Components.Prompts.UpdateOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.ConnectAvatarEditorServiceEvents


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.GetAssetIdsFromDescription


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.GetAssetNamesForIds


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.GetAssetsDifference


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.GetConformedHumanoidDescription


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.GetCurrentHumanoidDescription


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Network.GetOutfitName


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.PromptType


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Reducer


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Reducer.AnalyticsInfo


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Reducer.GameName


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Reducer.PromptInfo


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Reducer.ScreenSize


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.RoactGlobalConfig


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.CloseOpenPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.GetGameName


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.OpenDeleteOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.OpenRenameOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.OpenSaveAvatarPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.OpenSetFavoritePrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.OpenUpdateOutfitPrompt


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformCreateOutfit


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformDeleteOutfit


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformRenameOutfit


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformSaveAvatar


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformSetFavorite


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.PerformUpdateOutfit


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SetAllowInventoryReadAccess


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalCreateOutfitPermissionDenied


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalDeleteOutfitPermissionDenied


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalRenameOutfitPermissionDenied


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalSaveAvatarPermissionDenied


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalSetFavoritePermissionDenied


-- CoreGui.RobloxGui.Modules.AvatarEditorPrompts.Thunks.SignalUpdateOutfitPermissionDenied


-- CoreGui.RobloxGui.Modules.CaptureMaster


-- CoreGui.RobloxGui.Modules.CaptureNotification


-- CoreGui.RobloxGui.Modules.ChatSelector


-- CoreGui.RobloxGui.Modules.Chrome


-- CoreGui.RobloxGui.Modules.Chrome.Analytics


-- CoreGui.RobloxGui.Modules.Chrome.Analytics.ChromeAnalytics


-- CoreGui.RobloxGui.Modules.Chrome.Analytics.OcclusionMetricsManager


-- CoreGui.RobloxGui.Modules.Chrome.Analytics.Tracker


-- CoreGui.RobloxGui.Modules.Chrome.Enabled


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagAnimateSubMenu


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagChromeCapturesToggle


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagChromeObservableStateCheck


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagDebugEnableUnibarDummyIntegrations


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagDisableCompactUtilityCore


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagDisableMostRecentlyUsed


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagDisableSelfViewDefaultOpen


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableCaptureBadge


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableCapturesInChrome


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromeAnalytics


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromeDefaultOpen


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromeEscapeFix


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromeFTUX


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromePinAnalytics


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromePinIntegrations


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableChromePinnedChat


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableHamburgerIcon


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableJoinVoiceOnUnibar


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableSaveUserPins


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableSongbirdInChrome


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableSongbirdPeek


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableSubmenuTruncationFix


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableUnibarMaxDefaultOpen


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableUnibarSneakPeak


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagEnableUserPinPortraitFix


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagFixKeepOutAreasCompatibility


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagFixMicSelection


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagFixSubmenuCloseIOS


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagKeepSubmenuOpenOnPin


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagNewSubmenuTouchTargets


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagOpenControlsOnMenuOpen


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagSelfViewFixes


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagSupportChromeContainerSizing


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagTweakedMicPinning


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUnibarLuaOcclusionMetrics


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUnibarRespawn


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUnpinUnavailable


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUseNewPinIcon


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUseNewUnibarIcon


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUsePolishedAnimations


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagUseSelfieViewFlatIcon


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFFlagWindowFixes


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFIntIconSelectionTimeout


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFIntLuaUIOcclusionMetricsReportingPeriodSeconds


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFIntNumTimesNewBadgeIsDisplayed


-- CoreGui.RobloxGui.Modules.Chrome.Flags.GetFStringNewFeatureList


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useChromeMenuItems


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useChromeMenuStatus


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useChromeWindowItems


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useCoreGuiEnabled


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useHealthBinding


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useMappedObservableValue


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useMappedObservableValueBinding


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useMappedSignal


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useNotificationCount


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useObservableValue


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useTimeHysteresis


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useWindowSize


-- CoreGui.RobloxGui.Modules.Chrome.Hooks.useWindowSizeIsLarge


-- CoreGui.RobloxGui.Modules.Chrome.Integrations


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.CameraUtility.CameraEntrypoint


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.CameraUtility.Captures


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.CameraUtility.Screenshot


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.Chat


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.CommonIcon


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.CompactUtilityBackButton


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.DummyContainer


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.DummyWindow


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.DummyWindow2


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.JoinVoice


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.MusicUtility.MusicEntrypoint


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.MusicUtility.Songbird


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.OverflowMenu


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.Party


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.Party.Constants


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.Party.PartyIcon


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.RedVoiceDot


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.SelfieView


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.ToggleMic


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.TrustAndSafety


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.UnibarMenuToggleButton


-- CoreGui.RobloxGui.Modules.Chrome.Integrations.UnibarMenuToggleButtonV2


-- CoreGui.RobloxGui.Modules.Chrome.Onboarding.GetFIntFTUXDelay


-- CoreGui.RobloxGui.Modules.Chrome.Onboarding.GetFStringFTUXVersion


-- CoreGui.RobloxGui.Modules.Chrome.Onboarding.OnboardingAnalytics


-- CoreGui.RobloxGui.Modules.Chrome.Onboarding.OnboardingTooltip


-- CoreGui.RobloxGui.Modules.Chrome.Onboarding.OnboardingTooltipAnchor


-- CoreGui.RobloxGui.Modules.Chrome.Service


-- CoreGui.RobloxGui.Modules.Chrome.Service.ChromeService


-- CoreGui.RobloxGui.Modules.Chrome.Service.ChromeUtils


-- CoreGui.RobloxGui.Modules.Chrome.Service.ContainerSlotSignal


-- CoreGui.RobloxGui.Modules.Chrome.Service.KeepOutAreasHandler


-- CoreGui.RobloxGui.Modules.Chrome.Service.LocalStore


-- CoreGui.RobloxGui.Modules.Chrome.Service.Types


-- CoreGui.RobloxGui.Modules.Chrome.Service.ViewportUtil


-- CoreGui.RobloxGui.Modules.Chrome.Service.WindowSizeSignal


-- CoreGui.RobloxGui.Modules.Chrome.Unibar


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.ComponentHosts.ContainerHost


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.ComponentHosts.IconHost


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.ComponentHosts.WindowHost


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.Constants


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.HealthBar


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.SubMenu


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.SubMenuContext


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.UnibarMenu


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.UnibarMenuWrapper


-- CoreGui.RobloxGui.Modules.Chrome.Unibar.WindowManager


-- CoreGui.RobloxGui.Modules.Chrome.Utility.debounce


-- CoreGui.RobloxGui.Modules.Chrome.Utility.shouldRejectMultiTouch


-- CoreGui.RobloxGui.Modules.ErrorReporting.PiiFilter


-- CoreGui.RobloxGui.Modules.ErrorReporting.RateLimiter


-- CoreGui.RobloxGui.Modules.CoreScriptsRhodiumTest.Helpers.withFlag


-- CoreGui.RobloxGui.Modules.CoreScriptsRhodiumTest.Helpers.withServices


-- CoreGui.RobloxGui.Modules.CoreScriptsRhodiumTest.Tests.InGameMenu.TestConstants


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.CloseOverlay


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.HideMenu


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.OpenOverlay


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetAssetFromBundleInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetAssets


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetAssetToBundlesMapping


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetBundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetBundlesAssetIsPartOf


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetCollectibleResellableInstances


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetDetailsInformation


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetEquippedAssets


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetExperienceInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetFavoriteAsset


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetFavoriteBundle


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetGamepadEnabled


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetIsSubjectToChinaPolicies


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetItemBeingPurchased


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetLocale


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetPlayerId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetPlayerName


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetTryingOnInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.SetView


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.ShowMenu


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Actions.UpdateStoreId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.AttributionConstants


-- CoreGui.RobloxGui.Modules.InspectAndBuy.CharacterModelPool


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Colors


-- CoreGui.RobloxGui.Modules.InspectAndBuy.CompactView


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AssetCard


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AssetDetails


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AssetList


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AttributionTraversal


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AvatarHeadShot


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.AvatarViewport


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.BuyButton


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.CloseButton


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.Common.ControllerShortcutKeycodes


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.Container


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.DetailsButtons


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.DetailsDescription


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.DetailsText


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.DetailsThumbnail


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.Favorites


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.FavoritesButton


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.InitialView


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.InspectAndBuy


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.InspectAndBuyContext


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.InspectAndBuyControllerBar


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.LimitedLabel


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.NoInventoryNotice


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.Notification


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.Overlay


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.OverlayComponents


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.PlayerNameLabel


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.TryOnButton


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Components.TryOnViewport


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Constants


-- CoreGui.RobloxGui.Modules.InspectAndBuy.createInspectAndBuyKeyMapper


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Enums.Overlay


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.FFlagAssetDetailsUseAutomaticCanvasSize


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.FFlagAttributionInInspectAndBuy


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.FFlagEnableFavoriteButtonForUgc


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetCollectibleItemInInspectAndBuyEnabled


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagDisplayCollectiblesIcon


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableCollectiblePurchaseForUnlimited


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableCollectiblesSystemSupport


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableFixForOwnedText


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableFixForSaleLocation


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableLimitedBundle


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableLimitedItemBugFixAndAlignment


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableNewDataCollectionForCollectibleSystem


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableRespectSaleLocation


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBEnableSendCounters


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBFixBuyingFromResellers


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBFixl20HasQuantityPurchase


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Flags.GetFFlagIBGateUGC4ACollectibleAssetsBundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.getSelectionImageObjectRegular


-- CoreGui.RobloxGui.Modules.InspectAndBuy.getSelectionImageObjectRounded


-- CoreGui.RobloxGui.Modules.InspectAndBuy.MockId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Models.AssetInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Models.BundleInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Models.CollectibleInstance


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Models.ExperienceInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.AssetBundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Assets


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Bundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.CollectibleResellableInstances


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.CreatingExperiences


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.DetailsInformation


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.EquippedAssets


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.FavoriteAssets


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.FavoriteBundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Favorites


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.GamepadEnabled


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.InspectAndBuyReducer


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.IsLoaded


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.IsSubjectToChinaPolicies


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.ItemBeingPurchased


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Locale


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Overlay


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.PlayerId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.PlayerName


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.StoreId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.TryingOnInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.View


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Reducers.Visible


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Selectors.GetIsFavorite


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Selectors.GotCurrentFavoriteCount


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Selectors.GotFavoriteForDetailsItem


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Selectors.IsDetailsItemPartOfBundleAndOffsale


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Services.Analytics


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Services.Network


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Symbol


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Test.getMockModel


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Test.MockAnalytics


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Test.MockNetwork


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Test.TestContainer


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunk


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.CreateFavoriteForAsset


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.CreateFavoriteForBundle


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.DeleteFavoriteForAsset


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.DeleteFavoriteForBundle


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetAssetBundles


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetAssetFavoriteCount


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetAssetsFromHumanoidDescription


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetBundleFavoriteCount


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetCharacterModelFromUserId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetCollectibleResellableInstances


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetEconomyProductInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetExperienceInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetExperiencePlayability


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetFavoriteForAsset


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetFavoriteForBundle


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetHumanoidDescriptionFromCostumeId


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetItemDetails


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetPlayerName


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetProductInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.GetVersionInfo


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.PromptPurchase


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.ReportOpenDetailsPage


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.SendCounter


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.TryOnItem


-- CoreGui.RobloxGui.Modules.InspectAndBuy.Thunks.UpdateOwnedStatus


-- CoreGui.RobloxGui.Modules.InspectAndBuy.UtilityFunctions


-- CoreGui.RobloxGui.Modules.InspectAndBuy.WideLandscapeView


-- CoreGui.RobloxGui.Modules.InspectAndBuy.WideView


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.EmotesChanged


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.EquippedEmotesChanged


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.FocusSegment


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.HideError


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.HideMenu


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.NumberEmotesLoadedChanged


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.SetGuiInset


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.SetLayout


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.SetLocale


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.ShowError


-- CoreGui.RobloxGui.Modules.EmotesMenu.Actions.ShowMenu


-- CoreGui.RobloxGui.Modules.EmotesMenu.Analytics


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.EmotesButtons


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.EmotesMenu


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.EmotesWheel


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.ErrorMessage


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.SelectionEffect


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.SelectionGradient


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.SlotNumbers


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.WheelBackground


-- CoreGui.RobloxGui.Modules.EmotesMenu.Components.WheelText


-- CoreGui.RobloxGui.Modules.EmotesMenu.Constants


-- CoreGui.RobloxGui.Modules.EmotesMenu.EmotesMenuMaster


-- CoreGui.RobloxGui.Modules.EmotesMenu.Layouts.Large


-- CoreGui.RobloxGui.Modules.EmotesMenu.Layouts.Small


-- CoreGui.RobloxGui.Modules.EmotesMenu.Layouts.TenFoot


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.DisplayOptions


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.EmotesMenuReducer


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.EmotesPage


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.EmotesWheel


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.Layout


-- CoreGui.RobloxGui.Modules.EmotesMenu.Reducers.Locale


-- CoreGui.RobloxGui.Modules.EmotesMenu.Thunks.OpenMenu


-- CoreGui.RobloxGui.Modules.EmotesMenu.Thunks.PlayEmote


-- CoreGui.RobloxGui.Modules.EmotesMenu.Utility.CanPlayEmotes


-- CoreGui.RobloxGui.Modules.EmotesMenu.Utility.GetSegmentFromPosition


-- CoreGui.RobloxGui.Modules.EmotesMenu.Utility.MaybeSendEmoteFailureAnalyticsFromPlayer


-- CoreGui.RobloxGui.Modules.CoreUtility


-- CoreGui.RobloxGui.Modules.isNewTiltIconEnabled


-- CoreGui.RobloxGui.Modules.VR.Dialog


-- CoreGui.RobloxGui.Modules.VR.Healthbar3D


-- CoreGui.RobloxGui.Modules.VR.NotificationHub


-- CoreGui.RobloxGui.Modules.VR.NotifierHint3D


-- CoreGui.RobloxGui.Modules.VR.Recenter


-- CoreGui.RobloxGui.Modules.VR.SafetyBubble


-- CoreGui.RobloxGui.Modules.VR.UserGui


-- CoreGui.RobloxGui.Modules.VR.VirtualKeyboard


-- CoreGui.RobloxGui.Modules.VR.VRAvatarGestures.VRAvatarGesturesClient


-- CoreGui.RobloxGui.Modules.VR.VRAvatarHeightScaling


-- CoreGui.RobloxGui.Modules.VR.VRBottomBar.VRBarSeparator


-- CoreGui.RobloxGui.Modules.VR.VRBottomBar.VRBarVoiceIcon


-- CoreGui.RobloxGui.Modules.VR.VRBottomBar.VRBottomBar


-- CoreGui.RobloxGui.Modules.VR.VRHub


-- CoreGui.RobloxGui.Modules.DevConsole.Action


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ActionBindingsUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ChangeDevConsoleSize


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ClientLogUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ClientMemoryUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ClientNetworkUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ClientScriptsUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.DataStoresUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.DebugVisualizationsUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerJobsUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerLogUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerMemoryUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerNetworkUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerScriptsUpdateSearchFilter

-- CoreGui.RobloxGui.Modules.DevConsole.Actions.ServerStatsUpdateSearchFilter


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetActiveTab


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetDevConsoleMinimized


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetDevConsolePosition


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetDevConsoleVisibility


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetLuauHeapActiveSnapshot


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetLuauHeapCompareSnapshot


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetLuauHeapProfileTarget


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetLuauHeapState


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetRCCProfilerState


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetScriptProfilerRoot


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetScriptProfilerState


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.SetTabList


-- CoreGui.RobloxGui.Modules.DevConsole.Actions.UpdateAveragePing


-- CoreGui.RobloxGui.Modules.DevConsole.CircularBuffer


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ActionBindings.ActionBindingsChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ActionBindings.ActionBindingsData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ActionBindings.MainViewActionBindings


-- CoreGui.RobloxGui.Modules.DevConsole.Components.BannerButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.BoxButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.CellCheckbox


-- CoreGui.RobloxGui.Modules.DevConsole.Components.CellLabel


-- CoreGui.RobloxGui.Modules.DevConsole.Components.CheckBox


-- CoreGui.RobloxGui.Modules.DevConsole.Components.CheckBoxContainer


-- CoreGui.RobloxGui.Modules.DevConsole.Components.CheckBoxDropDown


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ClientServerButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataConsumer


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataContext


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataProvider


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataStores.DataStoresChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataStores.DataStoresData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DataStores.MainViewDataStores


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DebugVisualizations.DebugVisualizationsChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DebugVisualizations.DebugVisualizationsData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DebugVisualizations.DebugVisualizationsStaticContent


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DebugVisualizations.MainViewDebugVisualizations


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DevConsoleTopBar


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DevConsoleWindow


-- CoreGui.RobloxGui.Modules.DevConsole.Components.DropDown


-- CoreGui.RobloxGui.Modules.DevConsole.Components.FullScreenDropDownButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.HeaderButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LineGraph


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LineGraphHoverDisplay


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LiveUpdateElement


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.ClientLog


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.DevConsoleCommandLine


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.LogData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.LogOutput


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.MainViewLog


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Log.ServerLog


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapTypes


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapViewEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapViewPathEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapViewRefEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.LuauHeapViewStatEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.LuauHeap.MainViewLuauHeap


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.ClientMemory


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.ClientMemoryData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.MainViewMemory


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.MemoryView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.MemoryViewEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.ServerMemory


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Memory.ServerMemoryData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.MicroProfiler.MainViewMicroProfiler


-- CoreGui.RobloxGui.Modules.DevConsole.Components.MicroProfiler.RCCProfilerDataCompleteListener


-- CoreGui.RobloxGui.Modules.DevConsole.Components.MicroProfiler.ServerProfilerInterface


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.ClientNetwork


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.MainViewNetwork


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.NetworkChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.NetworkChartEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.NetworkData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.NetworkSummary


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.NetworkView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Network.ServerNetwork


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.ClearStateForNewProfilingSession


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetAverage


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetDataView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetFrequency


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetIsProfiling


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetLiveUpdate


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetSearchData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetShowGC


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetShowPlugins


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetThreads


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.Actions.SetTimerState


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.MainViewScriptProfiler


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.MobileSettingsView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerDataFormatV2


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerExportView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerFunctionsView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerFunctionViewEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerUtil


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerView


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ProfilerViewEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.ServerProfilingData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScriptProfiler.TestData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Scripts.MainViewScripts


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Scripts.ServerScripts


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Scripts.ServerScriptsData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Scripts.ServerScriptsEntry


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ScrollingTextBox


-- CoreGui.RobloxGui.Modules.DevConsole.Components.SearchBar


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerJobs.MainViewServerJobs


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerJobs.ServerJobsChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerJobs.ServerJobsData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerStats.MainViewServerStats


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerStats.ServerStatsChart


-- CoreGui.RobloxGui.Modules.DevConsole.Components.ServerStats.ServerStatsData


-- CoreGui.RobloxGui.Modules.DevConsole.Components.TabRowButton


-- CoreGui.RobloxGui.Modules.DevConsole.Components.TabRowContainer


-- CoreGui.RobloxGui.Modules.DevConsole.Components.Tooltip


-- CoreGui.RobloxGui.Modules.DevConsole.Components.UtilAndTab


-- CoreGui.RobloxGui.Modules.DevConsole.Constants


-- CoreGui.RobloxGui.Modules.DevConsole.Immutable


-- CoreGui.RobloxGui.Modules.DevConsole.MiddleWare.DevConsoleAnalytics


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.ActionBindingsData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.DataStoresData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.DebugVisualizationsData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.DevConsoleDisplayOptions


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.DevConsoleReducer


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.LogData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.LuauHeap


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.MainView


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.MemoryData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.MicroProfiler


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.NetworkData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.ScriptProfiler


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.ScriptsData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.ServerJobsData


-- CoreGui.RobloxGui.Modules.DevConsole.Reducers.ServerStatsData


-- CoreGui.RobloxGui.Modules.DevConsole.Signal


-- CoreGui.RobloxGui.Modules.DevConsole.Util.convertTimeStamp


-- CoreGui.RobloxGui.Modules.DevConsole.Util.getClientReplicator


-- CoreGui.RobloxGui.Modules.DevConsole.Util.maxOfTable


-- CoreGui.RobloxGui.Modules.DevConsole.Util.minOfTable


-- CoreGui.RobloxGui.Modules.DevConsole.Util.setMouseVisibility


-- CoreGui.RobloxGui.Modules.LuobuWarningToast


-- CoreGui.RobloxGui.Modules.LuobuWarningToast.LuobuWarningToastComponent


-- CoreGui.RobloxGui.Modules.DevConsoleMaster


-- CoreGui.RobloxGui.Modules.Emote.EmoteHelper


-- CoreGui.RobloxGui.Modules.InGameMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.CancelLeavingGame


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.CloseNativeClosePrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.CloseReportDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.CloseReportSentDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.DecrementControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.IncrementControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.NavigateBack


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.OpenNativeClosePrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.OpenReportDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.OpenReportSentDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.ReceivedUserInviteStatus


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetControlLayout


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetControllerBarHeight


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetCurrentPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetCurrentZone


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetFriendStatus


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetGameNameAndDescription


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetInputType


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetInspectMenuEnabled


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetLocaleId


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetMainPageMoreMenuOpen


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetMenuIconTooltipOpen


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetMenuOpen


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetRespawnBehavior


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetRespawning


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetScreenSize


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.SetVideoRecording


-- CoreGui.RobloxGui.Modules.InGameMenu.Actions.StartLeavingGame


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.App


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.AssetImage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.BarOnTopScrollingFrame


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.BlurredModalPortal


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ConfirmationDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.FocusHandler


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.FocusHandlerUtils.FocusHandlerContext


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.FocusHandlerUtils.FocusHandlerContextProvider


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.FocusHighlightManager


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.FriendStatusConnector


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.LastInputTypeConnector


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.MouseOverrideManager


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.NativeCloseEventConnector


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.RootedConnection


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Connection.VideoRecordConnector


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlEntryHeader


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayoutContainer


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayouts.GamepadControls


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayouts.KeyboardControls


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayouts.TouchControls


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayouts.VRGamepadControls


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ControlsPage.ControlLayoutSetter


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Divider


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.DropDownSelection


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.EducationalPopup


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.EducationalPopupDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.FullscreenTitleBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameIcon


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameIconHeader


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.AdvancedPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.AutoPropertyToggleEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.BasicPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.CameraModeEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.CameraSensitivityEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.CategoryHeader


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.ComfortSettingsEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.DeveloperLockLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.DeviceSelectionEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.GraphicsQualityEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.InputLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.MovementModeEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.SafetyBubbleModeEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.SliderEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.ToggleEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.VersionReporter


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.VolumeEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.VRComfortAutoToggleEntry


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.GameSettingsPage.VRComfortSettingsPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.getGameIconRequestSize


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.IGMControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.IGMControllerBar2


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.IGMMainPageControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.IGMRespawnControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InfoDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InformationalDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage.AddFriendsNow


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage.InviteFriendsList


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage.LoadingFriendsError


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage.SearchBox


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.InviteFriendsPage.SendInviteButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.KeyLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.LeaveGameDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.MainPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.MenuIconTooltip


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.OpenMenuButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PaddedScrollFrame


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Page


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PageContainer


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PageNavigation


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PageNavigationWatcher


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages.Dialog.LeaveGamePrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages.Dialog.LeavePrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages.Dialog.LeaveToAppPrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages.InitalPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Pages.PlayersPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PlayerCell


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PlayerContextualMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PlayerLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PlayerLabelV2


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PlayerMoreButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.PointerLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.FillCircle


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.GameLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.ReportButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.ReportDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.ReportList


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.ReportSentDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ReportPage.TextEntryField


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.RespawnDialog


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SearchBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SideNavigation


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SideNavigation.CloseMenuButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SideNavigation.GameIconButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SideNavigation.HomeButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SideNavigation.SystemMenuButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.Slider


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.SliderWithInput


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ThemedButton


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ThemedTextLabel


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ToggleSwitch


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ViewportOverlay


-- CoreGui.RobloxGui.Modules.InGameMenu.Components.ZonePortal


-- CoreGui.RobloxGui.Modules.InGameMenu.createStore


-- CoreGui.RobloxGui.Modules.InGameMenu.Enums.Direction


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.FFlagAlwaysShowDisplayNameInExpMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.FFlagFixExitDialogBlockVRView


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.FFlagLuaMenuPerfImprovements


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.FFlagRecordRecording


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagCleanUpFullscreenTitleBarPromiseOnUnmount


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagFixFullscreenTitleBarPromiseCancel


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagFullscreenTitleBarInjectGameServices


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagIGMGamepadSelectionHistory


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagIGMRefactorPlayerContextualMenuGamepadSupport


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagSideNavControllerBar


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFFlagTruncateDeviceSelection


-- CoreGui.RobloxGui.Modules.InGameMenu.Flags.GetFIntFullscreenTitleBarTriggerDelayMillis


-- CoreGui.RobloxGui.Modules.InGameMenu.GlobalConfig


-- CoreGui.RobloxGui.Modules.InGameMenu.InGameMenuPolicy


-- CoreGui.RobloxGui.Modules.InGameMenu.jest.config


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ar-001


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.bg-bg


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.bn-bd


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.bs-ba


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.cs-cz


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.da-dk


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.de-de


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.el-gr


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.en-us


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.es-es


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.et-ee


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.fi-fi


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.fil-ph


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.fr-fr


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.hi-in


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.hr-hr


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.hu-hu


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.id-id


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.it-it


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ja-jp


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ka-ge


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.kk-kz


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.km-kh


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ko-kr


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.lt-lt


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.lv-lv


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ms-my


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.my-mm


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.nb-no


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.nl-nl


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.pl-pl


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.pt-br


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ro-ro


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.ru-ru


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.si-lk


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.sk-sk


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.sl-sl


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.sq-al


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.sr-rs


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.sv-se


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.th-th


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.tr-tr


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.uk-ua


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.vi-vn


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.zh-cjv


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.zh-cn


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Locales.zh-tw


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.Localization


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.LocalizationConsumer


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.LocalizationContext


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.LocalizationProvider


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.LocalizationRoactContext


-- CoreGui.RobloxGui.Modules.InGameMenu.Localization.withLocalization


-- CoreGui.RobloxGui.Modules.InGameMenu.Mocks.MockUserGameSettings


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.httpRequest


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Requests.DEPRECATED_ChatSendGameLinkMessage


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Requests.DEPRECATED_ChatSendMessage


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Requests.DEPRECATED_ChatStartOneToOneConversation


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Requests.Games.GetIcons


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Requests.GetPlaceInfos


-- CoreGui.RobloxGui.Modules.InGameMenu.Network.Url


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.displayOptions


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.friends


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.gameInfo


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.invites


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.nativeClosePrompt


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.navigationReducer


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.report


-- CoreGui.RobloxGui.Modules.InGameMenu.reducer.respawn


-- CoreGui.RobloxGui.Modules.InGameMenu.Resources.Assets


-- CoreGui.RobloxGui.Modules.InGameMenu.Resources.Constants


-- CoreGui.RobloxGui.Modules.InGameMenu.Resources.Controls


-- CoreGui.RobloxGui.Modules.InGameMenu.Resources.GetImageSetData


-- CoreGui.RobloxGui.Modules.InGameMenu.Resources.Images


-- CoreGui.RobloxGui.Modules.InGameMenu.SetupFunctions.bindMenuActions


-- CoreGui.RobloxGui.Modules.InGameMenu.SetupFunctions.registerSetCores


-- CoreGui.RobloxGui.Modules.InGameMenu.SetupFunctions.requestGameNameAndDescription


-- CoreGui.RobloxGui.Modules.InGameMenu.TestHelpers.withInt


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.CloseMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.InviteUserToPlaceId


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.NavigateUp


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.OpenEducationalPopup


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.OpenMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.OpenSystemMenu


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.RespawnPlayer


-- CoreGui.RobloxGui.Modules.InGameMenu.Thunks.SendReport


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.constructGameLinkUrl


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.divideTransparency


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.ExternalEventConnection


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.LeaveGame


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.PlayerSearchPredicate


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.Promise


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.SendAnalytics


-- CoreGui.RobloxGui.Modules.InGameMenu.Utility.UserLocalStore


-- CoreGui.RobloxGui.Modules.ErrorPrompt


-- CoreGui.RobloxGui.Modules.ErrorTestSets


-- CoreGui.RobloxGui.Modules.ExperienceMenuABTestManager


-- CoreGui.RobloxGui.Modules.Experiment.GetCoreScriptsLayers


-- CoreGui.RobloxGui.Modules.GamepadDisconnect.CoreScriptsGamepadDisconnectListener


-- CoreGui.RobloxGui.Modules.FacialAnimationStreaming.FacialAnimationStreamingHeartbeatStats


-- CoreGui.RobloxGui.Modules.FacialAnimationStreaming.RobloxTelemetryConfigs.AvatarChatHeartbeatStats


-- CoreGui.RobloxGui.Modules.FacialAnimationStreaming.RobloxTelemetryConfigs.AvatarChatSubsessionInput


-- CoreGui.RobloxGui.Modules.FacialAnimationStreaming.RobloxTelemetryConfigs.AvatarChatSubsessionStats


-- CoreGui.RobloxGui.Modules.Feedback


-- CoreGui.RobloxGui.Modules.Feedback.Actions.IncrementFeedbackSubmissionAttempts


-- CoreGui.RobloxGui.Modules.Feedback.Actions.SetFeedbackFlowState


-- CoreGui.RobloxGui.Modules.Feedback.Actions.SetFeedbackReason


-- CoreGui.RobloxGui.Modules.Feedback.Actions.SetScreenSize


-- CoreGui.RobloxGui.Modules.Feedback.Actions.ShowHelpModal


-- CoreGui.RobloxGui.Modules.Feedback.Actions.ShowOnboardingModal


-- CoreGui.RobloxGui.Modules.Feedback.Components.FeedbackApp


-- CoreGui.RobloxGui.Modules.Feedback.Components.FeedbackBarHint


-- CoreGui.RobloxGui.Modules.Feedback.Components.FeedbackReportDialog


-- CoreGui.RobloxGui.Modules.Feedback.Components.FeedbackSubmissionToast


-- CoreGui.RobloxGui.Modules.Feedback.Components.HelpModal


-- CoreGui.RobloxGui.Modules.Feedback.Components.ModalDialog


-- CoreGui.RobloxGui.Modules.Feedback.Components.OnboardingModal


-- CoreGui.RobloxGui.Modules.Feedback.Components.PortedComponents.Divider


-- CoreGui.RobloxGui.Modules.Feedback.Components.PortedComponents.ThemedTextLabel


-- CoreGui.RobloxGui.Modules.Feedback.Components.RefinedFeedbackBar


-- CoreGui.RobloxGui.Modules.Feedback.Components.TextEntryField


-- CoreGui.RobloxGui.Modules.Feedback.GlobalConfig


-- CoreGui.RobloxGui.Modules.Feedback.Network.PostFeedback


-- CoreGui.RobloxGui.Modules.Feedback.Reducers


-- CoreGui.RobloxGui.Modules.Feedback.Reducers.common


-- CoreGui.RobloxGui.Modules.Feedback.Reducers.displayOptions


-- CoreGui.RobloxGui.Modules.Feedback.Reducers.feedbackFlowState


-- CoreGui.RobloxGui.Modules.Feedback.Resources.Assets


-- CoreGui.RobloxGui.Modules.Feedback.Resources.Constants


-- CoreGui.RobloxGui.Modules.Feedback.Thunks.SendFeedbackThunk


-- CoreGui.RobloxGui.Modules.Feedback.Thunks.ShowHelpModalThunk


-- CoreGui.RobloxGui.Modules.Feedback.Thunks.ShowOnboardingModalThunk


-- CoreGui.RobloxGui.Modules.FriendingUtility


-- CoreGui.RobloxGui.Modules.GameTranslator


-- CoreGui.RobloxGui.Modules.HttpAnalyticsTab


-- CoreGui.RobloxGui.Modules.Logger


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.AddMessage


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.AddMessageFromEvent


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.AddMessageWithTimeout


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.BubbleChatEnabledChanged


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.RemoveMessage


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.SetMessageText


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Actions.UpdateChatSettings


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.BubbleChat.storybook


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.ChatSettings


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.App


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.BubbleChatBillboard


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.BubbleChatBillboards


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.BubbleChatList


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ChatBubble


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ChatBubbleDistant


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ControlBubble


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ControlBubbleV2


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ControlsBubble


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.ControlsBubbleV2


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Components.VoiceBubble


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Constants


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.GlobalConfig


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.createMockMessage


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.displayCameraDeniedToast


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.getPlayerFromPart


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.getSettingsForMessage


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.getSizeSpringFromSettings


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.getTransparencySpringFromSettings


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.getVoiceIndicatorAssetName


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.maybeAssert


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.StoryStore


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Helpers.validateMessage


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Logger


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Reducers.chatReducer


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Reducers.chatSettings


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Reducers.components


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Reducers.messages


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Reducers.userMessages


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Themes


-- CoreGui.RobloxGui.Modules.InGameChat.BubbleChat.Types


-- CoreGui.RobloxGui.Modules.InGameMenuConstants


-- CoreGui.RobloxGui.Modules.InGameMenuInit


-- CoreGui.RobloxGui.Modules.IsExperienceMenuABTestEnabled


-- CoreGui.RobloxGui.Modules.isNewInGameMenuEnabled


-- CoreGui.RobloxGui.Modules.LoadingScreen3D


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.CloseOpenPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.CloseResultModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.OpenPublishAssetPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.OpenPublishAvatarPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.OpenResultModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.OpenValidationErrorModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.SetPriceInRobux


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.SetPromptVisibility


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Actions.SetSerializedModel


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.AssetDescriptionTextBox


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.BasePublishPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.InteractionFrame


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.LabeledTextBox


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.NameTextBox


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.ObjectViewport


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.PreviewViewport


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.Common.PublishInfoList


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.EmoteThumbnailEditor


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.EmoteThumbnailParameters


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.EmoteThumbnailView


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.LeaveCreationAlert


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.ObjectViewport


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAssetPromptApp


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAssetPromptSingleStep


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAvatarPrompt.AvatarParts.AvatarItemCard


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAvatarPrompt.AvatarParts.AvatarPartGrid


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAvatarPrompt.AvatarParts.AvatarPartViewport


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.PublishAvatarPrompt.PublishAvatarPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.ResultModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Components.ValidationErrorModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.ConnectAssetServiceEvents


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Constants


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.FFlagPublishAvatarPromptEnabled


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.GetFFlagValidateDescription


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.PromptType


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Reducer


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Reducer.PromptRequestReducer


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Thunks.CloseResultModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Thunks.OpenPublishAssetPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Thunks.OpenPublishAvatarPrompt


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Thunks.OpenResultModal


-- CoreGui.RobloxGui.Modules.PublishAssetPrompt.Thunks.OpenValidationErrorModal


-- CoreGui.RobloxGui.Modules.NetworkPauseNotification


-- CoreGui.RobloxGui.Modules.PromptCreator


-- CoreGui.RobloxGui.Modules.ProximityPromptsTests.PlayerHelper


-- CoreGui.RobloxGui.Modules.PurchasePrompt


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.AccountInfoReceived


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.BalanceInfoRecieved


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.BundleProductInfoReceived


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.CompleteRequest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.ErrorOccurred


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.makeActionCreator


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.PremiumInfoRecieved


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.ProductInfoReceived


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.PromptNativeUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.PurchaseCompleteRecieved


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestAssetPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestAvatarCreationFeePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestBundlePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestGamepassPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestPremiumPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestProductPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.RequestSubscriptionPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetABVariation


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetButtonState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetGamepadEnabled


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetProduct


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetPromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetPurchaseFlow


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SetWindowState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.StartHidingPrompt


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.StartPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Actions.SubscriptionPurchaseInfoReceived


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.BrowserPurchaseFinishedConnector


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.EventConnections


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.ExternalEventConnection


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.InputTypeManager


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LayoutValuesConsumer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LayoutValuesContext


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LayoutValuesProvider


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LocalizationContext


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LocalizationContextConsumer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.LocalizationContextProvider


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.MarketplaceServiceEventConnector


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.MultiTextLocalizer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.NativePurchaseFinishedConnector


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.NumberLocalizer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.provideRobloxLocale


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.PurchasePromptPolicy


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.TextLocalizer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.Connection.withLayoutValues


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.PremiumUpsell.PremiumUpsellContainer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.PremiumUpsell.PremiumUpsellOverlay


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.ProductPurchase.Animator


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.ProductPurchase.ProductPurchaseContainer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.PurchasePromptApp


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.RobuxUpsell.RobuxUpsellContainer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.RobuxUpsell.RobuxUpsellOverlay


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.SubscriptionPurchase.SubscriptionPurchaseContainer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Components.SubscriptionPurchase.SubscriptionPurchaseOverlay


-- CoreGui.RobloxGui.Modules.PurchasePrompt.connectToStore


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.ButtonState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.Counter


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.createEnum


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.ItemType


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.PaymentPlatform


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.PromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.PurchaseError


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.PurchaseFlow


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.PurchaseWarning


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.RequestType


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.UpsellFlow


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Enums.WindowState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagDisablePurchasePromptFunctionForMaquettes


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagDisableRobuxUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableAvatarCreationFeePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableInsufficientRobuxForBundleUpsellFix


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableLuobuInGameUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnablePalisadesPaymentsPlatform


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnablePerformPurchaseGCSHandling


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnablePromptPurchaseRequestedV2


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnablePromptPurchaseRequestedV2Take2


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableQuestIAPAnalytics


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableQuestPaymentPlatformType


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableRestrictedAssetSaleLocationPurchasePrompt


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableRobloxCreditPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableSubscriptionPurchaseToast


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagEnableToastLiteRender


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagFixBundlePromptThumbnail


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagFixPlayerGuiSelectionBugOnPromptExit


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagFixPlayerGuiSelectionBugOnPromptExitPremium


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagRespectBalanceInfoForBundleUpsellInStudio


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagReturnNotForSaleOnInvalidBundleId


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagTranslateDevProducts


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagUseCatalogItemDetailsToResolveBundlePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFLagUseCoreScriptsRootProviderForUpsellModal


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.GetFFlagUsePlatformNameForUnknown


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Flags.LargerRobuxUpsellTest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.getPreviewImageUrl


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.getLocalizationContext


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.KeyMappings


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ar-001


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.bg-bg


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.bn-bd


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.bs-ba


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.cs-cz


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.da-dk


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.de-de


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.el-gr


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.en-us


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.es-es


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.et-ee


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.fi-fi


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.fil-ph


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.fr-fr


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.hi-in


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.hr-hr


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.hu-hu


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.id-id


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.it-it


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ja-jp


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ka-ge


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.kk-kz


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.km-kh


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ko-kr


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.lt-lt


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.lv-lv


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ms-my


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.my-mm


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.nb-no


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.nl-nl


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.pl-pl


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.pt-br


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ro-ro


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.ru-ru


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.si-lk


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.sk-sk


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.sl-sl


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.sq-al


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.sr-rs


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.sv-se


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.th-th


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.tr-tr


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.uk-ua


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.vi-vn


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.zh-cjv


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.zh-cn


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.Locales.zh-tw


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Localization.LocalizationService


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Misc.Constants


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Misc.createSignal


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Models.PremiumProduct


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Models.RobuxUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.NativeUpsell.getUpsellFlow


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getAccountInfo


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getBalanceInfo


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getBundleDetails


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getCatalogItemDetails


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getIsAlreadyOwned


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getPremiumProductInfo


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getPremiumUpsellPrecheck


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getProductInfo


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getProductPurchasableDetails


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getPurchaseWarning


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getRobuxUpsellProduct


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getSubscriptionPurchaseInfo


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.getToolAsset


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.performPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.performPurchaseV2


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.performSubscriptionPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.postPremiumImpression


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Network.postPurchaseWarningAcknowledge


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Promise


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.ABVariationReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.AccountInfoReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.ButtonStateReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.GamepadEnabledReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.HasCompletedPurchaseReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.NativeUpsellReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PremiumProductsReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.ProductInfoReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.ProductReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PromptRequestReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PromptStateReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PurchaseErrorReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PurchaseFlowReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.PurchasingStartTimeReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.Reducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.SubscriptionPurchaseInfoReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Reducers.WindowStateReducer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.ABTest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.Analytics


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.ExternalSettings


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.LayoutValues


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.Network


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Services.PlatformInterface


-- CoreGui.RobloxGui.Modules.PurchasePrompt.strict


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Symbols.Symbol


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockABTest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockAnalytics


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockExternalSettings


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockNetwork


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockPlatformInterface


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.MockStore


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Test.UnitTestContainer


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunk


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.completePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.completeRequest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.hideWindow


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiateAvatarCreationFeePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiateBundlePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiatePremiumPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiatePurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiatePurchasePrecheck


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.initiateSubscriptionPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.launchPremiumUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.launchRobuxUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.launchSubscriptionPurchase


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.openRobuxStore


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.openSecuritySettings


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.openTermsOfUse


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.purchaseItem


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.resolveBundlePromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.resolvePremiumPromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.resolvePromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.resolvePurchasePrecheck


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.resolveSubscriptionPromptState


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.retryAfterUpsell


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.sendCounter


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Thunks.sendEvent


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.addRawValueMethodToEnum


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.Base64


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.ClickScamDetector


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.debugLog


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getCounterCombinations


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getHasAmazonUserAgent


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getHasLuobuFlag


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getHasQuestUserAgent


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getPaymentFromPlatform


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getPaymentFromPlatformLegacy


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getPaymentPlatform


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getPlayerPrice


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.getPlayerProductInfoPrice


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.hasPendingRequest


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.isGenericChallengeResponse


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.isLinksAllowed


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.isMockingPurchases


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.meetsPrerequisites


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.parseSubscriptionError


-- CoreGui.RobloxGui.Modules.PurchasePrompt.Utils.serializeTable


-- CoreGui.RobloxGui.Modules.RobloxTranslator


-- CoreGui.RobloxGui.Modules.Tracker.TrackerMenu


-- CoreGui.RobloxGui.Modules.Tracker.TrackerPrompt


-- CoreGui.RobloxGui.Modules.Tracker.TrackerPromptType


-- CoreGui.RobloxGui.Modules.Screenshots.ScreenshotsApp


-- CoreGui.RobloxGui.Modules.SelfieView


-- CoreGui.RobloxGui.Modules.SelfieView.Components.CameraStatusDot


-- CoreGui.RobloxGui.Modules.SelfieView.Components.CameraStatusIcon


-- CoreGui.RobloxGui.Modules.SelfieView.Components.FaceClone


-- CoreGui.RobloxGui.Modules.SelfieView.Components.Icon


-- CoreGui.RobloxGui.Modules.SelfieView.Components.Window


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewDontStartOnOpen


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewDontWaitForCharacter


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewEnabled


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewEnabledMock


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewHideCameraStatusDot


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewPreviewShrinkIcon


-- CoreGui.RobloxGui.Modules.SelfieView.Flags.GetFFlagSelfieViewRedStatusDot


-- CoreGui.RobloxGui.Modules.SelfieView.Hooks.useCameraOn


-- CoreGui.RobloxGui.Modules.SelfieView.Hooks.useLocalPlayer


-- CoreGui.RobloxGui.Modules.SelfieView.Hooks.useTooltipDismissal


-- CoreGui.RobloxGui.Modules.SelfieView.Hooks.useTrackerMessage


-- CoreGui.RobloxGui.Modules.SelfieView.Hooks.useTrackerMode


-- CoreGui.RobloxGui.Modules.SelfieView.Utils.FaceChatUtils


-- CoreGui.RobloxGui.Modules.SelfieView.Utils.ModelUtils


-- CoreGui.RobloxGui.Modules.SelfieView.Utils.SizingUtils


-- CoreGui.RobloxGui.Modules.SelfView.Analytics


-- CoreGui.RobloxGui.Modules.SelfView.mountSelfViewOnCloseTooltip


-- CoreGui.RobloxGui.Modules.SelfView.mountSelfViewOnOpenTooltip


-- CoreGui.RobloxGui.Modules.SelfView.publicApi


-- CoreGui.RobloxGui.Modules.SelfView.SelfViewTooltipFTUX


-- CoreGui.RobloxGui.Modules.SelfView.selfViewVisibilityUpdatedSignal


-- CoreGui.RobloxGui.Modules.SelfView.toggleSelfViewSignal


-- CoreGui.RobloxGui.Modules.Server.ClientChat.BubbleChat.BubbleChat


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChannelsBar


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChannelsTab


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatBar


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatChannel


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatInstallVerifier


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatMain


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatScript


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatWindow


-- CoreGui.RobloxGui.Modules.Server.ClientChat.ChatWindowInstaller


-- CoreGui.RobloxGui.Modules.Server.ClientChat.CommandProcessor


-- CoreGui.RobloxGui.Modules.Server.ClientChat.CurveUtil


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.ChatConstants


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.ChatLocalization


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.ChatSettings


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.ClearMessages


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.DeveloperConsole


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.GetVersion


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.PlayEmote


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.SwallowGuestChat


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.SwitchChannel


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.Team


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.Util


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.CommandModules.Whisper


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.DefaultChatMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.MeCommandMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.SetCoreMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.SystemMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.UnknownMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.Util


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.WelcomeMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.DefaultClientChatModules.MessageCreatorModules.WhisperMessage


-- CoreGui.RobloxGui.Modules.Server.ClientChat.MessageLabelCreator


-- CoreGui.RobloxGui.Modules.Server.ClientChat.MessageLogDisplay


-- CoreGui.RobloxGui.Modules.Server.ClientChat.MessageSender


-- CoreGui.RobloxGui.Modules.Server.ClientChat.TransparencyTweener


-- CoreGui.RobloxGui.Modules.Server.FreeCamera.FreeCamera


-- CoreGui.RobloxGui.Modules.Server.FreeCamera.FreeCameraInstaller


-- CoreGui.RobloxGui.Modules.Server.SendChatAnalytics


-- CoreGui.RobloxGui.Modules.Server.ServerChat.ChatChannel


-- CoreGui.RobloxGui.Modules.Server.ServerChat.ChatService


-- CoreGui.RobloxGui.Modules.Server.ServerChat.ChatServiceInstaller


-- CoreGui.RobloxGui.Modules.Server.ServerChat.ChatServiceRunner


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatLocalization


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.ChatCommandsTeller


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.ChatFloodDetector


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.ChatMessageValidator


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.ExtraDataInitializer


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.FriendJoinNotifier


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.MeCommand


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.MuteSpeaker


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.PrivateMessaging


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.TeamChat


-- CoreGui.RobloxGui.Modules.Server.ServerChat.DefaultChatModules.Utility.DisplayNameHelpers


-- CoreGui.RobloxGui.Modules.Server.ServerChat.Speaker


-- CoreGui.RobloxGui.Modules.Server.ServerChat.Util


-- CoreGui.RobloxGui.Modules.Server.ServerPlayer.DefaultServerPlayerModules.PlayerSettings


-- CoreGui.RobloxGui.Modules.Server.ServerPlayer.ServerPlayerInstaller


-- CoreGui.RobloxGui.Modules.Server.ServerSound.SoundDispatcher


-- CoreGui.RobloxGui.Modules.Server.ServerSound.SoundDispatcherInstaller


-- CoreGui.RobloxGui.Modules.Server.ServerUtil


-- CoreGui.RobloxGui.Modules.Server.UGCValidation.UGCValidationFunctionInstaller


-- CoreGui.RobloxGui.Modules.Server.VR.VRAvatarGesturesServer


-- CoreGui.RobloxGui.Modules.Settings.Analytics.BlockingAnalytics


-- CoreGui.RobloxGui.Modules.Settings.Analytics.VoiceAnalytics


-- CoreGui.RobloxGui.Modules.Settings.BackButtonController


-- CoreGui.RobloxGui.Modules.Settings.cameraDevicePermissionGrantedSignal


-- CoreGui.RobloxGui.Modules.Settings.cameraDevicesHelper


-- CoreGui.RobloxGui.Modules.Settings.Components.Blocking.ActionModal


-- CoreGui.RobloxGui.Modules.Settings.Components.Blocking.BlockingModalContainer


-- CoreGui.RobloxGui.Modules.Settings.Components.Blocking.BlockingModalScreen


-- CoreGui.RobloxGui.Modules.Settings.Components.DropdownMenu


-- CoreGui.RobloxGui.Modules.Settings.Components.MenuBackButton


-- CoreGui.RobloxGui.Modules.Settings.Components.MuteToggles


-- CoreGui.RobloxGui.Modules.Settings.Components.OverscanWrapper


-- CoreGui.RobloxGui.Modules.Settings.Components.PermissionButton


-- CoreGui.RobloxGui.Modules.Settings.Components.PermissionsButtons


-- CoreGui.RobloxGui.Modules.Settings.Components.RecordingIndicator


-- CoreGui.RobloxGui.Modules.Settings.Components.ReportConfirmation.CheckboxRow


-- CoreGui.RobloxGui.Modules.Settings.Components.ReportConfirmation.ReportActionAreYouSure


-- CoreGui.RobloxGui.Modules.Settings.Components.ReportConfirmation.ReportActionSelection


-- CoreGui.RobloxGui.Modules.Settings.Components.ReportConfirmation.ReportConfirmationContainer


-- CoreGui.RobloxGui.Modules.Settings.Components.ReportConfirmation.ReportConfirmationScreen


-- CoreGui.RobloxGui.Modules.Settings.Components.SettingsFullScreenTitleBar


-- CoreGui.RobloxGui.Modules.Settings.Enum.SeamlessVoiceStatus


-- CoreGui.RobloxGui.Modules.Settings.Enum.UserSorts


-- CoreGui.RobloxGui.Modules.Settings.Experiments.NotchSupportExperiment


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagAbuseReportAnalyticsHasLaunchData


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagDefaultFriendingLabelTextNonEmpty


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagEnableExplicitSettingsChangeAnalytics


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagEnableLeaveGameUpsellEntrypoint


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagEnablePreferredTextSizeStyleFixesInExperienceMenu


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagFixCyclicFullscreenIndexEvent


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagFixIGMBottomBarVisibility


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagFixIGMTabTransitions


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagFixPermissionsButtonsEvents


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagFixSettingsHubVRBackgroundError


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagIGMv1ARFlowExpandedAnalyticsEnabled


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagInGameMenuV1FadeBackgroundAnimation


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagInviteFriendsDesignUpdates


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagMuteTogglesEnableIXP


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagReportAbuseMenuEntrypointAnalytics


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagReportAnythingAnnotationIXP


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagRetryMutingNonFriends


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagRightAlignMicText


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagSettingsHubButtonCanBeDisabled


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagShareGameSearchBoxFocusAnalytics


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagShareInviteLinkContextMenuV1Enabled


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagShowMuteToggles


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagSingleUserInvitePageKeybind


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFFlagUseFriendsPropsInMuteToggles


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFIntIGMv1ARFlowCSWaitFrames


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFStringMuteTogglesIXPLayerName


-- CoreGui.RobloxGui.Modules.Settings.Flags.GetFStringReportAnythingAnnotationIXPLayerName


-- CoreGui.RobloxGui.Modules.Settings.getCamMicPermissions


-- CoreGui.RobloxGui.Modules.Settings.getPlaceVoiceCameraEnabled


-- CoreGui.RobloxGui.Modules.Settings.getVoiceCameraAccountSettings


-- CoreGui.RobloxGui.Modules.Settings.GfxReset


-- CoreGui.RobloxGui.Modules.Settings.isCamEnabledForUserAndPlace


-- CoreGui.RobloxGui.Modules.Settings.isCameraOnlyUser


-- CoreGui.RobloxGui.Modules.Settings.leaveGame


-- CoreGui.RobloxGui.Modules.Settings.Models.Game


-- CoreGui.RobloxGui.Modules.Settings.onBlockButtonActivated


-- CoreGui.RobloxGui.Modules.Settings.Pages.AppChat


-- CoreGui.RobloxGui.Modules.Settings.Pages.ExitModal


-- CoreGui.RobloxGui.Modules.Settings.Pages.GameSettings


-- CoreGui.RobloxGui.Modules.Settings.Pages.GameSettingsRowInitializers.ChatTranslationOptionsWithChatLanguageSwitcherInitializer


-- CoreGui.RobloxGui.Modules.Settings.Pages.Help


-- CoreGui.RobloxGui.Modules.Settings.Pages.Home


-- CoreGui.RobloxGui.Modules.Settings.Pages.LeaveGame


-- CoreGui.RobloxGui.Modules.Settings.Pages.LeaveGameToHome


-- CoreGui.RobloxGui.Modules.Settings.Pages.LeaveGameUpsell.LeaveGameUpsell


-- CoreGui.RobloxGui.Modules.Settings.Pages.Players


-- CoreGui.RobloxGui.Modules.Settings.Pages.Record


-- CoreGui.RobloxGui.Modules.Settings.Pages.ReportAbuseMenuNewContainerPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ReportSentPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ReportSentPageV2


-- CoreGui.RobloxGui.Modules.Settings.Pages.ResetCharacter


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.ClosePage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.OpenPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.ReceivedUserInviteStatus


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.SetDeviceLayout


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.SetGameInfoCreated


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.SetIsSmallTouchScreen


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.SetSearchAreaActive


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.SetSearchText


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Actions.StoppedToastTimer


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.AppReducer


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.App


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.BackButton


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ConversationDetails


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ConversationEntry


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ConversationList


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ConversationThumbnail


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ErrorToaster


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.FriendsErrorPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.FullModalShareGameComponent


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.Header


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.IconButton


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.InviteButton


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.InviteListEntry


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.InviteSingleUserContainer


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.LayoutProvider


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.LoadingFriendsPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.LoadingModal


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ModalShareGamePageFrame


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.NoFriendsPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.RectangleButton


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.SearchArea


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.SearchBox


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareButton


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareGameContainer


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareGamePageFrame


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareInviteLink


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareInviteLinkMapDispatchToProps


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.ShareInviteLinkMapStateToProps


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Components.SingleUserThumbnail


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Constants


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.getCustomizedInvitePromptParams


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.getTranslator


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.InviteStore


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.InviteToGamePrompt


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.mockTranslator


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.NewInviteMenuExperimentManager


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.PresenceUtil


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.ConversationsSearch


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.DeviceInfo


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.GameInfo


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.Invites


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.Page


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Reducers.Toasts


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Spritesheets.ShareGameIcons


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.ThrottleFunctionCall


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.ApiFetchUsersFriends


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.ApiGetCanSendAndCanCustomizeInvites


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.ApiSendGameInvite


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.FetchUserFriends


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.InviteUserIdToPlaceId


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGame.Thunks.InviteUserIdToPlaceIdCustomized


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShareGamePlaceholderPage


-- CoreGui.RobloxGui.Modules.Settings.Pages.ShotsPageWrapper


-- CoreGui.RobloxGui.Modules.Settings.Reducers.SettingsReducer


-- CoreGui.RobloxGui.Modules.Settings.Resources.Constants


-- CoreGui.RobloxGui.Modules.Settings.Resources.MicrophoneDevicePermissionsLogging


-- CoreGui.RobloxGui.Modules.Settings.Settings.storybook


-- CoreGui.RobloxGui.Modules.Settings.SettingsHub


-- CoreGui.RobloxGui.Modules.Settings.SettingsPageFactory


-- CoreGui.RobloxGui.Modules.Settings.SettingsState


-- CoreGui.RobloxGui.Modules.Settings.ShareGameMaster


-- CoreGui.RobloxGui.Modules.Settings.Theme


-- CoreGui.RobloxGui.Modules.Settings.Utility


-- CoreGui.RobloxGui.Modules.ShareInviteLinkABTestManager


-- CoreGui.RobloxGui.Modules.Shimmer


-- CoreGui.RobloxGui.Modules.shouldSaveScreenshotToAlbum


-- CoreGui.RobloxGui.Modules.SocialUtil


-- CoreGui.RobloxGui.Modules.Stats.BarGraph


-- CoreGui.RobloxGui.Modules.Stats.BaseMemoryAnalyzer


-- CoreGui.RobloxGui.Modules.Stats.ClientMemoryAnalyzer


-- CoreGui.RobloxGui.Modules.Stats.DecoratedValueLabel


-- CoreGui.RobloxGui.Modules.Stats.ServerMemoryAnalyzer


-- CoreGui.RobloxGui.Modules.Stats.StatsAggregator


-- CoreGui.RobloxGui.Modules.Stats.StatsAggregatorManager


-- CoreGui.RobloxGui.Modules.Stats.StatsAnnotatedGraph


-- CoreGui.RobloxGui.Modules.Stats.StatsButton


-- CoreGui.RobloxGui.Modules.Stats.StatsMiniTextPanel


-- CoreGui.RobloxGui.Modules.Stats.StatsTextPanel


-- CoreGui.RobloxGui.Modules.Stats.StatsUtils


-- CoreGui.RobloxGui.Modules.Stats.StatsViewer


-- CoreGui.RobloxGui.Modules.Stats.TreeViewItem


-- CoreGui.RobloxGui.Modules.StyleWidgets


-- CoreGui.RobloxGui.Modules.TenFootInterface


-- CoreGui.RobloxGui.Modules.TestHelpers.MockAppStorageService


-- CoreGui.RobloxGui.Modules.TestHelpers.MockGuiService


-- CoreGui.RobloxGui.Modules.TestHelpers.MockVRService


-- CoreGui.RobloxGui.Modules.TopBar


-- CoreGui.RobloxGui.Modules.TopBar.Actions.RemoveKeepOutArea


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetBackpackOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetCanChat


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetEmotesEnabled


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetEmotesOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetGameName


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetGamepadMenuOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetGamepadNavigationDialogOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetInputType


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetInspectMenuOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetIsDead


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetKeepOutArea


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetLeaderboardOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetMenuOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetMoreMenuOpen


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetRespawnBehaviour


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetScreenSize


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetSmallTouchDevice


-- CoreGui.RobloxGui.Modules.TopBar.Actions.SetTopBarEnabled


-- CoreGui.RobloxGui.Modules.TopBar.Actions.UpdateChatMessages


-- CoreGui.RobloxGui.Modules.TopBar.Actions.UpdateChatVisible


-- CoreGui.RobloxGui.Modules.TopBar.Actions.UpdateCoreGuiEnabled


-- CoreGui.RobloxGui.Modules.TopBar.Actions.UpdateHealth


-- CoreGui.RobloxGui.Modules.TopBar.Actions.UpdateUnreadMessagesBadge


-- CoreGui.RobloxGui.Modules.TopBar.Analytics


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.ChatConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.CoreGuiConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.EnabledNotifier


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.HealthConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.LastInputTypeConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.MenuConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Connection.OpenUIConnector


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BackIcon


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver12


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.AnalyticsContext


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.Badge


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.BadgeOver13


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.openWebview


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.Popup


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.BadgeOver13.useAnalytics


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.ChatIcon


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.FlashingDot


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.FlashingDotV2


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.BottomBar


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.ButtonHint


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.ChatIcon


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.MenuCell


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.MenuHeader


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.MenuNavigationDismissablePrompt


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.MenuNavigationPromptLocalStorage


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.MenuNavigationToggleDialog


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadMenu.QuickMenuControllerBar


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadNavigationDialog


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadNavigationDialog.GamepadNavigationDialog


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.GamepadNavigationDialog.GamepadNavigationDialogShowCounter


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.HeadsetMenu


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.HeadsetMenu.DisconnectedDialog


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.HealthBar


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.HurtOverlay


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.IconButton


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.MenuIcon


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.MoreMenu


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.RecordingPill


-- CoreGui.RobloxGui.Modules.TopBar.Components.Presentation.VoiceBetaBadge


-- CoreGui.RobloxGui.Modules.TopBar.Components.TopBarApp


-- CoreGui.RobloxGui.Modules.TopBar.Constants


-- CoreGui.RobloxGui.Modules.TopBar.Flags.FFlagAlwaysSelectButtonDismissesGamepadNavigationDialog


-- CoreGui.RobloxGui.Modules.TopBar.Flags.FFlagAlwaysShowGamepadNavigationDialog


-- CoreGui.RobloxGui.Modules.TopBar.Flags.FFlagGamepadNavigationDialogABTest


-- CoreGui.RobloxGui.Modules.TopBar.Flags.FFlagLocalizeMenuNavigationToggleDialog


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFFlagChangeTopbarHeightCalculation


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFFlagEnableChromeBackwardsSignalAPI


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFFlagEnableTopBarAnalytics


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFFlagFixDupeBetaBadge


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFFlagFixHealthDesync


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFIntGamepadNavigationDialogShowCount


-- CoreGui.RobloxGui.Modules.TopBar.Flags.GetFStringGamepadNavigationDialogABTestLayerName


-- CoreGui.RobloxGui.Modules.TopBar.GlobalConfig


-- CoreGui.RobloxGui.Modules.TopBar.Reducer


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.Chat


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.CoreGuiEnabled


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.DisplayOptions


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.GameInfo


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.Health


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.MoreMenu


-- CoreGui.RobloxGui.Modules.TopBar.Reducer.Respawn


-- CoreGui.RobloxGui.Modules.TopBar.registerSetCores


-- CoreGui.RobloxGui.Modules.TopBar.Thunks.GetCanChat


-- CoreGui.RobloxGui.Modules.TopBar.Thunks.GetGameName


-- CoreGui.RobloxGui.Modules.TopBar.Thunks.RespawnCharacter


-- CoreGui.RobloxGui.Modules.TopBar.TokenMappers.MenuNavigationPromptTokenMapper


-- CoreGui.RobloxGui.Modules.TopBar.TopBar.storybook


-- CoreGui.RobloxGui.Modules.TopBar.TopBarAppPolicy


-- CoreGui.RobloxGui.Modules.TrustAndSafety


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.BeginReportFlow


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.CloseBlockPlayerDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.CloseCategoryMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.CloseReportDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.CloseReportMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.CloseReportSentDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.EndReportFlow


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.Hide


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.NavigateBack


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.OpenBlockPlayerDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.OpenCategoryMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.OpenReportDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.OpenReportMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.OpenReportSentDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.ScreenshotAnnotated


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SelectReportCategory


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SelectReportListing


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SetIdentifiedAvatars


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SetPlaceInfo


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SetScreenSize


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SetSelectedAvatars


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.SetVoiceReportingFlow


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.Show


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Actions.ShowToast


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.BlockPlayerItem


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.DebugCanvas


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.FillCircle


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.GameCell


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ModalDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.RestartScreenshotDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotDialogLandscapeModeHeader


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotDialogPortraitModeHeader


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotFlowStepHandler


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotFlowStepHandlerContainer


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotHighlighter


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotLoadingDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportAnything.ScreenshotReviewDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportCategoryDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.ReportSentDialog


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.TextEntryField


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.Toast


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.TrustAndSafetyApp


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Components.VirtualKeyboardMonitor


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Dependencies


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagEnableARFlowSession


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagEnableMOAForNonVoiceUsers


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagEnableNewVoiceReportFlows


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagEnableOptionalScreenshotButton2


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagForceReportAnythingAnnotationEnabled


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagRAScreenshotOncePerMenuOpenEnabled


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagReportAbuseMenuAutosizeYEnabled


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagReportAnythingDebugCanvas


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagReportAnythingLocalizationEnabled


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagReportAnythingMultistepScreenshot


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagReportAnythingScreenshot


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFFlagShrinkReportMenuForVisibility


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFIntIGMv1ARFlowScreenshotDelayFrames


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.GetFIntRAMaxAnnotationCount


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Flags.IXPVoiceAbuseReportReportAbuseMenu


-- CoreGui.RobloxGui.Modules.TrustAndSafety.GlobalConfig


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Reducers


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Reducers.common


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Reducers.displayOptions


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Reducers.placeInfo


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Reducers.report


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Resources.Assets


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Resources.Constants


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Thunks.BlockPlayer


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Thunks.FetchPlaceInfo


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Thunks.FilterIdentifiedAvatars


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Thunks.IdentifyAvatars


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Thunks.SendReport


-- CoreGui.RobloxGui.Modules.TrustAndSafety.TrustAndSafetyAppPolicy


-- CoreGui.RobloxGui.Modules.TrustAndSafety.TrustAndSafetyIXPManager


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.AbuseReportBuilder


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.GetHumanoidDescription


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.ReportAnythingAnalytics


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.ReportManager


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.ScreenshotHelper


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.ScreenshotHookManager


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.SendAnalytics


-- CoreGui.RobloxGui.Modules.TrustAndSafety.Utility.SessionUtility


-- CoreGui.RobloxGui.Modules.VirtualCursor.Input


-- CoreGui.RobloxGui.Modules.VirtualCursor.Interface


-- CoreGui.RobloxGui.Modules.VirtualCursor.OnRenderStep


-- CoreGui.RobloxGui.Modules.VirtualCursor.Properties


-- CoreGui.RobloxGui.Modules.VirtualCursor.VirtualCursorMain


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.ParticipantAdded


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.ParticipantRemoved


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.ParticipantsChanged


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.PlayerRemoved


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.VoiceEnabledChanged


-- CoreGui.RobloxGui.Modules.VoiceChat.Actions.VoiceStateChanged


-- CoreGui.RobloxGui.Modules.VoiceChat.Analytics


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.AudioDeviceInputDebugger


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.getIconVoiceIndicator


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.getPermissions


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.isVoiceServiceInitialized


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.onClickedCameraIndicator


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.onClickedLikelySpeakingBubble


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.onClickedVoiceIndicator


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.selfViewListenerChanged


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.VoiceIndicator


-- CoreGui.RobloxGui.Modules.VoiceChat.Components.VoiceIndicatorFunc


-- CoreGui.RobloxGui.Modules.VoiceChat.Constants


-- CoreGui.RobloxGui.Modules.VoiceChat.createVoiceAbuseReportRequest


-- CoreGui.RobloxGui.Modules.VoiceChat.Flags.GetFFlagEnableCoreVoiceManagerMuteAll


-- CoreGui.RobloxGui.Modules.VoiceChat.GlobalConfig


-- CoreGui.RobloxGui.Modules.VoiceChat.Helpers.displayCameraDeniedToast


-- CoreGui.RobloxGui.Modules.VoiceChat.Helpers.maybeAssert


-- CoreGui.RobloxGui.Modules.VoiceChat.Hooks.useVoiceState


-- CoreGui.RobloxGui.Modules.VoiceChat.initVoiceChatStore


-- CoreGui.RobloxGui.Modules.VoiceChat.Logger


-- CoreGui.RobloxGui.Modules.VoiceChat.Mocks.MockAppStorageService


-- CoreGui.RobloxGui.Modules.VoiceChat.Mocks.MockAvatarChatService


-- CoreGui.RobloxGui.Modules.VoiceChat.Reducers.voiceState


-- CoreGui.RobloxGui.Modules.VoiceChat.ReportAbuseLogic


-- CoreGui.RobloxGui.Modules.VoiceChat.VoiceChatServiceManager


-- CoreGui.RobloxGui.Modules.VoiceChat.VoiceChatServiceStub


-- CoreGui.RobloxGui.Modules.VoiceChat.VoiceStateContext


-- CoreGui.RobloxGui.Modules.VoiceChat.VoiceUsersByProximity


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Components.DevicePermissionsModal


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Components.VoiceChatConsentModal


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Components.VoiceChatPrompt


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Components.VoiceChatPromptFrame


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Components.VoiceChatTooltip


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.Helpers.getMicDeeplinkDirections


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.PromptType


-- CoreGui.RobloxGui.Modules.VoiceChatPrompt.VoiceChatPrompt.storybook


-- CoreGui.RobloxGui.Modules.Watermark


-- CoreGui.RobloxGui.Modules.Watermark.WatermarkComponent


-- ReplicatedStorage.Legacy.AlonsBPControllerTwo
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:34
-- Luau version 6, Types version 3
-- Time taken: 0.004291 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CommonVariables_upvr = require(ReplicatedStorage.CommonModules.CommonVariables)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "AlonsBPControllerTwo";
})
any_CreateController_result1_upvr.Blocks = {}
any_CreateController_result1_upvr.SelectedRotation = 0
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_upvr_3 = {}
local tbl_upvr_2 = {}
local tbl_upvr = {Vector3.new(0, 0, 1), Vector3.new(0, 0, -1), Vector3.new(0, 1, 0), Vector3.new(0, -1, 0), Vector3.new(1, 0, 0), Vector3.new(-1, 0, 0)}
function PlaceClientBlock(arg1) -- Line 30
	--[[ Upvalues[2]:
		[1]: CommonVariables_upvr (readonly)
		[2]: tbl_upvr_3 (readonly)
	]]
	arg1.Model = CommonVariables_upvr:CreateBlockModel(arg1.Id, arg1.Position, arg1.Orientation, workspace.ClientBlocks)
	local _, any_await_result2 = tbl_upvr_3.AlonsBPService:DataRequest(2):andThen():await()
	if any_await_result2 then
		arg1.Model:Destroy()
		arg1.Model = nil
	end
end
function DamageBlock(arg1) -- Line 44
	--[[ Upvalues[2]:
		[1]: tbl_upvr_2 (readonly)
		[2]: tbl_upvr_3 (readonly)
	]]
	local var12 = tbl_upvr_2.PlayerController.Inventory[tbl_upvr_2.PlayerController.EquippedIndex]
	if not arg1.Model or not var12 and var12.Catagory ~= "Tool" then
	else
		arg1.Health = math.clamp(arg1.Health - var12.Damage, 0, math.huge)
		if 0 < arg1.Health then return end
		coroutine.wrap(UpdateSurroundingBlocks)(arg1.Model.Position)
		local _, any_await_result2_2 = tbl_upvr_3.AlonsBPService:DestroyBlock(arg1.Index):andThen():await()
		if not any_await_result2_2 then
			arg1.Model.Parent = workspace.Island
			return
		end
		arg1.Model:Destroy()
		arg1.Model = nil
	end
end
function UpdateSurroundingBlocks(arg1) -- Line 64
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: CommonVariables_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
	]]
	for _, _ in pairs(tbl_upvr) do
		local any_GetBlockObjFromPosition_result1 = CommonVariables_upvr:GetBlockObjFromPosition(any_CreateController_result1_upvr.Blocks, arg1 + tbl_upvr * 3)
		if any_GetBlockObjFromPosition_result1.CanDisappear and any_GetBlockObjFromPosition_result1.BlockTpye ~= "Slab" then
			if not any_GetBlockObjFromPosition_result1.Model then
				coroutine.wrap(PlaceClientBlock)(any_GetBlockObjFromPosition_result1)
			else
				for _, v_2 in pairs(any_GetBlockObjFromPosition_result1.Model:GetDescendants()) do
					if v_2:IsA("Texture") then
						v_2.Transparency = 0
					end
				end
			end
		end
	end
end
local UserInputService_upvr = game:GetService("UserInputService")
local Block_upvr = require(ReplicatedStorage.CommonModules.Block)
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RunService_upvr = game:GetService("RunService")
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 80
	--[[ Upvalues[10]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: CommonVariables_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: UserInputService_upvr (readonly)
		[7]: LocalPlayer_upvr (readonly)
		[8]: Block_upvr (readonly)
		[9]: mouse_upvr (readonly)
		[10]: RunService_upvr (readonly)
	]]
	tbl_upvr_3.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_3.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr_3.ABPService = Knit_upvr.GetService("AlonsBPService")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr_3.ABPService.UpdateBlocks:Connect(function(arg1_2, arg2) -- Line 88
		--[[ Upvalues[2]:
			[1]: CommonVariables_upvr (copied, readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		local pairs_result1_2, pairs_result2_3, pairs_result3 = pairs(arg1_2)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [105] 74. Error Block 19 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [105] 74. Error Block 19 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [5] 5. Error Block 31 start (CF ANALYSIS FAILED)
		if arg2 == "Add" then
		elseif arg2 == "Remove" then
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [105.7]
			if not nil then
			else
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [105.9]
				if nil then
				end
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [105.8]
				if nil then
					-- KONSTANTWARNING: GOTO [105] #74
				end
			end
		elseif arg2 == "Update" then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if not nil then
			else
			end
		else
		end
		-- KONSTANTERROR: [5] 5. Error Block 31 end (CF ANALYSIS FAILED)
	end)
	tbl_upvr_3.ABPService.RecieveData:Connect(function(arg1_3) -- Line 112
	end)
	UserInputService_upvr.InputBegan:Connect(function(arg1_4, arg2) -- Line 116
		--[[ Upvalues[7]:
			[1]: LocalPlayer_upvr (copied, readonly)
			[2]: tbl_upvr_2 (copied, readonly)
			[3]: Block_upvr (copied, readonly)
			[4]: CommonVariables_upvr (copied, readonly)
			[5]: mouse_upvr (copied, readonly)
			[6]: any_CreateController_result1_upvr (copied, readonly)
			[7]: tbl_upvr_3 (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var36
		if not LocalPlayer_upvr.Character or not LocalPlayer_upvr.Character:FindFirstChild("Head") then
		else
			if arg1_4.UserInputType ~= Enum.UserInputType.MouseButton1 or arg2 then return end
			var36 = tbl_upvr_2
			var36 = tbl_upvr_2.PlayerController
			local var37 = var36.PlayerController.Inventory[var36.EquippedIndex]
			if not var37 or var37.Catagory ~= "Block" then return end
			var36 = var37.Id
			local var38 = Block_upvr[var36]
			if not var38 or not var38.CanBePlaced then return end
			local any_RoundPosToGridPos_result1 = CommonVariables_upvr:RoundPosToGridPos(mouse_upvr.Hit.p)
			var36 = (LocalPlayer_upvr.Character.Head.Position - any_RoundPosToGridPos_result1).magnitude
			if 20 < var36 then return end
			if any_RoundPosToGridPos_result1.Y >= mouse_upvr.Hit.p.Y then
				var36 = false
			else
				var36 = true
			end
			if var36 then
			else
			end
			tbl_upvr_3.ABPService:PlaceBlock(var38.Id, any_RoundPosToGridPos_result1, Vector3.new(0, any_CreateController_result1_upvr.SelectedRotation, 0))
		end
	end)
	RunService_upvr.RenderStepped:Connect(function(arg1_5) -- Line 137
		--[[ Upvalues[2]:
			[1]: UserInputService_upvr (copied, readonly)
			[2]: CommonVariables_upvr (copied, readonly)
		]]
		if not UserInputService_upvr:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
			Mining = false -- Setting global
		end
		if not Mining or not BlockController.BlockSelected then
			RemoveBrickBeingMined()
		elseif not BrickBeingMined or BlockController.BlockSelected ~= BrickBeingMined.Block then
			RemoveBrickBeingMined()
			BrickBeingMined = MinePart.new(CommonVariables_upvr:GetSlotFromIndex(BlockController.Blocks, tonumber(BlockController.BlockSelected.Name))) -- Setting global
		end
	end)
end
return any_CreateController_result1_upvr

-- ReplicatedStorage.Legacy.AlonsBPService
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:35
-- Luau version 6, Types version 3
-- Time taken: 0.007005 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage_upvr = game:GetService("ServerStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local any_CreateService_result1_upvr = Knit_upvr.CreateService({
	Name = "AlonsBPService";
	Client = {
		BlockData = Knit_upvr.CreateSignal();
		BreakBlock = Knit_upvr.CreateSignal();
		PlaceBlock = Knit_upvr.CreateSignal();
		CSPE = Knit_upvr.CreateSignal();
		RecieveData = Knit_upvr.CreateSignal();
		UpdateBlocks = Knit_upvr.CreateSignal();
	};
})
local tbl_2_upvr = {}
any_CreateService_result1_upvr.DefaultWorld = "11,30|A3911679,1,!! 2 7 5 2!*!, 4!$ 2 9 4!2!-!/!1 1 $ B i g S e p $!>!@!B!D 1"
local CommonVariables_upvr = require(ReplicatedStorage.CommonModules.CommonVariables)
function PlayerAdded(arg1) -- Line 38
	--[[ Upvalues[3]:
		[1]: CommonVariables_upvr (readonly)
		[2]: tbl_2_upvr (readonly)
		[3]: any_CreateService_result1_upvr (readonly)
	]]
	if not CommonVariables_upvr:GetData(arg1, tbl_2_upvr.DataHandlerService) then
	else
		if not any_CreateService_result1_upvr.Registry.IslandOwner then
			any_CreateService_result1_upvr.GameManager.LoadIsland(arg1, "Continue")
			any_CreateService_result1_upvr.GameManager.StreamBlockGrid(arg1)
		end
		if arg1.Character then
		end
		arg1.CharacterAdded:Connect(function(arg1_2) -- Line 48, Named "CharacterAdded"
		end)
	end
end
any_CreateService_result1_upvr.Client.AdminTool = function(arg1) -- Line 57, Named "AdminTool"
end
any_CreateService_result1_upvr.Client.DataRequest = function(arg1, arg2, arg3, arg4) -- Line 61, Named "DataRequest"
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [14] 10. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return any_CreateService_result1_upvr.Registry.IdToName
	end
	do
		return
	end
	-- KONSTANTERROR: [14] 10. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [21] 15. Error Block 13 start (CF ANALYSIS FAILED)
	if arg3 == 2 then
		return true
	end
	if arg3 == 3 then
		return any_CreateService_result1_upvr.World:GetBigChunkForClient(arg2.UserId, arg4[1], arg4[2])
	end
	-- KONSTANTERROR: [21] 15. Error Block 13 end (CF ANALYSIS FAILED)
end
function any_CreateService_result1_upvr.KnitInit(arg1) -- Line 81
end
local tbl_upvr_2 = {}
local Modules_upvr = ServerStorage_upvr:WaitForChild("Modules")
function any_CreateService_result1_upvr.KnitStart(arg1) -- Line 87
	--[[ Upvalues[6]:
		[1]: tbl_2_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: any_CreateService_result1_upvr (readonly)
		[4]: tbl_upvr_2 (readonly)
		[5]: ServerStorage_upvr (readonly)
		[6]: Modules_upvr (readonly)
	]]
	tbl_2_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	any_CreateService_result1_upvr.Registry = require(script.RegistryLoader)
	tbl_upvr_2.ItemsModules = require(ServerStorage_upvr.ItemModules.Items)
	any_CreateService_result1_upvr.World = require(Modules_upvr:WaitForChild("World"))
	any_CreateService_result1_upvr.GameManager = require(script.GameManager)
	any_CreateService_result1_upvr.TickHandler2 = require(script.TickHandler2)
	any_CreateService_result1_upvr.DataCompresser = require(script.DataCompress)
	any_CreateService_result1_upvr.BlockFunctions = require(ServerStorage_upvr.Modules.BlockFuncs)
	for _, v in pairs(ServerStorage_upvr.ItemModules.BlockDatas:GetChildren()) do
		any_CreateService_result1_upvr.Registry.BlockDatas[any_CreateService_result1_upvr.Registry.BlockDataNameToNum[v.Name]] = require(v)
	end
	for _, v_2 in pairs(game.Players:GetPlayers()) do
		PlayerAdded(v_2)
	end
	game.Players.PlayerAdded:Connect(PlayerAdded)
	game.Players.PlayerRemoving:Connect(function(arg1_3) -- Line 111
		--[[ Upvalues[1]:
			[1]: any_CreateService_result1_upvr (copied, readonly)
		]]
		if arg1_3 == any_CreateService_result1_upvr.Registry.IslandOwner then
			any_CreateService_result1_upvr.GameManager.RemovePlayerFromGame(arg1_3, true)
		end
	end)
	local tbl_upvr = {}
	any_CreateService_result1_upvr.Client.BreakBlock:Connect(function(arg1_4, arg2, arg3) -- Line 121
		--[[ Upvalues[2]:
			[1]: tbl_upvr (readonly)
			[2]: any_CreateService_result1_upvr (copied, readonly)
		]]
		local UserId_5 = arg1_4.UserId
		if tbl_upvr[UserId_5] ~= nil and 0.04 > os.clock() - tbl_upvr[UserId_5] then
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			tbl_upvr[UserId_5] = os.clock()
			local UserId = any_CreateService_result1_upvr.Registry.IslandOwner.UserId
			if arg2 == 1 then
				local _2_4 = arg3[2]
				local var33 = any_CreateService_result1_upvr.World[UserId]
				local vector3 = Vector3.new((_2_4.X - var33.Root.X) / 3, (_2_4.Y - var33.Root.Y) / 3, (_2_4.Z - var33.Root.Z) / 3)
				if var33.Blocks[vector3.X] ~= nil and var33.Blocks[vector3.X][vector3.Z] ~= nil and var33.Blocks[vector3.X][vector3.Z][vector3.Y] ~= nil and var33.Blocks[vector3.X][vector3.Z][vector3.Y][1] ~= 0 then
					local var35 = var33.Blocks[vector3.X][vector3.Z][vector3.Y]
					if var35[2].durability == nil then return end
					local _2_3 = var35[2]
					_2_3.durability -= any_CreateService_result1_upvr.Registry.Items[arg3[1]].mineDamage
					if var35[2].durability <= 0 then
						any_CreateService_result1_upvr.BlockFunctions.breakBlock(UserId, vector3)
					end
				end
			end
		end
	end)
	any_CreateService_result1_upvr.Client.PlaceBlock:Connect(function(arg1_5, arg2, arg3) -- Line 146
		--[[ Upvalues[1]:
			[1]: any_CreateService_result1_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local UserId_3 = any_CreateService_result1_upvr.Registry.IslandOwner.UserId
		local blockName_2 = arg3.blockName
		if any_CreateService_result1_upvr.Registry.UnPlaceableNames[blockName_2] then
		else
			local rPos_2 = arg3.rPos
			local var70 = any_CreateService_result1_upvr.World[UserId_3]
			local var71 = (rPos_2 - var70.Root) / 3
			local var72
			if arg2 == 1 then
				var72 = arg3.axis
				if var72 then
					var72 = any_CreateService_result1_upvr.Registry.NormalsToVec[arg3.axis]
					if var72 == nil then return end
				end
				var72 = arg3.axis
				if any_CreateService_result1_upvr.Registry.Items[blockName_2].rotationType == any_CreateService_result1_upvr.Registry.RotationType.NONE then
					var72 = nil
				end
				local function INLINED_2() -- Internal function, doesn't exist in bytecode
					local var73 = var70.Blocks[var71.X][var71.Z][var71.Y]
					return var73[1] == nil
				end
				if var70.Blocks[var71.X] ~= nil and var70.Blocks[var71.X][var71.Z] ~= nil and var70.Blocks[var71.X][var71.Z][var71.Y] ~= nil and (INLINED_2() or var73[1] == 0) or any_CreateService_result1_upvr.BlockFunctions.placeBlock(UserId_3, var71, blockName_2, rPos_2, var72, true, true, arg3.extra) then
					task.wait(0.1)
					local var74 = var70.Blocks[var71.X][var71.Z][var71.Y]
					for _, v_3 in pairs(game.Players:GetPlayers()) do
						any_CreateService_result1_upvr.Client.CSPE:Fire(v_3, 2, {var71, var74[1], var74[2].durability, var74[3]})
						local _
					end
				end
			end
		end
	end)
end
return any_CreateService_result1_upvr

-- ReplicatedStorage.Legacy.AlonsBPService.RegistryLoader
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:36
-- Luau version 6, Types version 3
-- Time taken: 0.004670 seconds

local _ = game:GetService("ReplicatedStorage")
local module = {
	WORLDSAVESIZE = 256;
	WORLDHEIGHT = 128;
	MaxSeedsPerPlot = 512;
	IslandRoot = Vector3.new(0, 0, 0);
	BlockSize = Vector3.new(3, 3, 3);
	StartCF = CFrame.new(Vector3.new(385.5, 155, 385.5));
	IslandOwner = nil;
	SERVERCLOSING = false;
	NormalToCFrameAngles = {
		[Enum.NormalId.Top] = CFrame.Angles(0, 0, 0);
		[Enum.NormalId.Bottom] = CFrame.Angles(0, 0, math.pi);
		[Enum.NormalId.Back] = CFrame.Angles((math.pi/2), (-math.pi), 0);
		[Enum.NormalId.Front] = CFrame.Angles((-math.pi/2), 0, 0);
		[Enum.NormalId.Right] = CFrame.Angles((-math.pi/2), 0, (-math.pi/2));
		[Enum.NormalId.Left] = CFrame.Angles((-math.pi/2), 0, (math.pi/2));
	};
	NormalToCFrameAnglesSidesBlocks = {
		[Enum.NormalId.Top] = CFrame.Angles(0, (-math.pi), 0);
		[Enum.NormalId.Bottom] = CFrame.Angles(0, (-math.pi), 0);
		[Enum.NormalId.Back] = CFrame.Angles(0, 0, 0);
		[Enum.NormalId.Front] = CFrame.Angles(0, (-math.pi), 0);
		[Enum.NormalId.Right] = CFrame.Angles(0, (math.pi/2), 0);
		[Enum.NormalId.Left] = CFrame.Angles(0, (-math.pi/2), 0);
	};
	NormalToNum = {
		[Enum.NormalId.Top] = 'T';
		[Enum.NormalId.Bottom] = 'b';
		[Enum.NormalId.Back] = 'B';
		[Enum.NormalId.Front] = 'F';
		[Enum.NormalId.Right] = 'R';
		[Enum.NormalId.Left] = 'L';
	};
	NumToNormal = {
		T = Enum.NormalId.Top;
		b = Enum.NormalId.Bottom;
		B = Enum.NormalId.Back;
		F = Enum.NormalId.Front;
		R = Enum.NormalId.Right;
		L = Enum.NormalId.Left;
	};
	NormalToOrientationSidesBlocks = {
		[Enum.NormalId.Top] = Vector3.new(0, 180, 0);
		[Enum.NormalId.Bottom] = Vector3.new(0, 180, 0);
		[Enum.NormalId.Back] = Vector3.new(0, 0, 0);
		[Enum.NormalId.Front] = Vector3.new(0, 180, 0);
		[Enum.NormalId.Right] = Vector3.new(0, 90, 0);
		[Enum.NormalId.Left] = Vector3.new(0, -90, 0);
	};
	orientationDirConversionALL = {
		T = {
			PX = "PX";
			MX = "MX";
			PY = "PY";
			MY = "MY";
			PZ = "PZ";
			MZ = "MZ";
		};
		b = {
			PX = "MX";
			MX = "PX";
			PY = "MY";
			MY = "PY";
			PZ = "PZ";
			MZ = "MZ";
		};
		B = {
			PX = "MX";
			MX = "PX";
			PY = "PZ";
			MY = "MZ";
			PZ = "PY";
			MZ = "MY";
		};
		F = {
			PX = "PX";
			MX = "MX";
			PY = "MZ";
			MY = "PZ";
			PZ = "PY";
			MZ = "MY";
		};
		R = {
			PX = "PZ";
			MX = "MZ";
			PY = "PX";
			MY = "MX";
			PZ = "PY";
			MZ = "MY";
		};
		L = {
			PX = "MZ";
			MX = "PZ";
			PY = "MX";
			MY = "PX";
			PZ = "PY";
			MZ = "MY";
		};
	};
	orientationDirConversionSIDES = {
		T = {
			PX = "MX";
			MX = "PX";
			PY = "PY";
			MY = "MY";
			PZ = "MZ";
			MZ = "PZ";
		};
		b = {
			PX = "MX";
			MX = "PX";
			PY = "PY";
			MY = "MY";
			PZ = "MZ";
			MZ = "PZ";
		};
		B = {
			PX = "PX";
			MX = "MX";
			PY = "PY";
			MY = "MY";
			PZ = "PZ";
			MZ = "MZ";
		};
		F = {
			PX = "MX";
			MX = "PX";
			PY = "PY";
			MY = "MY";
			PZ = "MZ";
			MZ = "PZ";
		};
		R = {
			PX = "MZ";
			MX = "PZ";
			PY = "PY";
			MY = "MY";
			PZ = "PX";
			MZ = "MX";
		};
		L = {
			PX = "PZ";
			MX = "MZ";
			PY = "PY";
			MY = "MY";
			PZ = "MX";
			MZ = "PX";
		};
	};
	Vectors = {
		PX = Vector3.new(1, 0, 0);
		MX = Vector3.new(-1, 0, 0);
		PZ = Vector3.new(0, 0, 1);
		MZ = Vector3.new(0, 0, -1);
		PY = Vector3.new(0, 1, 0);
		MY = Vector3.new(0, -1, 0);
		PXPY = Vector3.new(1, 1, 0);
		PXMY = Vector3.new(1, -1, 0);
		MXPY = Vector3.new(-1, 1, 0);
		MXMY = Vector3.new(-1, -1, 0);
		PZPY = Vector3.new(0, 1, 1);
		PZMY = Vector3.new(0, -1, 1);
		MZPY = Vector3.new(0, 1, -1);
		MZMY = Vector3.new(0, -1, -1);
	};
	surroundDirs = {
		PX = Vector3.new(1, 0, 0);
		MX = Vector3.new(-1, 0, 0);
		PZ = Vector3.new(0, 0, 1);
		MZ = Vector3.new(0, 0, -1);
		PY = Vector3.new(0, 1, 0);
		MY = Vector3.new(0, -1, 0);
	};
	vecToSurroundDir = {
		[module.surroundDirs.PX] = "PX";
		[module.surroundDirs.MX] = "MX";
		[module.surroundDirs.PZ] = "PZ";
		[module.surroundDirs.MZ] = "MZ";
		[module.surroundDirs.PY] = "PY";
		[module.surroundDirs.MY] = "MY";
	};
	oppositeDir = {
		PX = "MX";
		MX = "PX";
		PZ = "MZ";
		MZ = "PZ";
		PY = "MY";
		MY = "PY";
	};
	slabOffsetValues = {
		[Enum.NormalId.Right] = {Vector3.new(1, 0, 0), Vector3.new(-0.75, 0, 0), Vector3.new(0, 0, 90)};
		[Enum.NormalId.Left] = {Vector3.new(-1, 0, 0), Vector3.new(0.75, 0, 0), Vector3.new(0, 0, 90)};
		[Enum.NormalId.Top] = {Vector3.new(0, 1, 0), Vector3.new(0, -0.75, 0), Vector3.zero};
		[Enum.NormalId.Bottom] = {Vector3.new(0, -1, 0), Vector3.new(0, 0.75, 0), Vector3.zero};
		[Enum.NormalId.Back] = {Vector3.new(0, 0, 1), Vector3.new(0, 0, -0.75), Vector3.new(90, 0, 0)};
		[Enum.NormalId.Front] = {Vector3.new(0, 0, -1), Vector3.new(0, 0, 0.75), Vector3.new(90, 0, 0)};
	};
	NormalsToVec = {
		[Enum.NormalId.Front] = Vector3.new(0, 0, -1);
		[Enum.NormalId.Back] = Vector3.new(0, 0, 1);
		[Enum.NormalId.Left] = Vector3.new(-1, 0, 0);
		[Enum.NormalId.Right] = Vector3.new(1, 0, 0);
		[Enum.NormalId.Top] = Vector3.new(0, 1, 0);
		[Enum.NormalId.Bottom] = Vector3.new(0, -1, 0);
	};
	oppositeBlockDir = {
		T = 'b';
		b = 'T';
		B = 'F';
		F = 'B';
		R = 'L';
		L = 'R';
	};
	TickPriority = {
		High = "High";
		Normal = "Normal";
		Low = "Low";
	};
	RotationType = {
		NONE = 0;
		SIDES = 1;
		ALL = 2;
		STAIR = 3;
		SLAB = 4;
	};
	BlockExtraType = {
		TOPSTAIR = 1;
	};
	BlockOpacity = {
		FULL = 0;
		TRANS = 1;
	};
	UseType = {
		NONE = 0;
		PLACE = 1;
		BREAK = 2;
		EAT = 3;
		TILL = 4;
		BUCKET = 5;
		THROW = 6;
	};
	MineLevel = {
		WOOD = 0;
		STONE = 1;
		IRON = 2;
		EMERALD = 3;
		DIAMOND = 4;
		PLATINUM = 5;
		RUBY = 6;
	};
	MineType = {
		PICK = 0;
		AXE = 1;
		HOE = 2;
	};
	ClassType = {
		ITEM = 1;
		BLOCK = 2;
		TOOL = 3;
		WEAPON = 4;
		RANGEDWEAPON = 5;
		ARMOR = 6;
		FOOD = 7;
	};
	BlockDataTypes = {
		BLOCK = 0;
		CROP = 1;
		PLANK = 2;
		WHEATFARM = 3;
		POINTER = 4;
		STAIR = 5;
	};
	BlockDataNameToNum = {
		BlockData = module.BlockDataTypes.BLOCK;
		CropData = module.BlockDataTypes.CROP;
		PlankData = module.BlockDataTypes.PLANK;
		WheatFarmData = module.BlockDataTypes.WHEATFARM;
		PointerData = module.BlockDataTypes.POINTER;
		StairData = module.BlockDataTypes.STAIR;
	};
	ItemNums = {
		Air = 0;
		Pointer = -1;
		StoneBlock = 1;
		WheatSeeds = 11;
		GrassBlock = 2;
		Wheat2 = 12;
		DirtBlock = 3;
		Wheat3 = 13;
		OakSapling = 4;
		Wheat4 = 14;
		WoodPick = 5;
		Wheat = 15;
		Planks = 6;
		TilledDirt = 16;
		DevPick = 17;
		WheatHarvester = 18;
		Tree = 19;
		IronPick = 20;
		CobbleStairs = 21;
	};
	BannedItems = {
		[module.ItemNums.Air] = true;
		[module.ItemNums.Pointer] = true;
		[module.ItemNums.Wheat2] = true;
		[module.ItemNums.Wheat3] = true;
		[module.ItemNums.Wheat4] = true;
	};
	UnPlaceableNames = {
		Wheat2 = true;
		Wheat3 = true;
		Wheat4 = true;
	};
	HarvestableIds = {
		[module.ItemNums.Wheat4] = true;
	};
	Items = {};
	BlockDatas = {};
	DataStores = {};
	ItemNames = {};
	NameToId = {};
	IdToName = {};
	IdToInstance = {};
}
local module_upvr = {"", 'K', 'M', 'B', 'T', "QD", "QT"}
function module.formatInteger(arg1) -- Line 299
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local floored = math.floor(math.max(math.log10(arg1), 0) / 3)
	local var52
	if floored + 1 > #module_upvr then
		var52 = false
	else
		var52 = true
	end
	assert(var52, "Number too big - we don't have enough suffixes")
	return "%.3g%s":format(arg1 / 1000 ^ floored, module_upvr[floored + 1])
end
function module.ValidateObject(arg1, arg2) -- Line 306
	for _, v in ipairs(arg1:GetChildren()) do
		if v == arg2 then
			return true
		end
	end
	return false
end
return module

-- ReplicatedStorage.Legacy.AlonsBPService.GameManager
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:38
-- Luau version 6, Types version 3
-- Time taken: 0.007242 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)
local CommonVariables_upvr = require(ReplicatedStorage.CommonModules.CommonVariables)
local module_upvr = require(game:GetService("ServerStorage"):WaitForChild("Modules"):WaitForChild("WorldLoading"))
local AlonsBPService_upvr = Knit.GetService("AlonsBPService")
local DataHandlerService_upvr = Knit.GetService("DataHandlerService")
local module_upvr_2 = {
	ReformatInt = function(arg1) -- Line 19
		return tostring(arg1):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
	end;
	PlayerDataHandling = function(arg1, arg2) -- Line 24
	end;
	WorldHandling = function(arg1, arg2) -- Line 29
		--[[ Upvalues[4]:
			[1]: AlonsBPService_upvr (readonly)
			[2]: CommonVariables_upvr (readonly)
			[3]: DataHandlerService_upvr (readonly)
			[4]: module_upvr (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local UserId_6 = arg1.UserId
		AlonsBPService_upvr.World[UserId_6] = {
			Blocks = {};
			SeedCount = 0;
			ForClient = {};
			ItemCount = 0;
			TickList = {
				High = {};
				Normal = {};
				Low = {};
			};
			IsTicking = {
				High = false;
				Normal = false;
				Low = false;
			};
			PendingTickList = {};
			PendingTickListRemoval = {};
			Root = AlonsBPService_upvr.Registry.IslandRoot;
			QuedBlockUpdates = {};
			isLoading = false;
		}
		local Blocks_upvr_2 = AlonsBPService_upvr.World[UserId_6].Blocks
		if arg2 then
			local any_GetData_result1_2 = CommonVariables_upvr:GetData(arg1, DataHandlerService_upvr)
			if any_GetData_result1_2 then
				local World = any_GetData_result1_2.AlonData.World
			end
		end
		for i = 1, AlonsBPService_upvr.Registry.WORLDSAVESIZE do
			Blocks_upvr_2[i] = {}
			for i_2 = 1, AlonsBPService_upvr.Registry.WORLDSAVESIZE do
				Blocks_upvr_2[i][i_2] = {}
				for i_3 = 1, AlonsBPService_upvr.Registry.WORLDHEIGHT do
					Blocks_upvr_2[i][i_2][i_3] = {0}
				end
			end
		end
		if World == false or World == nil then
		end
		local DefaultWorld_upvw = AlonsBPService_upvr.DefaultWorld
		local pcall_result1, _ = pcall(function() -- Line 80
			--[[ Upvalues[4]:
				[1]: module_upvr (copied, readonly)
				[2]: arg1 (readonly)
				[3]: DefaultWorld_upvw (read and write)
				[4]: Blocks_upvr_2 (readonly)
			]]
			module_upvr.loadWorld(arg1, DefaultWorld_upvw, Blocks_upvr_2)
			return true
		end)
		if not pcall_result1 then
			i = AlonsBPService_upvr.World[UserId_6]
			if i then
				i = print
				i("Attempting to load default world")
				i = module_upvr.loadWorld
				i_2 = AlonsBPService_upvr
				i_2 = Blocks_upvr_2
				i(arg1, i_2.DefaultWorld, i_2)
				pcall_result1 = true
			end
		end
		if pcall_result1 then
			i = AlonsBPService_upvr.World
			i.PlayersLoaded += 1
			i = AlonsBPService_upvr.World.SavePlayers
			i[UserId_6] = true
			i = AlonsBPService_upvr.World:RunQuedUpdates
			i(UserId_6)
		end
	end;
}
local Plots_upvr = workspace:WaitForChild("Plots")
function module_upvr_2.LoadIsland(arg1, arg2) -- Line 100
	--[[ Upvalues[3]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: Plots_upvr (readonly)
		[3]: module_upvr_2 (readonly)
	]]
	local UserId_3 = arg1.UserId
	AlonsBPService_upvr.Registry.IslandOwner = arg1
	local Folder_5 = Instance.new("Folder")
	Folder_5.Name = UserId_3
	Folder_5.Parent = Plots_upvr
	local Folder_6 = Instance.new("Folder")
	Folder_6.Name = "Blocks"
	Folder_6.Parent = Folder_5
	local Folder_3 = Instance.new("Folder")
	Folder_3.Name = "PlayerPlotModels"
	Folder_3.Parent = Folder_5
	local Folder_4 = Instance.new("Folder")
	Folder_4.Name = "Projectiles"
	Folder_4.Parent = Folder_5
	local Folder = Instance.new("Folder")
	Folder.Name = "Entities"
	Folder.Parent = Folder_5
	local Folder_2 = Instance.new("Folder")
	Folder_2.Name = UserId_3
	Folder_2.Parent = workspace.Items
	local var60
	if var60 == "New" then
		var60 = false
	else
		var60 = true
	end
	module_upvr_2.WorldHandling(arg1, var60)
	if arg1.Character and arg1.Character.PrimaryPart then
		if arg1.Character.Parent == workspace then
			arg1.Character.PrimaryPart.Anchored = true
			task.wait()
			arg1.Character.PrimaryPart.CFrame = AlonsBPService_upvr.Registry.StartCF
			task.wait()
			arg1.Character.PrimaryPart.Anchored = false
		end
	end
end
function module_upvr_2.SavePlayerData(arg1) -- Line 140
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
		[3]: CommonVariables_upvr (readonly)
		[4]: DataHandlerService_upvr (readonly)
	]]
	CommonVariables_upvr:GetData(arg1, DataHandlerService_upvr).AlonData.World = module_upvr.serializeWorld(AlonsBPService_upvr.World[arg1.UserId].Blocks, arg1.UserId, false)
end
function module_upvr_2.RemovePlayerFromGame(arg1) -- Line 154
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_upvr_2 (readonly)
	]]
	local UserId_2 = arg1.UserId
	if AlonsBPService_upvr.World.SavePlayers[UserId_2] then
		print("Save on Exit")
		if module_upvr_2.SavePlayerData(arg1) then
			local World_3 = AlonsBPService_upvr.World
			World_3.PlayersLoaded -= 1
		end
	end
	if AlonsBPService_upvr.Registry.SERVERCLOSING then
	else
		AlonsBPService_upvr.World.SavePlayers[UserId_2] = false
		if AlonsBPService_upvr.World[UserId_2] ~= nil then
			workspace.Items[UserId_2]:Destroy()
		end
		AlonsBPService_upvr.World[UserId_2] = nil
		local SOME_2 = game.Workspace.Plots:FindFirstChild(arg1.UserId)
		if SOME_2 then
			for _, v in pairs(SOME_2.Blocks:GetChildren()) do
				v:Destroy()
				if 100 <= 0 + 1 then
					wait()
				end
			end
			SOME_2:Destroy()
		end
	end
end
function module_upvr_2.StreamBlockGrid(arg1) -- Line 187
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	local UserId_5 = arg1.UserId
	for i_4 = 1, AlonsBPService_upvr.Registry.WORLDSAVESIZE do
		for i_5 = 1, AlonsBPService_upvr.Registry.WORLDSAVESIZE do
			for i_6 = 1, AlonsBPService_upvr.Registry.WORLDHEIGHT do
				if AlonsBPService_upvr.Registry.ItemNums.Air < AlonsBPService_upvr.World[UserId_5].Blocks[i_4][i_5][i_6][1] then
					local var84 = AlonsBPService_upvr.World[UserId_5].Blocks[i_4][i_5][i_6]
					table.insert({}, {Vector3.new(i_4, i_6, i_5), var84[1], var84[2].durability or 100, var84[3]})
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	AlonsBPService_upvr.Client.CSPE:Fire(arg1, 1, {})
end
return module_upvr_2

-- ReplicatedStorage.Legacy.AlonsBPService.TickHandler2
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:39
-- Luau version 6, Types version 3
-- Time taken: 0.010725 seconds

local os_clock_result1_upvw = os.clock()
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local Players_upvr = game:GetService("Players")
local function runTick_upvr() -- Line 44, Named "runTick"
	--[[ Upvalues[3]:
		[1]: os_clock_result1_upvw (read and write)
		[2]: AlonsBPService_upvr (readonly)
		[3]: Players_upvr (readonly)
	]]
	task.wait(math.max(0, (0.05) - (os.clock() - os_clock_result1_upvw)))
	os_clock_result1_upvw = os.clock()
	AlonsBPService_upvr.Registry.WIREEVENTS = 0
	local vector3_2 = Vector3.new(math.random(1, 16), math.random(1, 32), math.random(1, 16))
	local vector3_11 = Vector3.new(0, math.random(1, 32), math.random(1, 16))
	for _, v in pairs(Players_upvr:GetPlayers()) do
		local UserId = v.UserId
		local var76 = AlonsBPService_upvr.World[UserId]
		if var76 and var76.TickList then
			local var77
			if AlonsBPService_upvr.World.SavePlayers[UserId] then
				local Blocks_2 = var76.Blocks
				local TickList = var76.TickList
				local IsTicking = var76.IsTicking
				var77 = AlonsBPService_upvr.Registry.WORLDSAVESIZE / 16 - 1
				for i_2 = 0, var77 do
					for i_3 = 0, AlonsBPService_upvr.Registry.WORLDSAVESIZE / 16 - 1 do
						for i_4 = 1, 2 do
							local vector3_5 = Vector3.new(vector3_2.X + 16 * i_2, vector3_2.Y * i_4, vector3_2.Z + 16 * i_3)
							if Blocks_2[vector3_5.X][vector3_5.Z][vector3_5.Y][2] and Blocks_2[vector3_5.X][vector3_5.Z][vector3_5.Y][2].randomTick then
								Blocks_2[vector3_5.X][vector3_5.Z][vector3_5.Y][2]:randomTick(UserId, vector3_5)
							end
							local vector3_7 = Vector3.new(vector3_2.X + 16 * i_2, vector3_2.Y * i_4, vector3_11.Z + 16 * i_3)
							if Blocks_2[vector3_7.X][vector3_7.Z][vector3_7.Y][2] and Blocks_2[vector3_7.X][vector3_7.Z][vector3_7.Y][2].randomTick then
								Blocks_2[vector3_7.X][vector3_7.Z][vector3_7.Y][2]:randomTick(UserId, vector3_7)
							end
							local vector3_9 = Vector3.new(vector3_2.X + 16 * i_2, vector3_11.Y * i_4, vector3_2.Z + 16 * i_3)
							if Blocks_2[vector3_9.X][vector3_9.Z][vector3_9.Y][2] and Blocks_2[vector3_9.X][vector3_9.Z][vector3_9.Y][2].randomTick then
								Blocks_2[vector3_9.X][vector3_9.Z][vector3_9.Y][2]:randomTick(UserId, vector3_9)
							end
							local vector3_8 = Vector3.new(vector3_2.X + 16 * i_2, vector3_11.Y * i_4, vector3_11.Z + 16 * i_3)
							if Blocks_2[vector3_8.X][vector3_8.Z][vector3_8.Y][2] and Blocks_2[vector3_8.X][vector3_8.Z][vector3_8.Y][2].randomTick then
								Blocks_2[vector3_8.X][vector3_8.Z][vector3_8.Y][2]:randomTick(UserId, vector3_8)
							end
						end
					end
				end
				var77 = 0
				if 0 < #TickList.High then
					IsTicking.High = true
					for i_5 = #TickList.High, 1, -1 do
						i_3 = TickList.High
						if i_3[i_5] ~= nil then
							i_3 = TickList.High
							i_3 = i_3[i_5][1]
							i_3 -= 1
							i_3[i_5][1] = i_3
							if var77 < 256 then
								i_3 = TickList.High[i_5]
								i_3 = 0
								if i_3[1] <= i_3 then
									i_3 = TickList.High
									local popped = table.remove(i_3, i_5)
									i_3 = 2
									for i_6 = #popped, i_3, -1 do
										i_4 = popped[i_6]
										if i_4 and Blocks_2[i_4.X] and Blocks_2[i_4.X][i_4.Z] and Blocks_2[i_4.X][i_4.Z][i_4.Y] and Blocks_2[i_4.X][i_4.Z][i_4.Y][2] then
											var77 += 1
											Blocks_2[i_4.X][i_4.Z][i_4.Y][2]:tick(UserId, i_4)
										end
									end
								end
							end
						end
					end
					AlonsBPService_upvr.World:PopulateTickList(UserId, AlonsBPService_upvr.Registry.TickPriority.High)
					IsTicking.High = false
				end
				if 0 < #TickList.Normal then
					IsTicking.Normal = true
					for i_7 = #TickList.Normal, 1, -1 do
						if TickList.Normal[i_7] ~= nil then
							local var87 = TickList.Normal[i_7]
							var87[1] -= 1
							if var77 < 256 and TickList.Normal[i_7][1] <= 0 then
								local popped_4 = table.remove(TickList.Normal, i_7)
								for i_8 = #popped_4, 2, -1 do
									i_4 = popped_4[i_8]
									if i_4 and Blocks_2[i_4.X] and Blocks_2[i_4.X][i_4.Z] and Blocks_2[i_4.X][i_4.Z][i_4.Y] and Blocks_2[i_4.X][i_4.Z][i_4.Y][2] then
										var77 += 1
										Blocks_2[i_4.X][i_4.Z][i_4.Y][2]:tick(UserId, i_4)
									end
								end
							end
						end
					end
					AlonsBPService_upvr.World:PopulateTickList(UserId, AlonsBPService_upvr.Registry.TickPriority.Normal)
					IsTicking.Normal = false
				end
				if 0 < #TickList.Low then
					IsTicking.Low = true
					for i_9 = #TickList.Low, 1, -1 do
						if TickList.Low[i_9] ~= nil then
							local var89 = TickList.Low[i_9]
							var89[1] -= 1
							if var77 < 256 and TickList.Low[i_9][1] <= 0 then
								local popped_3 = table.remove(TickList.Low, i_9)
								for i_10 = #popped_3, 2, -1 do
									i_4 = popped_3[i_10]
									if i_4 and Blocks_2[i_4.X] and Blocks_2[i_4.X][i_4.Z] and Blocks_2[i_4.X][i_4.Z][i_4.Y] and Blocks_2[i_4.X][i_4.Z][i_4.Y][2] then
										var77 += 1
										Blocks_2[i_4.X][i_4.Z][i_4.Y][2]:tick(UserId, i_4)
									end
								end
							end
						end
					end
					AlonsBPService_upvr.World:PopulateTickList(UserId, AlonsBPService_upvr.Registry.TickPriority.Low)
					IsTicking.Low = false
				end
			end
		end
	end
end
coroutine.wrap(function() -- Line 155
	--[[ Upvalues[1]:
		[1]: runTick_upvr (readonly)
	]]
	while true do
		local _, _ = xpcall(runTick_upvr, function(arg1) -- Line 157
			warn(tostring(arg1)..'\n'..debug.traceback())
			return false, arg1
		end)
	end
end)()
return {}

-- ReplicatedStorage.Legacy.AlonsBPService.DataCompress
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:40
-- Luau version 6, Types version 3
-- Time taken: 0.005561 seconds

-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local tbl_4_upvr = {}
local var10 = 0
for i = 32, 127 do
	if i ~= 34 and i ~= 92 then
		local string_char_result1 = string.char(i)
		tbl_4_upvr[string_char_result1] = var10
		tbl_4_upvr[var10] = string_char_result1
	end
end
local tbl_6 = {}
for i_2 = 1, 34 do
	local var13 = i_2
	local var15 = ({34, 92, 127})[var13 - 31] or var13
	local string_char_result1_2 = string.char(var15)
	local string_char_result1_3 = string.char(var15 + 31)
	tbl_6[string_char_result1_2] = string_char_result1_3
	tbl_6[string_char_result1_3] = string_char_result1_2
	local var18_upvr
end
local function _(arg1) -- Line 25, Named "escape"
	--[[ Upvalues[1]:
		[1]: var18_upvr (readonly)
	]]
	return arg1:gsub("[%c\"\\]", function(arg1_2) -- Line 26
		--[[ Upvalues[1]:
			[1]: var18_upvr (copied, readonly)
		]]
		return '\x7F'..var18_upvr[arg1_2]
	end)
end
local function _(arg1) -- Line 31, Named "unescape"
	--[[ Upvalues[1]:
		[1]: var18_upvr (readonly)
	]]
	return arg1:gsub("\x7F(.)", function(arg1_3) -- Line 32
		--[[ Upvalues[1]:
			[1]: var18_upvr (copied, readonly)
		]]
		return var18_upvr[arg1_3]
	end)
end
local function _(arg1) -- Line 37, Named "copy"
	local module_2 = {}
	for i_3, v in pairs(arg1) do
		module_2[i_3] = v
	end
	return module_2
end
local function _(arg1) -- Line 45, Named "tobase93"
	--[[ Upvalues[1]:
		[1]: tbl_4_upvr (readonly)
	]]
	local var29
	repeat
		local var30 = arg1 % 93
		var29 = tbl_4_upvr[var30]..var29
	until (arg1 - var30) / 93 == 0
	return var29
end
local function tobase10_upvr(arg1) -- Line 55, Named "tobase10"
	--[[ Upvalues[1]:
		[1]: tbl_4_upvr (readonly)
	]]
	local var33 = 0
	for i_4 = 1, #arg1 do
		var33 += 93 ^ (i_4 - 1) * tbl_4_upvr[arg1:sub(-i_4, -i_4)]
	end
	return var33
end
return {{
	compress = function(arg1) -- Line 63, Named "compress"
		--[[ Upvalues[2]:
			[1]: tbl_4_upvr (readonly)
			[2]: var18_upvr (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 35 start (CF ANALYSIS FAILED)
		local tbl_3 = {}
		local pairs_result1_3, _, pairs_result3 = pairs(tbl_4_upvr)
		local var46_upvw
		for i_5, v_2 in pairs_result1_3, var46_upvw, pairs_result3 do
			tbl_3[i_5] = v_2
		end
		local var47_upvr = tbl_3
		local tbl_2_upvr = {}
		var46_upvw = 1
		local tbl_upvr = {}
		local var50_upvw = 0
		local function _(arg1_4) -- Line 68, Named "listkey"
			--[[ Upvalues[6]:
				[1]: var47_upvr (readonly)
				[2]: tbl_4_upvr (copied, readonly)
				[3]: var46_upvw (read and write)
				[4]: var50_upvw (read and write)
				[5]: tbl_upvr (readonly)
				[6]: tbl_2_upvr (readonly)
			]]
			local var51 = var47_upvr[arg1_4]
			local var52
			repeat
				local var53 = var51 % 93
				var52 = tbl_4_upvr[var53]..var52
			until (var51 - var53) / 93 == 0
			local var54 = var52
			var52 = var46_upvw
			if var52 < #var54 then
				var52 = var46_upvw
				var46_upvw = #var54
				var50_upvw = 0
				tbl_upvr[var52] = var50_upvw
			end
			var52 = #tbl_2_upvr + 1
			tbl_2_upvr[var52] = ' ':rep(var46_upvw - #var54)..var54
			var52 = var50_upvw
			var50_upvw = var52 + 1
		end
		local function var56(arg1_5) -- Line 26
			--[[ Upvalues[1]:
				[1]: var18_upvr (copied, readonly)
			]]
			return '\x7F'..var18_upvr[arg1_5]
		end
		local _ = 1
		-- KONSTANTERROR: [0] 1. Error Block 35 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [65] 58. Error Block 33 start (CF ANALYSIS FAILED)
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [65.18]
		local var59
		if var46_upvw < #var59 then
			tbl_upvr[var46_upvw] = var50_upvw
			var46_upvw = #var59
			var50_upvw = 0
		end
		tbl_2_upvr[#tbl_2_upvr + 1] = ' ':rep(var46_upvw - #var59)..var59
		var50_upvw += 1
		local var60 = #var47_upvr + 1
		var47_upvr[var56] = var60
		var47_upvr[var60] = var56
		if 10000 <= 0 + 1 then
			wait()
		end
		-- KONSTANTERROR: [65] 58. Error Block 33 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [40] 35. Error Block 39 start (CF ANALYSIS FAILED)
		if wait() then
			-- KONSTANTWARNING: GOTO [91] #82
		end
		-- KONSTANTERROR: [40] 35. Error Block 39 end (CF ANALYSIS FAILED)
	end;
	decompress = function(arg1) -- Line 98, Named "decompress"
		--[[ Upvalues[3]:
			[1]: tbl_4_upvr (readonly)
			[2]: tobase10_upvr (readonly)
			[3]: var18_upvr (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local tbl_5 = {}
		for i_6, v_3 in pairs(tbl_4_upvr) do
			tbl_5[i_6] = v_3
		end
		local var85 = tbl_5
		local module = {}
		local any_match_result1, any_match_result2 = arg1:match("(.-)|(.*)")
		local tbl = {}
		local var90 = 1
		for i_7 in any_match_result1:gmatch("%d+") do
			local var94 = #tbl + 1
			tbl[var94] = any_match_result2:sub(var90, var90 + i_7 * var94 - 1)
			local var95
		end
		local var96
		for i_8 = 1, #var95 do
			for i_9 in var95[i_8]:gmatch('.':rep(i_8)) do
				if var96 then
					if var85[tobase10_upvr(i_9)] then
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						module[#module + 1] = var85[tobase10_upvr(i_9)]
						var85[#var85 + 1] = var96..var85[tobase10_upvr(i_9)]:sub(1, 1)
					else
						local var100 = var96..var96:sub(1, 1)
						module[#module + 1] = var100
						var85[#var85 + 1] = var100
					end
				else
					module[1] = var100
				end
			end
		end
		return table.concat(module):gsub("\x7F(.)", function(arg1_6) -- Line 32
			--[[ Upvalues[1]:
				[1]: var18_upvr (copied, readonly)
			]]
			return var18_upvr[arg1_6]
		end)
	end;
}}

-- ReplicatedStorage.Legacy.AlonsBPController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:41
-- Luau version 6, Types version 3
-- Time taken: 0.000783 seconds

local Knit_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "AlonsBPController";
})
local tbl_upvr = {}
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 26
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.AlonsBPService = Knit_upvr.GetService("AlonsBPService")
	print('A')
	any_CreateController_result1_upvr.PlayerGlobals = require(script.PlayerGlobals)
	print('b')
	print('c')
	any_CreateController_result1_upvr.CSP = require(script.CSP)
	print("Done")
	any_CreateController_result1_upvr.UI = require(script.UI)
end
return any_CreateController_result1_upvr

-- ReplicatedStorage.Legacy.AlonsBPController.PlayerGlobals
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:42
-- Luau version 6, Types version 3
-- Time taken: 0.005428 seconds

ABPService = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService") -- Setting global
local module_upvr = {
	TextureType = {
		NONE = 0;
		ALL = 1;
		GRASS = 2;
		LOG = 3;
	};
	RotationType = {
		NONE = 0;
		SIDES = 1;
		ALL = 2;
		STAIR = 3;
		SLAB = 4;
	};
	BlockExtraType = {
		TOPSTAIR = 1;
	};
	BlockOpacity = {
		FULL = 0;
		TRANS = 1;
	};
	UseType = {
		NONE = 0;
		PLACE = 1;
		BREAK = 2;
		EAT = 3;
		TILL = 4;
		BUCKET = 5;
		THROW = 6;
	};
	ClassType = {
		ITEM = 1;
		BLOCK = 2;
		TOOL = 3;
		WEAPON = 4;
		RANGEDWEAPON = 5;
		ARMOR = 6;
		FOOD = 7;
		STRUCTURE = 8;
	};
	IslandRoot = Vector3.zero;
	MaxPlaceDistance = 30;
	WORLDSIZE = 256;
	WORLDHEIGHT = 128;
	SelectedItem = nil;
	SelectedRotationNumber = 1;
	GhostBlock = nil;
}
local any_await_result1, any_await_result2 = ABPService:DataRequest(1, {1}):andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.Items = any_await_result2
local any_await_result1_2, any_await_result2_2 = ABPService:DataRequest(1, {2}):andThen():await()
_ = any_await_result1_2 -- Setting global
module_upvr.IdToName = any_await_result2_2
module_upvr.SidesNormalOrder = {Enum.NormalId.Front, Enum.NormalId.Right, Enum.NormalId.Back, Enum.NormalId.Left}
module_upvr.SidesNormalOrderInverse = {
	[Enum.NormalId.Front] = 1;
	[Enum.NormalId.Right] = 2;
	[Enum.NormalId.Back] = 3;
	[Enum.NormalId.Left] = 4;
}
module_upvr.AllNormalOrder = {Enum.NormalId.Front, Enum.NormalId.Right, Enum.NormalId.Back, Enum.NormalId.Left, Enum.NormalId.Top, Enum.NormalId.Bottom}
module_upvr.AllNormalOrderInverse = {
	[Enum.NormalId.Front] = 1;
	[Enum.NormalId.Right] = 2;
	[Enum.NormalId.Back] = 3;
	[Enum.NormalId.Left] = 4;
	[Enum.NormalId.Top] = 5;
	[Enum.NormalId.Bottom] = 6;
}
module_upvr.SelectedRotationNumber = 1
module_upvr.normalToCFrameAngles = {
	[Enum.NormalId.Top] = CFrame.Angles(0, 0, 0);
	[Enum.NormalId.Bottom] = CFrame.Angles(0, 0, math.pi);
	[Enum.NormalId.Back] = CFrame.Angles((math.pi/2), (-math.pi), 0);
	[Enum.NormalId.Front] = CFrame.Angles((-math.pi/2), 0, 0);
	[Enum.NormalId.Right] = CFrame.Angles((-math.pi/2), 0, (-math.pi/2));
	[Enum.NormalId.Left] = CFrame.Angles((-math.pi/2), 0, (math.pi/2));
}
module_upvr.normalToCFrameAnglesSidesBlocks = {
	[Enum.NormalId.Top] = CFrame.Angles(0, (-math.pi), 0);
	[Enum.NormalId.Bottom] = CFrame.Angles(0, (-math.pi), 0);
	[Enum.NormalId.Back] = CFrame.Angles(0, 0, 0);
	[Enum.NormalId.Front] = CFrame.Angles(0, (-math.pi), 0);
	[Enum.NormalId.Right] = CFrame.Angles(0, (math.pi/2), 0);
	[Enum.NormalId.Left] = CFrame.Angles(0, (-math.pi/2), 0);
}
module_upvr.normalToCFrameAnglesTopStairsBlocks = {
	[Enum.NormalId.Top] = CFrame.Angles(0, (-math.pi), math.pi);
	[Enum.NormalId.Bottom] = CFrame.Angles(0, (-math.pi), math.pi);
	[Enum.NormalId.Back] = CFrame.Angles(0, 0, math.pi);
	[Enum.NormalId.Front] = CFrame.Angles(0, (-math.pi), math.pi);
	[Enum.NormalId.Right] = CFrame.Angles(0, (math.pi/2), math.pi);
	[Enum.NormalId.Left] = CFrame.Angles(0, (-math.pi/2), math.pi);
}
module_upvr.DirVecs = {
	PX = Vector3.new(1, 0, 0);
	MX = Vector3.new(-1, 0, 0);
	PZ = Vector3.new(0, 0, 1);
	MZ = Vector3.new(0, 0, -1);
	PY = Vector3.new(0, 1, 0);
	MY = Vector3.new(0, -1, 0);
}
module_upvr.oppositeDir = {
	PX = "MX";
	MX = "PX";
	PZ = "MZ";
	MZ = "PZ";
	PY = "MY";
	MY = "PY";
}
module_upvr.DirToFaceName = {
	PX = "Right";
	MX = "Left";
	PZ = "Back";
	MZ = "Front";
	PY = "Top";
	MY = "Bottom";
}
module_upvr.placeIgnoreInstances = {}
function module_upvr.roundTo3(arg1) -- Line 168
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var25
	local var26
	if arg1.x % 3 <= 1.5 then
		var25 = arg1.x - arg1.x % 3
	else
		var25 = (arg1.x) + (3 - arg1.x % 3)
	end
	if arg1.y % 3 <= 1.5 then
		var26 = arg1.y - arg1.y % 3
	else
		var26 = (arg1.y) + (3 - arg1.y % 3)
	end
	if arg1.z % 3 <= 1.5 then
	else
	end
	return Vector3.new(var25, var26, (arg1.z) + (3 - arg1.z % 3))
end
function retractLine(arg1, arg2) -- Line 190
	local var27 = -0.2 / 100
	return Vector3.new(arg2.x + var27 * (arg2.x - arg1.x), arg2.y + var27 * (arg2.y - arg1.y), arg2.z + var27 * (arg2.z - arg1.z))
end
function extendLine(arg1, arg2) -- Line 196
	local var28 = 0.11 / 100
	return Vector3.new(arg2.x + var28 * (arg2.x - arg1.x), arg2.y + var28 * (arg2.y - arg1.y), arg2.z + var28 * (arg2.z - arg1.z))
end
local RaycastParams_new_result1_upvr = RaycastParams.new()
RaycastParams_new_result1_upvr.FilterType = Enum.RaycastFilterType.Exclude
function module_upvr.findPos(arg1, arg2, arg3, arg4, arg5) -- Line 207
	--[[ Upvalues[2]:
		[1]: RaycastParams_new_result1_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if arg5 == nil then
	end
	if 10 == 0 then
	else
		RaycastParams_new_result1_upvr.FilterDescendantsInstances = arg4
		local workspace_Raycast_result1_3 = workspace:Raycast(arg1.Origin, arg1.Direction * 1000, RaycastParams_new_result1_upvr)
		if workspace_Raycast_result1_3 and (workspace_Raycast_result1_3.Position - arg3.PrimaryPart.Position).Magnitude < module_upvr.MaxPlaceDistance and workspace_Raycast_result1_3.Instance.Name ~= "UnclaimedCover" then
			if arg2 == "Place" then
				return module_upvr.roundTo3(retractLine(arg1.Origin, workspace_Raycast_result1_3.Position))
			end
			if arg2 == "Break" then
				if workspace_Raycast_result1_3.Instance.Parent:IsA("Model") and workspace_Raycast_result1_3.Instance.Parent.PrimaryPart then
					return module_upvr.roundTo3(extendLine(arg1.Origin, workspace_Raycast_result1_3.Instance.Parent.PrimaryPart.Position)), workspace_Raycast_result1_3.Instance.Parent, workspace_Raycast_result1_3.Instance
				end
				return module_upvr.roundTo3(extendLine(arg1.Origin, workspace_Raycast_result1_3.Position)), workspace_Raycast_result1_3.Instance
			end
			if arg2 == "InBlockPos" then
				return workspace_Raycast_result1_3.Position
			end
		end
	end
end
local tbl_upvr = {
	cf = nil;
	size = nil;
	count = 0;
}
local var37_upvw
function module_upvr.partClear(arg1, arg2, arg3) -- Line 239
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: var37_upvw (read and write)
		[3]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 27 start (CF ANALYSIS FAILED)
	if tbl_upvr.cf == arg1 and tbl_upvr.size == arg2 and tbl_upvr.count < 5 then
		local var38 = tbl_upvr
		var38.count += 1
		return var37_upvw
	end
	tbl_upvr.pos = arg1
	tbl_upvr.size = arg2
	tbl_upvr.count = 0
	local RaycastParams_new_result1 = RaycastParams.new()
	RaycastParams_new_result1.FilterDescendantsInstances = arg3
	RaycastParams_new_result1.FilterType = Enum.RaycastFilterType.Exclude
	local p_2 = (arg1 * CFrame.new(-arg2.x / 2.01, -arg2.y / 2.01, -arg2.z / 2.01)).p
	local workspace_Raycast_result1_2 = workspace:Raycast(p_2, (arg1 * CFrame.new(arg2.x / 2.01, arg2.y / 2.01, arg2.z / 2.01)).p - p_2, RaycastParams_new_result1)
	if workspace_Raycast_result1_2 and not module_upvr.placeIgnoreInstances[workspace_Raycast_result1_2.Instance.Name] then
		var37_upvw = false
		return false
	end
	local p = (arg1 * CFrame.new(arg2.x / 2.01, arg2.y / 2.01, -arg2.z / 2.01)).p
	local workspace_Raycast_result1 = workspace:Raycast(p, (arg1 * CFrame.new(-arg2.x / 2.01, -arg2.y / 2.01, arg2.z / 2.01)).p - p, RaycastParams_new_result1)
	if workspace_Raycast_result1 and not module_upvr.placeIgnoreInstances[workspace_Raycast_result1.Instance.Name] then
		var37_upvw = false
		return false
	end
	local Part = Instance.new("Part")
	Part.Parent = workspace
	Part.Anchored = true
	Part.Size = arg2 - Vector3.new(0.00999, 0.00999, 0.00999)
	Part.CFrame = arg1
	local pairs_result1, pairs_result2, pairs_result3 = pairs(Part:GetTouchingParts())
	-- KONSTANTERROR: [0] 1. Error Block 27 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [210] 151. Error Block 21 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [210] 151. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [180] 128. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [180] 128. Error Block 12 end (CF ANALYSIS FAILED)
end
return module_upvr

-- ReplicatedStorage.Legacy.AlonsBPController.CSP
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:43
-- Luau version 6, Types version 3
-- Time taken: 0.005245 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local BlockDamageGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("TempDevGui"):WaitForChild("BlockDamageGui")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
ABPService = Knit.GetService("AlonsBPService") -- Setting global
ABPController = Knit.GetController("AlonsBPController") -- Setting global
local module_upvr = {
	BG = {};
}
for i = 1, ABPController.PlayerGlobals.WORLDSIZE do
	module_upvr.BG[i] = {}
	for i_2 = 1, ABPController.PlayerGlobals.WORLDSIZE do
		module_upvr.BG[i][i_2] = {}
		for i_3 = 1, ABPController.PlayerGlobals.WORLDHEIGHT do
			module_upvr.BG[i][i_2][i_3] = {0}
		end
	end
end
local Blocks_upvr = ReplicatedStorage_upvr:WaitForChild("Blocks")
local cframe_upvr = CFrame.Angles(0, 0, 0)
function module_upvr.placeFakeBlock(arg1, arg2, arg3, arg4) -- Line 40
	--[[ Upvalues[2]:
		[1]: Blocks_upvr (readonly)
		[2]: cframe_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local clone = Blocks_upvr:FindFirstChild(arg1):Clone()
	clone.Parent = workspace.ClientBlocks
	local var16
	if ABPController.PlayerGlobals.Items[arg1].rotationType == ABPController.PlayerGlobals.RotationType.ALL then
	elseif ABPController.PlayerGlobals.Items[arg1].rotationType == ABPController.PlayerGlobals.RotationType.SIDES then
	elseif ABPController.PlayerGlobals.Items[arg1].rotationType == ABPController.PlayerGlobals.RotationType.STAIR then
		if arg4 then
		else
		end
	elseif ABPController.PlayerGlobals.Items[arg1].rotationType == ABPController.PlayerGlobals.RotationType.SLAB then
		var16 += ABPController.PlayerGlobals.slabOffsetValues[arg3][2]
	end
	if clone:IsA("Model") then
		clone.PrimaryPart.CFrame = CFrame.new(var16) * ABPController.PlayerGlobals.slabOffsetValues[arg3][3]
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		clone.CFrame = CFrame.new(var16) * ABPController.PlayerGlobals.slabOffsetValues[arg3][3]
	end
	local _, any_await_result2 = ABPService:DataRequest(2):andThen():await()
	if any_await_result2 then
		clone:Destroy()
	end
end
local TweenService_upvr = game:GetService("TweenService")
local TweenInfo_new_result1_upvr = TweenInfo.new(0.25)
local os_clock_result1_upvw = os.clock()
function blockBreakingGuiSetup(arg1, arg2, arg3, arg4) -- Line 74
	--[[ Upvalues[4]:
		[1]: BlockDamageGui_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: TweenInfo_new_result1_upvr (readonly)
		[4]: os_clock_result1_upvw (read and write)
	]]
	local Part_upvr = Instance.new("Part")
	Part_upvr.Parent = workspace.Items
	Part_upvr.CFrame = CFrame.new(arg3 - (arg3 - arg4.Head.Position).Unit * 2, arg4.Head.Position)
	Part_upvr.Transparency = 1
	Part_upvr.CanCollide = false
	Part_upvr.Size = Vector3.zero
	Part_upvr.Anchored = true
	BlockDamageGui_upvr.Enabled = true
	BlockDamageGui_upvr.Adornee = Part_upvr
	BlockDamageGui_upvr.BlockName.Text = ABPController.PlayerGlobals.Items[arg2.Name].displayName
	if BlockDamageGui_upvr.Damage.Size.X.Scale < arg1 / ABPController.PlayerGlobals.Items[arg2.Name].durability then
		BlockDamageGui_upvr.Damage.Size = UDim2.fromScale(arg1 / ABPController.PlayerGlobals.Items[arg2.Name].durability, 0.3)
	else
		TweenService_upvr:Create(BlockDamageGui_upvr.Damage, TweenInfo_new_result1_upvr, {
			Size = UDim2.fromScale(arg1 / ABPController.PlayerGlobals.Items[arg2.Name].durability, 0.3);
		}):Play()
	end
	if os.clock() - os_clock_result1_upvw <= 0.3 then
	else
		os_clock_result1_upvw = os.clock()
		spawn(function() -- Line 101
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			wait(0.7)
			Part_upvr:Destroy()
		end)
	end
end
function blockBreakAstetic(arg1, arg2) -- Line 112
end
function generateAndFixBlocksSurrounding(arg1) -- Line 142
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1, pairs_result2_2, pairs_result3_2 = pairs(ABPController.PlayerGlobals.DirVecs)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [231] 151. Error Block 26 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [231] 151. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 8. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [231.8]
	-- KONSTANTERROR: [12] 8. Error Block 2 end (CF ANALYSIS FAILED)
end
function module_upvr.breakBlock(arg1, arg2, arg3, arg4, arg5) -- Line 181
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: BlockDamageGui_upvr (readonly)
	]]
	local var30_upvr = module_upvr.BG[arg2.X][arg2.Z][arg2.Y]
	var30_upvr[3] = arg4
	var30_upvr[2] -= ABPController.PlayerGlobals.Items[ABPController.PlayerGlobals.SelectedItem].mineDamage
	if var30_upvr[2] <= 0 then
		blockBreakAstetic(arg3, arg4.Name)
		BlockDamageGui_upvr.Enabled = false
		spawn(function() -- Line 191
			--[[ Upvalues[2]:
				[1]: var30_upvr (readonly)
				[2]: arg1 (readonly)
			]]
			if var30_upvr[3]:IsA("Model") then
				local PrimaryPart_2 = var30_upvr[3].PrimaryPart
				PrimaryPart_2.CFrame -= Vector3.new(0, 1000, 0)
			else
				local _3 = var30_upvr[3]
				_3.CFrame -= Vector3.new(0, 1000, 0)
			end
			var30_upvr[1] = 0
			var30_upvr[2] = 100
			local _, _ = ABPService:DataRequest(2):andThen():await()
			if var30_upvr[3] and var30_upvr[3].Parent == workspace.Plots[arg1].Blocks then
				if var30_upvr[3]:IsA("Model") then
					local PrimaryPart = var30_upvr[3].PrimaryPart
					PrimaryPart.CFrame += Vector3.new(0, 1000, 0)
				else
					local _3_2 = var30_upvr[3]
					_3_2.CFrame += Vector3.new(0, 1000, 0)
				end
			end
			var30_upvr[3] = nil
		end)
		spawn(function() -- Line 214
			--[[ Upvalues[1]:
				[1]: arg2 (readonly)
			]]
			generateAndFixBlocksSurrounding(arg2)
		end)
	else
		blockBreakingGuiSetup(var30_upvr[2], arg4, arg3, arg5)
	end
end
ABPService.CSPE:Connect(function(arg1, arg2) -- Line 223
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [2] 2. Error Block 15 start (CF ANALYSIS FAILED)
	for _, v in pairs(arg2) do
		local _1 = v[1]
		module_upvr.BG[_1.X][_1.Z][_1.Y] = {v[2], v[3], v[4]}
	end
	do
		return
	end
	-- KONSTANTERROR: [2] 2. Error Block 15 end (CF ANALYSIS FAILED)
end)
return module_upvr

-- ReplicatedStorage.Legacy.AlonsBPController.UI
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:44
-- Luau version 6, Types version 3
-- Time taken: 0.001755 seconds

local LocalPlayer_upvr = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService_upvr = game:GetService("UserInputService")
local Knit = require(ReplicatedStorage.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("AlonsBPController")
local clone = game.StarterGui:WaitForChild("TempDevGui"):Clone()
clone.Parent = LocalPlayer_upvr.PlayerGui
local ScrollingFrame = clone:WaitForChild("ScrollingFrame")
ScrollingFrame.Visible = true
for _, v in pairs({"DevPick", "IronPick", "GrassBlock", "DirtBlock", "CobbleStairs", "WheatSeeds", "Planks", "Tree", "WheatHarvester"}) do
	local var16_upvr = any_GetController_result1_upvr.PlayerGlobals.Items[v]
	local clone_2 = ReplicatedStorage.Prefabs.UI.ItemTemplate:Clone()
	clone_2.Name = var16_upvr.id
	clone_2.Text = var16_upvr.displayName
	clone_2.Parent = ScrollingFrame
	clone_2.Activated:Connect(function() -- Line 36
		--[[ Upvalues[2]:
			[1]: any_GetController_result1_upvr (readonly)
			[2]: var16_upvr (readonly)
		]]
		any_GetController_result1_upvr.PlayerGlobals.SelectedItem = var16_upvr.name
	end)
end
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local Character_upvr = LocalPlayer_upvr.Character
local AlonsBPService_upvr = Knit.GetService("AlonsBPService")
local os_clock_result1_upvw = os.clock()
UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 44
	--[[ Upvalues[7]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: mouse_upvr (readonly)
		[3]: Character_upvr (readonly)
		[4]: AlonsBPService_upvr (readonly)
		[5]: UserInputService_upvr (readonly)
		[6]: os_clock_result1_upvw (read and write)
		[7]: LocalPlayer_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 5. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 5. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 6. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 6. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 14. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 14. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [612] 393. Error Block 25 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [612] 393. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [613] 394. Error Block 26 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [613] 394. Error Block 26 end (CF ANALYSIS FAILED)
end)
return {}

-- ReplicatedStorage.Legacy.Harvester
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:46
-- Luau version 6, Types version 3
-- Time taken: 0.000335 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.Block.BlockDefinition).new(script.Name, 10, {"Pickaxe"}, {
	Id = "Sensor";
	Sensor = "Wheat";
	Plant = "WheatSeed";
}, nil, true, true, true, false)

-- ReplicatedStorage.Legacy.Sensor [Legacy]
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:47
-- Luau version 6, Types version 3
-- Time taken: 0.001593 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Block_upvr = require(ReplicatedStorage_upvr.CommonModules.Block)
local tbl_upvr = {}
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function tbl_upvr.Harvester(arg1, arg2, arg3) -- Line 10
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
		[3]: Block_upvr (readonly)
	]]
	local BlockService = Knit_upvr.GetService("BlockService")
	BlockService:DestroyBlock(arg3.Position)
	if Block_upvr[arg2.Id].BehaviourData.Plant then
		BlockService:PlaceBlock(Block_upvr[arg2.Id].BehaviourData.Plant, TableUtil_upvr.Copy(arg3.Position, true))
	end
end
function AdjacentChange(arg1, arg2, arg3) -- Line 23
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: Block_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	local CommonVariables = require(ReplicatedStorage_upvr.CommonModules.CommonVariables)
	local var8
	if arg3.Id ~= Block_upvr[arg2.Id].BehaviourData.Sensor then
	else
		var8 = workspace
		local SOME = var8.Island:FindFirstChild(arg2.Index)
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var8 = SOME.PrimaryPart
			return var8
		end
		if not SOME or not SOME:IsA("Model") or not INLINED() then
			var8 = SOME
		end
		local var10 = var8
		var8 = CommonVariables:ToWorldPos(arg2.Position)
		if var10 and (CommonVariables:TableToVector3(CommonVariables:ToWorldPos(arg3.Position)) - CommonVariables:TableToVector3(var8)).Unit == var10.CFrame.LookVector then
			tbl_upvr[arg2.Id](arg1, arg2, arg3)
		end
	end
end
function SensorBlockActivate(arg1) -- Line 43
	return true
end
function SensorBlockValidate(arg1, arg2, arg3, arg4) -- Line 47
	return true
end
function SensorBlockInitialise(arg1) -- Line 51
	return true
end
function GetLootData(arg1) -- Line 55
	return arg1.LootData
end
return require(ReplicatedStorage_upvr.CommonModules.Behaviours.BehavioursDefinition).new(script.Name, SensorBlockActivate, SensorBlockInitialise, SensorBlockValidate, AdjacentChange, GetLootData)

-- ReplicatedStorage.Legacy.CommonVariables [Legacy]
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:48
-- Luau version 6, Types version 3
-- Time taken: 0.018639 seconds

local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Block_upvr = require(ReplicatedStorage_upvr.CommonModules.Block)
local module_2_upvr = {}
function module_2_upvr.GetLevelFromXP(arg1, arg2) -- Line 13
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for i, v in pairs(module_2_upvr.LevelFromXP) do
		if arg2 < v then
			return i - 1, v - arg2 / v
		end
	end
	return #module_2_upvr.LevelFromXP, 1
end
function module_2_upvr.GenerateRandomFromWeight(arg1, arg2) -- Line 23
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local type_result1 = type(arg2[1])
	local var30
	for _, v_2 in pairs(arg2) do
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var30 = v_2.Weight
			return var30
		end
		if type_result1 ~= "table" or not INLINED() then
			var30 = v_2
		end
	end
	local var34
	for i_3, v_3 in pairs(arg2) do
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var34 = v_3.Weight
			return var34
		end
		if type_result1 ~= "table" or not INLINED_2() then
			var34 = v_3
		end
		if math.random() * (0 + var30) <= 0 + var34 then
			if type_result1 ~= "table" or not v_3 then
			end
			return i_3
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return i_3
end
function module_2_upvr.ValidateHumanoid(arg1, arg2) -- Line 51
	if not arg2 or not arg2.Parent then return end
	if not arg2.PrimaryPart then return end
	if not arg2:FindFirstChild("HumanoidRootPart") then return end
	if not arg2:FindFirstChild("Humanoid") then return end
	if arg2.Humanoid.Health == 0 then return end
	return true
end
function module_2_upvr.RecurseTable(arg1, arg2, arg3) -- Line 63
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for i_4, v_4 in pairs(arg2) do
		if type(v_4) == "table" then
			module_2_upvr:RecurseTable(v_4, arg3)
		else
			arg3(arg2, i_4, v_4)
		end
	end
end
function module_2_upvr.CustomYeild(arg1, arg2, ...) -- Line 73
	local tbl_5 = {}
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local _, pairs_result2_2, pairs_result3 = pairs({...})
	local var54
	for _, v_5 in var54, pairs_result2_2, pairs_result3 do
		table.insert(tbl_5, v_5:Connect(function() -- Line 80
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire()
		end))
	end
	var54 = arg2
	if var54 then
		var54 = task.delay
		var54 = var54(arg2, function() -- Line 85
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire()
		end)
	end
	BindableEvent_upvr.Event:Wait()
	if var54 then
		task.cancel(var54)
	end
	for _, v_6 in pairs(tbl_5) do
		v_6:Disconnect()
	end
end
function module_2_upvr.TableToVector3(arg1, arg2) -- Line 96
	return Vector3.new(arg2.X, arg2.Y, arg2.Z)
end
function module_2_upvr.Vector3ToTable(arg1, arg2) -- Line 100
	return {
		X = arg2.X;
		Y = arg2.Y;
		Z = arg2.Z;
	}
end
function module_2_upvr.SetPosition(arg1, arg2, arg3) -- Line 104
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_TableToVector3_result1_3 = module_2_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(any_TableToVector3_result1_3, any_TableToVector3_result1_3 + arg2.PrimaryPart.CFrame.LookVector))
	else
		arg2.Position = any_TableToVector3_result1_3
	end
end
function module_2_upvr.SetRotation(arg1, arg2, arg3) -- Line 117
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_TableToVector3_result1_2 = module_2_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(arg2.PrimaryPart.CFrame.Position) * CFrame.Angles(math.rad(any_TableToVector3_result1_2.x), math.rad(any_TableToVector3_result1_2.y), math.rad(any_TableToVector3_result1_2.z)))
	else
		arg2.Orientation = any_TableToVector3_result1_2
	end
end
function module_2_upvr.CreateBlockModel(arg1, arg2, arg3, arg4, arg5) -- Line 131
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	local var63
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var63 = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg2):Clone()
		return var63
	end
	if type(arg2) ~= "string" or not INLINED_3() then
		var63 = arg2:Clone()
	end
	module_2_upvr:SetPosition(var63, arg3)
	module_2_upvr:SetRotation(var63, arg4 or Vector3.new(0, 0, 0))
	var63.Parent = arg5
	return var63
end
function module_2_upvr.UpdateBlockTextures(arg1, arg2, arg3) -- Line 144
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg2:IsA("Model") then
	else
		for _, v_20 in pairs(arg2:GetDescendants()) do
			if v_20:IsA("Texture") then
				v_20.Transparency = 0
			end
		end
		local any_TableToVector3_result1 = module_2_upvr:TableToVector3(module_2_upvr:ToDataPos(arg2.Position))
		for _, v_21 in pairs(arg3) do
			for _, v_22 in pairs(arg2:GetDescendants()) do
				if v_22:IsA("Texture") then
					if Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 + arg2.CFrame.LookVector and v_22.Face == Enum.NormalId.Front then
						v_22.Transparency = 1
					elseif Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 - arg2.CFrame.LookVector and v_22.Face == Enum.NormalId.Back then
						v_22.Transparency = 1
					elseif Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 + arg2.CFrame.RightVector and v_22.Face == Enum.NormalId.Right then
						v_22.Transparency = 1
					elseif Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 - arg2.CFrame.RightVector and v_22.Face == Enum.NormalId.Left then
						v_22.Transparency = 1
					elseif Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 + arg2.CFrame.UpVector and v_22.Face == Enum.NormalId.Top then
						v_22.Transparency = 1
					elseif Vector3.new(v_21.X, v_21.Y, v_21.Z) == any_TableToVector3_result1 - arg2.CFrame.UpVector and v_22.Face == Enum.NormalId.Bottom then
						v_22.Transparency = 1
					end
				end
			end
		end
	end
end
function module_2_upvr.EquipTool(arg1, arg2, arg3, arg4) -- Line 186
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	local clone = arg4:Clone()
	local var93
	if RunService_upvr:IsClient() then
		var93 = "ClientTool"
	else
		var93 = "ServerTool"
	end
	clone.Name = var93
	var93 = clone:IsA("Model")
	if var93 then
		var93 = arg3.Catagory
		if var93 == "Block" then
			var93 = clone.PrimaryPart
			for _, v_7 in ipairs(clone:GetDescendants()) do
				if v_7:IsA("BasePart") then
					v_7.Position = (v_7.Position - var93.Position) * 0.5 + var93.Position
					v_7.Size *= 0.5
				end
			end
		end
		var93 = nil
		for _, v_8 in pairs(clone:GetDescendants()) do
			if v_8:IsA("BasePart") and v_8 ~= var93 then
				if not var93 then
					var93 = v_8
				else
					module_2_upvr:WeldToPart(var93, v_8)
					var93 = v_8
				end
			end
		end
		for _, v_9 in pairs(clone:GetDescendants()) do
			if v_9:IsA("BasePart") then
				v_9.Anchored = false
			end
		end
		local var103 = clone
		if var103:IsA("Model") then
			var103:SetPrimaryPartCFrame(arg2.RightHand.CFrame)
		elseif var103.PrimaryPart:IsA("BasePart") then
			var103.PrimaryPart.CFrame = arg2.RightHand.CFrame
		end
		module_2_upvr:WeldToPart(clone.PrimaryPart, arg2.RightHand)
	else
		var93 = arg3.Catagory
		if var93 == "Block" then
			var93 = false
			clone.Anchored = var93
			var93 = clone.Size
			var93 /= 2
			clone.Size = var93
		end
		var93 = clone
		if var93:IsA("Model") then
			var93:SetPrimaryPartCFrame(arg2.RightHand.CFrame)
			var93 = var93.PrimaryPart
		elseif var93:IsA("BasePart") then
			var93.CFrame = arg2.RightHand.CFrame
		end
		module_2_upvr:WeldToPart(clone, arg2.RightHand)
	end
	clone.Parent = arg2
	return clone
end
local TableUtil_upvr = require(game.ReplicatedStorage.Packages.TableUtil)
function module_2_upvr.GetAdjacentPositions(arg1, arg2) -- Line 258
	--[[ Upvalues[2]:
		[1]: module_2_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
	]]
	arg2 = module_2_upvr:Vector3ToTable(arg2)
	local var109 = arg2
	local module = {}
	for _, v_10 in pairs(module_2_upvr.Directions) do
		local any_Copy_result1 = TableUtil_upvr.Copy(var109, true)
		any_Copy_result1.X += v_10.X
		any_Copy_result1.Y += v_10.Y
		any_Copy_result1.Z += v_10.Z
		table.insert(module, any_Copy_result1)
	end
	return module
end
function module_2_upvr.GetValueAtPosition(arg1, arg2, arg3) -- Line 280
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] and arg2[arg3.X][arg3.Y][arg3.Z] then
		if arg2[arg3.X][arg3.Y][arg3.Z] == 0 then return end
		return arg2[arg3.X][arg3.Y][arg3.Z]
	end
end
function module_2_upvr.GetBlockObjFromPosition(arg1, arg2, arg3) -- Line 287
	for _, v_11 in pairs(arg2) do
		if v_11.Position.X == arg3.X and v_11.Position.Y == arg3.Y and v_11.Position.Z == arg3.Z then
			return v_11
		end
	end
end
function module_2_upvr.GetItemInInventory(arg1, arg2, arg3) -- Line 295
	for _, v_12 in pairs(arg2) do
		if v_12.Id == arg3 then
			return v_12
		end
	end
end
function module_2_upvr.PositionToString(arg1, arg2) -- Line 303
	return tostring(arg2.X..':'..arg2.Y..':'..arg2.Z)
end
function module_2_upvr.GetBlockPositionsFromOrigin(arg1, arg2, arg3) -- Line 307
	--[[ Upvalues[2]:
		[1]: Block_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	if not arg3.Rotation then
		local tbl_2 = {
			X = 0;
			Y = 0;
			Z = 0;
		}
	end
	arg3.Rotation = tbl_2
	tbl_2 = arg3
	local var140 = tbl_2
	if var140 then
		var140 = Block_upvr[arg3.Id]
	end
	if not var140.Size then
		local tbl = {
			X = 1;
			Y = 1;
			Z = 1;
		}
	end
	local function _(arg1_2) -- Line 313, Named "NormaliseVector"
		return Vector3.new(math.floor(arg1_2.X + 0.5), math.floor(arg1_2.Y + 0.5), math.floor(arg1_2.Z + 0.5))
	end
	local function _(arg1_3) -- Line 317, Named "GetDominantValue"
		if arg1_3.X ~= 0 and arg1_3.X ~= -0 then
			return arg1_3.X
		end
		if arg1_3.Y ~= 0 and arg1_3.Y ~= -0 then
			return arg1_3.Y
		end
		return arg1_3.Z
	end
	local tbl_4 = {}
	local var143 = CFrame.new(arg3.Position.X, arg3.Position.Y, arg3.Position.Z) * CFrame.Angles(math.rad(arg3.Rotation.X), math.rad(arg3.Rotation.Y), math.rad(arg3.Rotation.Z))
	for _, v_13 in ipairs({'X', 'Y', 'Z'}) do
		for i_14, v_14 in pairs({var143.LookVector, var143.RightVector, var143.UpVector}) do
			local var152 = Vector3.new(math.floor(v_14.X + 0.5), math.floor(v_14.Y + 0.5), math.floor(v_14.Z + 0.5))[v_13]
			if var152 ~= 0 and var152 ~= -0 then
				tbl_4[v_13] = var152
			end
		end
	end
	for i_15 = tbl_4.X, tbl.X * tbl_4.X, tbl_4.X do
		for i_16 = tbl_4.Y, tbl.Y * tbl_4.Y, tbl_4.Y do
			i_14 = tbl_4.Z
			v_14 = tbl.Z
			for i_17 = i_14, v_14 * tbl_4.Z, tbl_4.Z do
				v_14 = {}
				v_14.X = arg3.Position.X + tbl_4.X * -1 + i_15
				v_14.Y = arg3.Position.Y + tbl_4.Y * -1 + i_16
				v_14.Z = arg3.Position.Z + tbl_4.Z * -1 + i_17
				local any_GetValueAtPosition_result1 = module_2_upvr:GetValueAtPosition(arg2, v_14)
				if any_GetValueAtPosition_result1 ~= 0 then
					table.insert({}, any_GetValueAtPosition_result1)
				end
				table.insert({}, v_14)
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	return {}, {}
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Behaviours_upvr = require(ReplicatedStorage_upvr.CommonModules.Behaviours)
function module_2_upvr.BlockValidation(arg1, arg2, arg3, arg4, arg5) -- Line 365
	--[[ Upvalues[5]:
		[1]: Knit_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Block_upvr (readonly)
		[4]: Behaviours_upvr (readonly)
		[5]: module_2_upvr (readonly)
	]]
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local var161
	if RunService_upvr:IsServer() then
		if BlockService_2.IslandOwner ~= arg2 then
			print("Not island owner")
			return
		end
		var161 = BlockService_2.Blocks
	else
		var161 = Knit_upvr.GetController("BlockController").Blocks
	end
	local var162
	if Block_upvr[arg3] and Block_upvr[arg3].BehaviourData then
		var162 = Block_upvr[arg3].BehaviourData
		var162 = arg4
		if not Behaviours_upvr[var162.Id]:Validate(arg3, var162, arg5) then return end
	end
	if not arg2.Character or not arg2.Character:GetPivot().Position then
		print("no player")
		return
	end
	var162 = arg2.Character:GetPivot().Position
	if 25 < (var162 - module_2_upvr:TableToVector3(module_2_upvr:ToWorldPos(arg4))).magnitude then
		print("Too far")
		return
	end
	local tbl_7 = {}
	tbl_7.Position = arg4
	tbl_7.Rotation = arg5
	tbl_7.Id = arg3
	if #module_2_upvr:GetBlockPositionsFromOrigin(var161, tbl_7) ~= 0 then
		var162 = false
	else
		var162 = true
	end
	return var162
end
function module_2_upvr.ToDataPos(arg1, arg2) -- Line 402
	return {
		X = arg2.X / 3 + 1;
		Y = arg2.Y / 3 + 1;
		Z = arg2.Z / 3 + 1;
	}
end
function module_2_upvr.ToWorldPos(arg1, arg2) -- Line 406
	return {
		X = (arg2.X - 1) * 3;
		Y = (arg2.Y - 1) * 3;
		Z = (arg2.Z - 1) * 3;
	}
end
function module_2_upvr.IteratePositionTable(arg1, arg2, arg3, arg4) -- Line 410
	for i_18, v_15 in pairs(arg2) do
		for i_19, v_16 in pairs(v_15) do
			local var187
			for i_20, v_17 in pairs(v_16) do
				if var187 == 10000 then
					wait()
					var187 = 0
				end
				if v_17 ~= 0 then
					var187 += 1
				end
				arg3(v_17, {
					X = i_18;
					Y = i_19;
					Z = i_20;
				})
			end
		end
	end
end
function module_2_upvr.SetValueAtPosition(arg1, arg2, arg3, arg4) -- Line 423
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] and arg2[arg3.X][arg3.Y][arg3.Z] then
		arg2[arg3.X][arg3.Y][arg3.Z] = arg4
	else
		warn("Invalid position")
	end
end
function module_2_upvr.RoundPosToGridPos(arg1, arg2) -- Line 431
	return Vector3.new(math.floor((arg2.x + 1.5) / 3) * 3, math.floor((arg2.y + 1.5) / 3) * 3, math.floor((arg2.z + 1.5) / 3) * 3)
end
function module_2_upvr.GenerateBlockIndex(arg1) -- Line 438
	return game:GetService("HttpService"):GenerateGUID(false)
end
function module_2_upvr.GetSlotFromIndex(arg1, arg2, arg3) -- Line 445
	for _, v_18 in pairs(arg2) do
		if v_18.Index == arg3 then
			return v_18
		end
	end
end
function module_2_upvr.LoadAnimation(arg1, arg2, arg3) -- Line 453
	local Animation = Instance.new("Animation", arg2)
	Animation.AnimationId = arg3
	return arg2:LoadAnimation(Animation)
end
function module_2_upvr.SwapInventorySlots(arg1, arg2, arg3, arg4) -- Line 459
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1_2 = module_2_upvr:GetSlotFromIndex(arg2, arg3)
	local any_GetSlotFromIndex_result1 = module_2_upvr:GetSlotFromIndex(arg2, arg4)
	if any_GetSlotFromIndex_result1_2 then
		any_GetSlotFromIndex_result1_2.Index = arg4
	end
	if any_GetSlotFromIndex_result1 then
		any_GetSlotFromIndex_result1.Index = arg3
	end
end
function module_2_upvr.GetFirstFreeInventorySpace(arg1, arg2, arg3, arg4) -- Line 466
	-- KONSTANTERROR: [0] 1. Error Block 14 start (CF ANALYSIS FAILED)
	if not arg4 then
		local tbl_3 = {
			Min = 1;
		}
		tbl_3.Max = arg2
	end
	local _ = tbl_3
	-- KONSTANTERROR: [0] 1. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 4 start (CF ANALYSIS FAILED)
	local _, _, _ = pairs(arg3)
	-- KONSTANTERROR: [15] 12. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_2_upvr.RemoveFullStacks(arg1, arg2, arg3) -- Line 478
	for i_22, v_19 in pairs(arg2) do
		if arg3 and v_19.Stack + arg3 <= 64 then
			({})[i_22] = v_19
		elseif not arg3 and v_19.Stack ~= 64 then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			;({})[i_22] = v_19
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_2_upvr.GetModelFromDef(arg1, arg2) -- Line 492
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2.Catagory or not ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg2.Catagory) then return end
	local SOME = ReplicatedStorage_upvr.Prefabs[arg2.Catagory]:FindFirstChild(arg2.Id)
	if not SOME then return end
	return SOME
end
function module_2_upvr.WeldToPart(arg1, arg2, arg3) -- Line 499
	-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
	local var208
	if arg2:IsA("Model") then
		var208 = var208.PrimaryPart
		-- KONSTANTWARNING: GOTO [15] #13
	end
	-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 13 start (CF ANALYSIS FAILED)
	if var208:IsA("BasePart") then
	else
		return
	end
	local Weld = Instance.new("Weld")
	Weld.Part0 = var208
	Weld.Part1 = arg3
	Weld.C0 = var208.CFrame:inverse()
	Weld.C1 = arg3.CFrame:inverse()
	Weld.Parent = var208
	do
		return Weld
	end
	-- KONSTANTERROR: [8] 7. Error Block 13 end (CF ANALYSIS FAILED)
end
local Promise_upvr = require(game.ReplicatedStorage.Packages.Promise)
function module_2_upvr.GetData(arg1, arg2, arg3) -- Line 521
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	local var211
	if not var211 then return end
	if Promise_upvr.is(var211) then
		local _, any_await_result2 = var211:await()
		var211 = any_await_result2
	end
	return var211
end
local BadgeService_upvr = game:GetService("BadgeService")
function module_2_upvr.AwardBadge(arg1, arg2, arg3) -- Line 538
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: BadgeService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 15 start (CF ANALYSIS FAILED)
	if not arg2 or not arg3 or RunService_upvr:IsClient() then return end
	local pcall_result1, pcall_result2 = pcall(function() -- Line 542
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: arg3 (readonly)
		]]
		return BadgeService_upvr:GetBadgeInfoAsync(arg3)
	end)
	-- KONSTANTERROR: [0] 1. Error Block 15 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 29. Error Block 11 start (CF ANALYSIS FAILED)
	warn("Failed to award badge.")
	do
		return
	end
	-- KONSTANTERROR: [33] 29. Error Block 11 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [38] 33. Error Block 12 start (CF ANALYSIS FAILED)
	warn("Error while fetching badge info: "..pcall_result2)
	-- KONSTANTERROR: [38] 33. Error Block 12 end (CF ANALYSIS FAILED)
end
return module_2_upvr

-- ReplicatedStorage.Legacy.SoundService
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:49
-- Luau version 6, Types version 3
-- Time taken: 0.000667 seconds

local CollectionService = game:GetService("CollectionService")
local Knit_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit)
local any_CreateService_result1 = Knit_upvr.CreateService({
	Name = "SoundService";
	Client = {};
})
any_CreateService_result1.SFX = CollectionService:GetTagged("SFX")
any_CreateService_result1.Music = CollectionService:GetTagged("Music")
local tbl_upvr = {}
function any_CreateService_result1.KnitStart(arg1) -- Line 23
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	tbl_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
end
return any_CreateService_result1

-- ReplicatedStorage.Legacy.PosTracking
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:50
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

local LocalPlayer = game.Players.LocalPlayer
local Character_upvr = LocalPlayer.Character
local zero_upvw = Vector3.zero
local PlayerGlobals_upvr = require(LocalPlayer.PlayerScripts.Modules.PlayerGlobals)
local tbl_upvr = {}
Character_upvr.Humanoid.Moved:Connect(function() -- Line 15
	--[[ Upvalues[4]:
		[1]: Character_upvr (readonly)
		[2]: zero_upvw (read and write)
		[3]: PlayerGlobals_upvr (readonly)
		[4]: tbl_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local Position = Character_upvr.PrimaryPart.Position
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 9. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [12] 9. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 10. Error Block 3 start (CF ANALYSIS FAILED)
	zero_upvw = Position
	-- KONSTANTERROR: [13] 10. Error Block 3 end (CF ANALYSIS FAILED)
end)

-- ReplicatedStorage.Legacy.FlyingScriptForPass
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:51
-- Luau version 6, Types version 3
-- Time taken: 0.005310 seconds

local UserInputService = game:GetService("UserInputService")
if UserInputService.KeyboardEnabled then
	local LocalPlayer_2 = game.Players.LocalPlayer
	repeat
		wait()
	until LocalPlayer_2.Character
	local Character_upvr = LocalPlayer_2.Character
	local HumanoidRootPart_upvr = Character_upvr:WaitForChild("HumanoidRootPart")
	local var5_upvw = false
	local tbl_upvr = {
		space = 0;
	}
	local var7_upvw = 0
	function coolDownCount() -- Line 18
		--[[ Upvalues[1]:
			[1]: var7_upvw (read and write)
		]]
		while 0 < var7_upvw do
			wait(0.25)
			var7_upvw -= 1
		end
	end
	local var8_upvw = false
	local var9_upvw = false
	local var10_upvw = false
	local var11_upvw = false
	local var12_upvw = false
	local var13_upvw = false
	local function startFlight() -- Line 32
		--[[ Upvalues[1]:
			[1]: HumanoidRootPart_upvr (readonly)
		]]
		local BodyPosition_12 = Instance.new("BodyPosition")
		BodyPosition_12.Parent = HumanoidRootPart_upvr
		BodyPosition_12.Position = HumanoidRootPart_upvr.Position
		BodyPosition_12.D = 10
		BodyPosition_12.P = 10000
		BodyPosition_12.MaxForce = Vector3.new(400000, 400000, 400000)
	end
	startFlight = startFlight -- Setting global
	local function stopFlight() -- Line 41
		--[[ Upvalues[1]:
			[1]: HumanoidRootPart_upvr (readonly)
		]]
		HumanoidRootPart_upvr:FindFirstChild("BodyPosition"):Destroy()
	end
	stopFlight = stopFlight -- Setting global
	UserInputService.InputBegan:Connect(function(arg1, arg2) -- Line 46
		--[[ Upvalues[9]:
			[1]: var7_upvw (read and write)
			[2]: tbl_upvr (readonly)
			[3]: var5_upvw (read and write)
			[4]: var8_upvw (read and write)
			[5]: var10_upvw (read and write)
			[6]: var11_upvw (read and write)
			[7]: var12_upvw (read and write)
			[8]: var13_upvw (read and write)
			[9]: var9_upvw (read and write)
		]]
		if arg2 then
		else
			if arg1.KeyCode == Enum.KeyCode.Space and var7_upvw == 0 then
				if os.clock() - tbl_upvr.space <= 0.4 then
					if not var5_upvw then
						var5_upvw = true
						startFlight()
					else
						var5_upvw = false
						stopFlight()
					end
					var7_upvw = 4
					spawn(coolDownCount)
				end
				tbl_upvr.space = os.clock()
			end
			if arg1.KeyCode == Enum.KeyCode.Space then
				var8_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.W then
				var10_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.A then
				var11_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.S then
				var12_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.D then
				var13_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.LeftShift then
				var9_upvw = true
			end
		end
	end)
	UserInputService.InputEnded:Connect(function(arg1) -- Line 82
		--[[ Upvalues[6]:
			[1]: var8_upvw (read and write)
			[2]: var10_upvw (read and write)
			[3]: var11_upvw (read and write)
			[4]: var12_upvw (read and write)
			[5]: var13_upvw (read and write)
			[6]: var9_upvw (read and write)
		]]
		if arg1.KeyCode == Enum.KeyCode.Space then
			var8_upvw = false
		end
		if arg1.KeyCode == Enum.KeyCode.W then
			var10_upvw = false
		end
		if arg1.KeyCode == Enum.KeyCode.A then
			var11_upvw = false
		end
		if arg1.KeyCode == Enum.KeyCode.S then
			var12_upvw = false
		end
		if arg1.KeyCode == Enum.KeyCode.D then
			var13_upvw = false
		end
		if arg1.KeyCode == Enum.KeyCode.LeftShift then
			var9_upvw = false
		end
	end)
	local CurrentCamera_upvr = game.Workspace.CurrentCamera
	game:GetService("RunService").Stepped:Connect(function() -- Line 105
		--[[ Upvalues[10]:
			[1]: var5_upvw (read and write)
			[2]: CurrentCamera_upvr (readonly)
			[3]: HumanoidRootPart_upvr (readonly)
			[4]: var10_upvw (read and write)
			[5]: var12_upvw (read and write)
			[6]: var13_upvw (read and write)
			[7]: var11_upvw (read and write)
			[8]: var8_upvw (read and write)
			[9]: var9_upvw (read and write)
			[10]: Character_upvr (readonly)
		]]
		if var5_upvw then
			local var19 = -(Vector3.new(CurrentCamera_upvr.CFrame.X, HumanoidRootPart_upvr.Position.Y, CurrentCamera_upvr.CFrame.Z) - HumanoidRootPart_upvr.Position).Unit
			local any_Cross_result1_2 = var19:Cross(Vector3.new(0, 1, 0))
			HumanoidRootPart_upvr.BodyPosition.Position = HumanoidRootPart_upvr.Position
			if var10_upvw then
				local BodyPosition_8 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_8.Position += var19 / 2
			end
			if var12_upvw then
				local BodyPosition_6 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_6.Position -= var19 / 2
			end
			if var13_upvw then
				local BodyPosition_7 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_7.Position += any_Cross_result1_2 / 2
			end
			if var11_upvw then
				local BodyPosition_14 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_14.Position -= any_Cross_result1_2 / 2
			end
			if var8_upvw then
				local BodyPosition_11 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_11.Position += Vector3.new(0, 0.5, 0)
			end
			if var9_upvw then
				local BodyPosition_9 = HumanoidRootPart_upvr.BodyPosition
				BodyPosition_9.Position -= Vector3.new(0, 0.5, 0)
			end
			if Character_upvr.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
				var5_upvw = false
				stopFlight()
			end
		end
	end)
elseif UserInputService.TouchEnabled then
	HumanoidRootPart_upvr = game
	Character_upvr = HumanoidRootPart_upvr.Players
	local LocalPlayer = Character_upvr.LocalPlayer
	Character_upvr = script:WaitForChild("FlyButton")
	local var28_upvr = Character_upvr
	HumanoidRootPart_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui")
	local CustomTouchGui = HumanoidRootPart_upvr:WaitForChild("CustomTouchGui")
	local JumpButton = game.Players.LocalPlayer.PlayerGui.TouchGui.TouchControlFrame:WaitForChild("JumpButton")
	var28_upvr.Parent = CustomTouchGui
	var28_upvr.Size = UDim2.fromOffset(JumpButton.AbsoluteSize.X / 2, JumpButton.AbsoluteSize.Y / 2)
	var28_upvr.Position = JumpButton.Position + UDim2.fromOffset(JumpButton.AbsoluteSize.X / 2 - var28_upvr.AbsoluteSize.X / 2, (-3) * (var28_upvr.AbsoluteSize.Y * 1.1))
	var28_upvr.Visible = true
	local FlyControls_upvr = script:WaitForChild("FlyControls")
	FlyControls_upvr.Parent = CustomTouchGui
	FlyControls_upvr.Size = UDim2.fromOffset(var28_upvr.AbsoluteSize.X * 3.3333333333333335, var28_upvr.AbsoluteSize.Y * 2.2222222222222223)
	FlyControls_upvr.Position = var28_upvr.Position + UDim2.fromOffset(-5, 0)
	repeat
		wait()
	until LocalPlayer.Character
	local HumanoidRootPart_upvr_2 = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	local var33_upvw = false
	local var34_upvw = false
	local var35_upvw = false
	local var36_upvw = false
	local var37_upvw = false
	local var38_upvw = false
	local var39_upvw = false
	function startFlight() -- Line 176
		--[[ Upvalues[4]:
			[1]: HumanoidRootPart_upvr_2 (readonly)
			[2]: var28_upvr (readonly)
			[3]: var33_upvw (read and write)
			[4]: FlyControls_upvr (readonly)
		]]
		local BodyPosition_10 = Instance.new("BodyPosition")
		BodyPosition_10.Parent = HumanoidRootPart_upvr_2
		BodyPosition_10.Position = HumanoidRootPart_upvr_2.Position
		BodyPosition_10.D = 10
		BodyPosition_10.P = 10000
		BodyPosition_10.MaxForce = Vector3.new(400000, 400000, 400000)
		var28_upvr.Image = "rbxassetid://15168583363"
		var33_upvw = true
		FlyControls_upvr.Visible = true
	end
	function stopFlight() -- Line 189
		--[[ Upvalues[4]:
			[1]: HumanoidRootPart_upvr_2 (readonly)
			[2]: var28_upvr (readonly)
			[3]: var33_upvw (read and write)
			[4]: FlyControls_upvr (readonly)
		]]
		HumanoidRootPart_upvr_2:FindFirstChild("BodyPosition"):Destroy()
		var28_upvr.Image = "rbxassetid://15168570614"
		var33_upvw = false
		FlyControls_upvr.Visible = false
	end
	var28_upvr.Activated:Connect(function() -- Line 198
		--[[ Upvalues[1]:
			[1]: var33_upvw (read and write)
		]]
		if not var33_upvw then
			startFlight()
		else
			stopFlight()
		end
	end)
	FlyControls_upvr.ForwardB.InputBegan:Connect(function() -- Line 206
		--[[ Upvalues[1]:
			[1]: var36_upvw (read and write)
		]]
		var36_upvw = true
	end)
	FlyControls_upvr.ForwardB.InputEnded:Connect(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: var36_upvw (read and write)
		]]
		var36_upvw = false
	end)
	FlyControls_upvr.BackB.InputBegan:Connect(function() -- Line 213
		--[[ Upvalues[1]:
			[1]: var38_upvw (read and write)
		]]
		var38_upvw = true
	end)
	FlyControls_upvr.BackB.InputEnded:Connect(function() -- Line 216
		--[[ Upvalues[1]:
			[1]: var38_upvw (read and write)
		]]
		var38_upvw = false
	end)
	FlyControls_upvr.LeftB.InputBegan:Connect(function() -- Line 220
		--[[ Upvalues[1]:
			[1]: var37_upvw (read and write)
		]]
		var37_upvw = true
	end)
	FlyControls_upvr.LeftB.InputEnded:Connect(function() -- Line 223
		--[[ Upvalues[1]:
			[1]: var37_upvw (read and write)
		]]
		var37_upvw = false
	end)
	FlyControls_upvr.RightB.InputBegan:Connect(function() -- Line 227
		--[[ Upvalues[1]:
			[1]: var39_upvw (read and write)
		]]
		var39_upvw = true
	end)
	FlyControls_upvr.RightB.InputEnded:Connect(function() -- Line 230
		--[[ Upvalues[1]:
			[1]: var39_upvw (read and write)
		]]
		var39_upvw = false
	end)
	FlyControls_upvr.UpB.InputBegan:Connect(function() -- Line 234
		--[[ Upvalues[1]:
			[1]: var34_upvw (read and write)
		]]
		var34_upvw = true
	end)
	FlyControls_upvr.UpB.InputEnded:Connect(function() -- Line 237
		--[[ Upvalues[1]:
			[1]: var34_upvw (read and write)
		]]
		var34_upvw = false
	end)
	FlyControls_upvr.DownB.InputBegan:Connect(function() -- Line 241
		--[[ Upvalues[1]:
			[1]: var35_upvw (read and write)
		]]
		var35_upvw = true
	end)
	FlyControls_upvr.DownB.InputEnded:Connect(function() -- Line 244
		--[[ Upvalues[1]:
			[1]: var35_upvw (read and write)
		]]
		var35_upvw = false
	end)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local CurrentCamera_upvr_2 = game.Workspace.CurrentCamera
	game:GetService("RunService").Stepped:Connect(function() -- Line 251
		--[[ Upvalues[9]:
			[1]: var33_upvw (read and write)
			[2]: CurrentCamera_upvr_2 (readonly)
			[3]: HumanoidRootPart_upvr_2 (readonly)
			[4]: var36_upvw (read and write)
			[5]: var38_upvw (read and write)
			[6]: var39_upvw (read and write)
			[7]: var37_upvw (read and write)
			[8]: var34_upvw (read and write)
			[9]: var35_upvw (read and write)
		]]
		if var33_upvw then
			local var56 = -(Vector3.new(CurrentCamera_upvr_2.CFrame.X, HumanoidRootPart_upvr_2.Position.Y, CurrentCamera_upvr_2.CFrame.Z) - HumanoidRootPart_upvr_2.Position).Unit
			local any_Cross_result1 = var56:Cross(Vector3.new(0, 1, 0))
			HumanoidRootPart_upvr_2.BodyPosition.Position = HumanoidRootPart_upvr_2.Position
			if var36_upvw then
				local BodyPosition_2 = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition_2.Position += var56 / 2
			end
			if var38_upvw then
				local BodyPosition_5 = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition_5.Position -= var56 / 2
			end
			if var39_upvw then
				local BodyPosition_4 = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition_4.Position += any_Cross_result1 / 2
			end
			if var37_upvw then
				local BodyPosition_13 = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition_13.Position -= any_Cross_result1 / 2
			end
			if var34_upvw then
				local BodyPosition = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition.Position += Vector3.new(0, 0.5, 0)
			end
			if var35_upvw then
				local BodyPosition_3 = HumanoidRootPart_upvr_2.BodyPosition
				BodyPosition_3.Position -= Vector3.new(0, 0.5, 0)
			end
		end
	end)
end

-- ReplicatedStorage.Legacy.NPCService
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:52
-- Luau version 6, Types version 3
-- Time taken: 0.001444 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateService_result1_upvr = Knit_upvr.CreateService({
	Name = "NPCService";
	Client = {};
})
local tbl_upvr = {}
any_CreateService_result1_upvr.NPCs = {}
local function ClientPurchase(arg1, arg2, arg3, arg4, arg5) -- Line 23
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	if not arg5 then
		local var7 = 1
	end
	local any_GetData_result1 = CoreUtil_upvr:GetData(arg2, tbl_upvr.DataHandlerService)
	if not any_GetData_result1 then
	else
		local any_GetDefinitionFromId_result1 = CoreUtil_upvr:GetDefinitionFromId(arg4.Id)
		if not any_GetDefinitionFromId_result1 or not any_GetDefinitionFromId_result1.EconomyInfo or not any_GetDefinitionFromId_result1.EconomyInfo.BuyPrice then return end
		if any_GetDefinitionFromId_result1.EconomyInfo.BuyPrice * var7 <= any_GetData_result1.Coins then
			any_GetData_result1.Coins -= any_GetDefinitionFromId_result1.EconomyInfo.BuyPrice * var7
			tbl_upvr.InventoryService:CollectItem(arg2, any_GetDefinitionFromId_result1, var7)
		end
	end
end
any_CreateService_result1_upvr.ClientPurchase = ClientPurchase
any_CreateService_result1_upvr.Client.ClientPurchase = function(arg1, arg2, arg3, arg4) -- Line 40, Named "ClientPurchase"
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	return any_CreateService_result1_upvr:ClientPurchase(arg2, arg3, arg4)
end
function any_CreateService_result1_upvr.KnitStart(arg1) -- Line 44
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	tbl_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
end
return any_CreateService_result1_upvr

-- ReplicatedStorage.Legacy.ItemModules.Items
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:53
-- Luau version 6, Types version 3
-- Time taken: 0.001827 seconds

local module = {}
module.__index = module
local AlonsBPService = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local Block = require(script.Block)
local Tool = require(script.Tool)
AlonsBPService.Registry.Items = {
	WoodPick = Tool.new(5, "WoodPick", "Wood Pickaxe", "", "", 0.1, 8, AlonsBPService.Registry.MineLevel.WOOD);
	IronPick = Tool.new(20, "IronPick", "Iron Pickaxe", "", "", 0.1, 23, AlonsBPService.Registry.MineLevel.IRON);
	DevPick = Tool.new(17, "DevPick", "Dev Pickaxe", "", "", 0.1, 110, AlonsBPService.Registry.MineLevel.WOOD);
	Pointer = Block.new(-1, "Pointer", "Pointer", "", "", false, 100, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, nil, false, AlonsBPService.Registry.MineType.PICK);
	Air = Block.new(0, "Air", "Air", "", "", false, 100, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, nil, true, AlonsBPService.Registry.MineType.PICK);
	StoneBlock = Block.new(1, "StoneBlock", "Stone", "", "", true, 100, true, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.FULL, nil, true, AlonsBPService.Registry.MineType.PICK);
	GrassBlock = Block.new(2, "GrassBlock", "Grass Block", "", "", true, 100, true, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.FULL, nil, true, AlonsBPService.Registry.MineType.PICK);
	DirtBlock = Block.new(3, "DirtBlock", "Dirt Block", "", "", true, 100, true, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.FULL, nil, true, AlonsBPService.Registry.MineType.PICK);
	WheatSeeds = Block.new(11, "WheatSeeds", "Wheat Seeds", "", "", true, 10, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.CROP, false, AlonsBPService.Registry.MineType.PICK);
	Wheat2 = Block.new(12, "Wheat2", "Wheat Seeds #2", "", "", true, 10, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.CROP, false, AlonsBPService.Registry.MineType.PICK);
	Wheat3 = Block.new(13, "Wheat3", "Wheat Seeds #3", "", "", true, 10, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.CROP, false, AlonsBPService.Registry.MineType.PICK);
	Wheat4 = Block.new(14, "Wheat4", "Wheat Crop", "", "", true, 10, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.CROP, false, AlonsBPService.Registry.MineType.PICK);
	TilledDirt = Block.new(16, "TilledDirt", "Soil", "", "", true, 100, true, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.FULL, nil, false, AlonsBPService.Registry.MineType.PICK);
	Planks = Block.new(6, "Planks", "Cool Planks", "", "", true, 100, false, AlonsBPService.Registry.RotationType.NONE, AlonsBPService.Registry.BlockOpacity.FULL, AlonsBPService.Registry.BlockDataTypes.PLANK, true, AlonsBPService.Registry.MineType.PICK);
	WheatHarvester = Block.new(18, "WheatHarvester", "Wheat Harvester", "", "", true, 100, false, AlonsBPService.Registry.RotationType.SIDES, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.WHEATFARM, false, AlonsBPService.Registry.MineType.PICK);
	Tree = Block.new(19, "Tree", "Tree", "", "", true, 100, false, AlonsBPService.Registry.RotationType.SIDES, AlonsBPService.Registry.BlockOpacity.TRANS, nil, false, AlonsBPService.Registry.MineType.PICK);
	CobbleStairs = Block.new(21, "CobbleStairs", "Cobble Stairs", "", "", true, 100, false, AlonsBPService.Registry.RotationType.STAIR, AlonsBPService.Registry.BlockOpacity.TRANS, AlonsBPService.Registry.BlockDataTypes.STAIR, false, AlonsBPService.Registry.MineType.PICK);
}
return module

-- ReplicatedStorage.Legacy.ItemModules.Items.Item
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:55
-- Luau version 6, Types version 3
-- Time taken: 0.000684 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5) -- Line 13
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module.id = arg1
	module.name = arg2
	module.displayName = arg3
	module.itemImage = arg4
	module.desc = arg5
	module.useType = AlonsBPService_upvr.Registry.UseType.NONE
	AlonsBPService_upvr.Registry.ItemNames[arg3] = arg2
	AlonsBPService_upvr.Registry.NameToId[arg2] = arg1
	AlonsBPService_upvr.Registry.IdToName[arg1] = arg2
	module.classType = AlonsBPService_upvr.Registry.ClassType.ITEM
	AlonsBPService_upvr.Registry.IdToInstance[arg1] = module
	return module
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.Items.Food
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:56
-- Luau version 6, Types version 3
-- Time taken: 0.000636 seconds

local Item_upvr = require(script.Parent.Item)
local module_upvr = {}
module_upvr.__index = module_upvr
setmetatable(module_upvr, Item_upvr)
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 17
	--[[ Upvalues[3]:
		[1]: Item_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: AlonsBPService_upvr (readonly)
	]]
	local any_new_result1 = Item_upvr.new(arg1, arg2, arg3, arg4, arg5)
	setmetatable(any_new_result1, module_upvr)
	any_new_result1.saturation = arg6
	any_new_result1.useType = AlonsBPService_upvr.Registry.UseType.EAT
	any_new_result1.classType = AlonsBPService_upvr.Registry.ClassType.FOOD
	return any_new_result1
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.Items.Tool
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:57
-- Luau version 6, Types version 3
-- Time taken: 0.000804 seconds

local Item_upvr = require(script.Parent.Item)
local module_upvr = {}
module_upvr.__index = module_upvr
setmetatable(module_upvr, Item_upvr)
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) -- Line 17
	--[[ Upvalues[3]:
		[1]: Item_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: AlonsBPService_upvr (readonly)
	]]
	local any_new_result1 = Item_upvr.new(arg1, arg2, arg3, arg4, arg5)
	setmetatable(any_new_result1, module_upvr)
	any_new_result1.mineSpeed = arg6
	any_new_result1.mineDamage = arg7
	any_new_result1.mineLevel = arg8
	any_new_result1.useType = AlonsBPService_upvr.Registry.UseType.BREAK
	any_new_result1.classType = AlonsBPService_upvr.Registry.ClassType.TOOL
	return any_new_result1
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.Items.Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:58
-- Luau version 6, Types version 3
-- Time taken: 0.001159 seconds

local Item_upvr = require(script.Parent.Item)
local module_upvr = {}
module_upvr.__index = module_upvr
setmetatable(module_upvr, Item_upvr)
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) -- Line 17
	--[[ Upvalues[3]:
		[1]: Item_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: AlonsBPService_upvr (readonly)
	]]
	local any_new_result1 = Item_upvr.new(arg1, arg2, arg3, arg4, arg5)
	setmetatable(any_new_result1, module_upvr)
	any_new_result1.breakable = arg6
	any_new_result1.durability = arg7
	any_new_result1.hasTextures = arg8
	any_new_result1.rotationType = arg9
	any_new_result1.opacity = arg10
	local var7 = arg13
	if not var7 then
		var7 = AlonsBPService_upvr.Registry.MineType.PICK
	end
	any_new_result1.mineType = var7
	if arg11 == nil then
		any_new_result1.blockData = 0
	else
		any_new_result1.blockData = arg11
	end
	any_new_result1.canDisappear = arg12
	any_new_result1.useType = AlonsBPService_upvr.Registry.UseType.PLACE
	any_new_result1.classType = AlonsBPService_upvr.Registry.ClassType.BLOCK
	return any_new_result1
end
function module_upvr.BlastResistence(arg1, arg2) -- Line 37
	arg1.blastResistence = arg2
	return arg1
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.DropTable
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:59
-- Luau version 6, Types version 3
-- Time taken: 0.000803 seconds

local Drops = require(script.Drops)
local module = {}
module.__index = module
module.blockDrops = {
	Fist = Drops.new({}, {}, {});
	Air = Drops.new({}, {}, {});
	WheatSeeds = Drops.new({"WheatSeeds"}, {1}, {100}, {1});
	Wheat2 = Drops.new({"WheatSeeds"}, {1}, {100}, {1});
	Wheat3 = Drops.new({"WheatSeeds"}, {1}, {100}, {1});
	Wheat4 = Drops.new({"Wheat", "Wheat", "WheatSeeds"}, {1, 1, 1}, {100, 25, 100}, {1, 2, 1});
}
return module

-- ReplicatedStorage.Legacy.ItemModules.DropTable.Drops
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:00
-- Luau version 6, Types version 3
-- Time taken: 0.000775 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 5
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module.I = arg1
	module.A = arg2
	module.C = arg3
	module.R = arg4
	return module
end
function module_upvr.attemptDrop(arg1) -- Line 16
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(arg1.I)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [60] 47. Error Block 15 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [60] 47. Error Block 15 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 8. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 8. Error Block 2 end (CF ANALYSIS FAILED)
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.BlockData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:01
-- Luau version 6, Types version 3
-- Time taken: 0.003383 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local BlockFuncs_upvr = require(script.Parent.Parent.Parent.Modules.BlockFuncs)
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1) -- Line 17
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_2_upvr)
	module:set(arg1)
	return module
end
function module_2_upvr.set(arg1, arg2) -- Line 24
	arg1.durability = arg2
end
function module_2_upvr.created(arg1, arg2, arg3, arg4) -- Line 32
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
	]]
	local var7 = AlonsBPService_upvr.World[arg2].Blocks[arg4.x][arg4.z][arg4.y]
	local _1 = var7[1]
	if arg3 and arg1.dir and var7[3] then
		local rotationType = AlonsBPService_upvr.Registry.IdToInstance[_1].rotationType
		if rotationType == AlonsBPService_upvr.Registry.RotationType.ALL then
			if var7[3]:IsA("Model") then
				local PrimaryPart = var7[3].PrimaryPart
				PrimaryPart.CFrame *= AlonsBPService_upvr.Registry.NormalToCFrameAngles[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
			else
				local _3 = var7[3]
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				_3.CFrame *= AlonsBPService_upvr.Registry.NormalToCFrameAngles[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
			end
		elseif rotationType == AlonsBPService_upvr.Registry.RotationType.SIDES or rotationType == AlonsBPService_upvr.Registry.RotationType.STAIR then
			if var7[3]:IsA("Model") then
				local PrimaryPart_2 = var7[3].PrimaryPart
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				PrimaryPart_2.CFrame *= AlonsBPService_upvr.Registry.NormalToCFrameAnglesSidesBlocks[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
			else
				local _3_3 = var7[3]
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				_3_3.CFrame *= AlonsBPService_upvr.Registry.NormalToCFrameAnglesSidesBlocks[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
			end
		elseif rotationType == AlonsBPService_upvr.Registry.RotationType.SLAB then
			if var7[3]:IsA("Part") then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				local var14 = AlonsBPService_upvr.Registry.slabOffsetValues[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
				var7[3].CFrame = CFrame.new(var7[3].Position + var14[2]) * CFrame.Angles(math.rad(var14[3].X), 0, math.rad(var14[3].Z))
			else
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				local var15 = AlonsBPService_upvr.Registry.slabOffsetValues[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
				var7[3].PrimaryPart.CFrame = CFrame.new(var7[3].PrimaryPart.Position + var15[2]) * CFrame.Angles(math.rad(var15[3].X), 0, math.rad(var15[3].Z))
			end
		end
	end
	if AlonsBPService_upvr.Registry.IdToInstance[_1].hasTextures and var7[3] then
		BlockFuncs_upvr.textureFix(arg2, arg4, arg1.dir)
	end
end
function module_2_upvr.destroyed(arg1, arg2, arg3) -- Line 68
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	AlonsBPService_upvr.World:RemovePosFromTickList(arg2, arg3)
end
function module_2_upvr.canPlace(arg1, arg2, arg3) -- Line 75
	return true
end
function module_2_upvr.updated(arg1, arg2, arg3, arg4) -- Line 83
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
	]]
	local var16_upvr = AlonsBPService_upvr.World[arg2].Blocks[arg3.x][arg3.z][arg3.y]
	local _3_2 = var16_upvr[3]
	local _1_2_upvr = var16_upvr[1]
	if _3_2 == nil and BlockFuncs_upvr.shouldPlace(arg2, arg3) then
		var16_upvr[3] = BlockFuncs_upvr.doPlaceBlock(workspace.Plots:FindFirstChild(arg2):FindFirstChild("Blocks"), AlonsBPService_upvr.Registry.IdToName[_1_2_upvr], AlonsBPService_upvr.World[arg2].Root + arg3 * 3, AlonsBPService_upvr.Registry.NumToNormal[arg1.dir])
		spawn(function() -- Line 89
			--[[ Upvalues[4]:
				[1]: arg3 (readonly)
				[2]: _1_2_upvr (readonly)
				[3]: var16_upvr (readonly)
				[4]: AlonsBPService_upvr (copied, readonly)
			]]
			task.wait(0.1)
			local tbl = {}
			tbl[1] = arg3
			tbl[2] = _1_2_upvr
			tbl[3] = var16_upvr[2].durability
			tbl[4] = var16_upvr[3]
			for _, v in pairs(game.Players:GetPlayers()) do
				AlonsBPService_upvr.Client.CSPE:Fire(v, 2, tbl)
			end
		end)
	elseif _3_2 and not BlockFuncs_upvr.shouldPlace(arg2, arg3) and AlonsBPService_upvr.Registry.IdToInstance[_1_2_upvr].canDisappear then
		_3_2:Destroy()
		var16_upvr[3] = nil
	end
	if var16_upvr[3] and AlonsBPService_upvr.Registry.IdToInstance[_1_2_upvr].hasTextures then
		BlockFuncs_upvr.textureFix(arg2, arg3, arg1.dir)
	end
end
function module_2_upvr.tick(arg1, arg2, arg3) -- Line 109
	return true
end
function module_2_upvr.randomTick(arg1, arg2, arg3) -- Line 116
	return true
end
function module_2_upvr.beforeSaved(arg1, arg2) -- Line 122
	return true
end
return module_2_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.CropData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:02
-- Luau version 6, Types version 3
-- Time taken: 0.005204 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local BlockFuncs_upvr = require(script.Parent.Parent.Parent.Modules.BlockFuncs)
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
module_2_upvr.CropTypeStats = {
	[AlonsBPService_upvr.Registry.ItemNums.Wheat] = {30, 3, 5, 4};
}
module_2_upvr.IdToTypeAndStage = {
	[AlonsBPService_upvr.Registry.ItemNums.WheatSeeds] = {AlonsBPService_upvr.Registry.ItemNums.Wheat, 1};
	[AlonsBPService_upvr.Registry.ItemNums.Wheat2] = {AlonsBPService_upvr.Registry.ItemNums.Wheat, 2};
	[AlonsBPService_upvr.Registry.ItemNums.Wheat3] = {AlonsBPService_upvr.Registry.ItemNums.Wheat, 3};
	[AlonsBPService_upvr.Registry.ItemNums.Wheat4] = {AlonsBPService_upvr.Registry.ItemNums.Wheat, 4};
}
module_2_upvr.TypeToStages = {
	[AlonsBPService_upvr.Registry.ItemNums.Wheat] = {AlonsBPService_upvr.Registry.ItemNums.WheatSeeds, AlonsBPService_upvr.Registry.ItemNums.Wheat2, AlonsBPService_upvr.Registry.ItemNums.Wheat3, AlonsBPService_upvr.Registry.ItemNums.Wheat4};
}
function module_2_upvr.new(arg1) -- Line 33
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_2_upvr)
	module:set(arg1)
	return module
end
function module_2_upvr.set(arg1, arg2) -- Line 40
	arg1.durability = arg2
end
local random_state_upvr = Random.new()
function module_2_upvr.created(arg1, arg2, arg3, arg4) -- Line 46
	--[[ Upvalues[4]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
		[3]: module_2_upvr (readonly)
		[4]: random_state_upvr (readonly)
	]]
	local var17 = AlonsBPService_upvr.World[arg2]
	var17.SeedCount += 1
	local var18 = AlonsBPService_upvr.World[arg2].Blocks[arg4.X][arg4.Z][arg4.Y]
	local _1_2 = var18[1]
	local _3 = var18[3]
	local var21
	local function INLINED() -- Internal function, doesn't exist in bytecode
		local any_GetBlockId_result1 = AlonsBPService_upvr.World:GetBlockId(arg2, var21)
		var21 = arg4 + AlonsBPService_upvr.Registry.Vectors.MY
		return any_GetBlockId_result1 == AlonsBPService_upvr.Registry.ItemNums.Dirt
	end
	if not arg3 and (INLINED() or any_GetBlockId_result1 == AlonsBPService_upvr.Registry.ItemNums.GrassBlock) then
		BlockFuncs_upvr.breakBlock(arg2, var21, false, false, false)
		BlockFuncs_upvr.placeBlock(arg2, var21, "TilledDirt", nil, nil, false, false)
	end
	var21 = module_2_upvr.CropTypeStats[module_2_upvr.IdToTypeAndStage[_1_2][1]]
	local _2_2 = module_2_upvr.IdToTypeAndStage[_1_2][2]
	if _2_2 < var21[4] then
		AlonsBPService_upvr.World:AddToTickList2(arg2, arg4, AlonsBPService_upvr.Registry.TickPriority.Normal, random_state_upvr:NextInteger(var21[2], var21[3]) * 20)
	end
	if _2_2 <= 1 then
		_3.S1.Transparency = 0
	else
		if _2_2 <= 2 then
			_3.S2.Transparency = 0
			return
		end
		if _2_2 <= 3 then
			_3.S3.Transparency = 0
			return
		end
		if _2_2 <= 4 then
			_3.S4.Transparency = 0
		end
	end
end
function module_2_upvr.destroyed(arg1, arg2, arg3) -- Line 78
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	local var24 = AlonsBPService_upvr.World[arg2]
	var24.SeedCount -= 1
	AlonsBPService_upvr.World:RemovePosFromTickList(arg2, arg3)
end
function module_2_upvr.canPlace(arg1, arg2, arg3) -- Line 83
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	local any_GetBlockId_result1_2 = AlonsBPService_upvr.World:GetBlockId(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors.MY)
	if any_GetBlockId_result1_2 == AlonsBPService_upvr.Registry.ItemNums.DirtBlock or any_GetBlockId_result1_2 == AlonsBPService_upvr.Registry.ItemNums.GrassBlock or any_GetBlockId_result1_2 == AlonsBPService_upvr.Registry.ItemNums.TilledDirt then
		return true
	end
	return false
end
function module_2_upvr.updated(arg1, arg2, arg3, arg4) -- Line 92
	--[[ Upvalues[1]:
		[1]: BlockFuncs_upvr (readonly)
	]]
	if not arg1:canPlace(arg2, arg3) then
		BlockFuncs_upvr.breakBlock(arg2, arg3)
	end
end
local function cropLooks_upvr(arg1, arg2) -- Line 98, Named "cropLooks"
	if arg2 <= 1 then
		arg1.S1.Transparency = 0
		arg1.S2.Transparency = 1
		arg1.S3.Transparency = 1
		arg1.S4.Transparency = 1
	else
		if arg2 <= 2 then
			arg1.S1.Transparency = 1
			arg1.S2.Transparency = 0
			arg1.S3.Transparency = 1
			arg1.S4.Transparency = 1
			return
		end
		if arg2 <= 3 then
			arg1.S1.Transparency = 1
			arg1.S2.Transparency = 1
			arg1.S3.Transparency = 0
			arg1.S4.Transparency = 1
			return
		end
		if arg2 <= 4 then
			arg1.S1.Transparency = 1
			arg1.S2.Transparency = 1
			arg1.S3.Transparency = 1
			arg1.S4.Transparency = 0
		end
	end
end
function module_2_upvr.tick(arg1, arg2, arg3) -- Line 123
	--[[ Upvalues[4]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_2_upvr (readonly)
		[3]: random_state_upvr (readonly)
		[4]: cropLooks_upvr (readonly)
	]]
	local var26 = AlonsBPService_upvr.World[arg2].Blocks[arg3.x][arg3.z][arg3.y]
	local _1 = var26[1]
	local _1_3 = module_2_upvr.IdToTypeAndStage[_1][1]
	local _2 = module_2_upvr.IdToTypeAndStage[_1][2]
	local var30 = module_2_upvr.CropTypeStats[_1_3]
	if _2 < var30[4] then
		if var30[1] < random_state_upvr:NextInteger(1, 100) then
			local var31 = _2 + 1
			local var32 = module_2_upvr.TypeToStages[_1_3][var31]
			var26[1] = var32
			var26[3].Name = AlonsBPService_upvr.Registry.IdToName[var32]
			cropLooks_upvr(var26[3], var31)
			AlonsBPService_upvr.World:UpdateBlocks(arg2, arg3)
		end
		if var31 < var30[4] then
			AlonsBPService_upvr.World:AddToTickList2(arg2, arg3, AlonsBPService_upvr.Registry.TickPriority.Normal, random_state_upvr:NextInteger(var30[2], var30[3]) * 20)
		end
	end
end
function module_2_upvr.randomTick(arg1, arg2, arg3) -- Line 145
	return true
end
function module_2_upvr.beforeSaved(arg1, arg2) -- Line 149
	return true
end
return module_2_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.PlankData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:03
-- Luau version 6, Types version 3
-- Time taken: 0.001414 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1) -- Line 17
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module:set(arg1)
	return module
end
function module_upvr.set(arg1, arg2) -- Line 24
	arg1.durability = arg2
end
function module_upvr.created(arg1, arg2, arg3, arg4) -- Line 32
end
function module_upvr.destroyed(arg1, arg2, arg3) -- Line 40
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	AlonsBPService_upvr.World:RemovePosFromTickList(arg2, arg3)
end
function module_upvr.canPlace(arg1, arg2, arg3) -- Line 47
	return true
end
function module_upvr.updated(arg1, arg2, arg3, arg4) -- Line 55
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	if arg4 == AlonsBPService_upvr.Registry.Vectors.PY or arg4 == AlonsBPService_upvr.Registry.Vectors.MY then
		print("Ouch")
		AlonsBPService_upvr.World:AddToTickList2(arg2, arg3, AlonsBPService_upvr.Registry.TickPriority.Normal, 10)
	end
end
function module_upvr.tick(arg1, arg2, arg3) -- Line 65
	print("That really hurt")
	return true
end
function module_upvr.randomTick(arg1, arg2, arg3) -- Line 73
	return true
end
function module_upvr.beforeSaved(arg1, arg2) -- Line 79
	return true
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.WheatFarmData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:04
-- Luau version 6, Types version 3
-- Time taken: 0.001911 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local BlockFuncs_upvr = require(script.Parent.Parent.Parent.Modules.BlockFuncs)
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1) -- Line 17
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module:set(arg1)
	return module
end
function module_upvr.set(arg1, arg2) -- Line 24
	arg1.durability = arg2
	if arg1.dir == nil then
		arg1.dir = 'T'
	end
end
function module_upvr.created(arg1, arg2, arg3, arg4) -- Line 33
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
	]]
	local var7 = AlonsBPService_upvr.World[arg2].Blocks[arg4.X][arg4.Z][arg4.Y]
	if arg3 and arg1.dir then
		local PrimaryPart = var7[3].PrimaryPart
		PrimaryPart.CFrame *= AlonsBPService_upvr.Registry.NormalToCFrameAnglesSidesBlocks[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir]]
	end
	BlockFuncs_upvr.placePointer(arg2, arg4 + AlonsBPService_upvr.Registry.Vectors[AlonsBPService_upvr.Registry.orientationDirConversionSIDES[arg1.dir].MZ], arg4, var7)
end
function module_upvr.destroyed(arg1, arg2, arg3) -- Line 47
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
	]]
	BlockFuncs_upvr.removePointer(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors[AlonsBPService_upvr.Registry.orientationDirConversionSIDES[arg1.dir].MZ])
end
function module_upvr.canPlace(arg1, arg2, arg3) -- Line 56
	return true
end
function module_upvr.updated(arg1, arg2, arg3, arg4) -- Line 64
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	print("I got updated")
	AlonsBPService_upvr.World:AddToTickList2(arg2, arg3, AlonsBPService_upvr.Registry.TickPriority.Normal, 5)
end
function module_upvr.tick(arg1, arg2, arg3) -- Line 72
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: BlockFuncs_upvr (readonly)
	]]
	local var9 = arg3 + AlonsBPService_upvr.Registry.Vectors[AlonsBPService_upvr.Registry.orientationDirConversionSIDES[arg1.dir].MZ] * 2
	if AlonsBPService_upvr.World:GetBlockId(arg2, var9) == AlonsBPService_upvr.Registry.ItemNums.Wheat4 then
		BlockFuncs_upvr.breakBlock(arg2, var9)
		BlockFuncs_upvr.placeBlock(arg2, var9, "WheatSeeds")
		print("Wheat harvested")
	end
	return true
end
function module_upvr.randomTick(arg1, arg2, arg3) -- Line 86
	return true
end
function module_upvr.beforeSaved(arg1, arg2) -- Line 92
	return true
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.PointerData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:05
-- Luau version 6, Types version 3
-- Time taken: 0.001571 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1, arg2) -- Line 15
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module:set(arg1, arg2)
	return module
end
function module_upvr.set(arg1, arg2, arg3) -- Line 22
	arg1.pointPos = arg2
	arg1.pointBlock = arg3
	if arg3.acceptsPipe then
		arg1.acceptsPipe = true
	end
end
function module_upvr.created(arg1, arg2, arg3, arg4) -- Line 28
	warn("Pointer created - should never be called from another block directly!")
end
function module_upvr.destroyed(arg1, arg2, arg3) -- Line 32
	arg1.pointBlock:destroyed(arg2, arg1.pointPos)
end
function module_upvr.canPlace(arg1, arg2, arg3) -- Line 36
	warn("Pointer canPlace was called from another location!")
	return arg1.pointBlock:canPlace(arg2, arg1.pointPos)
end
function module_upvr.updated(arg1, arg2, arg3, arg4) -- Line 41
	arg1.pointBlock:updated(arg2, arg1.pointPos, arg4)
end
function module_upvr.tick(arg1, arg2, arg3) -- Line 46
	return arg1.pointBlock:tick(arg2, arg1.pointPos)
end
function module_upvr.insertItem(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 50
	return arg1.pointBlock:insertItem(arg2, arg3, arg4, arg1.pointPos, arg6)
end
function module_upvr.canExtractItem(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 54
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	return arg1.pointBlock:canExtractItem(arg2, arg3, AlonsBPService_upvr.World[arg2].Blocks[arg1.pointPos.X][arg1.pointPos.Z][arg1.pointPos.Y], arg1.pointPos, arg6)
end
function module_upvr.canInsertItem(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 59
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	return arg1.pointBlock:canInsertItem(arg2, arg3, AlonsBPService_upvr.World[arg2].Blocks[arg1.pointPos.X][arg1.pointPos.Z][arg1.pointPos.Y], arg1.pointPos, arg6)
end
return module_upvr

-- ReplicatedStorage.Legacy.ItemModules.BlockDatas.StairData
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:07
-- Luau version 6, Types version 3
-- Time taken: 0.006334 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	setmetatable(module, module_upvr)
	module:set(arg1)
	return module
end
function module_upvr.set(arg1, arg2) -- Line 36
	arg1.durability = arg2
	if arg1.top == nil then
		arg1.top = false
	end
	if arg1.shape == nil then
		arg1.shape = 0
	end
	if arg1.dir == nil then
		arg1.dir = 'T'
	end
end
local tbl_upvr = {
	ZeroVec = Vector3.zero;
	Plus90YVec = Vector3.new(0, 90, 0);
	Minus90YVec = Vector3.new(0, -90, 0);
}
function getSubStairData(arg1, arg2) -- Line 49
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 5 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 6 end (CF ANALYSIS FAILED)
end
local tbl_3_upvr = {
	["-x"] = Vector3.new(-3, 0, 0);
	["+x"] = Vector3.new(3, 0, 0);
	["-z"] = Vector3.new(0, 0, -3);
	["+z"] = Vector3.new(0, 0, 3);
}
local tbl_2_upvr = {
	mx = Vector3.new(-3, 0, 0);
	px = Vector3.new(3, 0, 0);
	mz = Vector3.new(0, 0, -3);
	pz = Vector3.new(0, 0, 3);
}
function facingCheck(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 138
	--[[ Upvalues[2]:
		[1]: tbl_2_upvr (readonly)
		[2]: tbl_3_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 70 start (CF ANALYSIS FAILED)
	local Facing = arg2.Facing
	if type(arg3) == "string" and type(arg4) == "string" then
		if Facing == arg3 or Facing == arg4 then
			local var10 = (arg1 + tbl_2_upvr[arg5] + tbl_3_upvr[arg3]) - (arg1 + tbl_2_upvr[arg6] + tbl_3_upvr[arg4])
			if var10.Magnitude == 0 then
				return 2
			end
			if 8 < var10.Magnitude then
				do
					return 1
				end
				-- KONSTANTWARNING: GOTO [197] #157
			end
			-- KONSTANTWARNING: GOTO [197] #157
		end
	elseif type(arg3) == "table" and type(arg4) == "string" then
		if Facing == arg3[arg5] or Facing == arg4 or arg3[arg5] then
			local var11 = (arg1 + tbl_2_upvr[arg5] + tbl_3_upvr[arg3[arg5]]) - (arg1 + tbl_2_upvr[arg6] + tbl_3_upvr[arg4])
			if var11.Magnitude == 0 then
				return 2
			end
			if 8 < var11.Magnitude then
				do
					return 1
				end
				-- KONSTANTWARNING: GOTO [197] #157
			end
			-- KONSTANTWARNING: GOTO [197] #157
		end
	elseif type(arg3) == "string" and type(arg4) == "table" then
		if Facing == arg3 or Facing == arg4[arg6] or arg4[arg6] then
			local var12 = (arg1 + tbl_2_upvr[arg5] + tbl_3_upvr[arg3]) - (arg1 + tbl_2_upvr[arg6] + tbl_3_upvr[arg4[arg6]])
			if var12.Magnitude == 0 then
				return 2
			end
			if 8 < var12.Magnitude then
				do
					return 1
				end
				-- KONSTANTWARNING: GOTO [197] #157
			end
			-- KONSTANTWARNING: GOTO [197] #157
		end
	elseif type(arg3) == "table" and type(arg4) == "table" and (Facing == arg3[arg5] or Facing == arg4[arg6]) or arg3[arg5] and arg4[arg6] then
		local var13 = (arg1 + tbl_2_upvr[arg5] + tbl_3_upvr[arg3[arg5]]) - (arg1 + tbl_2_upvr[arg6] + tbl_3_upvr[arg4[arg6]])
		if var13.Magnitude == 0 then
			return 2
		end
		if 8 < var13.Magnitude then
			return 1
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 70 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [197] 157. Error Block 44 start (CF ANALYSIS FAILED)
	do
		return false
	end
	-- KONSTANTERROR: [197] 157. Error Block 44 end (CF ANALYSIS FAILED)
end
local Stairs_upvr = game:GetService("ServerStorage"):WaitForChild("BlockFamilies"):WaitForChild("Stairs")
function setMyStair(arg1, arg2, arg3, arg4, arg5) -- Line 180
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: Stairs_upvr (readonly)
	]]
	if arg5 then
		AlonsBPService_upvr.World:BlockSwap(arg1, arg2, arg3, Stairs_upvr[arg4]).Orientation = arg5
	end
end
function module_upvr.stairCornering(arg1, arg2, arg3, arg4, arg5) -- Line 202
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 94 start (CF ANALYSIS FAILED)
	local tbl = {
		px = AlonsBPService_upvr.World:GetBlockPart(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors.PX);
		mx = AlonsBPService_upvr.World:GetBlockPart(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors.MX);
		pz = AlonsBPService_upvr.World:GetBlockPart(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors.PZ);
		mz = AlonsBPService_upvr.World:GetBlockPart(arg2, arg3 + AlonsBPService_upvr.Registry.Vectors.MZ);
	}
	for i, v in pairs(tbl) do
		if v and AlonsBPService_upvr.Registry.Items[v.Name].rotationType == AlonsBPService_upvr.Registry.RotationType.STAIR then
			tbl[i] = getSubStairData(v.Orientation, v.MeshId)
		else
			tbl[i] = nil
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 94 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [117] 77. Error Block 9 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [117] 77. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [120] 79. Error Block 10 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [120] 79. Error Block 10 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [128] 83. Error Block 11 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [128] 83. Error Block 11 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [136] 87. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [136] 87. Error Block 12 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [141] 90. Error Block 13 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [141] 90. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [146] 93. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [146] 93. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [215] 142. Error Block 78 start (CF ANALYSIS FAILED)
	arg1.shape = 2
	if arg1.top then
		setMyStair(arg2, arg3, arg4, 2, Vector3.new(0, 0, -180))
		arg1.dir = 'B'
		return
	end
	setMyStair(arg2, arg3, arg4, 2, Vector3.new(0, 90, 0))
	arg1.dir = 'R'
	do
		return
	end
	-- KONSTANTERROR: [215] 142. Error Block 78 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [245] 166. Error Block 23 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [245] 166. Error Block 23 end (CF ANALYSIS FAILED)
end
function module_upvr.created(arg1, arg2, arg3, arg4) -- Line 307
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local var21 = AlonsBPService_upvr.World[arg2].Blocks[arg4.x][arg4.z][arg4.y]
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [26] 19. Error Block 28 start (CF ANALYSIS FAILED)
	if arg1.shape ~= 0 then
		if arg1.shape == 1 then
			setMyStair(arg2, arg4, var21[1], 1)
		elseif arg1.shape == 2 then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			setMyStair(arg2, arg4, var21[1], 2)
		end
		var21[3].Orientation = AlonsBPService_upvr.Registry.NormalToOrientationSidesBlocks[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir or 'T']]
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var21[3].Orientation = AlonsBPService_upvr.Registry.NormalToOrientationSidesBlocks[AlonsBPService_upvr.Registry.NumToNormal[arg1.dir or 'T']]
	end
	-- KONSTANTERROR: [26] 19. Error Block 28 end (CF ANALYSIS FAILED)
end
function module_upvr.destroyed(arg1, arg2, arg3) -- Line 334
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	AlonsBPService_upvr.World:RemovePosFromTickList(arg2, arg3)
end
function module_upvr.canPlace(arg1, arg2, arg3) -- Line 338
	return true
end
function module_upvr.updated(arg1, arg2, arg3, arg4) -- Line 342
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	if arg1.shape == 0 and AlonsBPService_upvr.Registry.IdToInstance[AlonsBPService_upvr.World:GetBlockId(arg2, arg3 + arg4)].rotationType == AlonsBPService_upvr.Registry.RotationType.STAIR then
		local var22 = AlonsBPService_upvr.World[arg2].Blocks[arg3.x][arg3.z][arg3.y]
		arg1:stairCornering(arg2, arg3, var22[1], var22)
	end
end
function module_upvr.tick(arg1, arg2, arg3) -- Line 350
	return true
end
function module_upvr.beforeSaved(arg1, arg2) -- Line 355
	return true
end
return module_upvr

-- ReplicatedStorage.Legacy.Modules.World
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:08
-- Luau version 6, Types version 3
-- Time taken: 0.012147 seconds

local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local module_upvr = {
	PlayersLoaded = 0;
	SavePlayers = {};
	UnsortedFastRemove = function(arg1, arg2) -- Line 48, Named "UnsortedFastRemove"
		local len = #arg1
		arg1[arg2] = arg1[len]
		arg1[len] = nil
	end;
	FastRemove = function(arg1, arg2) -- Line 59, Named "FastRemove"
		local var7 = 1
		for i = 1, #arg1 do
			if i ~= arg2 then
				if i ~= var7 then
					arg1[var7] = arg1[i]
					arg1[i] = nil
				end
			else
				arg1[i] = nil
			end
		end
		return arg1
	end;
	RoundTo3 = function(arg1) -- Line 78, Named "RoundTo3"
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var8
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var8 = arg1.X - arg1.X % 3
			return var8
		end
		if arg1.X % 3 > 1.5 or not INLINED() then
			var8 = (arg1.X) + (3 - arg1.X % 3)
		end
		if arg1.Y % 3 > 1.5 or not (arg1.Y - arg1.Y % 3) then
		end
		if arg1.Z % 3 > 1.5 or not (arg1.Z - arg1.Z % 3) then
		end
		return Vector3.new(var8, (arg1.Y) + (3 - arg1.Y % 3), (arg1.Z) + (3 - arg1.Z % 3))
	end;
}
function module_upvr.AddToTickList2(arg1, arg2, arg3, arg4, arg5) -- Line 91
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local var11 = module_upvr
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 12. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 12. Error Block 4 end (CF ANALYSIS FAILED)
	for _, v in pairs(var11[arg4]) do
		if v[1] == arg5 then
			v[#v + 1] = arg3
			return
		end
	end
	local tbl_5 = {}
	tbl_5[1] = arg5
	tbl_5[2] = arg3
	table.insert(var11[arg4], tbl_5)
	-- KONSTANTERROR: [84] 67. Error Block 24 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [84] 67. Error Block 24 end (CF ANALYSIS FAILED)
end
function module_upvr.PopulateTickList(arg1, arg2, arg3) -- Line 135
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [125] 97. Error Block 39 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [127.5]
	table.clear(nil)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [131.6]
	table.clear(nil)
	-- KONSTANTERROR: [125] 97. Error Block 39 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [133] 103. Error Block 34 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [133] 103. Error Block 34 end (CF ANALYSIS FAILED)
end
function module_upvr.RemovePosFromTickList(arg1, arg2, arg3) -- Line 194
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(module_upvr[arg2].PendingTickList)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 2 end (CF ANALYSIS FAILED)
end
function module_upvr.GetBlockId(arg1, arg2, arg3) -- Line 229
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks = module_upvr[arg2].Blocks
	if Blocks[arg3.X] and Blocks[arg3.X][arg3.Z] and Blocks[arg3.X][arg3.Z][arg3.Y] then
		return Blocks[arg3.X][arg3.Z][arg3.Y][1]
	end
	return nil
end
function module_upvr.GetPosId(arg1, arg2, arg3, arg4, arg5) -- Line 243
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks_7 = module_upvr[arg2].Blocks
	if Blocks_7[arg3] and Blocks_7[arg3][arg4] and Blocks_7[arg3][arg4][arg5] then
		return Blocks_7[arg3][arg4][arg5][1]
	end
	return nil
end
local Color3_new_result1_upvr = Color3.new(1, 0.219608, 0.0235294)
local function _(arg1, arg2) -- Line 254, Named "debugVisualPart"
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Color3_new_result1_upvr (readonly)
	]]
	local Part_upvr = Instance.new("Part")
	Part_upvr.Size = Vector3.new(3.09999, 3.09999, 3.09999)
	Part_upvr.Position = module_upvr[arg1].Root + arg2 * 3
	Part_upvr.Name = "debugVisual"
	Part_upvr.Transparency = 0.8
	Part_upvr.Parent = workspace
	Part_upvr.CanQuery = false
	Part_upvr.CanCollide = false
	Part_upvr.Anchored = true
	Part_upvr.Color = Color3_new_result1_upvr
	task.spawn(function() -- Line 265
		--[[ Upvalues[1]:
			[1]: Part_upvr (readonly)
		]]
		task.wait(1)
		Part_upvr:Destroy()
	end)
end
function module_upvr.Update(arg1, arg2, arg3, arg4) -- Line 275
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks_6 = module_upvr[arg2].Blocks
	if Blocks_6[arg3.X] and Blocks_6[arg3.X][arg3.Z] and Blocks_6[arg3.X][arg3.Z][arg3.Y] and Blocks_6[arg3.X][arg3.Z][arg3.Y][1] ~= 0 then
		Blocks_6[arg3.X][arg3.Z][arg3.Y][2]:updated(arg2, arg3, arg4)
	end
end
function module_upvr.UpdateFromPointer(arg1, arg2, arg3, arg4, arg5) -- Line 288
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local Blocks_4 = module_upvr[arg2].Blocks
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [25] 19. Error Block 4 start (CF ANALYSIS FAILED)
	local _1 = Blocks_4[arg3.X][arg3.Z][arg3.Y][1]
	-- KONSTANTERROR: [25] 19. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [49] 35. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [49] 35. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [62] 45. Error Block 8 start (CF ANALYSIS FAILED)
	_1[2]:updated(arg2, arg3, arg4)
	-- KONSTANTERROR: [62] 45. Error Block 8 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [69] 51. Error Block 9 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [69] 51. Error Block 9 end (CF ANALYSIS FAILED)
end
function module_upvr.UpdateBlocks(arg1, arg2, arg3) -- Line 306
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	if module_upvr[arg2].isLoading then
		local tbl_4 = {}
		tbl_4[1] = arg3
		table.insert(module_upvr[arg2].QuedBlockUpdates, tbl_4)
	else
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PX, AlonsBPService_upvr.Registry.surroundDirs.MX)
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MX, AlonsBPService_upvr.Registry.surroundDirs.PX)
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PZ, AlonsBPService_upvr.Registry.surroundDirs.MZ)
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MZ, AlonsBPService_upvr.Registry.surroundDirs.PZ)
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PY, AlonsBPService_upvr.Registry.surroundDirs.MY)
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MY, AlonsBPService_upvr.Registry.surroundDirs.PY)
	end
end
function module_upvr.UpdateBlocksFromPointer(arg1, arg2, arg3, arg4) -- Line 322
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	if module_upvr[arg2].isLoading then
		local tbl_2 = {}
		tbl_2[1] = arg3
		tbl_2[2] = arg4
		table.insert(module_upvr[arg2].QuedBlockUpdates, tbl_2)
	else
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PX, AlonsBPService_upvr.Registry.surroundDirs.MX, arg4)
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MX, AlonsBPService_upvr.Registry.surroundDirs.PX, arg4)
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PZ, AlonsBPService_upvr.Registry.surroundDirs.MZ, arg4)
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MZ, AlonsBPService_upvr.Registry.surroundDirs.PZ, arg4)
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PY, AlonsBPService_upvr.Registry.surroundDirs.MY, arg4)
		module_upvr:UpdateFromPointer(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MY, AlonsBPService_upvr.Registry.surroundDirs.PY, arg4)
	end
end
function module_upvr.UpdateExcludingSide(arg1, arg2, arg3, arg4) -- Line 340
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.PX then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PX, AlonsBPService_upvr.Registry.surroundDirs.MX)
	end
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.MX then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MX, AlonsBPService_upvr.Registry.surroundDirs.PX)
	end
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.PY then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PY, AlonsBPService_upvr.Registry.surroundDirs.MY)
	end
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.MY then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MY, AlonsBPService_upvr.Registry.surroundDirs.PY)
	end
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.PZ then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.PZ, AlonsBPService_upvr.Registry.surroundDirs.MZ)
	end
	if arg4 ~= AlonsBPService_upvr.Registry.surroundDirs.MZ then
		module_upvr:Update(arg2, arg3 + AlonsBPService_upvr.Registry.surroundDirs.MZ, AlonsBPService_upvr.Registry.surroundDirs.PZ)
	end
end
function module_upvr.RunQuedUpdates(arg1, arg2) -- Line 362
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	for _, v_2 in pairs(module_upvr[arg2].QuedBlockUpdates) do
		if v_2[2] then
			module_upvr:UpdateBlocksFromPointer(arg2, v_2[1], v_2[2])
		else
			module_upvr:UpdateBlocks(arg2, v_2[1])
		end
	end
	module_upvr[arg2].QuedBlockUpdates = {}
end
function module_upvr.BlockSwap(arg1, arg2, arg3, arg4, arg5) -- Line 378
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local var34 = module_upvr[arg2]
	local var35 = var34.Blocks[arg3.X][arg3.Z][arg3.Y]
	local clone_2 = arg5:FindFirstChild(AlonsBPService_upvr.Registry.IdToName[arg4]):Clone()
	if var35[3] then
		clone_2.Parent = var35[3].Parent
	else
		clone_2.Parent = workspace.Plots[arg2].Blocks
	end
	if clone_2:IsA("Model") then
		clone_2.PrimaryPart.CFrame = CFrame.new(var34.Root + arg3 * 3)
	else
		clone_2.CFrame = CFrame.new(var34.Root + arg3 * 3)
	end
	if var35[3] then
		var35[3]:Destroy()
	end
	var35[3] = clone_2
	return clone_2
end
function module_upvr.GetBlockName(arg1, arg2, arg3) -- Line 404
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local Blocks_5 = module_upvr[arg2].Blocks
	if Blocks_5[arg3.X] and Blocks_5[arg3.X][arg3.Z] and Blocks_5[arg3.X][arg3.Z][arg3.Y] then
		return AlonsBPService_upvr.Registry.IdToName[Blocks_5[arg3.X][arg3.Z][arg3.Y][1]]
	end
	return nil
end
function module_upvr.GetBlockData(arg1, arg2, arg3) -- Line 416
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks_2 = module_upvr[arg2].Blocks
	if Blocks_2[arg3.X] and Blocks_2[arg3.X][arg3.Z] and Blocks_2[arg3.X][arg3.Z][arg3.Y] then
		return Blocks_2[arg3.X][arg3.Z][arg3.Y][2]
	end
	return nil
end
function module_upvr.GetBlockPart(arg1, arg2, arg3) -- Line 428
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks_9 = module_upvr[arg2].Blocks
	if Blocks_9[arg3.X] and Blocks_9[arg3.X][arg3.Z] and Blocks_9[arg3.X][arg3.Z][arg3.Y] then
		return Blocks_9[arg3.X][arg3.Z][arg3.Y][3]
	end
	return nil
end
function module_upvr.GetBlock(arg1, arg2, arg3) -- Line 440
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Blocks_3 = module_upvr[arg2].Blocks
	if Blocks_3[arg3.X] and Blocks_3[arg3.X][arg3.Z] and Blocks_3[arg3.X][arg3.Z][arg3.Y] then
		return Blocks_3[arg3.X][arg3.Z][arg3.Y]
	end
	return nil
end
function module_upvr.IsBlockSolid(arg1, arg2, arg3) -- Line 452
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local Blocks_8 = module_upvr[arg2].Blocks
	if Blocks_8[arg3.X] and Blocks_8[arg3.X][arg3.Z] and Blocks_8[arg3.X][arg3.Z][arg3.Y] and AlonsBPService_upvr.Registry.IdToInstance[Blocks_8[arg3.X][arg3.Z][arg3.Y][1]].opacity == AlonsBPService_upvr.Registry.BlockOpacity.FULL then
		return true
	end
	return false
end
function module_upvr.IsWater(arg1, arg2, arg3) -- Line 463
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		local _1_2 = module_upvr[arg2].Blocks[arg3.X][arg3.Z][arg3.Y][1]
		return _1_2 == AlonsBPService_upvr.Registry.ItemNums.WaterBlock
	end
	if module_upvr[arg2].Blocks[arg3.X] and module_upvr[arg2].Blocks[arg3.X][arg3.Z] and module_upvr[arg2].Blocks[arg3.X][arg3.Z][arg3.Y] and (INLINED_2() or _1_2 == AlonsBPService_upvr.Registry.ItemNums.FlowingWater) then
		return true
	end
	return false
end
function module_upvr.IsLava(arg1, arg2, arg3) -- Line 477
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		local _1_3 = module_upvr[arg2].Blocks[arg3.X][arg3.Z][arg3.Y][1]
		return _1_3 == AlonsBPService_upvr.Registry.ItemNums.LavaBlock
	end
	if module_upvr[arg2].Blocks[arg3.X] and module_upvr[arg2].Blocks[arg3.X][arg3.Z] and module_upvr[arg2].Blocks[arg3.X][arg3.Z][arg3.Y] and (INLINED_3() or _1_3 == AlonsBPService_upvr.Registry.ItemNums.FlowingLava) then
		return true
	end
	return false
end
function module_upvr.CheckIfAreaClear(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 492
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if arg3.X <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg3.X or arg3.Z <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg3.Z then
		return false
	end
	if AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg3.X + arg4 - 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg3.Z + arg5 - 1 then
		return false
	end
	for i_4 = arg3.X, arg3.X + arg4 - 1 do
		for i_5 = arg3.Z, arg3.Z + arg5 - 1 do
			for i_6 = arg3.Y, arg3.Y + arg6 - 1 do
				if module_upvr:GetPosId(arg2, i_4, i_5, i_6) ~= AlonsBPService_upvr.Registry.ItemNums.Air then
					return false
				end
			end
		end
	end
	return true
end
function module_upvr.CheckIfAreaFull(arg1, arg2, arg3, arg4, arg5) -- Line 515
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
	]]
	for i_7 = arg3.X, arg3.X + arg4 - 1 do
		for i_8 = arg3.Z, arg3.Z + arg5 - 1 do
			local any_GetPosId_result1 = module_upvr:GetPosId(arg2, i_7, i_8, arg3.Y)
			if any_GetPosId_result1 and AlonsBPService_upvr.Registry.IdToInstance[any_GetPosId_result1].opacity == AlonsBPService_upvr.Registry.BlockOpacity.TRANS then
				return false
			end
		end
	end
	return true
end
function module_upvr.GetBlocksChunk(arg1, arg2, arg3) -- Line 531
	return Vector2.new(bit32.rshift(arg2 - 1, 4), bit32.rshift(arg3 - 1, 4))
end
function module_upvr.ToChunkOffset(arg1, arg2) -- Line 537
	return bit32.rshift(arg2 - 1, 4)
end
local tbl_3_upvr = {}
function module_upvr.GetBigChunkForClient(arg1, arg2, arg3, arg4) -- Line 542
	--[[ Upvalues[3]:
		[1]: tbl_3_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
		[3]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if tbl_3_upvr[arg2] and tbl_3_upvr[arg2][arg3..','..arg4] then
		return false
	end
	local tbl = {}
	for i_9 = arg3, arg3 + 31 do
		tbl[i_9] = {}
		for i_10 = arg4, arg4 + 31 do
			tbl[i_9][i_10] = {}
			for i_11 = 1, AlonsBPService_upvr.Registry.WORLDHEIGHT do
				local var64 = module_upvr[arg2].Blocks[i_9][i_10][i_11]
				tbl[i_9][i_10][i_11] = {var64[1], var64[2].durability or 100, var64[3]}
				local var66
			end
		end
	end
	tbl_3_upvr[arg2][arg3..','..arg4] = true
	return var66
end
function module_upvr.CreatePOI(arg1, arg2, arg3, arg4) -- Line 562
	local SOME = workspace.Plots:FindFirstChild(tostring(arg2))
	if SOME then
		SOME = SOME:FindFirstChild("PlayerPOI")
		if SOME == nil then
			do
				return
			end
			-- KONSTANTWARNING: GOTO [23] #18
		end
	else
		return
	end
	local clone = script.POI:Clone()
	clone.Name = arg3
	clone.CFrame = arg4
	clone.Parent = SOME
end
function module_upvr.RemovePOI(arg1, arg2, arg3, arg4) -- Line 577
	local SOME_2 = workspace.Plots:FindFirstChild(tostring(arg2))
	if SOME_2 then
		SOME_2 = SOME_2:FindFirstChild("PlayerPOI")
		if SOME_2 == nil then
			do
				return
			end
			-- KONSTANTWARNING: GOTO [23] #18
		end
	else
		return
	end
	for _, v_3 in pairs(SOME_2:GetChildren()) do
		if v_3.Name == arg3 and v_3.Position == arg4 then
			v_3:Destroy()
			return
		end
	end
end
return module_upvr

-- ReplicatedStorage.Legacy.Modules.WorldLoading
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:09
-- Luau version 6, Types version 3
-- Time taken: 0.006417 seconds

local module_upvr = {}
local HttpService_upvr = game:GetService("HttpService")
local AlonsBPService_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetService("AlonsBPService")
local BlockFuncs_upvr = require(script.Parent.BlockFuncs)
local var8_upvw = 0
function module_upvr.placeBlock(arg1, arg2, arg3, arg4) -- Line 24
	--[[ Upvalues[3]:
		[1]: BlockFuncs_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
		[3]: var8_upvw (read and write)
	]]
	var8_upvw += 1
	if 90 <= var8_upvw then
		wait()
		var8_upvw = 0
	end
	return BlockFuncs_upvr.doPlaceBlock(arg2, arg3, arg4 * 3 + AlonsBPService_upvr.World[arg1].Root)
end
function module_upvr.loadWorld(arg1, arg2, arg3) -- Line 35
	--[[ Upvalues[4]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: HttpService_upvr (readonly)
		[3]: BlockFuncs_upvr (readonly)
		[4]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 70 start (CF ANALYSIS FAILED)
	local string_split_result1 = string.split(AlonsBPService_upvr.DataCompresser[1].decompress(arg2), "$BigSep$")
	local var29
	if var29 then
		var29 = #string_split_result1[2]
		if 0 < var29 then
			var29 = string.split(string_split_result1[2], "//")
			var29 = pairs(var29)
			local pairs_result1_3, pairs_result2, pairs_result3_3 = pairs(var29)
			for i, v in pairs_result1_3, pairs_result2, pairs_result3_3 do
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				var29[i] = HttpService_upvr:JSONDecode(v)
				local _
			end
		end
	end
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		pairs_result1_3 = tonumber(string_split_result1[3])
		return pairs_result1_3
	end
	if not string_split_result1[3] or not INLINED_2() then
		pairs_result1_3 = 1
	end
	print("versionId: ", pairs_result1_3)
	for i_2 = 0, 15 do
		print(i_2)
	end
	AlonsBPService_upvr.World[arg1.UserId].isLoading = true
	-- KONSTANTERROR: [0] 1. Error Block 70 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [194] 157. Error Block 31 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [194] 157. Error Block 31 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [89] 73. Error Block 13 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [89] 73. Error Block 13 end (CF ANALYSIS FAILED)
end
local tbl_upvr = {
	durability = true;
}
function module_upvr.serializeWorld(arg1, arg2) -- Line 128
	--[[ Upvalues[3]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: HttpService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var64
	for i_3 = 0, AlonsBPService_upvr.Registry.WORLDSAVESIZE / 16 - 1 do
		for i_4 = 0, AlonsBPService_upvr.Registry.WORLDSAVESIZE / 16 - 1 do
			local tbl = {}
			for i_5 = 1, AlonsBPService_upvr.Registry.WORLDHEIGHT do
				local var66
				for i_6 = 16 * i_3 + 1, 16 * i_3 + 16 do
					for i_7 = 16 * i_4 + 1, 16 * i_4 + 16 do
						local _1 = arg1[i_6][i_7][i_5][1]
						if _1 <= 0 then
							if var64 == 0 then
								var66 = var66..'A'
							end
							var64 += 1
						else
							if 0 < var64 then
								var66 = var66..var64..','
								var64 = 0
							end
							var66 = var66.._1..','
							local tbl_2 = {}
							arg1[i_6][i_7][i_5][2]:beforeSaved(arg2)
							for i_8, v_2 in pairs(arg1[i_6][i_7][i_5][2]) do
								if type(i_8) == "string" and not tbl_upvr[i_8] then
									tbl_2[i_8] = v_2
								end
							end
							if true then
								tbl_2.X = i_6
								tbl_2.Y = i_5
								tbl_2.Z = i_7
								table.insert({}, HttpService_upvr:JSONEncode(tbl_2))
							end
							if 20000 <= 1 + 1 then
								wait()
							end
						end
					end
				end
				tbl[i_5] = var66
			end
			;({})[0 + 1] = table.concat(tbl)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	local NEVER = table.concat({})
	if 0 < var64 then
		NEVER = string.sub(NEVER, 1, #NEVER - 2)
	end
	return AlonsBPService_upvr.DataCompresser[1].compress(NEVER.."$BigSep$"..table.concat({}, "//").."$BigSep$"..1)
end
return module_upvr

-- ReplicatedStorage.Legacy.Modules.BlockFuncs
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:10
-- Luau version 6, Types version 3
-- Time taken: 0.015296 seconds

local ServerStorage_upvr = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local AlonsBPService_upvr = require(ReplicatedStorage.Packages.Knit).GetService("AlonsBPService")
local Blocks_2_upvr = ReplicatedStorage:WaitForChild("Blocks")
local module_2_upvr = require(ServerStorage_upvr.ItemModules:WaitForChild("DropTable"))
local module_3_upvr = {}
local cframe_upvr = CFrame.Angles(0, 0, 0)
function module_3_upvr.doPlaceBlock(arg1, arg2, arg3, arg4) -- Line 22
	--[[ Upvalues[3]:
		[1]: cframe_upvr (readonly)
		[2]: AlonsBPService_upvr (readonly)
		[3]: Blocks_2_upvr (readonly)
	]]
	if arg2 == "Air" then return end
	local var10 = cframe_upvr
	local zero = Vector3.zero
	if arg4 ~= nil then
		if AlonsBPService_upvr.Registry.Items[arg2].rotationType == AlonsBPService_upvr.Registry.RotationType.ALL then
			var10 = AlonsBPService_upvr.Registry.NormalToCFrameAngles[arg4]
		elseif AlonsBPService_upvr.Registry.Items[arg2].rotationType == AlonsBPService_upvr.Registry.RotationType.SIDES or AlonsBPService_upvr.Registry.Items[arg2].rotationType == AlonsBPService_upvr.Registry.RotationType.STAIR then
			var10 = AlonsBPService_upvr.Registry.NormalToCFrameAnglesSidesBlocks[arg4]
		elseif AlonsBPService_upvr.Registry.Items[arg2].rotationType == AlonsBPService_upvr.Registry.RotationType.SLAB then
			local var12 = AlonsBPService_upvr.Registry.slabOffsetValues[arg4]
			var10 = CFrame.Angles(math.rad(var12[3].X), 0, math.rad(var12[3].Z))
			zero = var12[2]
		end
	end
	local clone_2 = Blocks_2_upvr[arg2]:Clone()
	if clone_2:IsA("Model") then
		clone_2.Parent = arg1
		clone_2.PrimaryPart.CFrame = CFrame.new(arg3 + zero) * var10
		return clone_2
	end
	clone_2.Parent = arg1
	clone_2.CFrame = CFrame.new(arg3 + zero) * var10
	return clone_2
end
function module_3_upvr.placeBlock(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) -- Line 51
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_3_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var15
	if arg2.X == 1 or arg2.X == AlonsBPService_upvr.Registry.WORLDSAVESIZE or arg2.Z == 1 or arg2.Z == AlonsBPService_upvr.Registry.WORLDSAVESIZE then
		return false
	end
	if arg6 == nil then
	end
	if arg7 == nil then
	end
	if var15 == nil then
		local Root = AlonsBPService_upvr.World[arg1].Root
		var15 = Vector3.new(Root.X + arg2.X * 3, Root.Y + arg2.Y * 3, Root.Z + arg2.Z * 3)
	end
	local var17 = AlonsBPService_upvr.Registry.Items[arg3]
	local Blocks_5 = AlonsBPService_upvr.World[arg1].Blocks
	local any_new_result1 = AlonsBPService_upvr.Registry.BlockDatas[var17.blockData].new(var17.durability)
	local var20 = AlonsBPService_upvr.Registry.NormalToNum[arg5]
	local var21 = AlonsBPService_upvr.Registry.NameToId[arg3]
	if any_new_result1:canPlace(arg1, arg2, var20, var21) then
		Blocks_5[arg2.X][arg2.Z][arg2.Y] = {var21, any_new_result1, module_3_upvr.doPlaceBlock(workspace.Plots[arg1].Blocks, arg3, var15, arg5)}
		if arg5 ~= nil then
			Blocks_5[arg2.X][arg2.Z][arg2.Y][2].dir = var20
		end
		if arg8 and arg8 == AlonsBPService_upvr.Registry.BlockExtraType.TOPSTAIR then
			local _3 = Blocks_5[arg2.X][arg2.Z][arg2.Y][3]
			_3.Orientation += Vector3.new(0, 0, 180)
		end
		if true then
			Blocks_5[arg2.X][arg2.Z][arg2.Y][2]:created(arg1, false, arg2)
		end
		if true then
			AlonsBPService_upvr.World:UpdateBlocks(arg1, arg2)
		end
		return true
	end
	return false
end
function module_3_upvr.placePointer(arg1, arg2, arg3, arg4) -- Line 83
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	if arg2.X <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg2.X or arg2.Z <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg2.Z or arg2.Y <= 1 or 129 <= arg2.Y then
		return false
	end
	if AlonsBPService_upvr.World:GetBlockId(arg1, arg2) ~= AlonsBPService_upvr.Registry.ItemNums.Air then
		return false
	end
	AlonsBPService_upvr.World[arg1].Blocks[arg2.X][arg2.Z][arg2.Y] = {-1, AlonsBPService_upvr.Registry.BlockDatas[AlonsBPService_upvr.Registry.BlockDataTypes.POINTER].new(arg3, arg4[2]), arg4[3]}
	AlonsBPService_upvr.World:UpdateBlocksFromPointer(arg1, arg2, arg3)
end
function module_3_upvr.removePointer(arg1, arg2) -- Line 92
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	if arg2.X <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg2.X or arg2.Z <= 1 or AlonsBPService_upvr.Registry.WORLDSAVESIZE <= arg2.Z or arg2.Y <= 1 or 129 <= arg2.Y then
		return false
	end
	local Blocks_4 = AlonsBPService_upvr.World[arg1].Blocks
	if Blocks_4[arg2.X][arg2.Z][arg2.Y][1] ~= AlonsBPService_upvr.Registry.ItemNums.Pointer then
	else
		Blocks_4[arg2.X][arg2.Z][arg2.Y][1] = 0
		Blocks_4[arg2.X][arg2.Z][arg2.Y][2] = nil
		Blocks_4[arg2.X][arg2.Z][arg2.Y][3] = nil
	end
end
function module_3_upvr.giveItem(arg1, arg2, arg3) -- Line 101
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	local SOME_2 = arg1.Inventory:FindFirstChild(arg2)
	local classType = AlonsBPService_upvr.Registry.Items[arg2].classType
	if SOME_2 and (classType == AlonsBPService_upvr.Registry.ClassType.ITEM or classType == AlonsBPService_upvr.Registry.ClassType.BLOCK or classType == AlonsBPService_upvr.Registry.ClassType.FOOD or classType == AlonsBPService_upvr.Registry.ClassType.STRUCTURE) then
		SOME_2.Value += arg3
	else
		local IntValue = Instance.new("IntValue")
		IntValue.Parent = arg1.Inventory
		IntValue.Name = arg2
		IntValue.Value += arg3
	end
end
function createDefaultItemDrop(arg1) -- Line 116
	--[[ Upvalues[1]:
		[1]: ServerStorage_upvr (readonly)
	]]
	warn("Default Item used for:", arg1)
	local clone_8 = ServerStorage_upvr.ItemTemplates.DefaultDrop:Clone()
	clone_8.Name = arg1
	return clone_8
end
local OverlapParams_new_result1_upvr = OverlapParams.new()
OverlapParams_new_result1_upvr.MaxParts = 20
OverlapParams_new_result1_upvr.FilterType = Enum.RaycastFilterType.Whitelist
OverlapParams_new_result1_upvr.FilterDescendantsInstances = {workspace.Items}
local Players_upvr = game:GetService("Players")
local NumberDisplay_upvr = script.NumberDisplay
function module_3_upvr.dropItem(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 128
	--[[ Upvalues[6]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_3_upvr (readonly)
		[3]: OverlapParams_new_result1_upvr (readonly)
		[4]: Players_upvr (readonly)
		[5]: NumberDisplay_upvr (readonly)
		[6]: ServerStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 62 start (CF ANALYSIS FAILED)
	local var64
	if AlonsBPService_upvr.World[arg1] == nil then
		return false
	end
	if arg4 == nil then
	end
	if arg7 == nil then
	end
	if var64 == nil then
		var64 = 1
	end
	if AlonsBPService_upvr.Registry.ItemNums[arg2] == AlonsBPService_upvr.Registry.ItemNums.CashBlock then
		local any_GetPlayerByUserId_result1 = game.Players:GetPlayerByUserId(arg1)
		if any_GetPlayerByUserId_result1 and any_GetPlayerByUserId_result1:FindFirstChild("Inventory") then
			module_3_upvr.giveItem(any_GetPlayerByUserId_result1, arg2, var64)
			return
		end
	end
	if true then
		if AlonsBPService_upvr.Registry.isStackable[AlonsBPService_upvr.Registry.Items[arg2].classType] then
			for _, v in pairs(workspace:GetPartBoundsInBox(CFrame.new(arg3), Vector3.new(5, 1.5, 5), OverlapParams_new_result1_upvr)) do
				if v.Parent and (not v.Parent:IsA("Model") or v.Parent.PrimaryPart == v) or v.Name == arg2 and not v.Anchored and v.Owner.Value == Players_upvr:GetPlayerByUserId(arg1) then
					local Count_2 = v.Count
					Count_2.Value += var64
					if v:FindFirstChild("NumberDisplay") == nil then
						local clone_4 = NumberDisplay_upvr:Clone()
						clone_4.Parent = v
						clone_4.Active = true
					end
					v.NumberDisplay.num.Text = v.Count.Value
					return
				end
			end
		end
	end
	if arg6 then
		if AlonsBPService_upvr.Registry.MaxItemCount <= AlonsBPService_upvr.World[arg1].ItemCount then
			if AlonsBPService_upvr.Registry.ItemsToCash[arg2] then return end
		end
	end
	local SOME = ServerStorage_upvr.ItemTemplates:FindFirstChild(arg2)
	if SOME then
		SOME = SOME:Clone()
	else
		SOME = createDefaultItemDrop(arg2)
	end
	SOME.Parent = workspace.Items[arg1]
	local any_GetPlayerByUserId_result1_3 = Players_upvr:GetPlayerByUserId(arg1)
	-- KONSTANTERROR: [0] 1. Error Block 62 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [262] 175. Error Block 37 start (CF ANALYSIS FAILED)
	local clone_3 = NumberDisplay_upvr:Clone()
	clone_3.Parent = SOME.PrimaryPart
	clone_3.Active = true
	clone_3.num.Text = var64
	do
		return SOME
	end
	-- KONSTANTERROR: [262] 175. Error Block 37 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [278] 185. Error Block 41 start (CF ANALYSIS FAILED)
	SOME.Position = arg3
	SOME.Pickable.Value = true
	SOME.Count.Value = var64
	SOME:SetAttribute("ItemTime", os.clock())
	SOME:SetAttribute("ItemPos", arg3)
	SOME.Owner.Value = any_GetPlayerByUserId_result1_3
	SOME:SetNetworkOwner(any_GetPlayerByUserId_result1_3)
	if 1 < var64 then
		local clone_5 = NumberDisplay_upvr:Clone()
		clone_5.Parent = SOME
		clone_5.Active = true
		clone_5.num.Text = var64
	end
	-- KONSTANTERROR: [278] 185. Error Block 41 end (CF ANALYSIS FAILED)
end
function module_3_upvr.doItemDrops(arg1, arg2, arg3, arg4, arg5) -- Line 204
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	if arg4 == nil then
	end
	if module_2_upvr.blockDrops[arg2] == nil then
		return module
	end
	return module
end
function module_3_upvr.getDropsTable(arg1, arg2) -- Line 224
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if module_2_upvr.blockDrops[arg2] == nil then
		return {
			[arg2] = 1;
		}
	end
	return module_2_upvr.blockDrops[arg2]:attemptDrop()
end
function module_3_upvr.breakBlock(arg1, arg2, arg3, arg4, arg5) -- Line 234
	--[[ Upvalues[2]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: module_3_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Blocks_3 = AlonsBPService_upvr.World[arg1].Blocks
	local var81
	if arg2.X == 1 or arg2.X == 256 or arg2.Z == 1 or arg2.Z == 256 then
		return false
	end
	if Blocks_3[arg2.X][arg2.Z][arg2.Y][1] == 0 then
	else
		if arg4 == nil then
		end
		if var81 == nil then
			var81 = true
		end
		if arg5 == nil then
		end
		if var81 then
			module_3_upvr.doItemDrops(arg1, AlonsBPService_upvr.Registry.IdToName[Blocks_3[arg2.X][arg2.Z][arg2.Y][1]], arg2 * 3 + AlonsBPService_upvr.World[arg1].Root)
		end
		if true then
			Blocks_3[arg2.X][arg2.Z][arg2.Y][2]:destroyed(arg1, arg2)
		end
		if Blocks_3[arg2.X][arg2.Z][arg2.Y][3] ~= nil then
			Blocks_3[arg2.X][arg2.Z][arg2.Y][3]:Destroy()
		end
		Blocks_3[arg2.X][arg2.Z][arg2.Y][3] = nil
		Blocks_3[arg2.X][arg2.Z][arg2.Y][2] = nil
		Blocks_3[arg2.X][arg2.Z][arg2.Y][1] = 0
		if true then
			AlonsBPService_upvr.World:UpdateBlocks(arg1, arg2)
		end
	end
end
function module_3_upvr.moveBlock(arg1, arg2, arg3, arg4) -- Line 266
	--[[ Upvalues[3]:
		[1]: AlonsBPService_upvr (readonly)
		[2]: Blocks_2_upvr (readonly)
		[3]: module_3_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 3. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 3. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 10. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 10. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [26] 15. Error Block 5 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [26] 15. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [30] 17. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [30] 17. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [52] 29. Error Block 26 start (CF ANALYSIS FAILED)
	do
		return false
	end
	-- KONSTANTERROR: [52] 29. Error Block 26 end (CF ANALYSIS FAILED)
end
function module_3_upvr.textureFix(arg1, arg2, arg3) -- Line 304
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [18] 13. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [18] 13. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 14. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 14. Error Block 3 end (CF ANALYSIS FAILED)
end
function module_3_upvr.shouldPlace(arg1, arg2) -- Line 545
	--[[ Upvalues[1]:
		[1]: AlonsBPService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local Blocks = AlonsBPService_upvr.World[arg1].Blocks
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 9. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 9. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [43] 32. Error Block 5 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [43] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [71] 50. Error Block 40 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [71] 50. Error Block 40 end (CF ANALYSIS FAILED)
end
return module_3_upvr

-- ReplicatedStorage.Packages.Comm
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:11
-- Luau version 6, Types version 3
-- Time taken: 0.000198 seconds

return require(script.Parent._Index["sleitnick_comm@0.3.1"].comm)

-- ReplicatedStorage.Packages.Component
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:12
-- Luau version 6, Types version 3
-- Time taken: 0.000211 seconds

return require(script.Parent._Index["sleitnick_component@2.4.6"].component)

-- ReplicatedStorage.Packages.EnumList
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:13
-- Luau version 6, Types version 3
-- Time taken: 0.000214 seconds

return require(script.Parent._Index["sleitnick_enum-list@2.0.1"]["enum-list"])

-- ReplicatedStorage.Packages.Input
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:14
-- Luau version 6, Types version 3
-- Time taken: 0.000192 seconds

return require(script.Parent._Index["sleitnick_input@2.1.1"].input)

-- ReplicatedStorage.Packages.Option
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:16
-- Luau version 6, Types version 3
-- Time taken: 0.000180 seconds

return require(script.Parent._Index["sleitnick_option@1.0.4"].option)

-- ReplicatedStorage.Packages.Promise
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:17
-- Luau version 6, Types version 3
-- Time taken: 0.000187 seconds

return require(script.Parent._Index["evaera_promise@4.0.0"].promise)

-- ReplicatedStorage.Packages.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:18
-- Luau version 6, Types version 3
-- Time taken: 0.000223 seconds

return require(script.Parent._Index["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages.Streamable
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:19
-- Luau version 6, Types version 3
-- Time taken: 0.000193 seconds

return require(script.Parent._Index["sleitnick_streamable@1.2.4"].streamable)

-- ReplicatedStorage.Packages.TableUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:20
-- Luau version 6, Types version 3
-- Time taken: 0.000220 seconds

return require(script.Parent._Index["sleitnick_table-util@1.2.0"]["table-util"])

-- ReplicatedStorage.Packages.Timer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:21
-- Luau version 6, Types version 3
-- Time taken: 0.000178 seconds

return require(script.Parent._Index["sleitnick_timer@1.1.2"].timer)

-- ReplicatedStorage.Packages.Trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:22
-- Luau version 6, Types version 3
-- Time taken: 0.000180 seconds

return require(script.Parent._Index["sleitnick_trove@0.5.0"].trove)

-- ReplicatedStorage.Packages.Knit
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:24
-- Luau version 6, Types version 3
-- Time taken: 0.000389 seconds

if game:GetService("RunService"):IsServer() then
	return require(script.KnitServer)
end
local KnitServer = script:FindFirstChild("KnitServer")
if KnitServer then
	KnitServer:Destroy()
end
return require(script.KnitClient)

-- ReplicatedStorage.Packages.Knit.KnitClient
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:25
-- Luau version 6, Types version 3
-- Time taken: 0.004569 seconds

local tbl_upvr = {
	ServicePromises = true;
	Middleware = nil;
	PerServiceMiddleware = {};
}
local var2_upvw
local module = {
	Player = game:GetService("Players").LocalPlayer;
	Util = script.Parent.Parent;
}
local Promise_upvr = require(module.Util.Promise)
local ClientComm_upvr = require(module.Util.Comm).ClientComm
local tbl_upvr_2 = {}
local tbl_upvr_3 = {}
local var8_upvw
local var9_upvw = false
local var10_upvw = false
local BindableEvent_upvr = Instance.new("BindableEvent")
local function _(arg1) -- Line 127, Named "DoesControllerExist"
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local var12 = tbl_upvr_2
	if var12[arg1] == nil then
		var12 = false
	else
		var12 = true
	end
	return var12
end
local function _() -- Line 132, Named "GetServicesFolder"
	--[[ Upvalues[1]:
		[1]: var8_upvw (read and write)
	]]
	if not var8_upvw then
		var8_upvw = script.Parent:WaitForChild("Services")
	end
	return var8_upvw
end
local function _(arg1) -- Line 139, Named "GetMiddlewareForService"
	--[[ Upvalues[1]:
		[1]: var2_upvw (read and write)
	]]
	local var13
	if var2_upvw.Middleware ~= nil then
		var13 = var2_upvw.Middleware
	else
		var13 = {}
	end
	local var14 = var2_upvw.PerServiceMiddleware[arg1]
	if var14 ~= nil then
		return var14
	end
	return var13
end
local function _(arg1) -- Line 145, Named "BuildService"
	--[[ Upvalues[4]:
		[1]: var8_upvw (read and write)
		[2]: var2_upvw (read and write)
		[3]: ClientComm_upvr (readonly)
		[4]: tbl_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var15
	if not var8_upvw then
		var15 = script
		var8_upvw = var15.Parent:WaitForChild("Services")
	end
	if var2_upvw.Middleware ~= nil then
		var15 = var2_upvw.Middleware
	else
		var15 = {}
	end
	local var16 = var2_upvw.PerServiceMiddleware[arg1]
	if var16 ~= nil then
		local _ = var16
	else
	end
	var15 = ClientComm_upvr.new(var8_upvw, var2_upvw.ServicePromises, arg1)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local any_BuildObject_result1_2 = var15:BuildObject(var15.Inbound, var15.Outbound)
	tbl_upvr_3[arg1] = any_BuildObject_result1_2
	return any_BuildObject_result1_2
end
function module.CreateController(arg1) -- Line 175
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	local var19
	if type(arg1) ~= "table" then
		var19 = false
	else
		var19 = true
	end
	assert(var19, `Controller must be a table; got {type(arg1)}`)
	if type(arg1.Name) ~= "string" then
		var19 = false
		-- KONSTANTWARNING: GOTO [34] #26
	end
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 25. Error Block 29 start (CF ANALYSIS FAILED)
	var19 = true
	assert(var19, `Controller.Name must be a string; got {type(arg1.Name)}`)
	if 0 >= #arg1.Name then
		var19 = false
		-- KONSTANTWARNING: GOTO [58] #43
	end
	-- KONSTANTERROR: [33] 25. Error Block 29 end (CF ANALYSIS FAILED)
end
function module.AddControllers(arg1) -- Line 192
	for _, v in arg1:GetChildren() do
		if v:IsA("ModuleScript") then
			table.insert({}, require(v))
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module.AddControllersDeep(arg1) -- Line 206
	for _, v_2 in arg1:GetDescendants() do
		if v_2:IsA("ModuleScript") then
			table.insert({}, require(v_2))
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module.GetService(arg1) -- Line 269
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var9_upvw (read and write)
		[3]: var8_upvw (read and write)
		[4]: var2_upvw (read and write)
		[5]: ClientComm_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var30 = tbl_upvr_3[arg1]
	local var31
	if var30 then
		return var30
	end
	local var32 = var9_upvw
	assert(var32, "Cannot call GetService until Knit has been started")
	var31 = arg1
	if type(var31) ~= "string" then
		var32 = false
	else
		var32 = true
	end
	var31 = `ServiceName must be a string; got {type(arg1)}`
	assert(var32, var31)
	if not var8_upvw then
		var31 = script
		var8_upvw = var31.Parent:WaitForChild("Services")
	end
	if var2_upvw.Middleware ~= nil then
		var31 = var2_upvw.Middleware
	else
		var31 = {}
	end
	local var33 = var2_upvw.PerServiceMiddleware[arg1]
	if var33 ~= nil then
		local _ = var33
	else
	end
	var31 = ClientComm_upvr.new(var8_upvw, var2_upvw.ServicePromises, arg1)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local any_BuildObject_result1 = var31:BuildObject(var31.Inbound, var31.Outbound)
	tbl_upvr_3[arg1] = any_BuildObject_result1
	return any_BuildObject_result1
end
function module.GetController(arg1) -- Line 283
	--[[ Upvalues[2]:
		[1]: tbl_upvr_2 (readonly)
		[2]: var9_upvw (read and write)
	]]
	local var36 = tbl_upvr_2[arg1]
	if var36 then
		return var36
	end
	local var37 = var9_upvw
	assert(var37, "Cannot call GetController until Knit has been started")
	if type(arg1) ~= "string" then
		var37 = false
	else
		var37 = true
	end
	assert(var37, `ControllerName must be a string; got {type(arg1)}`)
	error(`Could not find controller "{arg1}". Check to verify a controller with this name exists.`, 2)
end
function module.Start(arg1) -- Line 310
	--[[ Upvalues[7]:
		[1]: var9_upvw (read and write)
		[2]: Promise_upvr (readonly)
		[3]: var2_upvw (read and write)
		[4]: tbl_upvr (readonly)
		[5]: tbl_upvr_2 (readonly)
		[6]: var10_upvw (read and write)
		[7]: BindableEvent_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [2] 3. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return Promise_upvr.reject("Knit already started")
	end
	-- KONSTANTERROR: [2] 3. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 8. Error Block 3 start (CF ANALYSIS FAILED)
	var9_upvw = true
	-- KONSTANTERROR: [8] 8. Error Block 3 end (CF ANALYSIS FAILED)
end
function module.OnStart() -- Line 382
	--[[ Upvalues[3]:
		[1]: var10_upvw (read and write)
		[2]: Promise_upvr (readonly)
		[3]: BindableEvent_upvr (readonly)
	]]
	if var10_upvw then
		return Promise_upvr.resolve()
	end
	return Promise_upvr.fromEvent(BindableEvent_upvr.Event)
end
return module

-- ReplicatedStorage.Packages.SimplePath
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:26
-- Luau version 6, Types version 3
-- Time taken: 0.014065 seconds

local tbl_2_upvr = {
	TIME_VARIANCE = 0.07;
	COMPARISON_CHECKS = 1;
	JUMP_WHEN_STUCK = true;
}
local function _(arg1, arg2) -- Line 26, Named "output"
	local var2
	if arg1 == error then
		var2 = "SimplePath Error: "
	else
		var2 = "SimplePath: "
	end
	arg1(var2..arg2)
end
local module_2_upvr = {
	StatusType = {
		Idle = "Idle";
		Active = "Active";
	};
	ErrorType = {
		LimitReached = "LimitReached";
		TargetUnreachable = "TargetUnreachable";
		ComputationError = "ComputationError";
		AgentStuck = "AgentStuck";
	};
}
function module_2_upvr.__index(arg1, arg2) -- Line 41
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg2 == "Stopped" then
		local var9
		if not arg1._humanoid then
			local error = error
			if error == error then
				var9 = "SimplePath Error: "
			else
				var9 = "SimplePath: "
			end
			error(var9.."Attempt to use Path.Stopped on a non-humanoid.")
		end
	end
	if not arg1._events[arg2] or not arg1._events[arg2].Event or arg2 ~= "LastError" or not arg1._lastError or arg2 ~= "Status" or not arg1._status then
	end
	return module_2_upvr[arg2]
end
local Part_upvr = Instance.new("Part")
Part_upvr.Size = Vector3.new(0.30000, 0.30000, 0.30000)
Part_upvr.Anchored = true
Part_upvr.CanCollide = false
Part_upvr.Material = Enum.Material.Neon
Part_upvr.Shape = Enum.PartType.Ball
local function _(arg1, arg2) -- Line 63, Named "declareError"
	arg1._lastError = arg2
	arg1._events.Error:Fire(arg2)
end
local function createVisualWaypoints_upvr(arg1) -- Line 70, Named "createVisualWaypoints"
	--[[ Upvalues[1]:
		[1]: Part_upvr (readonly)
	]]
	local module = {}
	for _, v in ipairs(arg1) do
		local clone = Part_upvr:Clone()
		clone.Position = v.Position
		clone.Parent = workspace
		local var21
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var21 = Color3.fromRGB(0, 255, 0)
			return var21
		end
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var21 = Color3.fromRGB(255, 0, 0)
			return var21
		end
		if v ~= arg1[#arg1] or not INLINED() or v.Action ~= Enum.PathWaypointAction.Jump or not INLINED_2() then
			var21 = Color3.fromRGB(255, 139, 0)
		end
		clone.Color = var21
		var21 = table.insert
		var21(module, clone)
	end
	return module
end
local function _(arg1) -- Line 86, Named "destroyVisualWaypoints"
	if arg1 then
		for _, v_2 in ipairs(arg1) do
			v_2:Destroy()
		end
	end
end
local function getNonHumanoidWaypoint_upvr(arg1) -- Line 96, Named "getNonHumanoidWaypoint"
	for i_3 = 2, #arg1._waypoints do
		if 0.1 < (arg1._waypoints[i_3].Position - arg1._waypoints[i_3 - 1].Position).Magnitude then
			return i_3
		end
	end
	return 2
end
local function _(arg1) -- Line 107, Named "setJumpState"
	pcall(function() -- Line 108
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
			arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end)
end
local function _(arg1) -- Line 116, Named "move"
	if arg1._waypoints[arg1._currentWaypoint].Action == Enum.PathWaypointAction.Jump then
		pcall(function() -- Line 108
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
				arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			end
		end)
	end
	arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
end
local function _(arg1) -- Line 124, Named "disconnectMoveConnection"
	arg1._moveConnection:Disconnect()
	arg1._moveConnection = nil
end
local function _(arg1) -- Line 130, Named "invokeWaypointReached"
	arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
end
local function moveToFinished_upvr(arg1, arg2) -- Line 136, Named "moveToFinished"
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if not getmetatable(arg1) then
	else
		if not arg1._humanoid then
			if arg2 and arg1._currentWaypoint + 1 <= #arg1._waypoints then
				arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
				arg1._currentWaypoint += 1
			else
				if arg2 then
					local _visualWaypoints_10 = arg1._visualWaypoints
					if _visualWaypoints_10 then
						for _, v_14 in ipairs(_visualWaypoints_10) do
							v_14:Destroy()
						end
					end
					arg1._visualWaypoints = nil
					arg1._target = nil
					arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint])
					return
				end
				local _visualWaypoints_9 = arg1._visualWaypoints
				if _visualWaypoints_9 then
					for _, v_15 in ipairs(_visualWaypoints_9) do
						v_15:Destroy()
					end
				end
				arg1._visualWaypoints = nil
				arg1._target = nil
				local TargetUnreachable_2 = arg1.ErrorType.TargetUnreachable
				arg1._lastError = TargetUnreachable_2
				arg1._events.Error:Fire(TargetUnreachable_2)
			end
		end
		if arg2 and arg1._currentWaypoint + 1 <= #arg1._waypoints then
			if arg1._currentWaypoint + 1 < #arg1._waypoints then
				arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
			end
			arg1._currentWaypoint += 1
			if arg1._waypoints[arg1._currentWaypoint].Action == Enum.PathWaypointAction.Jump then
				pcall(function() -- Line 108
					--[[ Upvalues[1]:
						[1]: arg1 (readonly)
					]]
					if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
						arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end
				end)
			end
			arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
			return
		end
		if arg2 then
			arg1._moveConnection:Disconnect()
			arg1._moveConnection = nil
			arg1._status = module_2_upvr.StatusType.Idle
			local _visualWaypoints_2 = arg1._visualWaypoints
			if _visualWaypoints_2 then
				for _, v_10 in ipairs(_visualWaypoints_2) do
					v_10:Destroy()
				end
			end
			arg1._visualWaypoints = nil
			arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint])
			return
		end
		arg1._moveConnection:Disconnect()
		arg1._moveConnection = nil
		arg1._status = module_2_upvr.StatusType.Idle
		local _visualWaypoints_11 = arg1._visualWaypoints
		if _visualWaypoints_11 then
			for _, v_11 in ipairs(_visualWaypoints_11) do
				v_11:Destroy()
			end
		end
		arg1._visualWaypoints = nil
		local TargetUnreachable = arg1.ErrorType.TargetUnreachable
		arg1._lastError = TargetUnreachable
		arg1._events.Error:Fire(TargetUnreachable)
	end
end
local function comparePosition_upvr(arg1) -- Line 178, Named "comparePosition"
	local var58
	if arg1._currentWaypoint == var58 then
	else
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var58 = arg1._position._count + 1
			return var58
		end
		if (arg1._agent.PrimaryPart.Position - arg1._position._last).Magnitude > 0.07 or not INLINED_3() then
			var58 = 0
		end
		arg1._position._count = var58
		var58 = arg1._agent.PrimaryPart.Position
		arg1._position._last = var58
		var58 = arg1._position
		var58 = arg1._settings.COMPARISON_CHECKS
		if var58 <= var58._count then
			var58 = arg1._settings
			if var58.JUMP_WHEN_STUCK then
				function var58() -- Line 108
					--[[ Upvalues[1]:
						[1]: arg1 (readonly)
					]]
					if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
						arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end
				end
				pcall(var58)
			end
			var58 = arg1.ErrorType
			local AgentStuck = var58.AgentStuck
			arg1._lastError = AgentStuck
			var58 = arg1._events.Error:Fire
			var58(AgentStuck)
		end
	end
end
local Players_upvr = game:GetService("Players")
function module_2_upvr.GetNearestCharacter(arg1) -- Line 191
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	local var68
	for _, v_3 in ipairs(Players_upvr:GetPlayers()) do
		if v_3.Character and (v_3.Character.PrimaryPart.Position - arg1).Magnitude < math.huge then
		end
	end
	return nil
end
local PathfindingService_upvr = game:GetService("PathfindingService")
function module_2_upvr.new(arg1, arg2, arg3) -- Line 202
	--[[ Upvalues[3]:
		[1]: tbl_2_upvr (readonly)
		[2]: PathfindingService_upvr (readonly)
		[3]: module_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [1] 2. Error Block 31 start (CF ANALYSIS FAILED)
	local var74
	if not arg1:IsA("Model") or not arg1.PrimaryPart then
		-- KONSTANTERROR: [9] 8. Error Block 29 start (CF ANALYSIS FAILED)
		local error_6 = error
		if error_6 == error then
			var74 = "SimplePath Error: "
		else
			var74 = "SimplePath: "
		end
		error_6(var74.."Pathfinding agent must be a valid Model Instance with a set PrimaryPart.")
		-- KONSTANTERROR: [9] 8. Error Block 29 end (CF ANALYSIS FAILED)
	end
	local tbl = {}
	local var77 = arg3
	if not var77 then
		var77 = tbl_2_upvr
	end
	tbl._settings = var77
	tbl._events = {
		Reached = Instance.new("BindableEvent");
		WaypointReached = Instance.new("BindableEvent");
		Blocked = Instance.new("BindableEvent");
		Error = Instance.new("BindableEvent");
		Stopped = Instance.new("BindableEvent");
	}
	tbl._agent = arg1
	tbl._humanoid = arg1:FindFirstChildOfClass("Humanoid")
	tbl._path = PathfindingService_upvr:CreatePath(arg2)
	tbl._status = "Idle"
	tbl._t = 0
	tbl._position = {
		_last = Vector3.new();
		_count = 0;
	}
	local setmetatable_result1_upvr = setmetatable(tbl, module_2_upvr)
	for i_5, v_4 in pairs(tbl_2_upvr) do
		local var84
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var84 = v_4
			return var84
		end
		if setmetatable_result1_upvr._settings[i_5] ~= nil or not INLINED_4() then
			var84 = setmetatable_result1_upvr._settings[i_5]
		end
		setmetatable_result1_upvr._settings[i_5] = var84
	end
	setmetatable_result1_upvr._path.Blocked:Connect(function(...) -- Line 233
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if setmetatable_result1_upvr._currentWaypoint <= ... and ... <= setmetatable_result1_upvr._currentWaypoint + 1 and setmetatable_result1_upvr._humanoid then
			pcall(function() -- Line 108
				--[[ Upvalues[1]:
					[1]: setmetatable_result1_upvr (readonly)
				]]
				if setmetatable_result1_upvr._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and setmetatable_result1_upvr._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
					setmetatable_result1_upvr._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)
			setmetatable_result1_upvr._events.Blocked:Fire(setmetatable_result1_upvr._agent, setmetatable_result1_upvr._waypoints[...])
		end
	end)
	do
		return setmetatable_result1_upvr
	end
	-- KONSTANTERROR: [1] 2. Error Block 31 end (CF ANALYSIS FAILED)
end
function module_2_upvr.Destroy(arg1) -- Line 245
	for i_6, v_5 in ipairs(arg1._events) do
		v_5:Destroy()
	end
	arg1._events = nil
	if rawget(arg1, "_visualWaypoints") then
		local _visualWaypoints_12 = arg1._visualWaypoints
		if _visualWaypoints_12 then
			i_6 = _visualWaypoints_12
			for _, v_6 in ipairs(i_6) do
				v_6:Destroy()
			end
		end
		arg1._visualWaypoints = nil
	end
	arg1._path:Destroy()
	setmetatable(arg1, nil)
	for i_8, _ in pairs(arg1) do
		arg1[i_8] = nil
	end
end
function module_2_upvr.Stop(arg1) -- Line 260
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var107
	if not arg1._humanoid then
		local error_4 = error
		if error_4 == error then
			var107 = "SimplePath Error: "
		else
			var107 = "SimplePath: "
		end
		error_4(var107.."Attempt to call Path:Stop() on a non-humanoid.")
	else
		var107 = module_2_upvr
		if arg1._status == var107.StatusType.Idle then
			local function var109(arg1_2) -- Line 266
				warn(debug.traceback(arg1_2))
			end
			if var109 == error then
				var107 = "SimplePath Error: "
			else
				var107 = "SimplePath: "
			end
			var109(var107.."Attempt to run Path:Stop() in idle state")
			return
		end
		arg1._moveConnection:Disconnect()
		arg1._moveConnection = nil
		arg1._status = module_2_upvr.StatusType.Idle
		local _visualWaypoints_3 = arg1._visualWaypoints
		if _visualWaypoints_3 then
			var107 = _visualWaypoints_3
			for _, v_12 in ipairs(var107) do
				v_12:Destroy()
			end
		end
		arg1._visualWaypoints = nil
		arg1._events.Stopped:Fire(arg1._model)
	end
end
function module_2_upvr.Run(arg1, arg2) -- Line 277
	--[[ Upvalues[5]:
		[1]: moveToFinished_upvr (readonly)
		[2]: module_2_upvr (readonly)
		[3]: comparePosition_upvr (readonly)
		[4]: createVisualWaypoints_upvr (readonly)
		[5]: getNonHumanoidWaypoint_upvr (readonly)
	]]
	local pcall_result1, pcall_result2 = pcall(function() -- Line 279
		--[[ Upvalues[7]:
			[1]: arg2 (readonly)
			[2]: arg1 (readonly)
			[3]: moveToFinished_upvr (copied, readonly)
			[4]: module_2_upvr (copied, readonly)
			[5]: comparePosition_upvr (copied, readonly)
			[6]: createVisualWaypoints_upvr (copied, readonly)
			[7]: getNonHumanoidWaypoint_upvr (copied, readonly)
		]]
		if not arg2 and not arg1._humanoid and arg1._target then
			moveToFinished_upvr(arg1, true)
			return
		end
		local var175
		if not arg2 or typeof(arg2) ~= "Vector3" and not arg2:IsA("BasePart") then
			local error_3 = error
			if error_3 == error then
				var175 = "SimplePath Error: "
			else
				var175 = "SimplePath: "
			end
			error_3(var175.."Pathfinding target must be a valid Vector3 or BasePart.")
		end
		var175 = arg1
		var175 = arg1
		if os.clock() - var175._t <= var175._settings.TIME_VARIANCE and arg1._humanoid then
			var175 = arg1._t
			task.wait(os.clock() - var175)
			local var164 = arg1
			var175 = arg1
			local LimitReached = var175.ErrorType.LimitReached
			var164._lastError = LimitReached
			var175 = var164._events
			var175.Error:Fire(LimitReached)
			return false
		end
		if arg1._humanoid then
			arg1._t = os.clock()
		end
		local pcall_result1_2, _ = pcall(function() -- Line 302
			--[[ Upvalues[2]:
				[1]: arg1 (copied, readonly)
				[2]: arg2 (copied, readonly)
			]]
			local var167
			local function INLINED_11() -- Internal function, doesn't exist in bytecode
				var167 = arg2
				return var167
			end
			if typeof(arg2) ~= "Vector3" or not INLINED_11() then
				var167 = arg2.Position
			end
			arg1._path:ComputeAsync(arg1._agent.PrimaryPart.Position, var167)
		end)
		local function INLINED_12() -- Internal function, doesn't exist in bytecode
			var175 = Enum.PathStatus.NoPath
			var175 = arg1._path
			return var175.Status == var175
		end
		local function INLINED_13() -- Internal function, doesn't exist in bytecode
			var175 = 2
			var175 = arg1._path:GetWaypoints()
			return #var175 < var175
		end
		local function INLINED_14() -- Internal function, doesn't exist in bytecode
			var175 = arg1
			return var175._humanoid
		end
		local function INLINED_15() -- Internal function, doesn't exist in bytecode
			var175 = Enum.HumanoidStateType.Freefall
			var175 = arg1
			return var175._humanoid:GetState() == var175
		end
		if not pcall_result1_2 or INLINED_12() or INLINED_13() or INLINED_14() and INLINED_15() then
			local _visualWaypoints = arg1._visualWaypoints
			if _visualWaypoints then
				for _, v_8 in ipairs(_visualWaypoints) do
					v_8:Destroy()
				end
			end
			var175 = nil
			arg1._visualWaypoints = var175
			task.wait()
			local var174 = arg1
			var175 = arg1.ErrorType.ComputationError
			var174._lastError = var175
			var174._events.Error:Fire(var175)
			return false
		end
		local function INLINED_16() -- Internal function, doesn't exist in bytecode
			var175 = module_2_upvr.StatusType.Active
			return var175
		end
		if not arg1._humanoid or not INLINED_16() then
			var175 = module_2_upvr.StatusType.Idle
		end
		arg1._status = var175
		var175 = arg2
		arg1._target = var175
		function var175() -- Line 322
			--[[ Upvalues[1]:
				[1]: arg1 (copied, readonly)
			]]
			arg1._agent.PrimaryPart:SetNetworkOwner(nil)
		end
		pcall(var175)
		var175 = arg1._path:GetWaypoints()
		arg1._waypoints = var175
		var175 = 2
		arg1._currentWaypoint = var175
		var175 = arg1
		if var175._humanoid then
			var175 = arg1
			comparePosition_upvr(var175)
		end
		var175 = arg1
		local _visualWaypoints_5 = var175._visualWaypoints
		if _visualWaypoints_5 then
			var175 = ipairs(_visualWaypoints_5)
			local ipairs_result1_11, ipairs_result2_2, ipairs_result3_8 = ipairs(_visualWaypoints_5)
			for _, v_9 in ipairs_result1_11, ipairs_result2_2, ipairs_result3_8 do
				v_9:Destroy()
			end
		end
		ipairs_result1_11 = arg1.Visualize
		if ipairs_result1_11 then
			ipairs_result1_11 = createVisualWaypoints_upvr(arg1._waypoints)
		end
		arg1._visualWaypoints = ipairs_result1_11
		ipairs_result1_11 = arg1._humanoid
		if ipairs_result1_11 then
			ipairs_result1_11 = arg1._moveConnection
			if not ipairs_result1_11 then
				ipairs_result1_11 = arg1._humanoid.MoveToFinished
				ipairs_result1_11 = ipairs_result1_11:Connect(function(...) -- Line 340
					--[[ Upvalues[2]:
						[1]: moveToFinished_upvr (copied, readonly)
						[2]: arg1 (copied, readonly)
					]]
					moveToFinished_upvr(arg1, ...)
				end)
			end
		end
		arg1._moveConnection = ipairs_result1_11
		if arg1._humanoid then
			arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
		elseif #arg1._waypoints == 2 then
			arg1._target = nil
			local _visualWaypoints_4 = arg1._visualWaypoints
			if _visualWaypoints_4 then
				for _, v_13 in ipairs(_visualWaypoints_4) do
					v_13:Destroy()
				end
			end
			arg1._visualWaypoints = nil
			arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[2])
		else
			arg1._currentWaypoint = getNonHumanoidWaypoint_upvr(arg1)
			moveToFinished_upvr(arg1, true)
		end
		return true
	end)
	if pcall_result1 then
		return pcall_result2
	end
end
return module_2_upvr

-- ReplicatedStorage.Packages._Index.evaera_promise@4.0.0.promise
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:27
-- Luau version 6, Types version 3
-- Time taken: 0.036124 seconds

local tbl_8_upvr = {
	__mode = 'k';
}
local function _(arg1) -- Line 10, Named "isCallable"
	if type(arg1) == "function" then
		return true
	end
	if type(arg1) == "table" then
		local getmetatable_result1_12 = getmetatable(arg1)
		if getmetatable_result1_12 and type(rawget(getmetatable_result1_12, "__call")) == "function" then
			return true
		end
	end
	return false
end
local function makeEnum(arg1, arg2) -- Line 28
	local module_10 = {}
	for _, v in ipairs(arg2) do
		module_10[v] = v
	end
	return setmetatable(module_10, {
		__index = function(arg1_2, arg2_2) -- Line 36, Named "__index"
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			error(string.format("%s is not in %s!", arg2_2, arg1), 2)
		end;
		__newindex = function() -- Line 39, Named "__newindex"
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			error(string.format("Creating new members in %s is not allowed!", arg1), 2)
		end;
	})
end
local var15_upvw = {
	Kind = makeEnum("Promise.Error.Kind", {"ExecutionError", "AlreadyCancelled", "NotResolvedInTime", "TimedOut"});
}
var15_upvw.__index = var15_upvw
local function new(arg1, arg2) -- Line 64
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	local var16 = arg1
	if not var16 then
		var16 = {}
	end
	local var17 = var16
	local module_2 = {
		error = tostring(var17.error) or "[This error has no error text.]";
		trace = var17.trace;
		context = var17.context;
		kind = var17.kind;
	}
	module_2.parent = arg2
	module_2.createdTick = os.clock()
	module_2.createdTrace = debug.traceback()
	return setmetatable(module_2, var15_upvw)
end
var15_upvw.new = new
local function is(arg1) -- Line 77
	if type(arg1) == "table" then
		local getmetatable_result1_5 = getmetatable(arg1)
		if type(getmetatable_result1_5) == "table" then
			local var22 = false
			if rawget(arg1, "error") ~= nil then
				if type(rawget(getmetatable_result1_5, "extend")) ~= "function" then
					var22 = false
				else
					var22 = true
				end
			end
			return var22
		end
	end
	return false
end
var15_upvw.is = is
function var15_upvw.isKind(arg1, arg2) -- Line 89
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	if arg2 == nil then
	else
	end
	assert(true, "Argument #2 to Promise.Error.isKind must not be nil")
	if var15_upvw.is(arg1) then
		if arg1.kind ~= arg2 then
		else
		end
	end
	return true
end
function var15_upvw.extend(arg1, arg2) -- Line 95
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	local var23 = arg2
	if not var23 then
		var23 = {}
	end
	local var24 = var23
	var23 = var24.kind
	local var25 = var23
	if not var25 then
		var25 = arg1.kind
	end
	var24.kind = var25
	return var15_upvw.new(var24, arg1)
end
function var15_upvw.getErrorChain(arg1) -- Line 103
	local module_3 = {}
	module_3[1] = arg1
	while module_3[#module_3].parent do
		table.insert(module_3, module_3[#module_3].parent)
	end
	return module_3
end
local function __tostring(arg1) -- Line 113
	local module_4 = {string.format("-- Promise.Error(%s) --", arg1.kind or '?')}
	for _, v_2 in ipairs(arg1:getErrorChain()) do
		local tbl = {}
		local trace = v_2.trace
		if not trace then
			trace = v_2.error
		end
		tbl[1] = trace
		tbl[2] = v_2.context
		table.insert(module_4, table.concat(tbl, '\n'))
	end
	return table.concat(module_4, '\n')
end
var15_upvw.__tostring = __tostring
local function pack_upvr(...) -- Line 137, Named "pack"
	return select('#', ...), {...}
end
local function packResult_upvr(arg1, ...) -- Line 144, Named "packResult"
	return arg1, select('#', ...), {...}
end
local function _(arg1) -- Line 148, Named "makeErrorHandler"
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	if arg1 == nil then
	else
	end
	assert(true, "traceback is nil")
	return function(arg1_3) -- Line 151
		--[[ Upvalues[2]:
			[1]: var15_upvw (copied, read and write)
			[2]: arg1 (readonly)
		]]
		if type(arg1_3) == "table" then
			return arg1_3
		end
		local module_11 = {}
		module_11.error = arg1_3
		module_11.kind = var15_upvw.Kind.ExecutionError
		module_11.trace = debug.traceback(tostring(arg1_3), 2)
		module_11.context = "Promise created at:\n\n"..arg1
		return var15_upvw.new(module_11)
	end
end
local function runExecutor_upvr(arg1, arg2, ...) -- Line 171, Named "runExecutor"
	--[[ Upvalues[2]:
		[1]: packResult_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local var41
	if arg1 == nil then
		var41 = false
	else
		var41 = true
	end
	assert(var41, "traceback is nil")
	return packResult_upvr(xpcall(arg2, function(arg1_4) -- Line 151
		--[[ Upvalues[2]:
			[1]: var15_upvw (copied, read and write)
			[2]: arg1 (readonly)
		]]
		if type(arg1_4) == "table" then
			return arg1_4
		end
		local module_6 = {}
		module_6.error = arg1_4
		module_6.kind = var15_upvw.Kind.ExecutionError
		module_6.trace = debug.traceback(tostring(arg1_4), 2)
		module_6.context = "Promise created at:\n\n"..arg1
		return var15_upvw.new(module_6)
	end, ...))
end
local function _(arg1, arg2, arg3, arg4) -- Line 179, Named "createAdvancer"
	--[[ Upvalues[1]:
		[1]: runExecutor_upvr (readonly)
	]]
	return function(...) -- Line 180
		--[[ Upvalues[5]:
			[1]: runExecutor_upvr (copied, readonly)
			[2]: arg1 (readonly)
			[3]: arg2 (readonly)
			[4]: arg3 (readonly)
			[5]: arg4 (readonly)
		]]
		local runExecutor_upvr_result1_3, runExecutor_upvr_result2_2, runExecutor_upvr_result3 = runExecutor_upvr(arg1, arg2, ...)
		if runExecutor_upvr_result1_3 then
			arg3(unpack(runExecutor_upvr_result3, 1, runExecutor_upvr_result2_2))
		else
			arg4(runExecutor_upvr_result3[1])
		end
	end
end
local function _(arg1) -- Line 191, Named "isEmpty"
	local var48
	if next(arg1) ~= nil then
		var48 = false
	else
		var48 = true
	end
	return var48
end
local module_7_upvr = {
	Error = var15_upvw;
	Status = makeEnum("Promise.Status", {"Started", "Resolved", "Rejected", "Cancelled"});
	_getTime = os.clock;
	_timeEvent = game:GetService("RunService").Heartbeat;
	_unhandledRejectionCallbacks = {};
	prototype = {};
	__index = module_7_upvr.prototype;
}
function module_7_upvr._new(arg1, arg2, arg3) -- Line 230
	--[[ Upvalues[3]:
		[1]: module_7_upvr (readonly)
		[2]: tbl_8_upvr (readonly)
		[3]: runExecutor_upvr (readonly)
	]]
	if arg3 ~= nil and not module_7_upvr.is(arg3) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end
	local module_9_upvr = {
		_thread = nil;
	}
	module_9_upvr._source = arg1
	module_9_upvr._status = module_7_upvr.Status.Started
	module_9_upvr._values = nil
	module_9_upvr._valuesLength = -1
	module_9_upvr._unhandledRejection = true
	module_9_upvr._queuedResolve = {}
	module_9_upvr._queuedReject = {}
	module_9_upvr._queuedFinally = {}
	module_9_upvr._cancellationHook = nil
	module_9_upvr._parent = arg3
	module_9_upvr._consumers = setmetatable({}, tbl_8_upvr)
	if arg3 and arg3._status == module_7_upvr.Status.Started then
		arg3._consumers[module_9_upvr] = true
	end
	setmetatable(module_9_upvr, module_7_upvr)
	local function resolve(...) -- Line 278
		--[[ Upvalues[1]:
			[1]: module_9_upvr (readonly)
		]]
		module_9_upvr:_resolve(...)
	end
	local function reject(...) -- Line 282
		--[[ Upvalues[1]:
			[1]: module_9_upvr (readonly)
		]]
		module_9_upvr:_reject(...)
	end
	local function onCancel_upvr(arg1_5) -- Line 286, Named "onCancel"
		--[[ Upvalues[2]:
			[1]: module_9_upvr (readonly)
			[2]: module_7_upvr (copied, readonly)
		]]
		if arg1_5 then
			if module_9_upvr._status == module_7_upvr.Status.Cancelled then
				arg1_5()
			else
				module_9_upvr._cancellationHook = arg1_5
			end
		end
		if module_9_upvr._status ~= module_7_upvr.Status.Cancelled then
		else
		end
		return true
	end
	module_9_upvr._thread = coroutine.create(function() -- Line 298
		--[[ Upvalues[6]:
			[1]: runExecutor_upvr (copied, readonly)
			[2]: module_9_upvr (readonly)
			[3]: arg2 (readonly)
			[4]: resolve (readonly)
			[5]: reject (readonly)
			[6]: onCancel_upvr (readonly)
		]]
		local runExecutor_result1, _, runExecutor_upvr_result3_4 = runExecutor_upvr(module_9_upvr._source, arg2, resolve, reject, onCancel_upvr)
		if not runExecutor_result1 then
			reject(runExecutor_upvr_result3_4[1])
		end
	end)
	task.spawn(module_9_upvr._thread)
	return module_9_upvr
end
function module_7_upvr.new(arg1) -- Line 349
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	return module_7_upvr._new(debug.traceback(nil, 2), arg1)
end
function module_7_upvr.__tostring(arg1) -- Line 353
	return string.format("Promise(%s)", arg1._status)
end
function module_7_upvr.defer(arg1) -- Line 375
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: runExecutor_upvr (readonly)
	]]
	local call_stack_3_upvr = debug.traceback(nil, 2)
	return module_7_upvr._new(call_stack_3_upvr, function(arg1_6, arg2, arg3) -- Line 378
		--[[ Upvalues[4]:
			[1]: module_7_upvr (copied, readonly)
			[2]: runExecutor_upvr (copied, readonly)
			[3]: call_stack_3_upvr (readonly)
			[4]: arg1 (readonly)
		]]
		local var59_upvw
		var59_upvw = module_7_upvr._timeEvent:Connect(function() -- Line 380
			--[[ Upvalues[7]:
				[1]: var59_upvw (read and write)
				[2]: runExecutor_upvr (copied, readonly)
				[3]: call_stack_3_upvr (copied, readonly)
				[4]: arg1 (copied, readonly)
				[5]: arg1_6 (readonly)
				[6]: arg2 (readonly)
				[7]: arg3 (readonly)
			]]
			var59_upvw:Disconnect()
			local runExecutor_upvr_result1_2, _, runExecutor_upvr_result3_3 = runExecutor_upvr(call_stack_3_upvr, arg1, arg1_6, arg2, arg3)
			if not runExecutor_upvr_result1_2 then
				arg2(runExecutor_upvr_result3_3[1])
			end
		end)
	end)
end
module_7_upvr.async = module_7_upvr.defer
function module_7_upvr.resolve(...) -- Line 418
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_7_upvr (readonly)
	]]
	local pack_result1_upvr_3, pack_result2_upvr = pack_upvr(...)
	return module_7_upvr._new(debug.traceback(nil, 2), function(arg1) -- Line 420
		--[[ Upvalues[2]:
			[1]: pack_result2_upvr (readonly)
			[2]: pack_result1_upvr_3 (readonly)
		]]
		arg1(unpack(pack_result2_upvr, 1, pack_result1_upvr_3))
	end)
end
function module_7_upvr.reject(...) -- Line 435
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_7_upvr (readonly)
	]]
	local pack_upvr_result1_upvr, pack_result2_3_upvr = pack_upvr(...)
	return module_7_upvr._new(debug.traceback(nil, 2), function(arg1, arg2) -- Line 437
		--[[ Upvalues[2]:
			[1]: pack_result2_3_upvr (readonly)
			[2]: pack_upvr_result1_upvr (readonly)
		]]
		arg2(unpack(pack_result2_3_upvr, 1, pack_upvr_result1_upvr))
	end)
end
function module_7_upvr._try(arg1, arg2, ...) -- Line 446
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_7_upvr (readonly)
	]]
	local pack_result1_upvr_4, pack_result2_4_upvr = pack_upvr(...)
	return module_7_upvr._new(arg1, function(arg1_7) -- Line 449
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: pack_result2_4_upvr (readonly)
			[3]: pack_result1_upvr_4 (readonly)
		]]
		arg1_7(arg2(unpack(pack_result2_4_upvr, 1, pack_result1_upvr_4)))
	end)
end
function module_7_upvr.try(arg1, ...) -- Line 477
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	return module_7_upvr._try(debug.traceback(nil, 2), arg1, ...)
end
function module_7_upvr._all(arg1, arg2, arg3) -- Line 486
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	if type(arg2) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.all"), 3)
	end
	for i_3, v_3 in pairs(arg2) do
		if not module_7_upvr.is(v_3) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.all", tostring(i_3)), 3)
		end
	end
	if #arg2 == 0 or arg3 == 0 then
		return module_7_upvr.resolve({})
	end
	return module_7_upvr._new(arg1, function(arg1_8, arg2_3, arg3_2) -- Line 504
		--[[ Upvalues[2]:
			[1]: arg3 (readonly)
			[2]: arg2 (readonly)
		]]
		local tbl_9_upvr = {}
		local var87_upvw = 0
		local var88_upvw = false
		local function cancel() -- Line 515
			--[[ Upvalues[1]:
				[1]: tbl_9_upvr (readonly)
			]]
			for _, v_4 in ipairs(tbl_9_upvr) do
				v_4:cancel()
			end
		end
		local var94_upvw = 0
		local tbl_6_upvr = {}
		local function resolveOne(arg1_9, ...) -- Line 522
			--[[ Upvalues[7]:
				[1]: var88_upvw (read and write)
				[2]: var94_upvw (read and write)
				[3]: arg3 (copied, readonly)
				[4]: tbl_6_upvr (readonly)
				[5]: arg2 (copied, readonly)
				[6]: arg1_8 (readonly)
				[7]: tbl_9_upvr (readonly)
			]]
			if var88_upvw then
			else
				var94_upvw += 1
				if arg3 == nil then
					tbl_6_upvr[arg1_9] = ...
				else
					tbl_6_upvr[var94_upvw] = ...
				end
				local var100 = arg3
				if not var100 then
					var100 = #arg2
				end
				if var100 <= var94_upvw then
					var88_upvw = true
					arg1_8(tbl_6_upvr)
					for _, v_16 in ipairs(tbl_9_upvr) do
						v_16:cancel()
					end
				end
			end
		end
		arg3_2(cancel)
		for i_5_upvr, v_5 in ipairs(arg2) do
			tbl_9_upvr[i_5_upvr] = v_5:andThen(function(...) -- Line 547
				--[[ Upvalues[2]:
					[1]: resolveOne (readonly)
					[2]: i_5_upvr (readonly)
				]]
				resolveOne(i_5_upvr, ...)
			end, function(...) -- Line 549
				--[[ Upvalues[6]:
					[1]: var87_upvw (read and write)
					[2]: arg3 (copied, readonly)
					[3]: arg2 (copied, readonly)
					[4]: tbl_9_upvr (readonly)
					[5]: var88_upvw (read and write)
					[6]: arg2_3 (readonly)
				]]
				var87_upvw += 1
				if arg3 == nil or #arg2 - var87_upvw < arg3 then
					for _, v_6 in ipairs(tbl_9_upvr) do
						v_6:cancel()
					end
					var88_upvw = true
					arg2_3(...)
				end
			end)
		end
		if var88_upvw then
			for _, v_7 in ipairs(tbl_9_upvr) do
				v_7:cancel()
			end
		end
	end)
end
function module_7_upvr.all(arg1) -- Line 591
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	return module_7_upvr._all(debug.traceback(nil, 2), arg1)
end
function module_7_upvr.fold(arg1, arg2, arg3) -- Line 620
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	local var123
	if type(arg1) ~= "table" then
		var123 = false
	else
		var123 = true
	end
	assert(var123, "Bad argument #1 to Promise.fold: must be a table")
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 19. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 19. Error Block 16 end (CF ANALYSIS FAILED)
end
function module_7_upvr.some(arg1, arg2) -- Line 653
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local var124
	if type(arg2) ~= "number" then
		var124 = false
	else
		var124 = true
	end
	assert(var124, "Bad argument #2 to Promise.some: must be a number")
	var124 = module_7_upvr
	var124 = debug.traceback(nil, 2)
	return var124._all(var124, arg1, arg2)
end
function module_7_upvr.any(arg1) -- Line 677
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	return module_7_upvr._all(debug.traceback(nil, 2), arg1, 1):andThen(function(arg1_12) -- Line 678
		return arg1_12[1]
	end)
end
function module_7_upvr.allSettled(arg1) -- Line 699
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	if type(arg1) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.allSettled"), 2)
	end
	for i_8, v_8 in pairs(arg1) do
		if not module_7_upvr.is(v_8) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.allSettled", tostring(i_8)), 2)
		end
	end
	if #arg1 == 0 then
		return module_7_upvr.resolve({})
	end
	return module_7_upvr._new(debug.traceback(nil, 2), function(arg1_13, arg2, arg3) -- Line 717
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local tbl_upvr = {}
		local var137_upvw = 0
		local tbl_upvr_2 = {}
		local function resolveOne_upvr(arg1_14, ...) -- Line 727, Named "resolveOne"
			--[[ Upvalues[4]:
				[1]: var137_upvw (read and write)
				[2]: tbl_upvr_2 (readonly)
				[3]: arg1 (copied, readonly)
				[4]: arg1_13 (readonly)
			]]
			var137_upvw += 1
			tbl_upvr_2[arg1_14] = ...
			if #arg1 <= var137_upvw then
				arg1_13(tbl_upvr_2)
			end
		end
		arg3(function() -- Line 737
			--[[ Upvalues[1]:
				[1]: tbl_upvr (readonly)
			]]
			for _, v_9 in ipairs(tbl_upvr) do
				v_9:cancel()
			end
		end)
		for i_10_upvr, v_10 in ipairs(arg1) do
			tbl_upvr[i_10_upvr] = v_10:finally(function(...) -- Line 746
				--[[ Upvalues[2]:
					[1]: resolveOne_upvr (readonly)
					[2]: i_10_upvr (readonly)
				]]
				resolveOne_upvr(i_10_upvr, ...)
			end)
		end
	end)
end
function module_7_upvr.race(arg1) -- Line 777
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local var153
	if type(arg1) ~= "table" then
		var153 = false
	else
		var153 = true
	end
	assert(var153, string.format("Please pass a list of promises to %s", "Promise.race"))
	var153 = arg1
	local pairs_result1, pairs_result2, pairs_result3 = pairs(var153)
	for i_11, v_11 in pairs_result1, pairs_result2, pairs_result3 do
		assert(module_7_upvr.is(v_11), string.format("Non-promise value passed into %s at index %s", "Promise.race", tostring(i_11)))
	end
	pairs_result2 = module_7_upvr
	pairs_result2 = debug.traceback(nil, 2)
	return pairs_result2._new(pairs_result2, function(arg1_15, arg2, arg3) -- Line 784
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local tbl_10_upvr = {}
		local var167_upvw = false
		local function cancel() -- Line 788
			--[[ Upvalues[1]:
				[1]: tbl_10_upvr (readonly)
			]]
			for _, v_12 in ipairs(tbl_10_upvr) do
				v_12:cancel()
			end
		end
		local function _(arg1_16) -- Line 794, Named "finalize"
			--[[ Upvalues[2]:
				[1]: tbl_10_upvr (readonly)
				[2]: var167_upvw (read and write)
			]]
			return function(...) -- Line 795
				--[[ Upvalues[3]:
					[1]: tbl_10_upvr (copied, readonly)
					[2]: var167_upvw (copied, read and write)
					[3]: arg1_16 (readonly)
				]]
				for _, v_13 in ipairs(tbl_10_upvr) do
					v_13:cancel()
				end
				var167_upvw = true
				return arg1_16(...)
			end
		end
		if arg3(function(...) -- Line 795
			--[[ Upvalues[3]:
				[1]: tbl_10_upvr (readonly)
				[2]: var167_upvw (read and write)
				[3]: arg2 (readonly)
			]]
			for _, v_14 in ipairs(tbl_10_upvr) do
				v_14:cancel()
			end
			var167_upvw = true
			return arg2(...)
		end) then
		else
			for i_17, v_17 in ipairs(arg1) do
				tbl_10_upvr[i_17] = v_17:andThen(function(...) -- Line 795
					--[[ Upvalues[3]:
						[1]: tbl_10_upvr (readonly)
						[2]: var167_upvw (read and write)
						[3]: arg1_15 (readonly)
					]]
					for _, v_18 in ipairs(tbl_10_upvr) do
						v_18:cancel()
					end
					var167_upvw = true
					return arg1_15(...)
				end, function(...) -- Line 795
					--[[ Upvalues[3]:
						[1]: tbl_10_upvr (readonly)
						[2]: var167_upvw (read and write)
						[3]: arg2 (readonly)
					]]
					for _, v_19 in ipairs(tbl_10_upvr) do
						v_19:cancel()
					end
					var167_upvw = true
					return arg2(...)
				end)
			end
			if var167_upvw then
				for _, v_20 in ipairs(tbl_10_upvr) do
					v_20:cancel()
				end
			end
		end
	end)
end
function module_7_upvr.each(arg1, arg2) -- Line 872
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	local var310
	if type(arg1) ~= "table" then
		var310 = false
	else
		var310 = true
	end
	assert(var310, string.format("Please pass a list of promises to %s", "Promise.each"))
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [27] 22. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [27] 22. Error Block 16 end (CF ANALYSIS FAILED)
end
function module_7_upvr.is(arg1) -- Line 971
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 6. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return false
	end
	-- KONSTANTERROR: [7] 6. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 3 end (CF ANALYSIS FAILED)
end
function module_7_upvr.promisify(arg1) -- Line 1020
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	return function(...) -- Line 1021
		--[[ Upvalues[2]:
			[1]: module_7_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		return module_7_upvr._try(debug.traceback(nil, 2), arg1, ...)
	end
end
local var312_upvw
local var313_upvw
function module_7_upvr.delay(arg1) -- Line 1051
	--[[ Upvalues[3]:
		[1]: module_7_upvr (readonly)
		[2]: var312_upvw (read and write)
		[3]: var313_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var314
	if type(arg1) ~= "number" then
		var314 = false
	else
		var314 = true
	end
	assert(var314, "Bad argument #1 to Promise.delay, must be a number.")
	if (1/60) > arg1 or arg1 == math.huge then
	end
	var314 = module_7_upvr
	var314 = debug.traceback(nil, 2)
	local const_number_upvw = (1/60)
	return var314._new(var314, function(arg1_18, arg2, arg3) -- Line 1059
		--[[ Upvalues[4]:
			[1]: module_7_upvr (copied, readonly)
			[2]: const_number_upvw (read and write)
			[3]: var312_upvw (copied, read and write)
			[4]: var313_upvw (copied, read and write)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 29 start (CF ANALYSIS FAILED)
		local any__getTime_result1 = module_7_upvr._getTime()
		local var318 = any__getTime_result1 + const_number_upvw
		local tbl_5_upvr = {}
		tbl_5_upvr.resolve = arg1_18
		tbl_5_upvr.startTime = any__getTime_result1
		tbl_5_upvr.endTime = var318
		if var312_upvw == nil then
			var313_upvw = tbl_5_upvr
			var312_upvw = module_7_upvr._timeEvent:Connect(function() -- Line 1071
				--[[ Upvalues[3]:
					[1]: module_7_upvr (copied, readonly)
					[2]: var313_upvw (copied, read and write)
					[3]: var312_upvw (copied, read and write)
				]]
				while var313_upvw ~= nil and var313_upvw.endTime < module_7_upvr._getTime() do
					local var321 = var313_upvw
					var313_upvw = var321.next
					if var313_upvw == nil then
						var312_upvw:Disconnect()
						var312_upvw = nil
					else
						var313_upvw.previous = nil
					end
					var321.resolve(module_7_upvr._getTime() - var321.startTime)
				end
			end)
		else
			local var322
			if var313_upvw.endTime < var318 then
				local next_2 = var313_upvw.next
				while next_2 ~= nil and next_2.endTime < var318 do
					local var324 = next_2
					local next = var324.next
				end
				var324.next = tbl_5_upvr
				tbl_5_upvr.previous = var324
				if next ~= nil then
					tbl_5_upvr.next = next
					next.previous = tbl_5_upvr
					-- KONSTANTWARNING: GOTO [65] #45
				end
			else
				tbl_5_upvr.next = var313_upvw
				var313_upvw.previous = tbl_5_upvr
				var313_upvw = tbl_5_upvr
			end
		end
		-- KONSTANTERROR: [0] 1. Error Block 29 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [65] 45. Error Block 14 start (CF ANALYSIS FAILED)
		arg3(function() -- Line 1116
			--[[ Upvalues[3]:
				[1]: tbl_5_upvr (readonly)
				[2]: var313_upvw (copied, read and write)
				[3]: var312_upvw (copied, read and write)
			]]
			local next_3 = tbl_5_upvr.next
			if var313_upvw == tbl_5_upvr then
				if next_3 == nil then
					var312_upvw:Disconnect()
					var312_upvw = nil
				else
					next_3.previous = nil
				end
				var313_upvw = next_3
			else
				local previous = tbl_5_upvr.previous
				previous.next = next_3
				if next_3 ~= nil then
					next_3.previous = previous
				end
			end
		end)
		-- KONSTANTERROR: [65] 45. Error Block 14 end (CF ANALYSIS FAILED)
	end)
end
module_7_upvr.prototype.timeout = function(arg1, arg2, arg3) -- Line 1180, Named "timeout"
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local module_8 = {}
	local call_stack_2_upvr = debug.traceback(nil, 2)
	module_8[1] = module_7_upvr.delay(arg2):andThen(function() -- Line 1184
		--[[ Upvalues[5]:
			[1]: module_7_upvr (copied, readonly)
			[2]: arg3 (readonly)
			[3]: var15_upvw (copied, read and write)
			[4]: arg2 (readonly)
			[5]: call_stack_2_upvr (readonly)
		]]
		local var332
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var332 = var332(tbl_3)
			tbl_3.context = string.format("Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s", arg2, call_stack_2_upvr)
			tbl_3.error = "Timed out"
			tbl_3.kind = var15_upvw.Kind.TimedOut
			local tbl_3 = {}
			var332 = var15_upvw.new
			return var332
		end
		if arg3 ~= nil or not INLINED() then
			var332 = arg3
		end
		return module_7_upvr.reject(var332)
	end)
	module_8[2] = arg1
	return module_7_upvr.race(module_8)
end
module_7_upvr.prototype.getStatus = function(arg1) -- Line 1204, Named "getStatus"
	return arg1._status
end
module_7_upvr.prototype._andThen = function(arg1, arg2, arg3, arg4) -- Line 1213, Named "_andThen"
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: runExecutor_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	if arg1._status == module_7_upvr.Status.Cancelled then
		local any_new_result1 = module_7_upvr.new(function() -- Line 1218
		end)
		any_new_result1:cancel()
		return any_new_result1
	end
	return module_7_upvr._new(arg2, function(arg1_19, arg2_6, arg3_3) -- Line 1225
		--[[ Upvalues[6]:
			[1]: arg3 (readonly)
			[2]: arg2 (readonly)
			[3]: runExecutor_upvr (copied, readonly)
			[4]: arg4 (readonly)
			[5]: arg1 (readonly)
			[6]: module_7_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 21 start (CF ANALYSIS FAILED)
		local var338_upvw
		if arg3 then
			function var338_upvw(...) -- Line 180
				--[[ Upvalues[5]:
					[1]: runExecutor_upvr (copied, readonly)
					[2]: arg2 (readonly)
					[3]: arg3 (readonly)
					[4]: arg1_19 (readonly)
					[5]: arg2_6 (readonly)
				]]
				local runExecutor_upvr_result1_4, runExecutor_result2, runExecutor_upvr_result3_2 = runExecutor_upvr(arg2, arg3, ...)
				if runExecutor_upvr_result1_4 then
					arg1_19(unpack(runExecutor_upvr_result3_2, 1, runExecutor_result2))
				else
					arg2_6(runExecutor_upvr_result3_2[1])
				end
			end
		end
		if arg4 then
			local function var342_upvw(...) -- Line 180
				--[[ Upvalues[5]:
					[1]: runExecutor_upvr (copied, readonly)
					[2]: arg2 (readonly)
					[3]: arg4 (readonly)
					[4]: arg1_19 (readonly)
					[5]: arg2_6 (readonly)
				]]
				local runExecutor_upvr_result1, runExecutor_upvr_result2, runExecutor_upvr_result3_5 = runExecutor_upvr(arg2, arg4, ...)
				if runExecutor_upvr_result1 then
					arg1_19(unpack(runExecutor_upvr_result3_5, 1, runExecutor_upvr_result2))
				else
					arg2_6(runExecutor_upvr_result3_5[1])
				end
			end
		end
		if arg1._status == module_7_upvr.Status.Started then
			table.insert(arg1._queuedResolve, var338_upvw)
			table.insert(arg1._queuedReject, var342_upvw)
			local function var346() -- Line 1244
				--[[ Upvalues[4]:
					[1]: arg1 (copied, readonly)
					[2]: module_7_upvr (copied, readonly)
					[3]: var338_upvw (read and write)
					[4]: var342_upvw (read and write)
				]]
				if arg1._status == module_7_upvr.Status.Started then
					table.remove(arg1._queuedResolve, table.find(arg1._queuedResolve, var338_upvw))
					table.remove(arg1._queuedReject, table.find(arg1._queuedReject, var342_upvw))
				end
			end
			arg3_3(var346)
			-- KONSTANTWARNING: GOTO [105] #82
		end
		-- KONSTANTERROR: [0] 1. Error Block 21 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [58] 49. Error Block 17 start (CF ANALYSIS FAILED)
		var346 = arg1
		var346 = module_7_upvr.Status.Resolved
		if var346._status == var346 then
			var346 = unpack(arg1._values, 1, arg1._valuesLength)
			var338_upvw(var346)
		else
			var346 = arg1
			var346 = module_7_upvr.Status.Rejected
			if var346._status == var346 then
				var346 = unpack(arg1._values, 1, arg1._valuesLength)
				var342_upvw(var346)
			end
		end
		-- KONSTANTERROR: [58] 49. Error Block 17 end (CF ANALYSIS FAILED)
	end, arg1)
end
module_7_upvr.prototype.andThen = function(arg1, arg2, arg3) -- Line 1283, Named "andThen"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 27 start (CF ANALYSIS FAILED)
	local getmetatable_result1_7 = getmetatable(arg2)
	local var351
	if getmetatable_result1_7 and type(rawget(getmetatable_result1_7, "__call")) == "function" then
		var351 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var351 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 27 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 24 start (CF ANALYSIS FAILED)
	assert(var351, string.format("Please pass a handler function to %s!", "Promise:andThen"))
	var351 = true
	-- KONSTANTERROR: [41] 32. Error Block 24 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.catch = function(arg1, arg2) -- Line 1310, Named "catch"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 14 start (CF ANALYSIS FAILED)
	local getmetatable_result1_3 = getmetatable(arg2)
	local var353
	if getmetatable_result1_3 and type(rawget(getmetatable_result1_3, "__call")) == "function" then
		var353 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var353 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 12 start (CF ANALYSIS FAILED)
	assert(var353, string.format("Please pass a handler function to %s!", "Promise:catch"))
	do
		return arg1:_andThen(debug.traceback(nil, 2), nil, arg2)
	end
	-- KONSTANTERROR: [41] 32. Error Block 12 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.tap = function(arg1, arg2) -- Line 1331, Named "tap"
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 12 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.andThenCall = function(arg1, arg2, ...) -- Line 1366, Named "andThenCall"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.andThenReturn = function(arg1, ...) -- Line 1396, Named "andThenReturn"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	local pack_result1_upvr_5, pack_result2_6_upvr = pack_upvr(...)
	return arg1:_andThen(debug.traceback(nil, 2), function() -- Line 1398
		--[[ Upvalues[2]:
			[1]: pack_result2_6_upvr (readonly)
			[2]: pack_result1_upvr_5 (readonly)
		]]
		return unpack(pack_result2_6_upvr, 1, pack_result1_upvr_5)
	end)
end
module_7_upvr.prototype.cancel = function(arg1) -- Line 1414, Named "cancel"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	if arg1._status ~= module_7_upvr.Status.Started then
	else
		arg1._status = module_7_upvr.Status.Cancelled
		if arg1._cancellationHook then
			arg1._cancellationHook()
		end
		coroutine.close(arg1._thread)
		if arg1._parent then
			arg1._parent:_consumerCancelled(arg1)
		end
		for i_21 in pairs(arg1._consumers) do
			i_21:cancel()
		end
		arg1:_finalize()
	end
end
module_7_upvr.prototype._consumerCancelled = function(arg1, arg2) -- Line 1442, Named "_consumerCancelled"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	if arg1._status ~= module_7_upvr.Status.Started then
	else
		arg1._consumers[arg2] = nil
		if next(arg1._consumers) == nil then
			arg1:cancel()
		end
	end
end
module_7_upvr.prototype._finally = function(arg1, arg2, arg3) -- Line 1458, Named "_finally"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	return module_7_upvr._new(arg2, function(arg1_20, arg2_7, arg3_4) -- Line 1461
		--[[ Upvalues[3]:
			[1]: arg1 (readonly)
			[2]: arg3 (readonly)
			[3]: module_7_upvr (copied, readonly)
		]]
		local var367_upvw
		arg3_4(function() -- Line 1464
			--[[ Upvalues[2]:
				[1]: arg1 (copied, readonly)
				[2]: var367_upvw (read and write)
			]]
			arg1:_consumerCancelled(arg1)
			if var367_upvw then
				var367_upvw:cancel()
			end
		end)
		local var370
		if arg3 then
			function var370(...) -- Line 1477
				--[[ Upvalues[6]:
					[1]: arg3 (copied, readonly)
					[2]: module_7_upvr (copied, readonly)
					[3]: var367_upvw (read and write)
					[4]: arg1_20 (readonly)
					[5]: arg1 (copied, readonly)
					[6]: arg2_7 (readonly)
				]]
				local arg3_result1 = arg3(...)
				if module_7_upvr.is(arg3_result1) then
					var367_upvw = arg3_result1
					arg3_result1:finally(function(arg1_21) -- Line 1484
						--[[ Upvalues[3]:
							[1]: module_7_upvr (copied, readonly)
							[2]: arg1_20 (copied, readonly)
							[3]: arg1 (copied, readonly)
						]]
						if arg1_21 ~= module_7_upvr.Status.Rejected then
							arg1_20(arg1)
						end
					end):catch(function(...) -- Line 1489
						--[[ Upvalues[1]:
							[1]: arg2_7 (copied, readonly)
						]]
						arg2_7(...)
					end)
				else
					arg1_20(arg1)
				end
			end
		end
		if arg1._status == module_7_upvr.Status.Started then
			table.insert(arg1._queuedFinally, var370)
		else
			var370(arg1._status)
		end
	end)
end
module_7_upvr.prototype.finally = function(arg1, arg2) -- Line 1559, Named "finally"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 14 start (CF ANALYSIS FAILED)
	local getmetatable_result1_6 = getmetatable(arg2)
	local var375
	if getmetatable_result1_6 and type(rawget(getmetatable_result1_6, "__call")) == "function" then
		var375 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var375 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 12 start (CF ANALYSIS FAILED)
	assert(var375, string.format("Please pass a handler function to %s!", "Promise:finally"))
	do
		return arg1:_finally(debug.traceback(nil, 2), arg2)
	end
	-- KONSTANTERROR: [41] 32. Error Block 12 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.finallyCall = function(arg1, arg2, ...) -- Line 1573, Named "finallyCall"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 end (CF ANALYSIS FAILED)
end
module_7_upvr.prototype.finallyReturn = function(arg1, ...) -- Line 1599, Named "finallyReturn"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	local pack_result1_upvr_2, pack_result2_5_upvr = pack_upvr(...)
	return arg1:_finally(debug.traceback(nil, 2), function() -- Line 1601
		--[[ Upvalues[2]:
			[1]: pack_result2_5_upvr (readonly)
			[2]: pack_result1_upvr_2 (readonly)
		]]
		return unpack(pack_result2_5_upvr, 1, pack_result1_upvr_2)
	end)
end
module_7_upvr.prototype.awaitStatus = function(arg1) -- Line 1613, Named "awaitStatus"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	if arg1._status == module_7_upvr.Status.Started then
		local current_thread_upvr = coroutine.running()
		arg1:finally(function() -- Line 1620
			--[[ Upvalues[1]:
				[1]: current_thread_upvr (readonly)
			]]
			task.spawn(current_thread_upvr)
		end):catch(function() -- Line 1626
		end)
		coroutine.yield()
	end
	current_thread_upvr = arg1._status
	if current_thread_upvr == module_7_upvr.Status.Resolved then
		current_thread_upvr = arg1._status
		return current_thread_upvr, unpack(arg1._values, 1, arg1._valuesLength)
	end
	current_thread_upvr = arg1._status
	if current_thread_upvr == module_7_upvr.Status.Rejected then
		current_thread_upvr = arg1._status
		return current_thread_upvr, unpack(arg1._values, 1, arg1._valuesLength)
	end
	current_thread_upvr = arg1._status
	return current_thread_upvr
end
local function awaitHelper_upvr(arg1, ...) -- Line 1641, Named "awaitHelper"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local var382
	if arg1 ~= module_7_upvr.Status.Resolved then
		var382 = false
	else
		var382 = true
	end
	return var382, ...
end
module_7_upvr.prototype.await = function(arg1) -- Line 1666, Named "await"
	--[[ Upvalues[1]:
		[1]: awaitHelper_upvr (readonly)
	]]
	return awaitHelper_upvr(arg1:awaitStatus())
end
local function expectHelper_upvr(arg1, ...) -- Line 1670, Named "expectHelper"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local Status = module_7_upvr.Status
	if arg1 ~= Status.Resolved then
		if ... == nil then
			Status = "Expected Promise rejected with no value."
		else
			Status = ...
		end
		error(Status, 3)
	end
	return ...
end
module_7_upvr.prototype.expect = function(arg1) -- Line 1703, Named "expect"
	--[[ Upvalues[1]:
		[1]: expectHelper_upvr (readonly)
	]]
	return expectHelper_upvr(arg1:awaitStatus())
end
module_7_upvr.prototype.awaitValue = module_7_upvr.prototype.expect
module_7_upvr.prototype._unwrap = function(arg1) -- Line 1717, Named "_unwrap"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local var384
	if var384 == module_7_upvr.Status.Started then
		var384 = error
		var384("Promise has not resolved or rejected.", 2)
	end
	if arg1._status ~= module_7_upvr.Status.Resolved then
		var384 = false
	else
		var384 = true
	end
	return var384, unpack(arg1._values, 1, arg1._valuesLength)
end
module_7_upvr.prototype._resolve = function(arg1, ...) -- Line 1727, Named "_resolve"
	--[[ Upvalues[3]:
		[1]: module_7_upvr (readonly)
		[2]: var15_upvw (read and write)
		[3]: pack_upvr (readonly)
	]]
	if arg1._status ~= module_7_upvr.Status.Started then
		if module_7_upvr.is(...) then
			...:_consumerCancelled(arg1)
		end
	else
		if module_7_upvr.is(...) then
			if 1 < select('#', ...) then
				warn(string.format("When returning a Promise from andThen, extra arguments are ".."discarded! See:\n\n%s", arg1._source))
			end
			local var387_upvr = ...
			local any_andThen_result1 = var387_upvr:andThen(function(...) -- Line 1748
				--[[ Upvalues[1]:
					[1]: arg1 (readonly)
				]]
				arg1:_resolve(...)
			end, function(...) -- Line 1750
				--[[ Upvalues[3]:
					[1]: var387_upvr (readonly)
					[2]: var15_upvw (copied, read and write)
					[3]: arg1 (readonly)
				]]
				local _1 = var387_upvr._values[1]
				if var387_upvr._error then
					_1 = var15_upvw.new({
						error = var387_upvr._error;
						kind = var15_upvw.Kind.ExecutionError;
						context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]";
					})
				end
				if var15_upvw.isKind(_1, var15_upvw.Kind.ExecutionError) then
					return arg1:_reject(_1:extend({
						error = "This Promise was chained to a Promise that errored.";
						trace = "";
						context = string.format("The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n", arg1._source);
					}))
				end
				arg1:_reject(...)
			end)
			if any_andThen_result1._status == module_7_upvr.Status.Cancelled then
				arg1:cancel()
			elseif any_andThen_result1._status == module_7_upvr.Status.Started then
				arg1._parent = any_andThen_result1
				any_andThen_result1._consumers[arg1] = true
			end
		end
		var387_upvr = module_7_upvr.Status.Resolved
		arg1._status = var387_upvr
		var387_upvr = pack_upvr(...)
		local pack_result1_2, pack_result2 = pack_upvr(...)
		arg1._valuesLength = pack_result1_2
		arg1._values = pack_result2
		pack_result1_2 = ipairs(arg1._queuedResolve)
		local ipairs_result1_11, ipairs_result2_2, ipairs_result3_6 = ipairs(arg1._queuedResolve)
		for _, v_21 in ipairs_result1_11, ipairs_result2_2, ipairs_result3_6 do
			coroutine.wrap(v_21)(...)
		end
		ipairs_result1_11 = arg1:_finalize
		ipairs_result1_11()
	end
end
module_7_upvr.prototype._reject = function(arg1, ...) -- Line 1798, Named "_reject"
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: pack_upvr (readonly)
	]]
	if arg1._status ~= module_7_upvr.Status.Started then
	else
		arg1._status = module_7_upvr.Status.Rejected
		local pack_result1, pack_upvr_result2 = pack_upvr(...)
		arg1._valuesLength = pack_result1
		arg1._values = pack_upvr_result2
		if next(arg1._queuedReject) ~= nil then
			pack_result1 = false
		else
			pack_result1 = true
		end
		if not pack_result1 then
			for _, v_22 in ipairs(arg1._queuedReject) do
				coroutine.wrap(v_22)(...)
			end
		else
			local tostring_result1_upvr = tostring(...)
			coroutine.wrap(function() -- Line 1820
				--[[ Upvalues[3]:
					[1]: module_7_upvr (copied, readonly)
					[2]: arg1 (readonly)
					[3]: tostring_result1_upvr (readonly)
				]]
				module_7_upvr._timeEvent:Wait()
				if not arg1._unhandledRejection then
				else
					for _, v_23 in ipairs(module_7_upvr._unhandledRejectionCallbacks) do
						task.spawn(v_23, arg1, unpack(arg1._values, 1, arg1._valuesLength))
					end
					if module_7_upvr.TEST then return end
					warn(string.format("Unhandled Promise rejection:\n\n%s\n\n%s", tostring_result1_upvr, arg1._source))
				end
			end)()
		end
		tostring_result1_upvr = arg1:_finalize
		tostring_result1_upvr()
	end
end
module_7_upvr.prototype._finalize = function(arg1) -- Line 1852, Named "_finalize"
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	for _, v_15 in ipairs(arg1._queuedFinally) do
		coroutine.wrap(v_15)(arg1._status)
	end
	arg1._queuedFinally = nil
	arg1._queuedReject = nil
	arg1._queuedResolve = nil
	if not module_7_upvr.TEST then
		arg1._parent = nil
		arg1._consumers = nil
	end
	task.defer(coroutine.close, arg1._thread)
end
module_7_upvr.prototype.now = function(arg1, arg2) -- Line 1889, Named "now"
	--[[ Upvalues[2]:
		[1]: module_7_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local call_stack = debug.traceback(nil, 2)
	local var421
	if arg1._status == var421 then
		return arg1:_andThen(call_stack, function(...) -- Line 1892
			return ...
		end)
	end
	var421 = module_7_upvr
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var421 = var421(tbl_4)
		tbl_4.context = ":now() was called at:\n\n"..call_stack
		tbl_4.error = "This Promise was not resolved in time for :now()"
		tbl_4.kind = var15_upvw.Kind.NotResolvedInTime
		local tbl_4 = {}
		var421 = var15_upvw.new
		return var421
	end
	if arg2 ~= nil or not INLINED_2() then
		var421 = arg2
	end
	return var421.reject(var421)
end
function module_7_upvr.retry(arg1, arg2, ...) -- Line 1934
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 17 end (CF ANALYSIS FAILED)
end
function module_7_upvr.retryWithDelay(arg1, arg2, arg3, ...) -- Line 1962
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 22 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 22 end (CF ANALYSIS FAILED)
end
function module_7_upvr.fromEvent(arg1, arg2) -- Line 2004
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	local var425_upvw = arg2
	if not var425_upvw then
		function var425_upvw() -- Line 2005
			return true
		end
	end
	return module_7_upvr._new(debug.traceback(nil, 2), function(arg1_22, arg2_8, arg3) -- Line 2009
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: var425_upvw (read and write)
		]]
		local var427_upvw
		local var428_upvw = false
		local function disconnect() -- Line 2013
			--[[ Upvalues[1]:
				[1]: var427_upvw (read and write)
			]]
			var427_upvw:Disconnect()
			var427_upvw = nil
		end
		var427_upvw = arg1:Connect(function(...) -- Line 2022
			--[[ Upvalues[4]:
				[1]: var425_upvw (copied, read and write)
				[2]: arg1_22 (readonly)
				[3]: var427_upvw (read and write)
				[4]: var428_upvw (read and write)
			]]
			local var425_result1 = var425_upvw(...)
			if var425_result1 == true then
				arg1_22(...)
				if var427_upvw then
					var427_upvw:Disconnect()
					var427_upvw = nil
				else
					var428_upvw = true
				end
			end
			if type(var425_result1) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)
		if var428_upvw then
			if var427_upvw then
				return disconnect()
			end
		end
		arg3(disconnect)
	end)
end
function module_7_upvr.onUnhandledRejection(arg1) -- Line 2056
	--[[ Upvalues[1]:
		[1]: module_7_upvr (readonly)
	]]
	table.insert(module_7_upvr._unhandledRejectionCallbacks, arg1)
	return function() -- Line 2059
		--[[ Upvalues[2]:
			[1]: module_7_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local table_find_result1 = table.find(module_7_upvr._unhandledRejectionCallbacks, arg1)
		if table_find_result1 then
			table.remove(module_7_upvr._unhandledRejectionCallbacks, table_find_result1)
		end
	end
end
return module_7_upvr

-- ReplicatedStorage.Packages._Index.evaera_promise@4.0.0.promise.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:29
-- Luau version 6, Types version 3
-- Time taken: 0.054428 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	Parent_upvr.TEST = true
	local BindableEvent_upvr_5 = Instance.new("BindableEvent")
	Parent_upvr._timeEvent = BindableEvent_upvr_5.Event
	local var4_upvw = 0
	function Parent_upvr._getTime() -- Line 12
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		return var4_upvw
	end
	local function advanceTime_upvw(arg1) -- Line 16, Named "advanceTime"
		--[[ Upvalues[2]:
			[1]: var4_upvw (read and write)
			[2]: BindableEvent_upvr_5 (readonly)
		]]
		local var6 = arg1 or (1/60)
		var4_upvw += var6
		BindableEvent_upvr_5:Fire(var6)
	end
	local function pack_upvr(...) -- Line 24, Named "pack"
		return select('#', ...), {...}
	end
	describe("Promise.Status", function() -- Line 30
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should error if indexing nil value", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 32
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
			end).to.throw()
		end)
	end)
	describe("Unhandled rejection signal", function() -- Line 38
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should call unhandled rejection callbacks", function() -- Line 39
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var14_upvw = 0
			local any_new_result1_30_upvr = Parent_upvr.new(function(arg1, arg2) -- Line 40
				arg2(1, 2)
			end)
			advanceTime_upvw()
			expect(var14_upvw).to.equal(1)
			Parent_upvr.onUnhandledRejection(function(arg1, arg2, arg3) -- Line 46, Named "callback"
				--[[ Upvalues[2]:
					[1]: var14_upvw (read and write)
					[2]: any_new_result1_30_upvr (readonly)
				]]
				var14_upvw += 1
				expect(arg1).to.equal(any_new_result1_30_upvr)
				expect(arg2).to.equal(1)
				expect(arg3).to.equal(2)
			end)()
			Parent_upvr.new(function(arg1, arg2) -- Line 62
				arg2(3, 4)
			end)
			advanceTime_upvw()
			expect(var14_upvw).to.equal(1)
		end)
	end)
	describe("Promise.new", function() -- Line 72
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should instantiate with a callback", function() -- Line 73
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.new(function() -- Line 74
			end)).to.be.ok()
		end)
		it("should invoke the given callback with resolve and reject", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var21_upvw = 0
			local var22_upvw
			local var23_upvw
			local any_new_result1_8 = Parent_upvr.new(function(arg1, arg2) -- Line 84
				--[[ Upvalues[3]:
					[1]: var21_upvw (read and write)
					[2]: var22_upvw (read and write)
					[3]: var23_upvw (read and write)
				]]
				var21_upvw += 1
				var22_upvw = arg1
				var23_upvw = arg2
			end)
			expect(any_new_result1_8).to.be.ok()
			expect(var21_upvw).to.equal(1)
			expect(var22_upvw).to.be.a("function")
			expect(var23_upvw).to.be.a("function")
			expect(any_new_result1_8:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		it("should resolve promises on resolve()", function() -- Line 98
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var27_upvw = 0
			local any_new_result1_27 = Parent_upvr.new(function(arg1) -- Line 101
				--[[ Upvalues[1]:
					[1]: var27_upvw (read and write)
				]]
				var27_upvw += 1
				arg1()
			end)
			expect(any_new_result1_27).to.be.ok()
			expect(var27_upvw).to.equal(1)
			expect(any_new_result1_27:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should reject promises on reject()", function() -- Line 111
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var31_upvw = 0
			local any_new_result1_6 = Parent_upvr.new(function(arg1, arg2) -- Line 114
				--[[ Upvalues[1]:
					[1]: var31_upvw (read and write)
				]]
				var31_upvw += 1
				arg2()
			end)
			expect(any_new_result1_6).to.be.ok()
			expect(var31_upvw).to.equal(1)
			expect(any_new_result1_6:getStatus()).to.equal(Parent_upvr.Status.Rejected)
		end)
		it("should reject on error in callback", function() -- Line 124
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var35_upvw = 0
			local any_new_result1_12 = Parent_upvr.new(function() -- Line 127
				--[[ Upvalues[1]:
					[1]: var35_upvw (read and write)
				]]
				var35_upvw += 1
				error("hahah")
			end)
			expect(any_new_result1_12).to.be.ok()
			expect(var35_upvw).to.equal(1)
			expect(any_new_result1_12:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_new_result1_12._values[1]):find("hahah")).to.be.ok()
			expect(tostring(any_new_result1_12._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(any_new_result1_12._values[1]):find("runExecutor")).to.be.ok()
		end)
		it("should work with C functions", function() -- Line 142
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 143
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new(tick):andThen(tick)
			end).to.never.throw()
		end)
		it("should have a nice tostring", function() -- Line 148
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(tostring(Parent_upvr.resolve()):gmatch("Promise(Resolved)")).to.be.ok()
		end)
		it("should allow yielding", function() -- Line 152
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr = Instance.new("BindableEvent")
			local any_new_result1_5 = Parent_upvr.new(function(arg1) -- Line 154
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr (readonly)
				]]
				BindableEvent_upvr.Event:Wait()
				arg1(5)
			end)
			expect(any_new_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr:Fire()
			expect(any_new_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_5._values[1]).to.equal(5)
		end)
		it("should preserve stack traces of resolve-chained promises", function() -- Line 165
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local function _(arg1) -- Line 166, Named "nestedCall"
				error(arg1)
			end
			local any_new_result1_11 = Parent_upvr.new(function(arg1) -- Line 170
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				arg1(Parent_upvr.new(function() -- Line 171
					error("sample text")
				end))
			end)
			expect(any_new_result1_11:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local tostring_result1 = tostring(any_new_result1_11._values[1])
			expect(tostring_result1:find("sample text")).to.be.ok()
			expect(tostring_result1:find("nestedCall")).to.be.ok()
			expect(tostring_result1:find("runExecutor")).to.be.ok()
			expect(tostring_result1:find("runPlanNode")).to.be.ok()
			expect(tostring_result1:find("...Rejected because it was chained to the following Promise, which encountered an error:")).to.be.ok()
		end)
		it("should report errors from Promises with _error (< v2)", function() -- Line 188
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_reject_result1_2 = Parent_upvr.reject()
			any_reject_result1_2._error = "Sample error"
			local any_andThenReturn_result1 = Parent_upvr.resolve():andThenReturn(any_reject_result1_2)
			expect(any_andThenReturn_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local tostring_result1_2 = tostring(any_andThenReturn_result1._values[1])
			expect(tostring_result1_2:find("Sample error")).to.be.ok()
			expect(tostring_result1_2:find("...Rejected because it was chained to the following Promise, which encountered an error:")).to.be.ok()
			expect(tostring_result1_2:find("%[No stack trace available")).to.be.ok()
		end)
		it("should allow callable tables", function() -- Line 204
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_16 = {}
			local function __call(arg1, arg2) -- Line 206
				arg2(1)
			end
			tbl_16.__call = __call
			local var56_upvw = false
			Parent_upvr.new(setmetatable({}, tbl_16)):andThen(setmetatable({}, {
				__call = function(arg1, arg2) -- Line 213, Named "__call"
					--[[ Upvalues[1]:
						[1]: var56_upvw (read and write)
					]]
					expect(arg2).to.equal(1)
					var56_upvw = true
				end;
			}))
			expect(var56_upvw).to.equal(true)
		end)
		itSKIP("should close the thread after resolve", function() -- Line 222
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var59_upvw = 0
			Parent_upvr.new(function(arg1) -- Line 224
				--[[ Upvalues[2]:
					[1]: var59_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var59_upvw += 1
				arg1()
				Parent_upvr.delay(1):await()
				var59_upvw += 1
			end)
			task.wait(1)
			expect(var59_upvw).to.equal(1)
		end)
	end)
	describe("Promise.defer", function() -- Line 237
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should execute after the time event", function() -- Line 238
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var63_upvw = 0
			local any_defer_result1 = Parent_upvr.defer(function(arg1, arg2, arg3, arg4) -- Line 240
				--[[ Upvalues[1]:
					[1]: var63_upvw (read and write)
				]]
				expect(type(arg1)).to.equal("function")
				expect(type(arg2)).to.equal("function")
				expect(type(arg3)).to.equal("function")
				expect(type(arg4)).to.equal("nil")
				var63_upvw += 1
				arg1("foo")
			end)
			expect(var63_upvw).to.equal(0)
			expect(any_defer_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(var63_upvw).to.equal(1)
			expect(any_defer_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			advanceTime_upvw()
			expect(var63_upvw).to.equal(1)
		end)
	end)
	describe("Promise.delay", function() -- Line 263
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should schedule promise resolution", function() -- Line 264
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_delay_result1 = Parent_upvr.delay(1)
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(1)
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should allow for delays to be cancelled", function() -- Line 276
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_delay_result1_upvr = Parent_upvr.delay(2)
			Parent_upvr.delay(1):andThen(function() -- Line 279
				--[[ Upvalues[1]:
					[1]: any_delay_result1_upvr (readonly)
				]]
				any_delay_result1_upvr:cancel()
			end)
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(1)
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			advanceTime_upvw(1)
		end)
	end)
	describe("Promise.resolve", function() -- Line 292
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should immediately resolve with a value", function() -- Line 293
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1_2 = Parent_upvr.resolve(5, 6)
			expect(any_resolve_result1_2).to.be.ok()
			expect(any_resolve_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_resolve_result1_2._values[1]).to.equal(5)
			expect(any_resolve_result1_2._values[2]).to.equal(6)
		end)
		it("should chain onto passed promises", function() -- Line 302
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1 = Parent_upvr.resolve(Parent_upvr.new(function(arg1, arg2) -- Line 303
				arg2(7)
			end))
			expect(any_resolve_result1).to.be.ok()
			expect(any_resolve_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_resolve_result1._values[1]).to.equal(7)
		end)
	end)
	describe("Promise.reject", function() -- Line 313
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should immediately reject with a value", function() -- Line 314
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_reject_result1_5 = Parent_upvr.reject(6, 7)
			expect(any_reject_result1_5).to.be.ok()
			expect(any_reject_result1_5:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1_5._values[1]).to.equal(6)
			expect(any_reject_result1_5._values[2]).to.equal(7)
		end)
		it("should pass a promise as-is as an error", function() -- Line 323
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_15 = Parent_upvr.new(function(arg1) -- Line 324
				arg1(6)
			end)
			local any_reject_result1_3 = Parent_upvr.reject(any_new_result1_15)
			expect(any_reject_result1_3).to.be.ok()
			expect(any_reject_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1_3._values[1]).to.equal(any_new_result1_15)
		end)
	end)
	describe("Promise:andThen", function() -- Line 336
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: pack_upvr (readonly)
		]]
		it("should allow yielding", function() -- Line 337
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr_4 = Instance.new("BindableEvent")
			local any_andThen_result1_4 = Parent_upvr.resolve():andThen(function() -- Line 339
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_4 (readonly)
				]]
				BindableEvent_upvr_4.Event:Wait()
				return 5
			end)
			expect(any_andThen_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr_4:Fire()
			expect(any_andThen_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_andThen_result1_4._values[1]).to.equal(5)
		end)
		it("should run andThens on a new thread", function() -- Line 350
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var91_upvw
			local any_new_result1_29 = Parent_upvr.new(function(arg1) -- Line 354
				--[[ Upvalues[1]:
					[1]: var91_upvw (read and write)
				]]
				var91_upvw = arg1
			end)
			local BindableEvent_upvr_3 = Instance.new("BindableEvent")
			local any_andThen_result1 = any_new_result1_29:andThen(function() -- Line 363
				return "foo"
			end)
			expect(any_new_result1_29:getStatus()).to.equal(Parent_upvr.Status.Started)
			var91_upvw()
			expect(any_andThen_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_andThen_result1._values[1]).to.equal("foo")
			expect(any_new_result1_29:andThen(function() -- Line 358
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_3 (readonly)
				]]
				BindableEvent_upvr_3.Event:Wait()
				return 5
			end):getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		it("should chain onto resolved promises", function() -- Line 374
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var99_upvw
			local var100_upvw
			local var101_upvw = 0
			local var102_upvw = 0
			local any_resolve_result1_3 = Parent_upvr.resolve(5)
			local any_andThen_result1_5 = any_resolve_result1_3:andThen(function(...) -- Line 382
				--[[ Upvalues[4]:
					[1]: var100_upvw (read and write)
					[2]: var99_upvw (read and write)
					[3]: pack_upvr (copied, readonly)
					[4]: var101_upvw (read and write)
				]]
				local pack_result1_4, pack_result2_3 = pack_upvr(...)
				var100_upvw = pack_result1_4
				var99_upvw = pack_result2_3
				var101_upvw += 1
			end, function() -- Line 385
				--[[ Upvalues[1]:
					[1]: var102_upvw (read and write)
				]]
				var102_upvw += 1
			end)
			expect(var102_upvw).to.equal(0)
			expect(var101_upvw).to.equal(1)
			expect(var100_upvw).to.equal(1)
			expect(var99_upvw[1]).to.equal(5)
			expect(any_resolve_result1_3).to.be.ok()
			expect(any_resolve_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_resolve_result1_3._values[1]).to.equal(5)
			expect(any_andThen_result1_5).to.be.ok()
			expect(any_andThen_result1_5).never.to.equal(any_resolve_result1_3)
			expect(any_andThen_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_5._values).to.equal(0)
		end)
		it("should chain onto rejected promises", function() -- Line 405
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var110_upvw
			local var111_upvw
			local var112_upvw = 0
			local var113_upvw = 0
			local any_reject_result1 = Parent_upvr.reject(5)
			local any_andThen_result1_12 = any_reject_result1:andThen(function(...) -- Line 413
				--[[ Upvalues[1]:
					[1]: var113_upvw (read and write)
				]]
				var113_upvw += 1
			end, function(...) -- Line 415
				--[[ Upvalues[4]:
					[1]: var111_upvw (read and write)
					[2]: var110_upvw (read and write)
					[3]: pack_upvr (copied, readonly)
					[4]: var112_upvw (read and write)
				]]
				local pack_result1_3, pack_result2_5 = pack_upvr(...)
				var111_upvw = pack_result1_3
				var110_upvw = pack_result2_5
				var112_upvw += 1
			end)
			expect(var113_upvw).to.equal(0)
			expect(var112_upvw).to.equal(1)
			expect(var111_upvw).to.equal(1)
			expect(var110_upvw[1]).to.equal(5)
			expect(any_reject_result1).to.be.ok()
			expect(any_reject_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1._values[1]).to.equal(5)
			expect(any_andThen_result1_12).to.be.ok()
			expect(any_andThen_result1_12).never.to.equal(any_reject_result1)
			expect(any_andThen_result1_12:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_12._values).to.equal(0)
		end)
		it("should reject on error in callback", function() -- Line 436
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var121_upvw = 0
			local any_andThen_result1_9 = Parent_upvr.resolve(1):andThen(function() -- Line 439
				--[[ Upvalues[1]:
					[1]: var121_upvw (read and write)
				]]
				var121_upvw += 1
				error("hahah")
			end)
			expect(any_andThen_result1_9).to.be.ok()
			expect(var121_upvw).to.equal(1)
			expect(any_andThen_result1_9:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_andThen_result1_9._values[1]):find("hahah")).to.be.ok()
			expect(tostring(any_andThen_result1_9._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(any_andThen_result1_9._values[1]):find("runExecutor")).to.be.ok()
		end)
		it("should chain onto asynchronously resolved promises", function() -- Line 454
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var125_upvw
			local var126_upvw
			local var127_upvw = 0
			local var128_upvw = 0
			local var129_upvw
			local any_new_result1_33 = Parent_upvr.new(function(arg1) -- Line 461
				--[[ Upvalues[1]:
					[1]: var129_upvw (read and write)
				]]
				var129_upvw = arg1
			end)
			local any_andThen_result1_7 = any_new_result1_33:andThen(function(...) -- Line 465
				--[[ Upvalues[3]:
					[1]: var125_upvw (read and write)
					[2]: var126_upvw (read and write)
					[3]: var127_upvw (read and write)
				]]
				var125_upvw = {...}
				var126_upvw = select('#', ...)
				var127_upvw += 1
			end, function() -- Line 469
				--[[ Upvalues[1]:
					[1]: var128_upvw (read and write)
				]]
				var128_upvw += 1
			end)
			expect(var127_upvw).to.equal(0)
			expect(var128_upvw).to.equal(0)
			var129_upvw(6)
			expect(var128_upvw).to.equal(0)
			expect(var127_upvw).to.equal(1)
			expect(var126_upvw).to.equal(1)
			expect(var125_upvw[1]).to.equal(6)
			expect(any_new_result1_33).to.be.ok()
			expect(any_new_result1_33:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_33._values[1]).to.equal(6)
			expect(any_andThen_result1_7).to.be.ok()
			expect(any_andThen_result1_7).never.to.equal(any_new_result1_33)
			expect(any_andThen_result1_7:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_7._values).to.equal(0)
		end)
		it("should chain onto asynchronously rejected promises", function() -- Line 494
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var137_upvw
			local var138_upvw
			local var139_upvw = 0
			local var140_upvw = 0
			local var141_upvw
			local any_new_result1_13 = Parent_upvr.new(function(arg1, arg2) -- Line 501
				--[[ Upvalues[1]:
					[1]: var141_upvw (read and write)
				]]
				var141_upvw = arg2
			end)
			local any_andThen_result1_2 = any_new_result1_13:andThen(function() -- Line 505
				--[[ Upvalues[1]:
					[1]: var140_upvw (read and write)
				]]
				var140_upvw += 1
			end, function(...) -- Line 507
				--[[ Upvalues[3]:
					[1]: var137_upvw (read and write)
					[2]: var138_upvw (read and write)
					[3]: var139_upvw (read and write)
				]]
				var137_upvw = {...}
				var138_upvw = select('#', ...)
				var139_upvw += 1
			end)
			expect(var139_upvw).to.equal(0)
			expect(var140_upvw).to.equal(0)
			var141_upvw(6)
			expect(var140_upvw).to.equal(0)
			expect(var139_upvw).to.equal(1)
			expect(var138_upvw).to.equal(1)
			expect(var137_upvw[1]).to.equal(6)
			expect(any_new_result1_13).to.be.ok()
			expect(any_new_result1_13:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_13._values[1]).to.equal(6)
			expect(any_andThen_result1_2).to.be.ok()
			expect(any_andThen_result1_2).never.to.equal(any_new_result1_13)
			expect(any_andThen_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_2._values).to.equal(0)
		end)
		it("should propagate errors through multiple levels", function() -- Line 534
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var149_upvw
			local var150_upvw
			local var151_upvw
			Parent_upvr.new(function(arg1, arg2) -- Line 536
				arg2(1, 2, 3)
			end):andThen(function() -- Line 538
			end):catch(function(arg1, arg2, arg3) -- Line 538
				--[[ Upvalues[3]:
					[1]: var149_upvw (read and write)
					[2]: var150_upvw (read and write)
					[3]: var151_upvw (read and write)
				]]
				var149_upvw = arg1
				var150_upvw = arg2
				var151_upvw = arg3
			end)
			expect(var149_upvw).to.equal(1)
			expect(var150_upvw).to.equal(2)
			expect(var151_upvw).to.equal(3)
		end)
		it("should not call queued callbacks from a cancelled sub-promise", function() -- Line 547
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var156_upvw
			local var157_upvw = 0
			local any_new_result1_26 = Parent_upvr.new(function(arg1) -- Line 551
				--[[ Upvalues[1]:
					[1]: var156_upvw (read and write)
				]]
				var156_upvw = arg1
			end)
			any_new_result1_26:andThen(function() -- Line 555
				--[[ Upvalues[1]:
					[1]: var157_upvw (read and write)
				]]
				var157_upvw += 1
			end)
			any_new_result1_26:andThen(function() -- Line 560
				--[[ Upvalues[1]:
					[1]: var157_upvw (read and write)
				]]
				var157_upvw += 1
			end):cancel()
			var156_upvw("foo")
			expect(var157_upvw).to.equal(1)
		end)
	end)
	describe("Promise:cancel", function() -- Line 571
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should mark promises as cancelled and not resolve or reject them", function() -- Line 572
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var164_upvw = 0
			local var165_upvw = 0
			local any_finally_result1_3 = Parent_upvr.new(function() -- Line 575
			end):andThen(function() -- Line 576
				--[[ Upvalues[1]:
					[1]: var164_upvw (read and write)
				]]
				var164_upvw += 1
			end):finally(function() -- Line 579
				--[[ Upvalues[1]:
					[1]: var165_upvw (read and write)
				]]
				var165_upvw += 1
			end)
			any_finally_result1_3:cancel()
			any_finally_result1_3:cancel()
			expect(var164_upvw).to.equal(0)
			expect(var165_upvw).to.equal(1)
			expect(any_finally_result1_3:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should call the cancellation hook once", function() -- Line 591
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var171_upvw = 0
			local any_new_result1_28 = Parent_upvr.new(function(arg1, arg2, arg3) -- Line 594
				--[[ Upvalues[1]:
					[1]: var171_upvw (read and write)
				]]
				arg3(function() -- Line 595
					--[[ Upvalues[1]:
						[1]: var171_upvw (copied, read and write)
					]]
					var171_upvw += 1
				end)
			end)
			any_new_result1_28:cancel()
			any_new_result1_28:cancel()
			expect(var171_upvw).to.equal(1)
		end)
		it("should propagate cancellations", function() -- Line 606
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_20 = Parent_upvr.new(function() -- Line 607
			end)
			local any_andThen_result1_11 = any_new_result1_20:andThen()
			local any_andThen_result1_6 = any_new_result1_20:andThen()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Started)
			any_andThen_result1_11:cancel()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Started)
			any_andThen_result1_6:cancel()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should affect downstream promises", function() -- Line 629
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_16 = Parent_upvr.new(function() -- Line 630
			end)
			any_new_result1_16:cancel()
			expect(any_new_result1_16:andThen():getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should track consumers", function() -- Line 638
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1_4 = Parent_upvr.resolve()
			local any_new_result1_2_upvr = Parent_upvr.new(function() -- Line 639
			end)
			local any_andThen_result1_8_upvr = any_resolve_result1_4:andThen(function() -- Line 641
				--[[ Upvalues[1]:
					[1]: any_new_result1_2_upvr (readonly)
				]]
				return any_new_result1_2_upvr
			end)
			local any_new_result1_10 = Parent_upvr.new(function(arg1) -- Line 644
				--[[ Upvalues[1]:
					[1]: any_andThen_result1_8_upvr (readonly)
				]]
				arg1(any_andThen_result1_8_upvr)
			end)
			local any_andThen_result1_10 = any_new_result1_10:andThen(function() -- Line 647
			end)
			expect(any_andThen_result1_8_upvr._parent).to.never.equal(any_resolve_result1_4)
			expect(any_new_result1_10._parent).to.never.equal(any_andThen_result1_8_upvr)
			expect(any_new_result1_10._consumers[any_andThen_result1_10]).to.be.ok()
			expect(any_andThen_result1_10._parent).to.equal(any_new_result1_10)
		end)
		it("should cancel resolved pending promises", function() -- Line 655
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_23_upvr = Parent_upvr.new(function() -- Line 656
			end)
			local any_finally_result1_4 = Parent_upvr.new(function(arg1) -- Line 658
				--[[ Upvalues[1]:
					[1]: any_new_result1_23_upvr (readonly)
				]]
				arg1(any_new_result1_23_upvr)
			end):finally(function() -- Line 660
			end)
			any_finally_result1_4:cancel()
			expect(any_new_result1_23_upvr._status).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_finally_result1_4._status).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should close the promise thread", function() -- Line 668
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var200_upvw = 0
			Parent_upvr.new(function() -- Line 670
				--[[ Upvalues[2]:
					[1]: var200_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var200_upvw += 1
				Parent_upvr.delay(1):await()
				var200_upvw += 1
			end):cancel()
			advanceTime_upvw(2)
			expect(var200_upvw).to.equal(1)
		end)
	end)
	describe("Promise:finally", function() -- Line 683
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be called upon resolve, reject, or cancel", function() -- Line 684
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var204_upvw = 0
			local function finally() -- Line 687
				--[[ Upvalues[1]:
					[1]: var204_upvw (read and write)
				]]
				var204_upvw += 1
			end
			Parent_upvr.new(function(arg1, arg2) -- Line 692
				arg1()
			end):finally(finally)
			Parent_upvr.resolve():andThen(function() -- Line 697
			end):finally(finally):finally(finally)
			Parent_upvr.reject():finally(finally)
			Parent_upvr.new(function() -- Line 702
			end):finally(finally):cancel()
			expect(var204_upvw).to.equal(5)
		end)
		it("should not forward return values", function() -- Line 708
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var209_upvw
			Parent_upvr.resolve(2):finally(function() -- Line 712
				return 1
			end):andThen(function(arg1) -- Line 715
				--[[ Upvalues[1]:
					[1]: var209_upvw (read and write)
				]]
				var209_upvw = arg1
			end)
			expect(var209_upvw).to.equal(2)
		end)
		it("should not consume rejections", function() -- Line 722
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var213_upvw = false
			local var214_upvw = false
			Parent_upvr.reject(5):finally(function() -- Line 726
				return 42
			end):andThen(function() -- Line 729
				--[[ Upvalues[1]:
					[1]: var214_upvw (read and write)
				]]
				var214_upvw = true
			end):catch(function(arg1) -- Line 732
				--[[ Upvalues[1]:
					[1]: var213_upvw (read and write)
				]]
				var213_upvw = true
				expect(arg1).to.equal(5)
			end)
			expect(var213_upvw).to.equal(true)
			expect(var214_upvw).to.equal(false)
		end)
		it("should wait for returned promises", function() -- Line 741
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var219_upvw
			local any_finally_result1_2 = Parent_upvr.reject("foo"):finally(function() -- Line 743
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var219_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1) -- Line 744
					--[[ Upvalues[1]:
						[1]: var219_upvw (copied, read and write)
					]]
					var219_upvw = arg1
				end)
			end)
			expect(any_finally_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var219_upvw()
			expect(any_finally_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local _, any__unwrap_result2_2 = any_finally_result1_2:_unwrap()
			expect(any__unwrap_result2_2).to.equal("foo")
		end)
		it("should reject with a returned rejected promise's value", function() -- Line 758
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var226_upvw
			local any_finally_result1 = Parent_upvr.reject("foo"):finally(function() -- Line 760
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var226_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1, arg2) -- Line 761
					--[[ Upvalues[1]:
						[1]: var226_upvw (copied, read and write)
					]]
					var226_upvw = arg2
				end)
			end)
			expect(any_finally_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			var226_upvw("bar")
			expect(any_finally_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local _, any__unwrap_result2_5 = any_finally_result1:_unwrap()
			expect(any__unwrap_result2_5).to.equal("bar")
		end)
		it("should reject when handler errors", function() -- Line 775
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_6_upvr = {}
			local any__unwrap_result1_3, any__unwrap_result2_8 = Parent_upvr.reject("bar"):finally(function() -- Line 777
				--[[ Upvalues[1]:
					[1]: tbl_6_upvr (readonly)
				]]
				error(tbl_6_upvr)
			end):_unwrap()
			expect(any__unwrap_result1_3).to.equal(false)
			expect(any__unwrap_result2_8).to.equal(tbl_6_upvr)
		end)
		it("should not prevent cancellation", function() -- Line 787
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_9 = Parent_upvr.new(function() -- Line 788
			end)
			local var240_upvw = false
			any_new_result1_9:finally(function() -- Line 791
				--[[ Upvalues[1]:
					[1]: var240_upvw (read and write)
				]]
				var240_upvw = true
			end)
			any_new_result1_9:andThen(function() -- Line 795
			end):cancel()
			expect(any_new_result1_9:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var240_upvw).to.equal(true)
		end)
		it("should propagate cancellation downwards", function() -- Line 803
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var244_upvw = false
			local any_new_result1_31 = Parent_upvr.new(function() -- Line 806
			end)
			any_new_result1_31:cancel()
			expect(any_new_result1_31:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_new_result1_31:finally(function() -- Line 808
				--[[ Upvalues[1]:
					[1]: var244_upvw (read and write)
				]]
				var244_upvw = true
			end):getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var244_upvw).to.equal(true)
			expect(false).to.equal(false)
		end)
		it("should propagate cancellation upwards", function() -- Line 821
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var249_upvw = false
			local any_new_result1_4 = Parent_upvr.new(function() -- Line 824
			end)
			local any_finally_result1_5 = any_new_result1_4:finally(function() -- Line 826
				--[[ Upvalues[1]:
					[1]: var249_upvw (read and write)
				]]
				var249_upvw = true
			end)
			any_finally_result1_5:cancel()
			expect(any_new_result1_4:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_finally_result1_5:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var249_upvw).to.equal(true)
			expect(false).to.equal(false)
		end)
		it("should cancel returned promise if cancelled", function() -- Line 839
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_7_upvr = Parent_upvr.new(function() -- Line 840
			end)
			Parent_upvr.resolve():finally(function() -- Line 842
				--[[ Upvalues[1]:
					[1]: any_new_result1_7_upvr (readonly)
				]]
				return any_new_result1_7_upvr
			end):cancel()
			expect(any_new_result1_7_upvr:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.all", function() -- Line 852
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: pack_upvr (readonly)
		]]
		it("should error if given something other than a table", function() -- Line 853
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 854
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all(1)
			end).to.throw()
		end)
		it("should resolve instantly with an empty table if given no promises", function() -- Line 859
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_all_result1 = Parent_upvr.all({})
			local any__unwrap_result1_4, any__unwrap_result2_6 = any_all_result1:_unwrap()
			expect(any__unwrap_result1_4).to.equal(true)
			expect(any_all_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any__unwrap_result2_6).to.be.a("table")
			expect(next(any__unwrap_result2_6)).to.equal(nil)
		end)
		it("should error if given non-promise values", function() -- Line 869
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 870
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all({{}, {}, {}})
			end).to.throw()
		end)
		it("should wait for all promises to be resolved and return their values", function() -- Line 875
			--[[ Upvalues[2]:
				[1]: pack_upvr (copied, readonly)
				[2]: Parent_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local tbl_3_upvr = {}
			local pack_result1_6, pack_result2_2_upvr = pack_upvr(1, "A string", nil, false)
			local tbl_18 = {}
			for i_upvr = 1, pack_result1_6 do
				tbl_18[i_upvr] = Parent_upvr.new(function(arg1) -- Line 883
					--[[ Upvalues[3]:
						[1]: tbl_3_upvr (readonly)
						[2]: i_upvr (readonly)
						[3]: pack_result2_2_upvr (readonly)
					]]
					local tbl = {}
					tbl[1] = arg1
					tbl[2] = pack_result2_2_upvr[i_upvr]
					tbl_3_upvr[i_upvr] = tbl
				end)
			end
			for _, v in ipairs(tbl_3_upvr) do
				expect(Parent_upvr.all(tbl_18):getStatus()).to.equal(Parent_upvr.Status.Started)
				v[1](v[2])
				local var295
			end
			local pack_result1_2, pack_result2_4 = pack_upvr(var295:_unwrap())
			local unpack_result1_3, unpack_result2_2 = unpack(pack_result2_4, 1, pack_result1_2)
			expect(pack_result1_2).to.equal(2)
			expect(unpack_result1_3).to.equal(true)
			expect(unpack_result2_2).to.be.a("table")
			expect(#unpack_result2_2).to.equal(#tbl_18)
			for i_3 = 1, pack_result1_6 do
				expect(unpack_result2_2[i_3]).to.equal(pack_result2_2_upvr[i_3])
				local _
			end
		end)
		it("should reject if any individual promise rejected", function() -- Line 908
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var302_upvw
			local var303_upvw
			local any_new_result1_21 = Parent_upvr.new(function(arg1) -- Line 916
				--[[ Upvalues[1]:
					[1]: var303_upvw (read and write)
				]]
				var303_upvw = arg1
			end)
			local any_all_result1_4 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 912
				--[[ Upvalues[1]:
					[1]: var302_upvw (read and write)
				]]
				var302_upvw = arg2
			end), any_new_result1_21})
			expect(any_all_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			var302_upvw("baz", "qux")
			var303_upvw("foo", "bar")
			local pack_result1_5, pack_result2_7 = pack_upvr(any_all_result1_4:_unwrap())
			local unpack_result1, unpack_result2_4, unpack_result3_2 = unpack(pack_result2_7, 1, pack_result1_5)
			expect(pack_result1_5).to.equal(3)
			expect(unpack_result1).to.equal(false)
			expect(unpack_result2_4).to.equal("baz")
			expect(unpack_result3_2).to.equal("qux")
			expect(any_new_result1_21:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should not resolve if resolved after rejecting", function() -- Line 937
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var315_upvw
			local var316_upvw
			local any_all_result1_2 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 941
				--[[ Upvalues[1]:
					[1]: var315_upvw (read and write)
				]]
				var315_upvw = arg2
			end), Parent_upvr.new(function(arg1) -- Line 945
				--[[ Upvalues[1]:
					[1]: var316_upvw (read and write)
				]]
				var316_upvw = arg1
			end)})
			expect(any_all_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var315_upvw("baz", "qux")
			var316_upvw("foo", "bar")
			local pack_result1_7, pack_result2 = pack_upvr(any_all_result1_2:_unwrap())
			local unpack_result1_2, unpack_result2_3, unpack_result3 = unpack(pack_result2, 1, pack_result1_7)
			expect(pack_result1_7).to.equal(3)
			expect(unpack_result1_2).to.equal(false)
			expect(unpack_result2_3).to.equal("baz")
			expect(unpack_result3).to.equal("qux")
		end)
		it("should only reject once", function() -- Line 965
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var327_upvw
			local var328_upvw
			local any_all_result1_3 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 969
				--[[ Upvalues[1]:
					[1]: var327_upvw (read and write)
				]]
				var327_upvw = arg2
			end), Parent_upvr.new(function(arg1, arg2) -- Line 973
				--[[ Upvalues[1]:
					[1]: var328_upvw (read and write)
				]]
				var328_upvw = arg2
			end)})
			expect(any_all_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			var327_upvw("foo", "bar")
			expect(any_all_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			var328_upvw("baz", "qux")
			local pack_result1, pack_result2_6 = pack_upvr(any_all_result1_3:_unwrap())
			local unpack_result1_4, unpack_result2, unpack_result3_3 = unpack(pack_result2_6, 1, pack_result1)
			expect(pack_result1).to.equal(3)
			expect(unpack_result1_4).to.equal(false)
			expect(unpack_result2).to.equal("foo")
			expect(unpack_result3_3).to.equal("bar")
		end)
		it("should error if a non-array table is passed in", function() -- Line 996
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local pcall_result1, pcall_result2_3 = pcall(function() -- Line 997
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all(Parent_upvr.new(function() -- Line 998
				end))
			end)
			expect(pcall_result1).to.be.ok()
			expect(pcall_result2_3:find("Non%-promise")).to.be.ok()
		end)
		it("should cancel pending promises if one rejects", function() -- Line 1005
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_14 = Parent_upvr.new(function() -- Line 1006
			end)
			expect(Parent_upvr.all({Parent_upvr.resolve(), Parent_upvr.reject(), any_new_result1_14}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_14:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1015
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_18 = Parent_upvr.new(function() -- Line 1016
			end)
			any_new_result1_18:andThen(function() -- Line 1017
			end)
			local tbl_17 = {Parent_upvr.new(function() -- Line 1020
			end), Parent_upvr.new(function() -- Line 1021
			end), any_new_result1_18}
			Parent_upvr.all(tbl_17):cancel()
			expect(tbl_17[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_17[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_17[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise.fold", function() -- Line 1033
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should return the initial value in a promise when the list is empty", function() -- Line 1034
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_2 = {}
			local any_fold_result1 = Parent_upvr.fold({}, function() -- Line 1036
				error("should not be called")
			end, tbl_2)
			expect(Parent_upvr.is(any_fold_result1)).to.equal(true)
			expect(any_fold_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1:expect()).to.equal(tbl_2)
		end)
		it("should accept promises in the list", function() -- Line 1045
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var360_upvw
			local any_fold_result1_5 = Parent_upvr.fold({Parent_upvr.new(function(arg1) -- Line 1048
				--[[ Upvalues[1]:
					[1]: var360_upvw (read and write)
				]]
				var360_upvw = arg1
			end), 2, 3}, function(arg1, arg2) -- Line 1050
				return arg1 + arg2
			end, 0)
			var360_upvw(1)
			expect(Parent_upvr.is(any_fold_result1_5)).to.equal(true)
			expect(any_fold_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1_5:expect()).to.equal(6)
		end)
		it("should always return a promise even if the list or reducer don't use them", function() -- Line 1061
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_fold_result1_3 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1062
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 2 then
					return Parent_upvr.delay(1):andThenReturn(arg1 + arg2)
				end
				return arg1 + arg2
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_3)).to.equal(true)
			expect(any_fold_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(2)
			expect(any_fold_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1_3:expect()).to.equal(6)
		end)
		it("should return the first rejected promise", function() -- Line 1076
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_fold_result1_4 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1078
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 2 then
					return Parent_upvr.reject("foo")
				end
				return arg1 + arg2
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_4)).to.equal(true)
			local any_awaitStatus_result1, any_awaitStatus_result2 = any_fold_result1_4:awaitStatus()
			expect(any_awaitStatus_result1).to.equal(Parent_upvr.Status.Rejected)
			expect(any_awaitStatus_result2).to.equal("foo")
		end)
		it("should return the first canceled promise", function() -- Line 1091
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var376_upvw
			local any_fold_result1_2 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1093
				--[[ Upvalues[2]:
					[1]: var376_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 1 then
					return arg1 + arg2
				end
				if arg3 == 2 then
					var376_upvw = Parent_upvr.delay(1):andThenReturn(arg1 + arg2)
					return var376_upvw
				end
				error("this should not run if the promise is cancelled")
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_2)).to.equal(true)
			expect(any_fold_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var376_upvw:cancel()
			expect(any_fold_result1_2:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.race", function() -- Line 1110
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve with the first settled value", function() -- Line 1111
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.race({Parent_upvr.resolve(1), Parent_upvr.resolve(2)}):andThen(function(arg1) -- Line 1115
				expect(arg1).to.equal(1)
			end):getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should cancel other promises", function() -- Line 1122
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_32 = Parent_upvr.new(function() -- Line 1123
			end)
			any_new_result1_32:andThen(function() -- Line 1124
			end)
			local tbl_14 = {any_new_result1_32, Parent_upvr.new(function() -- Line 1127
			end), Parent_upvr.new(function(arg1) -- Line 1128
				arg1(2)
			end)}
			local any_race_result1 = Parent_upvr.race(tbl_14)
			expect(any_race_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_race_result1._values[1]).to.equal(2)
			expect(tbl_14[1]:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_14[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_14[3]:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			local any_new_result1_19 = Parent_upvr.new(function() -- Line 1141
			end)
			expect(Parent_upvr.race({Parent_upvr.reject(), Parent_upvr.resolve(), any_new_result1_19}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_19:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should error if a non-array table is passed in", function() -- Line 1150
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local pcall_result1_3, pcall_result2 = pcall(function() -- Line 1151
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.race(Parent_upvr.new(function() -- Line 1152
				end))
			end)
			expect(pcall_result1_3).to.be.ok()
			expect(pcall_result2:find("Non%-promise")).to.be.ok()
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1159
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_3 = Parent_upvr.new(function() -- Line 1160
			end)
			any_new_result1_3:andThen(function() -- Line 1161
			end)
			local tbl_15 = {Parent_upvr.new(function() -- Line 1164
			end), Parent_upvr.new(function() -- Line 1165
			end), any_new_result1_3}
			Parent_upvr.race(tbl_15):cancel()
			expect(tbl_15[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_15[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_15[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise.promisify", function() -- Line 1177
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should wrap functions", function() -- Line 1178
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var409 = Parent_upvr.promisify(function(arg1) -- Line 1179, Named "test"
				return arg1 + 1
			end)(1)
			local any__unwrap_result1, any__unwrap_result2_3 = var409:_unwrap()
			expect(any__unwrap_result1).to.equal(true)
			expect(var409:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any__unwrap_result2_3).to.equal(2)
		end)
		it("should catch errors after a yield", function() -- Line 1192
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_2_upvr = Instance.new("BindableEvent")
			local var415 = Parent_upvr.promisify(function() -- Line 1194
				--[[ Upvalues[1]:
					[1]: BindableEvent_2_upvr (readonly)
				]]
				BindableEvent_2_upvr.Event:Wait()
				error("errortext")
			end)()
			expect(var415:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_2_upvr:Fire()
			expect(var415:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(var415._values[1]):find("errortext")).to.be.ok()
		end)
	end)
	describe("Promise.tap", function() -- Line 1208
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should thread through values", function() -- Line 1209
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var418_upvw
			local var419_upvw
			Parent_upvr.resolve(1):andThen(function(arg1) -- Line 1213
				return arg1 + 1
			end):tap(function(arg1) -- Line 1216
				--[[ Upvalues[1]:
					[1]: var418_upvw (read and write)
				]]
				var418_upvw = arg1
				return arg1 + 1
			end):andThen(function(arg1) -- Line 1220
				--[[ Upvalues[1]:
					[1]: var419_upvw (read and write)
				]]
				var419_upvw = arg1
			end)
			expect(var418_upvw).to.equal(2)
			expect(var419_upvw).to.equal(2)
		end)
		it("should chain onto promises", function() -- Line 1228
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var424_upvw
			local var425_upvw
			local any_andThen_result1_3 = Parent_upvr.resolve(1):tap(function() -- Line 1232
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var424_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1) -- Line 1233
					--[[ Upvalues[1]:
						[1]: var424_upvw (copied, read and write)
					]]
					var424_upvw = arg1
				end)
			end):andThen(function(arg1) -- Line 1237
				--[[ Upvalues[1]:
					[1]: var425_upvw (read and write)
				]]
				var425_upvw = arg1
			end)
			expect(any_andThen_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(var425_upvw).to.never.be.ok()
			var424_upvw(1)
			expect(any_andThen_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(var425_upvw).to.equal(1)
		end)
	end)
	describe("Promise.try", function() -- Line 1251
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should catch synchronous errors", function() -- Line 1252
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var432_upvw
			Parent_upvr.try(function() -- Line 1254
				error("errortext")
			end):catch(function(arg1) -- Line 1256
				--[[ Upvalues[1]:
					[1]: var432_upvw (read and write)
				]]
				var432_upvw = tostring(arg1)
			end)
			expect(var432_upvw:find("errortext")).to.be.ok()
		end)
		it("should reject with error objects", function() -- Line 1263
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_13_upvr = {}
			local any__unwrap_result1_8, any__unwrap_result2_10 = Parent_upvr.try(function() -- Line 1265
				--[[ Upvalues[1]:
					[1]: tbl_13_upvr (readonly)
				]]
				error(tbl_13_upvr)
			end):_unwrap()
			expect(any__unwrap_result1_8).to.equal(false)
			expect(any__unwrap_result2_10).to.equal(tbl_13_upvr)
		end)
		it("should catch asynchronous errors", function() -- Line 1273
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			local any_try_result1 = Parent_upvr.try(function() -- Line 1275
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_2 (readonly)
				]]
				BindableEvent_upvr_2.Event:Wait()
				error("errortext")
			end)
			expect(any_try_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr_2:Fire()
			expect(any_try_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_try_result1._values[1]):find("errortext")).to.be.ok()
		end)
	end)
	describe("Promise:andThenReturn", function() -- Line 1287
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the given values", function() -- Line 1288
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var446_upvw
			local var447_upvw
			Parent_upvr.resolve():andThenReturn(1, 2):andThen(function(arg1, arg2) -- Line 1291
				--[[ Upvalues[2]:
					[1]: var446_upvw (read and write)
					[2]: var447_upvw (read and write)
				]]
				var446_upvw = arg1
				var447_upvw = arg2
			end)
			expect(var446_upvw).to.equal(1)
			expect(var447_upvw).to.equal(2)
		end)
	end)
	describe("Promise:andThenCall", function() -- Line 1301
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should call the given function with arguments", function() -- Line 1302
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var451_upvw
			local var452_upvw
			Parent_upvr.resolve():andThenCall(function(arg1, arg2) -- Line 1304
				--[[ Upvalues[2]:
					[1]: var451_upvw (read and write)
					[2]: var452_upvw (read and write)
				]]
				var451_upvw = arg1
				var452_upvw = arg2
			end, 3, 4)
			expect(var451_upvw).to.equal(3)
			expect(var452_upvw).to.equal(4)
		end)
	end)
	describe("Promise.some", function() -- Line 1314
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve once the goal is reached", function() -- Line 1315
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1_2 = Parent_upvr.some({Parent_upvr.resolve(1), Parent_upvr.reject(), Parent_upvr.resolve(2)}, 2)
			expect(any_some_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_some_result1_2._values[1][1]).to.equal(1)
			expect(any_some_result1_2._values[1][2]).to.equal(2)
		end)
		it("should error if the goal can't be reached", function() -- Line 1326
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.some({Parent_upvr.resolve(), Parent_upvr.reject()}, 2):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local var460_upvw
			local any_some_result1_3 = Parent_upvr.some({Parent_upvr.resolve(), Parent_upvr.new(function(arg1, arg2) -- Line 1335
				--[[ Upvalues[1]:
					[1]: var460_upvw (read and write)
				]]
				var460_upvw = arg2
			end)}, 2)
			expect(any_some_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			var460_upvw("foo")
			expect(any_some_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_some_result1_3._values[1]).to.equal("foo")
		end)
		it("should cancel pending Promises once the goal is reached", function() -- Line 1346
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var465_upvw
			local any_new_result1_24 = Parent_upvr.new(function() -- Line 1348
			end)
			local any_new_result1_34 = Parent_upvr.new(function(arg1) -- Line 1349
				--[[ Upvalues[1]:
					[1]: var465_upvw (read and write)
				]]
				var465_upvw = arg1
			end)
			local any_some_result1_5 = Parent_upvr.some({any_new_result1_24, any_new_result1_34, Parent_upvr.resolve()}, 2)
			expect(any_some_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_new_result1_24:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_new_result1_34:getStatus()).to.equal(Parent_upvr.Status.Started)
			var465_upvw()
			expect(any_some_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_24:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_new_result1_34:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should error if passed a non-number", function() -- Line 1370
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 1371
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.some({}, "non-number")
			end).to.throw()
		end)
		it("should return an empty array if amount is 0", function() -- Line 1376
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1 = Parent_upvr.some({Parent_upvr.resolve(2)}, 0)
			expect(any_some_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_some_result1._values[1]).to.equal(0)
		end)
		it("should not return extra values", function() -- Line 1385
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1_4 = Parent_upvr.some({Parent_upvr.resolve(1), Parent_upvr.resolve(2), Parent_upvr.resolve(3), Parent_upvr.resolve(4)}, 2)
			expect(any_some_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_some_result1_4._values[1]).to.equal(2)
			expect(any_some_result1_4._values[1][1]).to.equal(1)
			expect(any_some_result1_4._values[1][2]).to.equal(2)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1399
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_25 = Parent_upvr.new(function() -- Line 1400
			end)
			any_new_result1_25:andThen(function() -- Line 1401
			end)
			local tbl_4 = {Parent_upvr.new(function() -- Line 1404
			end), Parent_upvr.new(function() -- Line 1405
			end), any_new_result1_25}
			Parent_upvr.some(tbl_4, 3):cancel()
			expect(tbl_4[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_4[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_4[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		describe("Promise.any", function() -- Line 1416
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			it("should return the value directly", function() -- Line 1417
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				local any_any_result1 = Parent_upvr.any({Parent_upvr.reject(), Parent_upvr.reject(), Parent_upvr.resolve(1)})
				expect(any_any_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
				expect(any_any_result1._values[1]).to.equal(1)
			end)
			it("should error if all are rejected", function() -- Line 1428
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				expect(Parent_upvr.any({Parent_upvr.reject(), Parent_upvr.reject(), Parent_upvr.reject()}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			end)
		end)
	end)
	describe("Promise.allSettled", function() -- Line 1438
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve with an array of PromiseStatuses", function() -- Line 1439
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var495_upvw
			local any_allSettled_result1 = Parent_upvr.allSettled({Parent_upvr.resolve(), Parent_upvr.reject(), Parent_upvr.resolve(), Parent_upvr.new(function(arg1, arg2) -- Line 1445
				--[[ Upvalues[1]:
					[1]: var495_upvw (read and write)
				]]
				var495_upvw = arg2
			end)})
			expect(any_allSettled_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			var495_upvw()
			expect(any_allSettled_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][1]).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][2]).to.equal(Parent_upvr.Status.Rejected)
			expect(any_allSettled_result1._values[1][3]).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][4]).to.equal(Parent_upvr.Status.Rejected)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1459
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_22 = Parent_upvr.new(function() -- Line 1460
			end)
			any_new_result1_22:andThen(function() -- Line 1461
			end)
			local tbl_10 = {Parent_upvr.new(function() -- Line 1464
			end), Parent_upvr.new(function() -- Line 1465
			end), any_new_result1_22}
			Parent_upvr.allSettled(tbl_10):cancel()
			expect(tbl_10[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_10[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_10[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise:await", function() -- Line 1477
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should return the correct values", function() -- Line 1478
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_await_result1, any_await_result2_2, any_await_result3, any_await_result4, any_await_result5 = Parent_upvr.resolve(5, 6, nil, 7):await()
			expect(any_await_result1).to.equal(true)
			expect(any_await_result2_2).to.equal(5)
			expect(any_await_result3).to.equal(6)
			expect(any_await_result4).to.equal(nil)
			expect(any_await_result5).to.equal(7)
		end)
		it("should work if yielding is needed", function() -- Line 1490
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var514_upvw = false
			task.spawn(function() -- Line 1492
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var514_upvw (read and write)
				]]
				local _, any_await_result2 = Parent_upvr.delay(1):await()
				expect(type(any_await_result2)).to.equal("number")
				var514_upvw = true
			end)
			advanceTime_upvw(2)
			expect(var514_upvw).to.equal(true)
		end)
	end)
	describe("Promise:expect", function() -- Line 1503
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should throw the correct values", function() -- Line 1504
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_11 = {}
			local any_reject_result1_4_upvr = Parent_upvr.reject(tbl_11)
			local pcall_result1_2, pcall_result2_2 = pcall(function() -- Line 1508
				--[[ Upvalues[1]:
					[1]: any_reject_result1_4_upvr (readonly)
				]]
				any_reject_result1_4_upvr:expect()
			end)
			expect(pcall_result1_2).to.equal(false)
			expect(pcall_result2_2).to.equal(tbl_11)
		end)
	end)
	describe("Promise:now", function() -- Line 1517
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve if the Promise is resolved", function() -- Line 1518
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_7, any__unwrap_result2_9 = Parent_upvr.resolve("foo"):now():_unwrap()
			expect(any__unwrap_result1_7).to.equal(true)
			expect(any__unwrap_result2_9).to.equal("foo")
		end)
		it("should reject if the Promise is not resolved", function() -- Line 1525
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_6, any__unwrap_result2_7 = Parent_upvr.new(function() -- Line 1526
			end):now():_unwrap()
			expect(any__unwrap_result1_6).to.equal(false)
			expect(Parent_upvr.Error.isKind(any__unwrap_result2_7, "NotResolvedInTime")).to.equal(true)
		end)
		it("should reject with a custom rejection value", function() -- Line 1532
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_5, any__unwrap_result2_4 = Parent_upvr.new(function() -- Line 1533
			end):now("foo"):_unwrap()
			expect(any__unwrap_result1_5).to.equal(false)
			expect(any__unwrap_result2_4).to.equal("foo")
		end)
	end)
	describe("Promise.each", function() -- Line 1540
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should iterate", function() -- Line 1541
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_2, any__unwrap_result2 = Parent_upvr.each({"foo", "bar", "baz", "qux"}, function(...) -- Line 1547
				return {...}
			end):_unwrap()
			expect(any__unwrap_result1_2).to.equal(true)
			expect(any__unwrap_result2[1][1]).to.equal("foo")
			expect(any__unwrap_result2[1][2]).to.equal(1)
			expect(any__unwrap_result2[2][1]).to.equal("bar")
			expect(any__unwrap_result2[2][2]).to.equal(2)
			expect(any__unwrap_result2[3][1]).to.equal("baz")
			expect(any__unwrap_result2[3][2]).to.equal(3)
			expect(any__unwrap_result2[4][1]).to.equal("qux")
			expect(any__unwrap_result2[4][2]).to.equal(4)
		end)
		it("should iterate serially", function() -- Line 1562
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_12_upvr = {}
			local tbl_5_upvr = {}
			local any_each_result1_5 = Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1570
				--[[ Upvalues[3]:
					[1]: tbl_5_upvr (readonly)
					[2]: Parent_upvr (copied, readonly)
					[3]: tbl_12_upvr (readonly)
				]]
				tbl_5_upvr[arg2] = (tbl_5_upvr[arg2] or 0) + 1
				return Parent_upvr.new(function(arg1_2) -- Line 1573
					--[[ Upvalues[2]:
						[1]: tbl_12_upvr (copied, readonly)
						[2]: arg1 (readonly)
					]]
					table.insert(tbl_12_upvr, function() -- Line 1574
						--[[ Upvalues[2]:
							[1]: arg1_2 (readonly)
							[2]: arg1 (copied, readonly)
						]]
						arg1_2(arg1:upper())
					end)
				end)
			end)
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(#tbl_12_upvr).to.equal(1)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.never.be.ok()
			table.remove(tbl_12_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(#tbl_12_upvr).to.equal(1)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.equal(1)
			expect(tbl_5_upvr[3]).to.never.be.ok()
			table.remove(tbl_12_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.equal(1)
			expect(tbl_5_upvr[3]).to.equal(1)
			table.remove(tbl_12_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(type(any_each_result1_5._values[1])).to.equal("table")
			expect(type(any_each_result1_5._values[2])).to.equal("nil")
			local _1 = any_each_result1_5._values[1]
			expect(_1[1]).to.equal("FOO")
			expect(_1[2]).to.equal("BAR")
			expect(_1[3]).to.equal("BAZ")
		end)
		it("should reject with the value if the predicate promise rejects", function() -- Line 1613
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_each_result1_2 = Parent_upvr.each({1, 2, 3}, function() -- Line 1614
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.reject("foobar")
			end)
			expect(any_each_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_each_result1_2._values[1]).to.equal("foobar")
		end)
		it("should allow Promises to be in the list and wait when it gets to them", function() -- Line 1622
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var558_upvw
			local any_each_result1_4 = Parent_upvr.each({Parent_upvr.new(function(arg1) -- Line 1624
				--[[ Upvalues[1]:
					[1]: var558_upvw (read and write)
				]]
				var558_upvw = arg1
			end)}, function(arg1) -- Line 1630
				return arg1 * 2
			end)
			expect(any_each_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			var558_upvw(2)
			expect(any_each_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_each_result1_4._values[1][1]).to.equal(4)
		end)
		it("should reject with the value if a Promise from the list rejects", function() -- Line 1642
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var564_upvw = false
			local any_each_result1_6 = Parent_upvr.each({1, 2, Parent_upvr.reject("foobar")}, function(arg1) -- Line 1644
				--[[ Upvalues[1]:
					[1]: var564_upvw (read and write)
				]]
				var564_upvw = true
				return "never"
			end)
			expect(any_each_result1_6:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_each_result1_6._values[1]).to.equal("foobar")
			expect(var564_upvw).to.equal(false)
		end)
		it("should reject immediately if there's a cancelled Promise in the list initially", function() -- Line 1654
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1 = Parent_upvr.new(function() -- Line 1655
			end)
			any_new_result1:cancel()
			local var571_upvw = false
			local any_each_result1_3 = Parent_upvr.each({1, 2, any_new_result1}, function() -- Line 1659
				--[[ Upvalues[1]:
					[1]: var571_upvw (read and write)
				]]
				var571_upvw = true
			end)
			expect(any_each_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(var571_upvw).to.equal(false)
			expect(any_each_result1_3._values[1].kind).to.equal(Parent_upvr.Error.Kind.AlreadyCancelled)
		end)
		it("should stop iteration if Promise.each is cancelled", function() -- Line 1668
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_8_upvr = {}
			local any_each_result1 = Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1675
				--[[ Upvalues[2]:
					[1]: tbl_8_upvr (readonly)
					[2]: Parent_upvr (copied, readonly)
				]]
				tbl_8_upvr[arg2] = (tbl_8_upvr[arg2] or 0) + 1
				return Parent_upvr.new(function() -- Line 1678
				end)
			end)
			expect(any_each_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_8_upvr[1]).to.equal(1)
			expect(tbl_8_upvr[2]).to.never.be.ok()
			any_each_result1:cancel()
			expect(any_each_result1:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_8_upvr[1]).to.equal(1)
			expect(tbl_8_upvr[2]).to.never.be.ok()
		end)
		it("should cancel the Promise returned from the predicate if Promise.each is cancelled", function() -- Line 1692
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var582_upvw
			Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1699
				--[[ Upvalues[2]:
					[1]: var582_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var582_upvw = Parent_upvr.new(function() -- Line 1700
				end)
				return var582_upvw
			end):cancel()
			expect(var582_upvw:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should cancel Promises in the list if Promise.each is cancelled", function() -- Line 1709
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_17 = Parent_upvr.new(function() -- Line 1710
			end)
			Parent_upvr.each({any_new_result1_17}, function() -- Line 1712
			end):cancel()
			expect(any_new_result1_17:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.retry", function() -- Line 1720
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should retry N times", function() -- Line 1721
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var594_upvw = 0
			local any_retry_result1 = Parent_upvr.retry(function(arg1) -- Line 1724
				--[[ Upvalues[2]:
					[1]: var594_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal("foo")
				var594_upvw += 1
				if var594_upvw == 5 then
					return Parent_upvr.resolve("ok")
				end
				return Parent_upvr.reject("fail")
			end, 5, "foo")
			expect(any_retry_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_retry_result1._values[1]).to.equal("ok")
		end)
		it("should reject if threshold is exceeded", function() -- Line 1740
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_retry_result1_2 = Parent_upvr.retry(function() -- Line 1741
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.reject("fail")
			end, 5)
			expect(any_retry_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_retry_result1_2._values[1]).to.equal("fail")
		end)
	end)
	describe("Promise.retryWithDelay", function() -- Line 1750
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should retry after a delay", function() -- Line 1751
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var601_upvw = 0
			local any_retryWithDelay_result1 = Parent_upvr.retryWithDelay(function(arg1) -- Line 1754
				--[[ Upvalues[2]:
					[1]: var601_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal("foo")
				var601_upvw += 1
				if var601_upvw == 3 then
					return Parent_upvr.resolve("ok")
				end
				return Parent_upvr.reject("fail")
			end, 3, 10, "foo")
			expect(var601_upvw).to.equal(1)
			advanceTime_upvw(11)
			expect(var601_upvw).to.equal(2)
			advanceTime_upvw(11)
			expect(var601_upvw).to.equal(3)
			expect(any_retryWithDelay_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_retryWithDelay_result1._values[1]).to.equal("ok")
		end)
	end)
	describe("Promise.fromEvent", function() -- Line 1781
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should convert a Promise into an event", function() -- Line 1782
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent = Instance.new("BindableEvent")
			local any_fromEvent_result1 = Parent_upvr.fromEvent(BindableEvent.Event)
			expect(any_fromEvent_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent:Fire("foo")
			expect(any_fromEvent_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fromEvent_result1._values[1]).to.equal("foo")
		end)
		it("should convert a Promise into an event with the predicate", function() -- Line 1795
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_3 = Instance.new("BindableEvent")
			local any_fromEvent_result1_2 = Parent_upvr.fromEvent(BindableEvent_3.Event, function(arg1) -- Line 1798
				if arg1 ~= "foo" then
				else
				end
				return true
			end)
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_3:Fire("bar")
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_3:Fire("foo")
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fromEvent_result1_2._values[1]).to.equal("foo")
		end)
	end)
	describe("Promise.is", function() -- Line 1815
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should work with current version", function() -- Line 1816
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.is(Parent_upvr.resolve(1))).to.equal(true)
		end)
		it("should work with any object with an andThen", function() -- Line 1822
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_7 = {}
			local function andThen() -- Line 1824
				return 1
			end
			tbl_7.andThen = andThen
			expect(Parent_upvr.is(tbl_7)).to.equal(true)
		end)
		it("should work with older promises", function() -- Line 1832
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_9 = {
				prototype = {};
				__index = tbl_9.prototype;
			}
			tbl_9.prototype.andThen = function(arg1) -- Line 1837, Named "andThen"
			end
			expect(Parent_upvr.is(setmetatable({}, tbl_9))).to.equal(true)
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.Option
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:30
-- Luau version 6, Types version 3
-- Time taken: 0.000178 seconds

return require(script.Parent.Parent["sleitnick_option@1.0.4"].option)

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.Promise
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:31
-- Luau version 6, Types version 3
-- Time taken: 0.000200 seconds

return require(script.Parent.Parent["evaera_promise@4.0.0"].promise)

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:32
-- Luau version 6, Types version 3
-- Time taken: 0.000201 seconds

return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:33
-- Luau version 6, Types version 3
-- Time taken: 0.000265 seconds

return {
	Server = require(script.Server);
	Client = require(script.Client);
	ServerComm = require(script.Server.ServerComm);
	ClientComm = require(script.Client.ClientComm);
}

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Client
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:34
-- Luau version 6, Types version 3
-- Time taken: 0.004462 seconds

local Util_upvr = require(script.Parent.Util)
local module = {}
local Promise_upvr = require(script.Parent.Parent.Promise)
function module.GetFunction(arg1, arg2, arg3, arg4, arg5) -- Line 9
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: Promise_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetFunction must be called from the client")
	local var4 = arg2
	local SOME_upvr = Util_upvr.GetCommSubFolder(arg1, "RF"):Expect("Failed to get Comm RF folder"):WaitForChild(var4, Util_upvr.WaitForChildTimeout)
	local var6
	if SOME_upvr == nil then
		var4 = false
	else
		var4 = true
	end
	var6 = assert
	var6(var4, "Failed to find RemoteFunction: "..arg2)
	var6 = false
	if type(arg4) == "table" then
		if 0 >= #arg4 then
			var6 = false
		else
			var6 = true
		end
	end
	local var7_upvr = false
	if type(arg5) == "table" then
		if 0 >= #arg5 then
			var7_upvr = false
		else
			var7_upvr = true
		end
	end
	local function ProcessOutbound_upvr(arg1_2) -- Line 22, Named "ProcessOutbound"
		--[[ Upvalues[1]:
			[1]: arg5 (readonly)
		]]
		for _, v in ipairs(arg5) do
			local packed = table.pack(v(arg1_2))
			if not packed[1] then
				return table.unpack(packed, 2, packed.n)
			end
			arg1_2.n = #arg1_2
		end
		return table.unpack(arg1_2, 1, arg1_2.n)
	end
	if var6 then
		if arg3 then
			return function(...) -- Line 34
				--[[ Upvalues[5]:
					[1]: Promise_upvr (copied, readonly)
					[2]: var7_upvr (readonly)
					[3]: SOME_upvr (readonly)
					[4]: ProcessOutbound_upvr (readonly)
					[5]: arg4 (readonly)
				]]
				local packed_upvr_2 = table.pack(...)
				return Promise_upvr.new(function(arg1_3, arg2_2) -- Line 36
					--[[ Upvalues[5]:
						[1]: var7_upvr (copied, readonly)
						[2]: SOME_upvr (copied, readonly)
						[3]: ProcessOutbound_upvr (copied, readonly)
						[4]: packed_upvr_2 (readonly)
						[5]: arg4 (copied, readonly)
					]]
					local pcall_result1_2, pcall_result2 = pcall(function() -- Line 37
						--[[ Upvalues[4]:
							[1]: var7_upvr (copied, readonly)
							[2]: SOME_upvr (copied, readonly)
							[3]: ProcessOutbound_upvr (copied, readonly)
							[4]: packed_upvr_2 (copied, readonly)
						]]
						if var7_upvr then
							return table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(packed_upvr_2)))
						end
						return table.pack(SOME_upvr:InvokeServer(table.unpack(packed_upvr_2, 1, packed_upvr_2.n)))
					end)
					if pcall_result1_2 then
						for _, v_2 in ipairs(arg4) do
							local packed_3 = table.pack(v_2(pcall_result2))
							if not packed_3[1] then
								return table.unpack(packed_3, 2, packed_3.n)
							end
							pcall_result2.n = #pcall_result2
						end
						arg1_3(table.unpack(pcall_result2, 1, pcall_result2.n))
					else
						arg2_2(pcall_result2)
					end
				end)
			end
		end
		return function(...) -- Line 59
			--[[ Upvalues[4]:
				[1]: var7_upvr (readonly)
				[2]: SOME_upvr (readonly)
				[3]: ProcessOutbound_upvr (readonly)
				[4]: arg4 (readonly)
			]]
			local var31
			if var7_upvr then
				var31 = table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(table.pack(...))))
			else
				var31 = table.pack(SOME_upvr:InvokeServer(...))
			end
			for _, v_3 in ipairs(arg4) do
				local packed_2 = table.pack(v_3(var31))
				if not packed_2[1] then
					return table.unpack(packed_2, 2, packed_2.n)
				end
				var31.n = #var31
			end
			return table.unpack(var31, 1, var31.n)
		end
	end
	if arg3 then
		return function(...) -- Line 78
			--[[ Upvalues[4]:
				[1]: Promise_upvr (copied, readonly)
				[2]: var7_upvr (readonly)
				[3]: SOME_upvr (readonly)
				[4]: ProcessOutbound_upvr (readonly)
			]]
			local packed_upvr = table.pack(...)
			return Promise_upvr.new(function(arg1_4, arg2_3) -- Line 80
				--[[ Upvalues[4]:
					[1]: var7_upvr (copied, readonly)
					[2]: SOME_upvr (copied, readonly)
					[3]: ProcessOutbound_upvr (copied, readonly)
					[4]: packed_upvr (readonly)
				]]
				local pcall_result1, pcall_result2_2 = pcall(function() -- Line 81
					--[[ Upvalues[4]:
						[1]: var7_upvr (copied, readonly)
						[2]: SOME_upvr (copied, readonly)
						[3]: ProcessOutbound_upvr (copied, readonly)
						[4]: packed_upvr (copied, readonly)
					]]
					if var7_upvr then
						return table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(packed_upvr)))
					end
					return table.pack(SOME_upvr:InvokeServer(table.unpack(packed_upvr, 1, packed_upvr.n)))
				end)
				if pcall_result1 then
					arg1_4(table.unpack(pcall_result2_2, 1, pcall_result2_2.n))
				else
					arg2_3(pcall_result2_2)
				end
			end)
		end
	end
	if var7_upvr then
		return function(...) -- Line 97
			--[[ Upvalues[2]:
				[1]: SOME_upvr (readonly)
				[2]: ProcessOutbound_upvr (readonly)
			]]
			return SOME_upvr:InvokeServer(ProcessOutbound_upvr(table.pack(...)))
		end
	end
	return function(...) -- Line 101
		--[[ Upvalues[1]:
			[1]: SOME_upvr (readonly)
		]]
		return SOME_upvr:InvokeServer(...)
	end
end
local ClientRemoteSignal_upvr = require(script.ClientRemoteSignal)
function module.GetSignal(arg1, arg2, arg3, arg4) -- Line 109
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: ClientRemoteSignal_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetSignal must be called from the client")
	local var45 = arg2
	local SOME_2 = Util_upvr.GetCommSubFolder(arg1, "RE"):Expect("Failed to get Comm RE folder"):WaitForChild(var45, Util_upvr.WaitForChildTimeout)
	if SOME_2 == nil then
		var45 = false
	else
		var45 = true
	end
	assert(var45, "Failed to find RemoteEvent: "..arg2)
	return ClientRemoteSignal_upvr.new(SOME_2, arg3, arg4)
end
local ClientRemoteProperty_upvr = require(script.ClientRemoteProperty)
function module.GetProperty(arg1, arg2, arg3, arg4) -- Line 122
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: ClientRemoteProperty_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetProperty must be called from the client")
	local var48 = arg2
	local SOME = Util_upvr.GetCommSubFolder(arg1, "RP"):Expect("Failed to get Comm RP folder"):WaitForChild(var48, Util_upvr.WaitForChildTimeout)
	if SOME == nil then
		var48 = false
	else
		var48 = true
	end
	assert(var48, "Failed to find RemoteEvent for RemoteProperty: "..arg2)
	return ClientRemoteProperty_upvr.new(SOME, arg3, arg4)
end
return module

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Client.ClientComm
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:35
-- Luau version 6, Types version 3
-- Time taken: 0.002080 seconds

local Parent_upvr = require(script.Parent)
local module_upvr = {}
module_upvr.__index = module_upvr
local Util_upvr = require(script.Parent.Parent.Util)
function module_upvr.new(arg1, arg2, arg3) -- Line 46
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var4 = not Util_upvr.IsServer
	assert(var4, "ClientComm must be constructed from the client")
	local var5
	if typeof(arg1) ~= "Instance" then
		var4 = false
	else
		var4 = true
	end
	var5 = assert
	var5(var4, "Parent must be of type Instance")
	var5 = Util_upvr.DefaultCommFolderName
	if arg3 then
		var5 = arg3
	end
	local var6 = var5
	local SOME = arg1:WaitForChild(var6, Util_upvr.WaitForChildTimeout)
	if SOME == nil then
		var6 = false
	else
		var6 = true
	end
	assert(var6, "Could not find namespace for ClientComm in parent: "..var5)
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._instancesFolder = SOME
	setmetatable_result1._usePromise = arg2
	return setmetatable_result1
end
function module_upvr.GetFunction(arg1, arg2, arg3, arg4) -- Line 95
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetFunction(arg1._instancesFolder, arg2, arg1._usePromise, arg3, arg4)
end
function module_upvr.GetSignal(arg1, arg2, arg3, arg4) -- Line 123
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetSignal(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.GetProperty(arg1, arg2, arg3, arg4) -- Line 165
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetProperty(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.BuildObject(arg1, arg2, arg3) -- Line 192
	local RF = arg1._instancesFolder:FindFirstChild("RF")
	local RE = arg1._instancesFolder:FindFirstChild("RE")
	local RP = arg1._instancesFolder:FindFirstChild("RP")
	if RF then
		for _, v in ipairs(RF:GetChildren()) do
			if v:IsA("RemoteFunction") then
				local any_GetFunction_result1_upvr = arg1:GetFunction(v.Name, arg2, arg3)
				;({})[v.Name] = function(arg1_2, ...) -- Line 203
					--[[ Upvalues[1]:
						[1]: any_GetFunction_result1_upvr (readonly)
					]]
					return any_GetFunction_result1_upvr(...)
				end
			end
		end
	end
	if RE then
		for _, v_2 in ipairs(RE:GetChildren()) do
			any_GetFunction_result1_upvr = v_2:IsA("RemoteEvent")
			if any_GetFunction_result1_upvr then
				any_GetFunction_result1_upvr = v_2.Name
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				;({})[any_GetFunction_result1_upvr] = arg1:GetSignal(v_2.Name, arg2, arg3)
			end
		end
	end
	if RP then
		for _, v_3 in ipairs(RP:GetChildren()) do
			any_GetFunction_result1_upvr = v_3:IsA("RemoteEvent")
			if any_GetFunction_result1_upvr then
				any_GetFunction_result1_upvr = v_3.Name
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				;({})[any_GetFunction_result1_upvr] = arg1:GetProperty(v_3.Name, arg2, arg3)
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_upvr.Destroy(arg1) -- Line 230
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Client.ClientRemoteProperty
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:36
-- Luau version 6, Types version 3
-- Time taken: 0.001652 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ClientRemoteSignal_upvr = require(script.Parent.ClientRemoteSignal)
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3) -- Line 32
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: ClientRemoteSignal_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._rs = ClientRemoteSignal_upvr.new(arg1, arg2, arg3)
	setmetatable_result1_upvr._ready = false
	setmetatable_result1_upvr._value = nil
	setmetatable_result1_upvr.Changed = Signal_upvr.new()
	setmetatable_result1_upvr._readyPromise = setmetatable_result1_upvr:OnReady():andThen(function() -- Line 42
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		setmetatable_result1_upvr._readyPromise = nil
		setmetatable_result1_upvr.Changed:Fire(setmetatable_result1_upvr._value)
		setmetatable_result1_upvr._changed = setmetatable_result1_upvr._rs:Connect(function(arg1_2) -- Line 45
			--[[ Upvalues[1]:
				[1]: setmetatable_result1_upvr (copied, readonly)
			]]
			if arg1_2 == setmetatable_result1_upvr._value then
			else
				setmetatable_result1_upvr._value = arg1_2
				setmetatable_result1_upvr.Changed:Fire(arg1_2)
			end
		end)
	end)
	setmetatable_result1_upvr._rs:Fire()
	return setmetatable_result1_upvr
end
function module_upvr.Get(arg1) -- Line 65
	return arg1._value
end
local Promise_upvr = require(script.Parent.Parent.Parent.Promise)
function module_upvr.OnReady(arg1) -- Line 88
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	if arg1._ready then
		return Promise_upvr.resolve(arg1._value)
	end
	return Promise_upvr.fromEvent(arg1._rs, function(arg1_3) -- Line 92
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1._value = arg1_3
		arg1._ready = true
		return true
	end):andThen(function() -- Line 96
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		return arg1._value
	end)
end
function module_upvr.IsReady(arg1) -- Line 113
	return arg1._ready
end
function module_upvr.Observe(arg1, arg2) -- Line 138
	if arg1._ready then
		task.defer(arg2, arg1._value)
	end
	return arg1.Changed:Connect(arg2)
end
function module_upvr.Destroy(arg1) -- Line 148
	arg1._rs:Destroy()
	if arg1._readyPromise then
		arg1._readyPromise:cancel()
	end
	if arg1._changed then
		arg1._changed:Disconnect()
	end
	arg1.Changed:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Client.ClientRemoteSignal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:37
-- Luau version 6, Types version 3
-- Time taken: 0.001800 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3) -- Line 22
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._re = arg1
	if arg3 and 0 < #arg3 then
		setmetatable_result1_upvr._hasOutbound = true
		setmetatable_result1_upvr._outbound = arg3
	else
		setmetatable_result1_upvr._hasOutbound = false
	end
	if arg2 and 0 < #arg2 then
		setmetatable_result1_upvr._directConnect = false
		setmetatable_result1_upvr._signal = Signal_upvr.new()
		setmetatable_result1_upvr._reConn = setmetatable_result1_upvr._re.OnClientEvent:Connect(function(...) -- Line 38
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: setmetatable_result1_upvr (readonly)
			]]
			local packed_2 = table.pack(...)
			for _, v in ipairs(arg2) do
				if not table.pack(v(packed_2))[1] then return end
				packed_2.n = #packed_2
			end
			setmetatable_result1_upvr._signal:Fire(table.unpack(packed_2, 1, packed_2.n))
		end)
		return setmetatable_result1_upvr
	end
	setmetatable_result1_upvr._directConnect = true
	return setmetatable_result1_upvr
end
function module_upvr._processOutboundMiddleware(arg1, ...) -- Line 55
	local packed = table.pack(...)
	for _, v_2 in ipairs(arg1._outbound) do
		local packed_3 = table.pack(v_2(packed))
		if not packed_3[1] then
			return table.unpack(packed_3, 2, packed_3.n)
		end
		packed.n = #packed
	end
	return table.unpack(packed, 1, packed.n)
end
function module_upvr.Connect(arg1, arg2) -- Line 74
	if arg1._directConnect then
		return arg1._re.OnClientEvent:Connect(arg2)
	end
	return arg1._signal:Connect(arg2)
end
function module_upvr.Fire(arg1, ...) -- Line 90
	if arg1._hasOutbound then
		arg1._re:FireServer(arg1:_processOutboundMiddleware(...))
	else
		arg1._re:FireServer(...)
	end
end
function module_upvr.Destroy(arg1) -- Line 101
	if arg1._signal then
		arg1._signal:Destroy()
	end
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Server
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:39
-- Luau version 6, Types version 3
-- Time taken: 0.002993 seconds

local Util_upvr = require(script.Parent.Util)
local module_upvr = {
	BindFunction = function(arg1, arg2, arg3, arg4, arg5) -- Line 37, Named "BindFunction"
		--[[ Upvalues[1]:
			[1]: Util_upvr (readonly)
		]]
		assert(Util_upvr.IsServer, "BindFunction must be called from the server")
		local RemoteFunction = Instance.new("RemoteFunction")
		RemoteFunction.Name = arg2
		local var4 = false
		if type(arg4) == "table" then
			if 0 >= #arg4 then
				var4 = false
			else
				var4 = true
			end
		end
		local var5 = false
		if type(arg5) == "table" then
			if 0 >= #arg5 then
				var5 = false
			else
				var5 = true
			end
		end
		local function ProcessOutbound_upvr(arg1_2, ...) -- Line 50, Named "ProcessOutbound"
			--[[ Upvalues[1]:
				[1]: arg5 (readonly)
			]]
			local packed_3 = table.pack(...)
			for _, v in ipairs(arg5) do
				local packed_5 = table.pack(v(arg1_2, packed_3))
				if not packed_5[1] then
					return table.unpack(packed_5, 2, packed_5.n)
				end
				packed_3.n = #packed_3
			end
			return table.unpack(packed_3, 1, packed_3.n)
		end
		if var4 and var5 then
			local function OnServerInvoke(arg1_3, ...) -- Line 62
				--[[ Upvalues[3]:
					[1]: arg4 (readonly)
					[2]: ProcessOutbound_upvr (readonly)
					[3]: arg3 (readonly)
				]]
				local packed = table.pack(...)
				for _, v_2 in ipairs(arg4) do
					local packed_6 = table.pack(v_2(arg1_3, packed))
					if not packed_6[1] then
						return table.unpack(packed_6, 2, packed_6.n)
					end
					packed.n = #packed
				end
				return ProcessOutbound_upvr(arg1_3, arg3(arg1_3, table.unpack(packed, 1, packed.n)))
			end
			RemoteFunction.OnServerInvoke = OnServerInvoke
		elseif var4 then
			local function OnServerInvoke(arg1_4, ...) -- Line 75
				--[[ Upvalues[2]:
					[1]: arg4 (readonly)
					[2]: arg3 (readonly)
				]]
				local packed_2 = table.pack(...)
				for _, v_3 in ipairs(arg4) do
					local packed_4 = table.pack(v_3(arg1_4, packed_2))
					if not packed_4[1] then
						return table.unpack(packed_4, 2, packed_4.n)
					end
					packed_2.n = #packed_2
				end
				return arg3(arg1_4, table.unpack(packed_2, 1, packed_2.n))
			end
			RemoteFunction.OnServerInvoke = OnServerInvoke
		elseif var5 then
			function RemoteFunction.OnServerInvoke(arg1_5, ...) -- Line 88
				--[[ Upvalues[2]:
					[1]: ProcessOutbound_upvr (readonly)
					[2]: arg3 (readonly)
				]]
				return ProcessOutbound_upvr(arg1_5, arg3(arg1_5, ...))
			end
		else
			RemoteFunction.OnServerInvoke = arg3
		end
		RemoteFunction.Parent = Util_upvr.GetCommSubFolder(arg1, "RF"):Expect("Failed to get Comm RF folder")
		return RemoteFunction
	end;
}
function module_upvr.WrapMethod(arg1, arg2, arg3, arg4, arg5) -- Line 99
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var27 = "WrapMethod must be called from the server"
	assert(Util_upvr.IsServer, var27)
	local var28_upvr = arg2[arg3]
	if type(var28_upvr) ~= "function" then
		var27 = false
	else
		var27 = true
	end
	assert(var27, "Value at index "..arg3.." must be a function; got "..type(var28_upvr))
	return module_upvr.BindFunction(arg1, arg3, function(...) -- Line 109
		--[[ Upvalues[2]:
			[1]: var28_upvr (readonly)
			[2]: arg2 (readonly)
		]]
		return var28_upvr(arg2, ...)
	end, arg4, arg5)
end
local RemoteSignal_upvr = require(script.RemoteSignal)
function module_upvr.CreateSignal(arg1, arg2, arg3, arg4) -- Line 114
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: RemoteSignal_upvr (readonly)
	]]
	assert(Util_upvr.IsServer, "CreateSignal must be called from the server")
	return RemoteSignal_upvr.new(Util_upvr.GetCommSubFolder(arg1, "RE"):Expect("Failed to get Comm RE folder"), arg2, arg3, arg4)
end
local RemoteProperty_upvr = require(script.RemoteProperty)
function module_upvr.CreateProperty(arg1, arg2, arg3, arg4, arg5) -- Line 126
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: RemoteProperty_upvr (readonly)
	]]
	assert(Util_upvr.IsServer, "CreateProperty must be called from the server")
	return RemoteProperty_upvr.new(Util_upvr.GetCommSubFolder(arg1, "RP"):Expect("Failed to get Comm RP folder"), arg2, arg3, arg4, arg5)
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Server.RemoteProperty
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:40
-- Luau version 6, Types version 3
-- Time taken: 0.002766 seconds

local Players_upvr = game:GetService("Players")
local None_upvr = require(script.Parent.Parent.Util).None
local module_upvr = {}
module_upvr.__index = module_upvr
local RemoteSignal_upvr = require(script.Parent.RemoteSignal)
function module_upvr.new(arg1, arg2, arg3, arg4, arg5) -- Line 53
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: RemoteSignal_upvr (readonly)
		[3]: Players_upvr (readonly)
		[4]: None_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._rs = RemoteSignal_upvr.new(arg1, arg2, arg4, arg5)
	setmetatable_result1_upvr._value = arg3
	setmetatable_result1_upvr._perPlayer = {}
	setmetatable_result1_upvr._playerRemoving = Players_upvr.PlayerRemoving:Connect(function(arg1_2) -- Line 64
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		setmetatable_result1_upvr._perPlayer[arg1_2] = nil
	end)
	setmetatable_result1_upvr._rs:Connect(function(arg1_3) -- Line 67
		--[[ Upvalues[2]:
			[1]: setmetatable_result1_upvr (readonly)
			[2]: None_upvr (copied, readonly)
		]]
		local _perPlayer = setmetatable_result1_upvr._perPlayer
		local var9 = _perPlayer[arg1_3]
		if var9 == nil then
			_perPlayer = setmetatable_result1_upvr._value
		elseif var9 == None_upvr then
			_perPlayer = nil
		else
			_perPlayer = var9
		end
		setmetatable_result1_upvr._rs:Fire(arg1_3, _perPlayer)
	end)
	return setmetatable_result1_upvr
end
function module_upvr.Set(arg1, arg2) -- Line 91
	arg1._value = arg2
	table.clear(arg1._perPlayer)
	arg1._rs:FireAll(arg2)
end
function module_upvr.SetTop(arg1, arg2) -- Line 118
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	arg1._value = arg2
	for _, v in ipairs(Players_upvr:GetPlayers()) do
		if arg1._perPlayer[v] == nil then
			arg1._rs:Fire(v, arg2)
		end
	end
end
function module_upvr.SetFilter(arg1, arg2, arg3) -- Line 141
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_2 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_2, arg3) then
			arg1:SetFor(v_2, arg3)
		end
	end
end
function module_upvr.SetFor(arg1, arg2, arg3) -- Line 163
	--[[ Upvalues[1]:
		[1]: None_upvr (readonly)
	]]
	local var20
	if arg2.Parent then
		if arg3 == nil then
			var20 = None_upvr
		else
			var20 = arg3
		end
		arg1._perPlayer[arg2] = var20
	end
	arg1._rs:Fire(arg2, arg3)
end
function module_upvr.SetForList(arg1, arg2, arg3) -- Line 179
	for _, v_3 in ipairs(arg2) do
		arg1:SetFor(v_3, arg3)
	end
end
function module_upvr.ClearFor(arg1, arg2) -- Line 206
	if arg1._perPlayer[arg2] == nil then
	else
		arg1._perPlayer[arg2] = nil
		arg1._rs:Fire(arg2, arg1._value)
	end
end
function module_upvr.ClearForList(arg1, arg2) -- Line 219
	for _, v_4 in ipairs(arg2) do
		arg1:ClearFor(v_4)
	end
end
function module_upvr.ClearFilter(arg1, arg2) -- Line 229
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_5 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_5) then
			arg1:ClearFor(v_5)
		end
	end
end
function module_upvr.Get(arg1) -- Line 247
	return arg1._value
end
function module_upvr.GetFor(arg1, arg2) -- Line 281
	--[[ Upvalues[1]:
		[1]: None_upvr (readonly)
	]]
	local var36 = arg1._perPlayer[arg2]
	if var36 == nil then
		return arg1._value
	end
	if var36 == None_upvr then
		return nil
	end
	return var36
end
function module_upvr.Destroy(arg1) -- Line 290
	arg1._rs:Destroy()
	arg1._playerRemoving:Disconnect()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Server.RemoteSignal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:41
-- Luau version 6, Types version 3
-- Time taken: 0.002522 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 25
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._re = Instance.new("RemoteEvent")
	setmetatable_result1_upvr._re.Name = arg2
	setmetatable_result1_upvr._re.Parent = arg1
	if arg4 and 0 < #arg4 then
		setmetatable_result1_upvr._hasOutbound = true
		setmetatable_result1_upvr._outbound = arg4
	else
		setmetatable_result1_upvr._hasOutbound = false
	end
	if arg3 and 0 < #arg3 then
		setmetatable_result1_upvr._directConnect = false
		setmetatable_result1_upvr._signal = Signal_upvr.new()
		setmetatable_result1_upvr._re.OnServerEvent:Connect(function(arg1_2, ...) -- Line 44
			--[[ Upvalues[2]:
				[1]: arg3 (readonly)
				[2]: setmetatable_result1_upvr (readonly)
			]]
			local packed_3 = table.pack(...)
			for _, v in ipairs(arg3) do
				if not table.pack(v(arg1_2, packed_3))[1] then return end
				packed_3.n = #packed_3
			end
			setmetatable_result1_upvr._signal:Fire(arg1_2, table.unpack(packed_3, 1, packed_3.n))
		end)
		return setmetatable_result1_upvr
	end
	setmetatable_result1_upvr._directConnect = true
	return setmetatable_result1_upvr
end
function module_upvr.Connect(arg1, arg2) -- Line 68
	if arg1._directConnect then
		return arg1._re.OnServerEvent:Connect(arg2)
	end
	return arg1._signal:Connect(arg2)
end
function module_upvr._processOutboundMiddleware(arg1, arg2, ...) -- Line 76
	if not arg1._hasOutbound then
		return ...
	end
	local packed_2 = table.pack(...)
	for _, v_2 in ipairs(arg1._outbound) do
		local packed = table.pack(v_2(arg2, packed_2))
		if not packed[1] then
			return table.unpack(packed, 2, packed.n)
		end
		packed_2.n = #packed_2
	end
	return table.unpack(packed_2, 1, packed_2.n)
end
function module_upvr.Fire(arg1, arg2, ...) -- Line 101
	arg1._re:FireClient(arg2, arg1:_processOutboundMiddleware(arg2, ...))
end
function module_upvr.FireAll(arg1, ...) -- Line 114
	arg1._re:FireAllClients(arg1:_processOutboundMiddleware(nil, ...))
end
function module_upvr.FireExcept(arg1, arg2, ...) -- Line 129
	arg1:FireFilter(function(arg1_3) -- Line 130
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local var19
		if arg1_3 == arg2 then
			var19 = false
		else
			var19 = true
		end
		return var19
	end, ...)
end
local Players_upvr = game:GetService("Players")
function module_upvr.FireFilter(arg1, arg2, ...) -- Line 159
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_3 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_3, ...) then
			arg1._re:FireClient(v_3, arg1:_processOutboundMiddleware(nil, ...))
		end
	end
end
function module_upvr.FireFor(arg1, arg2, ...) -- Line 183
	for _, v_4 in ipairs(arg2) do
		arg1._re:FireClient(v_4, arg1:_processOutboundMiddleware(nil, ...))
	end
end
function module_upvr.Destroy(arg1) -- Line 192
	arg1._re:Destroy()
	if arg1._signal then
		arg1._signal:Destroy()
	end
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Server.ServerComm
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:42
-- Luau version 6, Types version 3
-- Time taken: 0.001389 seconds

local Parent_upvr = require(script.Parent)
local module_upvr = {}
module_upvr.__index = module_upvr
local Util_upvr = require(script.Parent.Parent.Util)
function module_upvr.new(arg1, arg2) -- Line 44
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local IsServer = Util_upvr.IsServer
	assert(IsServer, "ServerComm must be constructed from the server")
	if typeof(arg1) ~= "Instance" then
		IsServer = false
	else
		IsServer = true
	end
	assert(IsServer, "Parent must be of type Instance")
	local DefaultCommFolderName = Util_upvr.DefaultCommFolderName
	if arg2 then
		DefaultCommFolderName = arg2
	end
	assert(not arg1:FindFirstChild(DefaultCommFolderName), "Parent already has another ServerComm bound to namespace "..DefaultCommFolderName)
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._instancesFolder = Instance.new("Folder")
	setmetatable_result1._instancesFolder.Name = DefaultCommFolderName
	setmetatable_result1._instancesFolder.Parent = arg1
	return setmetatable_result1
end
function module_upvr.BindFunction(arg1, arg2, arg3, arg4, arg5) -- Line 76
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.BindFunction(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.WrapMethod(arg1, arg2, arg3, arg4, arg5) -- Line 108
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.WrapMethod(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.CreateSignal(arg1, arg2, arg3, arg4) -- Line 141
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.CreateSignal(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.CreateProperty(arg1, arg2, arg3, arg4, arg5) -- Line 189
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.CreateProperty(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.Destroy(arg1) -- Line 201
	arg1._instancesFolder:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Types
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:43
-- Luau version 6, Types version 3
-- Time taken: 0.000136 seconds

return nil

-- ReplicatedStorage.Packages._Index.sleitnick_comm@0.3.1.comm.Util
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:44
-- Luau version 6, Types version 3
-- Time taken: 0.000839 seconds

local module_upvr = {
	IsServer = game:GetService("RunService"):IsServer();
	WaitForChildTimeout = 60;
	DefaultCommFolderName = "__comm__";
	None = newproxy();
}
local Option_upvr = require(script.Parent.Parent.Option)
function module_upvr.GetCommSubFolder(arg1, arg2) -- Line 12
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Option_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 9 start (CF ANALYSIS FAILED)
	local var3
	if module_upvr.IsServer then
		var3 = arg1:FindFirstChild(arg2)
		if not var3 then
			var3 = Instance.new("Folder")
			var3.Name = arg2
			var3.Parent = arg1
			-- KONSTANTWARNING: GOTO [29] #23
		end
	else
		var3 = arg1:WaitForChild(arg2, module_upvr.WaitForChildTimeout)
	end
	-- KONSTANTERROR: [0] 1. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 23. Error Block 6 start (CF ANALYSIS FAILED)
	do
		return Option_upvr.Wrap(var3)
	end
	-- KONSTANTERROR: [29] 23. Error Block 6 end (CF ANALYSIS FAILED)
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.Promise
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:31
-- Luau version 6, Types version 3
-- Time taken: 0.000200 seconds

return require(script.Parent.Parent["evaera_promise@4.0.0"].promise)

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:32
-- Luau version 6, Types version 3
-- Time taken: 0.000201 seconds

return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.Symbol
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:45
-- Luau version 6, Types version 3
-- Time taken: 0.000192 seconds

return require(script.Parent.Parent["sleitnick_symbol@2.0.1"].symbol)

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.Trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:46
-- Luau version 6, Types version 3
-- Time taken: 0.000177 seconds

return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.component
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:47
-- Luau version 6, Types version 3
-- Time taken: 0.009771 seconds

local RunService_upvr = game:GetService("RunService")
local Symbol = require(script.Parent.Symbol)
local tbl_upvr_2 = {workspace, game:GetService("Players")}
local var2_result1_upvr_6 = Symbol("Ancestors")
local var2_result1_upvr_2 = Symbol("InstancesToComponents")
local var2_result1_upvr_4 = Symbol("LockConstruct")
local var2_result1_upvr_7 = Symbol("Components")
local Symbol_result1_upvr = Symbol("Trove")
local var2_result1_upvr_5 = Symbol("Extensions")
local var2_result1_upvr = Symbol("ActiveExtensions")
local var2_result1_upvr_3 = Symbol("Started")
local var12_upvw = 0
local function _() -- Line 192, Named "NextRenderName"
	--[[ Upvalues[1]:
		[1]: var12_upvw (read and write)
	]]
	var12_upvw += 1
	return "ComponentRender"..tostring(var12_upvw)
end
local function InvokeExtensionFn_upvr(arg1, arg2) -- Line 197, Named "InvokeExtensionFn"
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr (readonly)
	]]
	for _, v in ipairs(arg1[var2_result1_upvr]) do
		local var18 = v[arg2]
		if type(var18) == "function" then
			var18(arg1)
		end
	end
end
local function ShouldConstruct_upvr(arg1) -- Line 206, Named "ShouldConstruct"
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr (readonly)
	]]
	for _, v_2 in ipairs(arg1[var2_result1_upvr]) do
		local ShouldConstruct = v_2.ShouldConstruct
		if type(ShouldConstruct) == "function" and not ShouldConstruct(arg1) then
			return false
		end
	end
	return true
end
local function GetActiveExtensions_upvr(arg1, arg2) -- Line 219, Named "GetActiveExtensions"
	local var32
	for _, v_3 in ipairs(arg2) do
		local ShouldExtend = v_3.ShouldExtend
		local var34 = true
		if type(ShouldExtend) == "function" then
			var34 = not not ShouldExtend(arg1)
		end
		if var34 then
			table.insert(table.create(#arg2), v_3)
		else
		end
	end
	if nil then
		return arg2
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.create(#arg2)
end
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Trove)
local Signal_upvr = require(script.Parent.Signal)
function module_upvr.new(arg1) -- Line 298
	--[[ Upvalues[11]:
		[1]: var2_result1_upvr_6 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: var2_result1_upvr_2 (readonly)
		[4]: var2_result1_upvr_7 (readonly)
		[5]: var2_result1_upvr_4 (readonly)
		[6]: Symbol_result1_upvr (readonly)
		[7]: Trove_upvr (readonly)
		[8]: var2_result1_upvr_5 (readonly)
		[9]: var2_result1_upvr_3 (readonly)
		[10]: Signal_upvr (readonly)
		[11]: module_upvr (readonly)
	]]
	local module = {}
	module.__index = module
	function module.__tostring() -- Line 301
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		return "Component<"..arg1.Tag..'>'
	end
	local Ancestors = arg1.Ancestors
	if not Ancestors then
		Ancestors = tbl_upvr_2
	end
	module[var2_result1_upvr_6] = Ancestors
	module[var2_result1_upvr_2] = {}
	module[var2_result1_upvr_7] = {}
	module[var2_result1_upvr_4] = {}
	module[Symbol_result1_upvr] = Trove_upvr.new()
	local Extensions = arg1.Extensions
	if not Extensions then
		Extensions = {}
	end
	module[var2_result1_upvr_5] = Extensions
	module[var2_result1_upvr_3] = false
	module.Tag = arg1.Tag
	module.Started = module[Symbol_result1_upvr]:Construct(Signal_upvr)
	module.Stopped = module[Symbol_result1_upvr]:Construct(Signal_upvr)
	setmetatable(module, module_upvr)
	module:_setup()
	return module
end
function module_upvr._instantiate(arg1, arg2) -- Line 319
	--[[ Upvalues[5]:
		[1]: var2_result1_upvr (readonly)
		[2]: GetActiveExtensions_upvr (readonly)
		[3]: var2_result1_upvr_5 (readonly)
		[4]: ShouldConstruct_upvr (readonly)
		[5]: InvokeExtensionFn_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, arg1)
	setmetatable_result1.Instance = arg2
	setmetatable_result1[var2_result1_upvr] = GetActiveExtensions_upvr(setmetatable_result1, arg1[var2_result1_upvr_5])
	if not ShouldConstruct_upvr(setmetatable_result1) then
		return nil
	end
	InvokeExtensionFn_upvr(setmetatable_result1, "Constructing")
	if type(setmetatable_result1.Construct) == "function" then
		setmetatable_result1:Construct()
	end
	InvokeExtensionFn_upvr(setmetatable_result1, "Constructed")
	return setmetatable_result1
end
local any_IsServer_result1_upvr = RunService_upvr:IsServer()
local CollectionService_upvr = game:GetService("CollectionService")
function module_upvr._setup(arg1) -- Line 334
	--[[ Upvalues[11]:
		[1]: InvokeExtensionFn_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: any_IsServer_result1_upvr (readonly)
		[4]: var12_upvw (read and write)
		[5]: var2_result1_upvr_3 (readonly)
		[6]: var2_result1_upvr_4 (readonly)
		[7]: var2_result1_upvr_2 (readonly)
		[8]: var2_result1_upvr_7 (readonly)
		[9]: var2_result1_upvr_6 (readonly)
		[10]: Symbol_result1_upvr (readonly)
		[11]: CollectionService_upvr (readonly)
	]]
	local tbl_upvr = {}
	local function StartComponent_upvr(arg1_2) -- Line 337, Named "StartComponent"
		--[[ Upvalues[6]:
			[1]: InvokeExtensionFn_upvr (copied, readonly)
			[2]: RunService_upvr (copied, readonly)
			[3]: any_IsServer_result1_upvr (copied, readonly)
			[4]: var12_upvw (copied, read and write)
			[5]: var2_result1_upvr_3 (copied, readonly)
			[6]: arg1 (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 30 start (CF ANALYSIS FAILED)
		InvokeExtensionFn_upvr(arg1_2, "Starting")
		arg1_2:Start()
		local var50 = InvokeExtensionFn_upvr
		var50(arg1_2, "Started")
		local var51
		if typeof(arg1_2.HeartbeatUpdate) ~= "function" then
			var50 = false
		else
			var50 = true
		end
		var51 = typeof(arg1_2.SteppedUpdate)
		if var51 ~= "function" then
			-- KONSTANTWARNING: GOTO [31] #25
		end
		-- KONSTANTERROR: [0] 1. Error Block 30 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [30] 24. Error Block 37 start (CF ANALYSIS FAILED)
		if typeof(arg1_2.RenderSteppedUpdate) ~= "function" then
			var51 = false
		else
			var51 = true
		end
		if var50 then
			arg1_2._heartbeatUpdate = RunService_upvr.Heartbeat:Connect(function(arg1_3) -- Line 345
				--[[ Upvalues[1]:
					[1]: arg1_2 (readonly)
				]]
				arg1_2:HeartbeatUpdate(arg1_3)
			end)
		end
		if true then
			arg1_2._steppedUpdate = RunService_upvr.Stepped:Connect(function(arg1_4, arg2) -- Line 350
				--[[ Upvalues[1]:
					[1]: arg1_2 (readonly)
				]]
				arg1_2:SteppedUpdate(arg2)
			end)
		end
		if var51 and not any_IsServer_result1_upvr then
			if arg1_2.RenderPriority then
				var12_upvw += 1
				arg1_2._renderName = "ComponentRender"..tostring(var12_upvw)
				RunService_upvr:BindToRenderStep(arg1_2._renderName, arg1_2.RenderPriority, function(arg1_5) -- Line 357
					--[[ Upvalues[1]:
						[1]: arg1_2 (readonly)
					]]
					arg1_2:RenderSteppedUpdate(arg1_5)
				end)
			else
				arg1_2._renderSteppedUpdate = RunService_upvr.RenderStepped:Connect(function(arg1_6) -- Line 361
					--[[ Upvalues[1]:
						[1]: arg1_2 (readonly)
					]]
					arg1_2:RenderSteppedUpdate(arg1_6)
				end)
			end
		end
		arg1_2[var2_result1_upvr_3] = true
		arg1.Started:Fire(arg1_2)
		-- KONSTANTERROR: [30] 24. Error Block 37 end (CF ANALYSIS FAILED)
	end
	local function StopComponent_upvr(arg1_7) -- Line 370, Named "StopComponent"
		--[[ Upvalues[3]:
			[1]: RunService_upvr (copied, readonly)
			[2]: InvokeExtensionFn_upvr (copied, readonly)
			[3]: arg1 (readonly)
		]]
		if arg1_7._heartbeatUpdate then
			arg1_7._heartbeatUpdate:Disconnect()
		end
		if arg1_7._steppedUpdate then
			arg1_7._steppedUpdate:Disconnect()
		end
		if arg1_7._renderSteppedUpdate then
			arg1_7._renderSteppedUpdate:Disconnect()
		elseif arg1_7._renderName then
			RunService_upvr:UnbindFromRenderStep(arg1_7._renderName)
		end
		InvokeExtensionFn_upvr(arg1_7, "Stopping")
		arg1_7:Stop()
		InvokeExtensionFn_upvr(arg1_7, "Stopped")
		arg1.Stopped:Fire(arg1_7)
	end
	local function _(arg1_8, arg2) -- Line 388, Named "SafeConstruct"
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_4 (copied, readonly)
		]]
		if arg1[var2_result1_upvr_4][arg1_8] ~= arg2 then
			return nil
		end
		if arg1[var2_result1_upvr_4][arg1_8] ~= arg2 then
			return nil
		end
		return arg1:_instantiate(arg1_8)
	end
	local function _(arg1_9) -- Line 399, Named "TryConstructComponent"
		--[[ Upvalues[5]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_2 (copied, readonly)
			[3]: var2_result1_upvr_4 (copied, readonly)
			[4]: var2_result1_upvr_7 (copied, readonly)
			[5]: StartComponent_upvr (readonly)
		]]
		if arg1[var2_result1_upvr_2][arg1_9] then
		else
			local var56_upvw = (arg1[var2_result1_upvr_4][arg1_9] or 0) + 1
			arg1[var2_result1_upvr_4][arg1_9] = var56_upvw
			task.defer(function() -- Line 406
				--[[ Upvalues[7]:
					[1]: arg1_9 (readonly)
					[2]: var56_upvw (read and write)
					[3]: arg1 (copied, readonly)
					[4]: var2_result1_upvr_4 (copied, readonly)
					[5]: var2_result1_upvr_2 (copied, readonly)
					[6]: var2_result1_upvr_7 (copied, readonly)
					[7]: StartComponent_upvr (copied, readonly)
				]]
				-- KONSTANTERROR: [0] 1. Error Block 14 start (CF ANALYSIS FAILED)
				local var58 = arg1_9
				local var59 = var56_upvw
				local var60_upvr
				if arg1[var2_result1_upvr_4][var58] ~= var59 then
					var60_upvr = nil
					-- KONSTANTWARNING: GOTO [24] #22
				end
				-- KONSTANTERROR: [0] 1. Error Block 14 end (CF ANALYSIS FAILED)
				-- KONSTANTERROR: [10] 10. Error Block 15 start (CF ANALYSIS FAILED)
				if arg1[var2_result1_upvr_4][var58] ~= var59 then
					var60_upvr = nil
				else
					var60_upvr = arg1:_instantiate(var58)
				end
				if not var60_upvr then
				else
					arg1[var2_result1_upvr_2][arg1_9] = var60_upvr
					table.insert(arg1[var2_result1_upvr_7], var60_upvr)
					task.defer(function() -- Line 413
						--[[ Upvalues[5]:
							[1]: arg1 (copied, readonly)
							[2]: var2_result1_upvr_2 (copied, readonly)
							[3]: arg1_9 (copied, readonly)
							[4]: var60_upvr (readonly)
							[5]: StartComponent_upvr (copied, readonly)
						]]
						if arg1[var2_result1_upvr_2][arg1_9] == var60_upvr then
							StartComponent_upvr(var60_upvr)
						end
					end)
					-- KONSTANTERROR: [10] 10. Error Block 15 end (CF ANALYSIS FAILED)
				end
			end)
		end
	end
	local function TryDeconstructComponent_upvr(arg1_10) -- Line 421, Named "TryDeconstructComponent"
		--[[ Upvalues[6]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_2 (copied, readonly)
			[3]: var2_result1_upvr_4 (copied, readonly)
			[4]: var2_result1_upvr_7 (copied, readonly)
			[5]: var2_result1_upvr_3 (copied, readonly)
			[6]: StopComponent_upvr (readonly)
		]]
		local var62 = arg1[var2_result1_upvr_2][arg1_10]
		if not var62 then
		else
			arg1[var2_result1_upvr_2][arg1_10] = nil
			arg1[var2_result1_upvr_4][arg1_10] = nil
			local var63 = arg1[var2_result1_upvr_7]
			local table_find_result1 = table.find(var63, var62)
			if table_find_result1 then
				local len = #var63
				var63[table_find_result1] = var63[len]
				var63[len] = nil
			end
			if var62[var2_result1_upvr_3] then
				task.spawn(StopComponent_upvr, var62)
			end
		end
	end
	local function StartWatchingInstance_upvr(arg1_11) -- Line 440, Named "StartWatchingInstance"
		--[[ Upvalues[9]:
			[1]: tbl_upvr (readonly)
			[2]: arg1 (readonly)
			[3]: var2_result1_upvr_6 (copied, readonly)
			[4]: Symbol_result1_upvr (copied, readonly)
			[5]: var2_result1_upvr_2 (copied, readonly)
			[6]: var2_result1_upvr_4 (copied, readonly)
			[7]: var2_result1_upvr_7 (copied, readonly)
			[8]: StartComponent_upvr (readonly)
			[9]: TryDeconstructComponent_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 15 start (CF ANALYSIS FAILED)
		if tbl_upvr[arg1_11] then return end
		local function _() -- Line 444, Named "IsInAncestorList"
			--[[ Upvalues[3]:
				[1]: arg1 (copied, readonly)
				[2]: var2_result1_upvr_6 (copied, readonly)
				[3]: arg1_11 (readonly)
			]]
			for _, v_4 in ipairs(arg1[var2_result1_upvr_6]) do
				if arg1_11:IsDescendantOf(v_4) then
					return true
				end
			end
			return false
		end
		tbl_upvr[arg1_11] = arg1[Symbol_result1_upvr]:Connect(arg1_11.AncestryChanged, function(arg1_12, arg2) -- Line 452
			--[[ Upvalues[8]:
				[1]: arg1 (copied, readonly)
				[2]: var2_result1_upvr_6 (copied, readonly)
				[3]: arg1_11 (readonly)
				[4]: var2_result1_upvr_2 (copied, readonly)
				[5]: var2_result1_upvr_4 (copied, readonly)
				[6]: var2_result1_upvr_7 (copied, readonly)
				[7]: StartComponent_upvr (copied, readonly)
				[8]: TryDeconstructComponent_upvr (copied, readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [18] 16. Error Block 16 start (CF ANALYSIS FAILED)
			if false then
				local var72_upvr = arg1_11
				if arg1[var2_result1_upvr_2][var72_upvr] then
				else
					local var73_upvw = (arg1[var2_result1_upvr_4][var72_upvr] or 0) + 1
					arg1[var2_result1_upvr_4][var72_upvr] = var73_upvw
					task.defer(function() -- Line 406
						--[[ Upvalues[7]:
							[1]: var72_upvr (readonly)
							[2]: var73_upvw (read and write)
							[3]: arg1 (copied, readonly)
							[4]: var2_result1_upvr_4 (copied, readonly)
							[5]: var2_result1_upvr_2 (copied, readonly)
							[6]: var2_result1_upvr_7 (copied, readonly)
							[7]: StartComponent_upvr (copied, readonly)
						]]
						local var75 = var72_upvr
						local var76 = var73_upvw
						local var77_upvr
						if arg1[var2_result1_upvr_4][var75] ~= var76 then
							var77_upvr = nil
						elseif arg1[var2_result1_upvr_4][var75] ~= var76 then
							var77_upvr = nil
						else
							var77_upvr = arg1:_instantiate(var75)
						end
						if not var77_upvr then
						else
							arg1[var2_result1_upvr_2][var72_upvr] = var77_upvr
							table.insert(arg1[var2_result1_upvr_7], var77_upvr)
							task.defer(function() -- Line 413
								--[[ Upvalues[5]:
									[1]: arg1 (copied, readonly)
									[2]: var2_result1_upvr_2 (copied, readonly)
									[3]: var72_upvr (copied, readonly)
									[4]: var77_upvr (readonly)
									[5]: StartComponent_upvr (copied, readonly)
								]]
								if arg1[var2_result1_upvr_2][var72_upvr] == var77_upvr then
									StartComponent_upvr(var77_upvr)
								end
							end)
						end
					end)
				end
			end
			-- KONSTANTERROR: [18] 16. Error Block 16 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [50] 47. Error Block 11 start (CF ANALYSIS FAILED)
			var72_upvr = TryDeconstructComponent_upvr
			var72_upvr(arg1_11)
			-- KONSTANTERROR: [50] 47. Error Block 11 end (CF ANALYSIS FAILED)
		end)
		local ipairs_result1_2, ipairs_result2, ipairs_result3_3 = ipairs(arg1[var2_result1_upvr_6])
		-- KONSTANTERROR: [0] 1. Error Block 15 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [41] 38. Error Block 6 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [41] 38. Error Block 6 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [34] 32. Error Block 19 start (CF ANALYSIS FAILED)
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [41.9]
		if nil then
			-- KONSTANTWARNING: GOTO [44] #40
		end
		-- KONSTANTERROR: [34] 32. Error Block 19 end (CF ANALYSIS FAILED)
	end
	local function InstanceTagged(arg1_13) -- Line 465
		--[[ Upvalues[1]:
			[1]: StartWatchingInstance_upvr (readonly)
		]]
		StartWatchingInstance_upvr(arg1_13)
	end
	arg1[Symbol_result1_upvr]:Connect(CollectionService_upvr:GetInstanceAddedSignal(arg1.Tag), InstanceTagged)
	arg1[Symbol_result1_upvr]:Connect(CollectionService_upvr:GetInstanceRemovedSignal(arg1.Tag), function(arg1_14) -- Line 469, Named "InstanceUntagged"
		--[[ Upvalues[2]:
			[1]: tbl_upvr (readonly)
			[2]: TryDeconstructComponent_upvr (readonly)
		]]
		local var83 = tbl_upvr[arg1_14]
		if var83 then
			var83:Disconnect()
			tbl_upvr[arg1_14] = nil
		end
		TryDeconstructComponent_upvr(arg1_14)
	end)
	for _, v_5 in ipairs(CollectionService_upvr:GetTagged(arg1.Tag)) do
		task.defer(InstanceTagged, v_5)
	end
end
function module_upvr.GetAll(arg1) -- Line 506
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_7 (readonly)
	]]
	return arg1[var2_result1_upvr_7]
end
function module_upvr.FromInstance(arg1, arg2) -- Line 523
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_2 (readonly)
	]]
	return arg1[var2_result1_upvr_2][arg2]
end
local Promise_upvr = require(script.Parent.Promise)
function module_upvr.WaitForInstance(arg1, arg2, arg3) -- Line 546
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	local any_FromInstance_result1_upvw = arg1:FromInstance(arg2)
	if any_FromInstance_result1_upvw then
		return Promise_upvr.resolve(any_FromInstance_result1_upvw)
	end
	local function var91(arg1_15) -- Line 551
		--[[ Upvalues[2]:
			[1]: arg2 (readonly)
			[2]: any_FromInstance_result1_upvw (read and write)
		]]
		local var90
		if arg1_15.Instance ~= arg2 then
			var90 = false
		else
			var90 = true
		end
		if var90 then
			any_FromInstance_result1_upvw = arg1_15
		end
		return var90
	end
	function var91() -- Line 558
		--[[ Upvalues[1]:
			[1]: any_FromInstance_result1_upvw (read and write)
		]]
		return any_FromInstance_result1_upvw
	end
	local var92 = var91
	if type(arg3) == "number" then
		var92 = arg3
	else
		var92 = 60
	end
	return Promise_upvr.fromEvent(arg1.Started, var91):andThen(var92):timeout(var92)
end
function module_upvr.Construct(arg1) -- Line 578
end
function module_upvr.Start(arg1) -- Line 595
end
function module_upvr.Stop(arg1) -- Line 615
end
function module_upvr.GetComponent(arg1, arg2) -- Line 634
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_2 (readonly)
	]]
	return arg2[var2_result1_upvr_2][arg1.Instance]
end
function module_upvr.Destroy(arg1) -- Line 719
	--[[ Upvalues[1]:
		[1]: Symbol_result1_upvr (readonly)
	]]
	arg1[Symbol_result1_upvr]:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_component@2.4.6.component.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:48
-- Luau version 6, Types version 3
-- Time taken: 0.007959 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	local CollectionService_upvr = game:GetService("CollectionService")
	local var4_upvw
	local function _() -- Line 11, Named "CreateTaggedInstance"
		--[[ Upvalues[2]:
			[1]: CollectionService_upvr (readonly)
			[2]: var4_upvw (read and write)
		]]
		local Folder_5 = Instance.new("Folder")
		CollectionService_upvr:AddTag(Folder_5, "__KnitTestComponent__")
		Folder_5.Name = "ComponentTest"
		Folder_5.Archivable = false
		Folder_5.Parent = var4_upvw
		return Folder_5
	end
	local tbl = {}
	local function ShouldConstruct(arg1) -- Line 21
		return true
	end
	tbl.ShouldConstruct = ShouldConstruct
	local function Constructing(arg1) -- Line 24
		arg1.Data = 'a'
		arg1.DidHeartbeat = false
		arg1.DidStepped = false
		arg1.DidRenderStepped = false
	end
	tbl.Constructing = Constructing
	function tbl.Constructed(arg1) -- Line 30
		arg1.Data ..= 'c'
	end
	function tbl.Starting(arg1) -- Line 33
		arg1.Data ..= 'd'
	end
	function tbl.Started(arg1) -- Line 36
		arg1.Data ..= 'f'
	end
	function tbl.Stopping(arg1) -- Line 39
		arg1.Data ..= 'g'
	end
	function tbl.Stopped(arg1) -- Line 42
		arg1.Data ..= 'i'
	end
	local any_new_result1_upvr = Parent_upvr.new({
		Tag = "__KnitTestComponent__";
		Ancestors = {workspace, game:GetService("Lighting")};
		Extensions = {tbl};
	})
	local any_new_result1_upvr_3 = Parent_upvr.new({
		Tag = "__KnitTestComponent__";
	})
	function any_new_result1_upvr_3.GetData(arg1) -- Line 53
		return true
	end
	local function Construct(arg1) -- Line 57
		arg1.Data ..= 'b'
	end
	any_new_result1_upvr.Construct = Construct
	function any_new_result1_upvr.Start(arg1) -- Line 61
		--[[ Upvalues[1]:
			[1]: any_new_result1_upvr_3 (readonly)
		]]
		arg1.Another = arg1:GetComponent(any_new_result1_upvr_3)
		arg1.Data ..= 'e'
	end
	function any_new_result1_upvr.Stop(arg1) -- Line 66
		arg1.Data ..= 'h'
	end
	function any_new_result1_upvr.HeartbeatUpdate(arg1, arg2) -- Line 70
		arg1.DidHeartbeat = true
	end
	function any_new_result1_upvr.SteppedUpdate(arg1, arg2) -- Line 74
		arg1.DidStepped = true
	end
	function any_new_result1_upvr.RenderSteppedUpdate(arg1, arg2) -- Line 78
		arg1.DidRenderStepped = true
	end
	beforeAll(function() -- Line 82
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		var4_upvw = Instance.new("Folder")
		var4_upvw.Name = "KnitComponentTest"
		var4_upvw.Archivable = false
		var4_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 89
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		var4_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 93
		--[[ Upvalues[2]:
			[1]: var4_upvw (read and write)
			[2]: any_new_result1_upvr (readonly)
		]]
		var4_upvw:Destroy()
		any_new_result1_upvr:Destroy()
	end)
	local RunService_upvr = game:GetService("RunService")
	describe("Component", function() -- Line 98
		--[[ Upvalues[5]:
			[1]: any_new_result1_upvr (readonly)
			[2]: CollectionService_upvr (readonly)
			[3]: var4_upvw (read and write)
			[4]: RunService_upvr (readonly)
			[5]: Parent_upvr (readonly)
		]]
		it("should capture start and stop events", function() -- Line 99
			--[[ Upvalues[3]:
				[1]: any_new_result1_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local var19_upvw = 0
			local var20_upvw = 0
			local Folder_4 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_4, "__KnitTestComponent__")
			Folder_4.Name = "ComponentTest"
			Folder_4.Archivable = false
			Folder_4.Parent = var4_upvw
			task.wait()
			Folder_4:Destroy()
			task.wait()
			any_new_result1_upvr.Started:Connect(function() -- Line 102
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				var19_upvw += 1
			end):Disconnect()
			any_new_result1_upvr.Stopped:Connect(function() -- Line 105
				--[[ Upvalues[1]:
					[1]: var20_upvw (read and write)
				]]
				var20_upvw += 1
			end):Disconnect()
			expect(var19_upvw).to.equal(1)
			expect(var20_upvw).to.equal(1)
		end)
		it("should be able to get component from the instance", function() -- Line 118
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local Folder_13 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_13, "__KnitTestComponent__")
			Folder_13.Name = "ComponentTest"
			Folder_13.Archivable = false
			Folder_13.Parent = var4_upvw
			task.wait()
			expect(any_new_result1_upvr:FromInstance(Folder_13)).to.be.ok()
		end)
		it("should be able to get all component instances existing", function() -- Line 125
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local table_create_result1 = table.create(3)
			local Folder_14 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_14, "__KnitTestComponent__")
			Folder_14.Name = "ComponentTest"
			Folder_14.Archivable = false
			Folder_14.Parent = var4_upvw
			table_create_result1[1] = Folder_14
			local Folder_7 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_7, "__KnitTestComponent__")
			Folder_7.Name = "ComponentTest"
			Folder_7.Archivable = false
			Folder_7.Parent = var4_upvw
			table_create_result1[2] = Folder_7
			local Folder_2 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_2, "__KnitTestComponent__")
			Folder_2.Name = "ComponentTest"
			Folder_2.Archivable = false
			Folder_2.Parent = var4_upvw
			table_create_result1[3] = Folder_2
			task.wait()
			local any_GetAll_result1 = any_new_result1_upvr:GetAll()
			expect(any_GetAll_result1).to.be.a("table")
			expect(#any_GetAll_result1).to.equal(3)
			for _, v in ipairs(any_GetAll_result1) do
				expect(table.find(table_create_result1, v.Instance)).to.be.ok()
			end
		end)
		it("should call lifecycle methods and extension functions", function() -- Line 141
			--[[ Upvalues[4]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
				[4]: RunService_upvr (copied, readonly)
			]]
			local Folder_9 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_9, "__KnitTestComponent__")
			Folder_9.Name = "ComponentTest"
			Folder_9.Archivable = false
			Folder_9.Parent = var4_upvw
			local var41 = Folder_9
			task.wait(0.2)
			local any_FromInstance_result1_4 = any_new_result1_upvr:FromInstance(var41)
			expect(any_FromInstance_result1_4).to.be.ok()
			expect(any_FromInstance_result1_4.Data).to.equal("abcdef")
			expect(any_FromInstance_result1_4.DidHeartbeat).to.equal(true)
			expect(any_FromInstance_result1_4.DidStepped).to.equal(RunService_upvr:IsRunning())
			expect(any_FromInstance_result1_4.DidRenderStepped).to.never.equal(true)
			var41:Destroy()
			task.wait()
			expect(any_FromInstance_result1_4.Data).to.equal("abcdefghi")
		end)
		it("should get another component linked to the same instance", function() -- Line 155
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local Folder_12 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_12, "__KnitTestComponent__")
			Folder_12.Name = "ComponentTest"
			Folder_12.Archivable = false
			Folder_12.Parent = var4_upvw
			task.wait()
			local any_FromInstance_result1_3 = any_new_result1_upvr:FromInstance(Folder_12)
			expect(any_FromInstance_result1_3).to.be.ok()
			expect(any_FromInstance_result1_3.Another).to.be.ok()
			expect(any_FromInstance_result1_3.Another:GetData()).to.equal(true)
		end)
		it("should use extension to decide whether or not to construct", function() -- Line 164
			--[[ Upvalues[3]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local tbl_upvr = {
				c = true;
			}
			local function ShouldConstruct(arg1) -- Line 166
				--[[ Upvalues[1]:
					[1]: tbl_upvr (readonly)
				]]
				return tbl_upvr.c
			end
			tbl_upvr.ShouldConstruct = ShouldConstruct
			local tbl_upvr_3 = {
				c = true;
			}
			local function ShouldConstruct(arg1) -- Line 171
				--[[ Upvalues[1]:
					[1]: tbl_upvr_3 (readonly)
				]]
				return tbl_upvr_3.c
			end
			tbl_upvr_3.ShouldConstruct = ShouldConstruct
			local tbl_upvr_2 = {
				c = true;
			}
			function tbl_upvr_2.ShouldConstruct(arg1) -- Line 176
				--[[ Upvalues[1]:
					[1]: tbl_upvr_2 (readonly)
				]]
				return tbl_upvr_2.c
			end
			local any_new_result1_upvr_4 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr};
			})
			local any_new_result1_upvr_5 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr, tbl_upvr_3};
			})
			local any_new_result1_upvr_2 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr, tbl_upvr_3, tbl_upvr_2};
			})
			local function _(arg1, arg2, arg3) -- Line 184, Named "SetE"
				--[[ Upvalues[3]:
					[1]: tbl_upvr (readonly)
					[2]: tbl_upvr_3 (readonly)
					[3]: tbl_upvr_2 (readonly)
				]]
				tbl_upvr.c = arg1
				tbl_upvr_3.c = arg2
				tbl_upvr_2.c = arg3
			end
			local function Check_upvr(arg1, arg2, arg3) -- Line 190, Named "Check"
				local any_FromInstance_result1_2 = arg2:FromInstance(arg1)
				if arg3 then
					expect(any_FromInstance_result1_2).to.be.ok()
				else
					expect(any_FromInstance_result1_2).to.never.be.ok()
				end
			end
			local function _(arg1, arg2, arg3) -- Line 199, Named "CreateAndCheckAll"
				--[[ Upvalues[6]:
					[1]: CollectionService_upvr (copied, readonly)
					[2]: var4_upvw (copied, read and write)
					[3]: Check_upvr (readonly)
					[4]: any_new_result1_upvr_4 (readonly)
					[5]: any_new_result1_upvr_5 (readonly)
					[6]: any_new_result1_upvr_2 (readonly)
				]]
				local Folder_3 = Instance.new("Folder")
				CollectionService_upvr:AddTag(Folder_3, "__KnitTestComponent__")
				Folder_3.Name = "ComponentTest"
				Folder_3.Archivable = false
				Folder_3.Parent = var4_upvw
				local var61 = Folder_3
				task.wait()
				Check_upvr(var61, any_new_result1_upvr_4, arg1)
				Check_upvr(var61, any_new_result1_upvr_5, arg2)
				Check_upvr(var61, any_new_result1_upvr_2, arg3)
			end
			tbl_upvr.c = true
			tbl_upvr_3.c = true
			tbl_upvr_2.c = true
			local Folder = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder, "__KnitTestComponent__")
			Folder.Name = "ComponentTest"
			Folder.Archivable = false
			Folder.Parent = var4_upvw
			local var63 = Folder
			task.wait()
			Check_upvr(var63, any_new_result1_upvr_4, true)
			Check_upvr(var63, any_new_result1_upvr_5, true)
			Check_upvr(var63, any_new_result1_upvr_2, true)
			tbl_upvr.c = false
			tbl_upvr_3.c = false
			tbl_upvr_2.c = false
			local Folder_11 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_11, "__KnitTestComponent__")
			Folder_11.Name = "ComponentTest"
			Folder_11.Archivable = false
			Folder_11.Parent = var4_upvw
			local var65 = Folder_11
			task.wait()
			Check_upvr(var65, any_new_result1_upvr_4, false)
			Check_upvr(var65, any_new_result1_upvr_5, false)
			Check_upvr(var65, any_new_result1_upvr_2, false)
			tbl_upvr.c = true
			tbl_upvr_3.c = false
			tbl_upvr_2.c = true
			local Folder_8 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_8, "__KnitTestComponent__")
			Folder_8.Name = "ComponentTest"
			Folder_8.Archivable = false
			Folder_8.Parent = var4_upvw
			local var67 = Folder_8
			task.wait()
			Check_upvr(var67, any_new_result1_upvr_4, true)
			Check_upvr(var67, any_new_result1_upvr_5, false)
			Check_upvr(var67, any_new_result1_upvr_2, false)
			tbl_upvr.c = false
			tbl_upvr_3.c = false
			tbl_upvr_2.c = true
			local Folder_10 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_10, "__KnitTestComponent__")
			Folder_10.Name = "ComponentTest"
			Folder_10.Archivable = false
			Folder_10.Parent = var4_upvw
			local var69 = Folder_10
			task.wait()
			Check_upvr(var69, any_new_result1_upvr_4, false)
			Check_upvr(var69, any_new_result1_upvr_5, false)
			Check_upvr(var69, any_new_result1_upvr_2, false)
		end)
		it("should decide whether or not to use extend", function() -- Line 224
			--[[ Upvalues[3]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local tbl_upvr_5 = {
				extend = true;
			}
			local function ShouldExtend(arg1) -- Line 226
				--[[ Upvalues[1]:
					[1]: tbl_upvr_5 (readonly)
				]]
				return tbl_upvr_5.extend
			end
			tbl_upvr_5.ShouldExtend = ShouldExtend
			local function Constructing(arg1) -- Line 229
				arg1.E1 = true
			end
			tbl_upvr_5.Constructing = Constructing
			local tbl_upvr_4 = {
				extend = true;
			}
			function tbl_upvr_4.ShouldExtend(arg1) -- Line 234
				--[[ Upvalues[1]:
					[1]: tbl_upvr_4 (readonly)
				]]
				return tbl_upvr_4.extend
			end
			function tbl_upvr_4.Constructing(arg1) -- Line 237
				arg1.E2 = true
			end
			local any_new_result1_upvr_6 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr_5, tbl_upvr_4};
			})
			local function SetAndCheck(arg1, arg2) -- Line 243
				--[[ Upvalues[5]:
					[1]: tbl_upvr_5 (readonly)
					[2]: tbl_upvr_4 (readonly)
					[3]: CollectionService_upvr (copied, readonly)
					[4]: var4_upvw (copied, read and write)
					[5]: any_new_result1_upvr_6 (readonly)
				]]
				tbl_upvr_5.extend = arg1
				tbl_upvr_4.extend = arg2
				local Folder_6 = Instance.new("Folder")
				CollectionService_upvr:AddTag(Folder_6, "__KnitTestComponent__")
				Folder_6.Name = "ComponentTest"
				Folder_6.Archivable = false
				Folder_6.Parent = var4_upvw
				task.wait()
				local any_FromInstance_result1 = any_new_result1_upvr_6:FromInstance(Folder_6)
				expect(any_FromInstance_result1).to.be.ok()
				if arg1 then
					expect(any_FromInstance_result1.E1).to.equal(true)
				else
					expect(any_FromInstance_result1.E1).to.never.be.ok()
				end
				if arg2 then
					expect(any_FromInstance_result1.E2).to.equal(true)
				else
					expect(any_FromInstance_result1.E2).to.never.be.ok()
				end
			end
			SetAndCheck(true, true)
			SetAndCheck(false, false)
			SetAndCheck(true, false)
			SetAndCheck(false, true)
		end)
		it("should allow yielding within construct", function() -- Line 268
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
			]]
			local var80_upvw = 0
			Parent_upvr.new({
				Tag = "CustomTag";
			}).Construct = function(arg1) -- Line 275, Named "Construct"
				--[[ Upvalues[1]:
					[1]: var80_upvw (read and write)
				]]
				var80_upvw += 1
				task.wait(0.5)
			end
			local Part = Instance.new("Part")
			Part.Anchored = true
			Part.Parent = game:GetService("ReplicatedStorage")
			CollectionService_upvr:AddTag(Part, "CustomTag")
			local clone = Part:Clone()
			clone.Parent = workspace
			task.wait(0.6)
			expect(var80_upvw).to.equal(1)
			Part:Destroy()
			clone:Destroy()
		end)
		it("should wait for instance", function() -- Line 294
			--[[ Upvalues[2]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: any_new_result1_upvr (copied, readonly)
			]]
			local Part_upvr = Instance.new("Part")
			Part_upvr.Anchored = true
			Part_upvr.Parent = workspace
			task.delay(0.1, function() -- Line 298
				--[[ Upvalues[2]:
					[1]: CollectionService_upvr (copied, readonly)
					[2]: Part_upvr (readonly)
				]]
				CollectionService_upvr:AddTag(Part_upvr, "__KnitTestComponent__")
			end)
			local any_await_result1, any_await_result2 = any_new_result1_upvr:WaitForInstance(Part_upvr):timeout(1):await()
			expect(any_await_result1).to.equal(true)
			expect(any_await_result2).to.be.a("table")
			expect(any_await_result2.Instance).to.equal(Part_upvr)
			Part_upvr:Destroy()
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_enum-list@2.0.1.enum-list
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:49
-- Luau version 6, Types version 3
-- Time taken: 0.001780 seconds

local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function _(arg1, arg2, arg3) -- Line 25, Named "CreateEnumItem"
	local module = {}
	module.Name = arg1
	module.Value = arg2
	module.EnumType = arg3
	table.freeze(module)
	return module
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1, arg2) -- Line 59
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: newproxy_result1_upvr_2 (readonly)
		[3]: newproxy_result1_upvr (readonly)
	]]
	local var9
	if type(arg1) ~= "string" then
		var9 = false
	else
		var9 = true
	end
	assert(var9, "Name string required")
	if type(arg2) ~= "table" then
		var9 = false
	else
		var9 = true
	end
	assert(var9, "Enums table required")
	var9 = {}
	local setmetatable_result1 = setmetatable(var9, module_upvr)
	var9 = newproxy_result1_upvr_2
	setmetatable_result1[var9] = {}
	var9 = newproxy_result1_upvr
	setmetatable_result1[var9] = arg1
	var9 = ipairs(arg2)
	local ipairs_result1, ipairs_result2, ipairs_result3 = ipairs(arg2)
	for i, v in ipairs_result1, ipairs_result2, ipairs_result3 do
		local var14
		if type(v) ~= "string" then
			var14 = false
		else
			var14 = true
		end
		assert(var14, "Enum name must be a string")
		var14 = {}
		var14.Name = v
		var14.Value = i
		var14.EnumType = setmetatable_result1
		table.freeze(var14)
		local var15 = var14
		setmetatable_result1[v] = var15
		var14 = table.insert
		var14(setmetatable_result1[newproxy_result1_upvr_2], var15)
	end
	ipairs_result1 = table.freeze
	ipairs_result1(setmetatable_result1)
	return setmetatable_result1
end
function module_upvr.BelongsTo(arg1, arg2) -- Line 80
	local var16 = false
	if type(arg2) == "table" then
		if arg2.EnumType ~= arg1 then
			var16 = false
		else
			var16 = true
		end
	end
	return var16
end
function module_upvr.GetEnumItems(arg1) -- Line 89
	--[[ Upvalues[1]:
		[1]: newproxy_result1_upvr_2 (readonly)
	]]
	return arg1[newproxy_result1_upvr_2]
end
function module_upvr.GetName(arg1) -- Line 98
	--[[ Upvalues[1]:
		[1]: newproxy_result1_upvr (readonly)
	]]
	return arg1[newproxy_result1_upvr]
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_enum-list@2.0.1.enum-list.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:51
-- Luau version 6, Types version 3
-- Time taken: 0.002917 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Constructor", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a new enumlist", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 6
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test", {"ABC", "XYZ"})
			end).never.to.throw()
		end)
		it("should fail to create a new enumlist with no name", function() -- Line 11
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 12
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new(nil, {"ABC", "XYZ"})
			end).to.throw()
		end)
		it("should fail to create a new enumlist with no enums", function() -- Line 17
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 18
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test")
			end).to.throw()
		end)
		it("should fail to create a new enumlist with non string enums", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 24
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test", {true, false, 32, "ABC"})
			end).to.throw()
		end)
	end)
	describe("Access", function() -- Line 30
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to access enum items", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr_2 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 33
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_2 (readonly)
				]]
			end).never.to.throw()
			expect(any_new_result1_upvr_2:BelongsTo(any_new_result1_upvr_2.ABC)).to.equal(true)
		end)
		it("should throw if trying to modify the enumlist", function() -- Line 39
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr_3 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 41
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_3 (readonly)
				]]
				any_new_result1_upvr_3.Hello = 32
			end).to.throw()
			expect(function() -- Line 44
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_3 (readonly)
				]]
				any_new_result1_upvr_3.ABC = 32
			end).to.throw()
		end)
		it("should throw if trying to modify an enumitem", function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 51
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr (readonly)
				]]
				any_new_result1_upvr.ABC.XYZ = 32
			end).to.throw()
			expect(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr (readonly)
				]]
				any_new_result1_upvr.ABC.Name = "NewName"
			end).to.throw()
		end)
		it("should get the name", function() -- Line 61
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.new("Test", {"ABC", "XYZ"}):GetName()).to.equal("Test")
		end)
	end)
	describe("Get Items", function() -- Line 68
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to get all enum items", function() -- Line 69
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			local any_GetEnumItems_result1 = any_new_result1:GetEnumItems()
			expect(any_GetEnumItems_result1).to.be.a("table")
			expect(#any_GetEnumItems_result1).to.equal(2)
			for i, v in ipairs(any_GetEnumItems_result1) do
				expect(v).to.be.a("table")
				expect(v.Name).to.be.a("string")
				expect(v.Value).to.be.a("number")
				expect(v.Value).to.equal(i)
				expect(v.EnumType).to.equal(any_new_result1)
			end
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:32
-- Luau version 6, Types version 3
-- Time taken: 0.000201 seconds

return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.Trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:46
-- Luau version 6, Types version 3
-- Time taken: 0.000177 seconds

return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:52
-- Luau version 6, Types version 3
-- Time taken: 0.000277 seconds

return {
	PreferredInput = require(script.PreferredInput);
	Mouse = require(script.Mouse);
	Keyboard = require(script.Keyboard);
	Touch = require(script.Touch);
	Gamepad = require(script.Gamepad);
}

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input.Gamepad
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:54
-- Luau version 6, Types version 3
-- Time taken: 0.007612 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local HapticService_upvr = game:GetService("HapticService")
local GuiService_upvr = game:GetService("GuiService")
local RunService_upvr = game:GetService("RunService")
local function _(arg1, arg2) -- Line 13, Named "ApplyDeadzone"
	if math.abs(arg1) < arg2 then
		return 0
	end
	return (math.abs(arg1) - arg2) / (1 - arg2) * math.sign(arg1)
end
local function GetActiveGamepad_upvr() -- Line 20, Named "GetActiveGamepad"
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local any_GetNavigationGamepads_result1 = UserInputService_upvr:GetNavigationGamepads()
	local var10
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 30 start (CF ANALYSIS FAILED)
	for _, v in ipairs(any_GetNavigationGamepads_result1) do
		if var10 == nil or v.Value < var10.Value then
			var10 = v
		end
	end
	if var10 and not UserInputService_upvr:GetGamepadConnected(var10) then
		var10 = nil
	end
	do
		return var10
	end
	-- KONSTANTERROR: [9] 8. Error Block 30 end (CF ANALYSIS FAILED)
end
local function _(arg1, arg2) -- Line 43, Named "HeartbeatDelay"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local time_result1_upvr_2 = time()
	local var16_upvw
	var16_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 46
		--[[ Upvalues[4]:
			[1]: time_result1_upvr_2 (readonly)
			[2]: arg1 (readonly)
			[3]: var16_upvw (read and write)
			[4]: arg2 (readonly)
		]]
		if arg1 <= time() - time_result1_upvr_2 then
			var16_upvw:Disconnect()
			arg2()
		end
	end)
	return var16_upvw
end
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new(arg1) -- Line 232
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1._gamepadTrove = setmetatable_result1._trove:Construct(Trove_upvr)
	setmetatable_result1.ButtonDown = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.ButtonUp = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.Connected = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.Disconnected = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.GamepadChanged = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.DefaultDeadzone = 0.05
	setmetatable_result1.SupportsVibration = false
	setmetatable_result1.State = {}
	setmetatable_result1:_setupGamepad(arg1)
	setmetatable_result1:_setupMotors()
	return setmetatable_result1
end
function module_upvr._setupActiveGamepad(arg1, arg2) -- Line 249
	--[[ Upvalues[2]:
		[1]: HapticService_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
	]]
	local _gamepad = arg1._gamepad
	if arg2 == _gamepad then
	else
		arg1._gamepadTrove:Clean()
		local clear = table.clear
		clear(arg1.State)
		if arg2 then
			clear = HapticService_upvr:IsVibrationSupported(arg2)
		else
			clear = false
		end
		arg1.SupportsVibration = clear
		arg1._gamepad = arg2
		if not arg2 then
			arg1.Disconnected:Fire()
			arg1.GamepadChanged:Fire(nil)
			return
		end
		for _, v_4 in ipairs(UserInputService_upvr:GetGamepadState(arg2)) do
			arg1.State[v_4.KeyCode] = v_4
		end
		arg1._gamepadTrove:Add(arg1, "StopMotors")
		arg1._gamepadTrove:Connect(UserInputService_upvr.InputBegan, function(arg1_2, arg2_2) -- Line 274
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			if arg1_2.UserInputType == arg2 then
				arg1.ButtonDown:Fire(arg1_2.KeyCode, arg2_2)
			end
		end)
		arg1._gamepadTrove:Connect(UserInputService_upvr.InputEnded, function(arg1_3, arg2_3) -- Line 280
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			if arg1_3.UserInputType == arg2 then
				arg1.ButtonUp:Fire(arg1_3.KeyCode, arg2_3)
			end
		end)
		if _gamepad == nil then
			arg1.Connected:Fire()
		end
		arg1.GamepadChanged:Fire(arg2)
	end
end
function module_upvr._setupGamepad(arg1, arg2) -- Line 292
	--[[ Upvalues[2]:
		[1]: UserInputService_upvr (readonly)
		[2]: GetActiveGamepad_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 23. Error Block 3 start (CF ANALYSIS FAILED)
	arg1:_setupActiveGamepad(arg2)
	do
		return
	end
	-- KONSTANTERROR: [29] 23. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [34] 27. Error Block 4 start (CF ANALYSIS FAILED)
	local function CheckToSetupActive() -- Line 314
		--[[ Upvalues[2]:
			[1]: GetActiveGamepad_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local GetActiveGamepad_upvr_result1 = GetActiveGamepad_upvr()
		if GetActiveGamepad_upvr_result1 ~= arg1._gamepad then
			arg1:_setupActiveGamepad(GetActiveGamepad_upvr_result1)
		end
	end
	arg1._trove:Connect(UserInputService_upvr.GamepadConnected, CheckToSetupActive)
	arg1._trove:Connect(UserInputService_upvr.GamepadDisconnected, CheckToSetupActive)
	arg1:_setupActiveGamepad(GetActiveGamepad_upvr())
	-- KONSTANTERROR: [34] 27. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_upvr._setupMotors(arg1) -- Line 327
	arg1._setMotorIds = {}
	for _, v_2 in ipairs(Enum.VibrationMotor:GetEnumItems()) do
		arg1._setMotorIds[v_2] = 0
	end
end
function module_upvr.GetThumbstick(arg1, arg2, arg3) -- Line 349
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Position = arg1.State[arg2].Position
	local var39 = arg3
	if not var39 then
		var39 = arg1.DefaultDeadzone
	end
	local X = Position.X
	if math.abs(X) < var39 then
	else
	end
	local Y = Position.Y
	if math.abs(Y) < var39 then
	else
	end
	return Vector2.new((math.abs(X) - var39) / (1 - var39) * math.sign(X), (math.abs(Y) - var39) / (1 - var39) * math.sign(Y))
end
function module_upvr.GetTrigger(arg1, arg2, arg3) -- Line 371
	local Z = arg1.State[arg2].Position.Z
	local var43 = arg3
	if not var43 then
		var43 = arg1.DefaultDeadzone
	end
	if math.abs(Z) < var43 then
		return 0
	end
	return (math.abs(Z) - var43) / (1 - var43) * math.sign(Z)
end
function module_upvr.IsButtonDown(arg1, arg2) -- Line 389
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsGamepadButtonDown(arg1._gamepad, arg2)
end
function module_upvr.IsMotorSupported(arg1, arg2) -- Line 408
	--[[ Upvalues[1]:
		[1]: HapticService_upvr (readonly)
	]]
	return HapticService_upvr:IsMotorSupported(arg1._gamepad, arg2)
end
function module_upvr.SetMotor(arg1, arg2, arg3) -- Line 422
	--[[ Upvalues[1]:
		[1]: HapticService_upvr (readonly)
	]]
	local _setMotorIds = arg1._setMotorIds
	_setMotorIds[arg2] += 1
	HapticService_upvr:SetMotor(arg1._gamepad, arg2, arg3)
	return arg1._setMotorIds[arg2]
end
function module_upvr.PulseMotor(arg1, arg2, arg3, arg4) -- Line 454
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local any_SetMotor_result1_upvr = arg1:SetMotor(arg2, arg3)
	local function var45_upvr() -- Line 456
		--[[ Upvalues[3]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
			[3]: any_SetMotor_result1_upvr (readonly)
		]]
		if arg1._setMotorIds[arg2] ~= any_SetMotor_result1_upvr then
		else
			arg1:StopMotor(arg2)
		end
	end
	local time_result1_upvr = time()
	local var49_upvw
	var49_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 46
		--[[ Upvalues[4]:
			[1]: time_result1_upvr (readonly)
			[2]: arg4 (readonly)
			[3]: var49_upvw (read and write)
			[4]: var45_upvr (readonly)
		]]
		if arg4 <= time() - time_result1_upvr then
			var49_upvw:Disconnect()
			var45_upvr()
		end
	end)
	var45_upvr = arg1._gamepadTrove:Add
	var45_upvr(var49_upvw)
end
function module_upvr.StopMotor(arg1, arg2) -- Line 476
	arg1:SetMotor(arg2, 0)
end
function module_upvr.StopMotors(arg1) -- Line 490
	for _, v_3 in ipairs(Enum.VibrationMotor:GetEnumItems()) do
		if arg1:IsMotorSupported(v_3) then
			arg1:StopMotor(v_3)
		end
	end
end
function module_upvr.IsConnected(arg1) -- Line 502
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	if arg1._gamepad then
		return UserInputService_upvr:GetGamepadConnected(arg1._gamepad)
	end
	return false
end
function module_upvr.GetUserInputType(arg1) -- Line 511
	return arg1._gamepad
end
function module_upvr.SetAutoSelectGui(arg1, arg2) -- Line 533
	--[[ Upvalues[1]:
		[1]: GuiService_upvr (readonly)
	]]
	GuiService_upvr.AutoSelectGuiEnabled = arg2
end
function module_upvr.IsAutoSelectGuiEnabled(arg1) -- Line 542
	--[[ Upvalues[1]:
		[1]: GuiService_upvr (readonly)
	]]
	return GuiService_upvr.AutoSelectGuiEnabled
end
function module_upvr.Destroy(arg1) -- Line 549
	arg1._trove:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input.Keyboard
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:55
-- Luau version 6, Types version 3
-- Time taken: 0.001662 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 55
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1.KeyDown = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.KeyUp = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1:_setup()
	return setmetatable_result1
end
function module_upvr.IsKeyDown(arg1, arg2) -- Line 72
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsKeyDown(arg2)
end
function module_upvr.AreKeysDown(arg1, arg2, arg3) -- Line 84
	local any_IsKeyDown_result1 = arg1:IsKeyDown(arg2)
	if any_IsKeyDown_result1 then
		any_IsKeyDown_result1 = arg1:IsKeyDown(arg3)
	end
	return any_IsKeyDown_result1
end
function module_upvr.AreEitherKeysDown(arg1, arg2, arg3) -- Line 99
	local any_IsKeyDown_result1_2 = arg1:IsKeyDown(arg2)
	if not any_IsKeyDown_result1_2 then
		any_IsKeyDown_result1_2 = arg1:IsKeyDown(arg3)
	end
	return any_IsKeyDown_result1_2
end
function module_upvr._setup(arg1) -- Line 103
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	arg1._trove:Connect(UserInputService_upvr.InputBegan, function(arg1_2, arg2) -- Line 104
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 then
		elseif arg1_2.UserInputType == Enum.UserInputType.Keyboard then
			arg1.KeyDown:Fire(arg1_2.KeyCode)
		end
	end)
	arg1._trove:Connect(UserInputService_upvr.InputEnded, function(arg1_3, arg2) -- Line 113
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 then
		elseif arg1_3.UserInputType == Enum.UserInputType.Keyboard then
			arg1.KeyUp:Fire(arg1_3.KeyCode)
		end
	end)
end
function module_upvr.Destroy(arg1) -- Line 126
	arg1._trove:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input.Mouse
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:56
-- Luau version 6, Types version 3
-- Time taken: 0.002811 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 63
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._trove = Trove_upvr.new()
	setmetatable_result1_upvr.LeftDown = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.LeftUp = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.RightDown = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.RightUp = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.Scrolled = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputBegan, function(arg1, arg2) -- Line 74
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		else
			if arg1.UserInputType == Enum.UserInputType.MouseButton1 then
				setmetatable_result1_upvr.LeftDown:Fire()
				return
			end
			if arg1.UserInputType == Enum.UserInputType.MouseButton2 then
				setmetatable_result1_upvr.RightDown:Fire()
			end
		end
	end)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputEnded, function(arg1, arg2) -- Line 85
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		else
			if arg1.UserInputType == Enum.UserInputType.MouseButton1 then
				setmetatable_result1_upvr.LeftUp:Fire()
				return
			end
			if arg1.UserInputType == Enum.UserInputType.MouseButton2 then
				setmetatable_result1_upvr.RightUp:Fire()
			end
		end
	end)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputChanged, function(arg1, arg2) -- Line 96
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		elseif arg1.UserInputType == Enum.UserInputType.MouseWheel then
			setmetatable_result1_upvr.Scrolled:Fire(arg1.Position.Z)
		end
	end)
	return setmetatable_result1_upvr
end
function module_upvr.IsLeftDown(arg1) -- Line 111
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
end
function module_upvr.IsRightDown(arg1) -- Line 118
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
end
function module_upvr.GetPosition(arg1) -- Line 125
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:GetMouseLocation()
end
function module_upvr.GetDelta(arg1) -- Line 139
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:GetMouseDelta()
end
function module_upvr.GetRay(arg1, arg2) -- Line 147
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	local var9 = arg2
	if not var9 then
		var9 = UserInputService_upvr:GetMouseLocation()
	end
	return workspace.CurrentCamera:ViewportPointToRay(var9.X, var9.Y)
end
function module_upvr.Raycast(arg1, arg2, arg3, arg4) -- Line 174
	local any_GetRay_result1_2 = arg1:GetRay(arg4)
	return workspace:Raycast(any_GetRay_result1_2.Origin, any_GetRay_result1_2.Direction * (arg3 or 1000), arg2)
end
function module_upvr.Project(arg1, arg2, arg3) -- Line 206
	local any_GetRay_result1 = arg1:GetRay(arg3)
	return any_GetRay_result1.Origin + any_GetRay_result1.Direction.Unit * (arg2 or 1000)
end
function module_upvr.Lock(arg1) -- Line 220
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
end
function module_upvr.LockCenter(arg1) -- Line 231
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.LockCenter
end
function module_upvr.Unlock(arg1) -- Line 238
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.Default
end
function module_upvr.Destroy(arg1) -- Line 245
	arg1._trove:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input.PreferredInput
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:57
-- Luau version 6, Types version 3
-- Time taken: 0.001473 seconds

local UserInputService = game:GetService("UserInputService")
local tbl_upvr = {}
local tbl = {
	Current = "MouseKeyboard";
}
local var4_upvw
function tbl.Observe(arg1) -- Line 81
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: var4_upvw (read and write)
	]]
	if table.find(tbl_upvr, arg1) then
		error("function already subscribed", 2)
	end
	table.insert(tbl_upvr, arg1)
	task.spawn(arg1, var4_upvw.Current)
	return function() -- Line 87
		--[[ Upvalues[2]:
			[1]: tbl_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local table_find_result1 = table.find(tbl_upvr, arg1)
		if table_find_result1 then
			local len = #tbl_upvr
			tbl_upvr[table_find_result1] = tbl_upvr[len]
			tbl_upvr[len] = nil
		end
	end
end
var4_upvw = tbl
local var8_upvw = var4_upvw
local function SetPreferred_upvr(arg1) -- Line 97, Named "SetPreferred"
	--[[ Upvalues[2]:
		[1]: var8_upvw (read and write)
		[2]: tbl_upvr (readonly)
	]]
	if arg1 == var8_upvw.Current then
	else
		var8_upvw.Current = arg1
		for _, v in ipairs(tbl_upvr) do
			task.spawn(v, arg1)
		end
	end
end
local Touch_upvr = Enum.UserInputType.Touch
local Keyboard_upvr = Enum.UserInputType.Keyboard
local function DeterminePreferred(arg1) -- Line 107
	--[[ Upvalues[3]:
		[1]: Touch_upvr (readonly)
		[2]: SetPreferred_upvr (readonly)
		[3]: Keyboard_upvr (readonly)
	]]
	if arg1 == Touch_upvr then
		SetPreferred_upvr("Touch")
	else
		if arg1 == Keyboard_upvr or arg1.Name:sub(1, 5) == "Mouse" then
			SetPreferred_upvr("MouseKeyboard")
			return
		end
		if arg1.Name:sub(1, 7) == "Gamepad" then
			SetPreferred_upvr("Gamepad")
		end
	end
end
DeterminePreferred(UserInputService:GetLastInputType())
UserInputService.LastInputTypeChanged:Connect(DeterminePreferred)
return var8_upvw

-- ReplicatedStorage.Packages._Index.sleitnick_input@2.1.1.input.Touch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:58
-- Luau version 6, Types version 3
-- Time taken: 0.001291 seconds

local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 87
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1.TouchTap = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchTap)
	setmetatable_result1.TouchTapInWorld = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchTapInWorld)
	setmetatable_result1.TouchMoved = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchMoved)
	setmetatable_result1.TouchLongPress = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchLongPress)
	setmetatable_result1.TouchPan = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchPan)
	setmetatable_result1.TouchPinch = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchPinch)
	setmetatable_result1.TouchRotate = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchRotate)
	setmetatable_result1.TouchSwipe = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchSwipe)
	setmetatable_result1.TouchStarted = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchStarted)
	setmetatable_result1.TouchEnded = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchEnded)
	return setmetatable_result1
end
function module_upvr.IsTouchEnabled(arg1) -- Line 109
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr.TouchEnabled
end
function module_upvr.Destroy(arg1) -- Line 116
	arg1._trove:Destroy()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_option@1.0.4.option
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:00
-- Luau version 6, Types version 3
-- Time taken: 0.004506 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr._new(arg1) -- Line 94
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	local var3 = "Option"
	module.ClassName = var3
	module._v = arg1
	if arg1 == nil then
		var3 = false
	else
		var3 = true
	end
	module._s = var3
	return setmetatable(module, module_2_upvr)
end
function module_2_upvr.Some(arg1) -- Line 110
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1 == nil then
	else
	end
	assert(true, "Option.Some() value cannot be nil")
	return module_2_upvr._new(arg1)
end
function module_2_upvr.Wrap(arg1) -- Line 123
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1 == nil then
		return module_2_upvr.None
	end
	return module_2_upvr.Some(arg1)
end
function module_2_upvr.Is(arg1) -- Line 136
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var4 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_2_upvr then
			var4 = false
		else
			var4 = true
		end
	end
	return var4
end
function module_2_upvr.Assert(arg1) -- Line 144
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	assert(module_2_upvr.Is(arg1), "Result was not of type Option")
end
function module_2_upvr.Deserialize(arg1) -- Line 154
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var5 = false
	local var6
	if type(arg1) == "table" then
		if arg1.ClassName ~= "Option" then
			var5 = false
		else
			var5 = true
		end
	end
	var6 = assert
	var6(var5, "Invalid data for deserializing Option")
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var6 = module_2_upvr.None
		return var6
	end
	if arg1.Value ~= nil or not INLINED() then
		var6 = module_2_upvr.Some(arg1.Value)
	end
	return var6
end
function module_2_upvr.Serialize(arg1) -- Line 163
	return {
		ClassName = arg1.ClassName;
		Value = arg1._v;
	}
end
function module_2_upvr.Match(arg1, arg2) -- Line 184
	local Some_2 = arg2.Some
	local None = arg2.None
	local var10
	if type(Some_2) ~= "function" then
		var10 = false
	else
		var10 = true
	end
	assert(var10, "Missing 'Some' match")
	if type(None) ~= "function" then
		var10 = false
	else
		var10 = true
	end
	assert(var10, "Missing 'None' match")
	if arg1:IsSome() then
		var10 = arg1:Unwrap()
		return Some_2(var10)
	end
	return None()
end
function module_2_upvr.IsSome(arg1) -- Line 200
	return arg1._s
end
function module_2_upvr.IsNone(arg1) -- Line 208
	return not arg1._s
end
function module_2_upvr.Expect(arg1, arg2) -- Line 222
	assert(arg1:IsSome(), arg2)
	return arg1._v
end
function module_2_upvr.ExpectNone(arg1, arg2) -- Line 231
	assert(arg1:IsNone(), arg2)
end
function module_2_upvr.Unwrap(arg1) -- Line 239
	return arg1:Expect("Cannot unwrap option of None type")
end
function module_2_upvr.UnwrapOr(arg1, arg2) -- Line 248
	if arg1:IsSome() then
		return arg1:Unwrap()
	end
	return arg2
end
function module_2_upvr.UnwrapOrElse(arg1, arg2) -- Line 262
	if arg1:IsSome() then
		return arg1:Unwrap()
	end
	return arg2()
end
function module_2_upvr.And(arg1, arg2) -- Line 288
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		return arg2
	end
	return module_2_upvr.None
end
function module_2_upvr.AndThen(arg1, arg2) -- Line 312
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		local arg2_result1 = arg2(arg1:Unwrap())
		module_2_upvr.Assert(arg2_result1)
		return arg2_result1
	end
	return module_2_upvr.None
end
function module_2_upvr.Or(arg1, arg2) -- Line 327
	if arg1:IsSome() then
		return arg1
	end
	return arg2
end
function module_2_upvr.OrElse(arg1, arg2) -- Line 341
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		return arg1
	end
	local arg2_result1_2 = arg2()
	module_2_upvr.Assert(arg2_result1_2)
	return arg2_result1_2
end
function module_2_upvr.XOr(arg1, arg2) -- Line 358
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_IsSome_result1_4 = arg1:IsSome()
	if any_IsSome_result1_4 == arg2:IsSome() then
		return module_2_upvr.None
	end
	if any_IsSome_result1_4 then
		return arg1
	end
	return arg2
end
function module_2_upvr.Filter(arg1, arg2) -- Line 376
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsNone() or not arg2(arg1._v) then
		return module_2_upvr.None
	end
	return arg1
end
function module_2_upvr.Contains(arg1, arg2) -- Line 389
	local any_IsSome_result1_2 = arg1:IsSome()
	if any_IsSome_result1_2 then
		if arg1._v ~= arg2 then
			any_IsSome_result1_2 = false
		else
			any_IsSome_result1_2 = true
		end
	end
	return any_IsSome_result1_2
end
function module_2_upvr.__tostring(arg1) -- Line 403
	if arg1:IsSome() then
		return "Option<"..typeof(arg1._v)..'>'
	end
	return "Option<None>"
end
function module_2_upvr.__eq(arg1, arg2) -- Line 429
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if module_2_upvr.Is(arg2) then
		if arg1:IsSome() then
			local any_IsSome_result1 = arg2:IsSome()
			if any_IsSome_result1 then
				if arg1:Unwrap() ~= arg2:Unwrap() then
					any_IsSome_result1 = false
				else
					any_IsSome_result1 = true
				end
				return any_IsSome_result1
			end
		end
		if arg1:IsNone() and arg2:IsNone() then
			return true
		end
	end
	return false
end
module_2_upvr.None = module_2_upvr._new()
return module_2_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_option@1.0.4.option.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:01
-- Luau version 6, Types version 3
-- Time taken: 0.008758 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Some", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create some option", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(true):IsSome()).to.equal(true)
		end)
		it("should fail to create some option with nil", function() -- Line 10
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 11
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.Some(nil)
			end).to.throw()
		end)
		it("should not be none", function() -- Line 16
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):IsNone()).to.equal(false)
		end)
	end)
	describe("None", function() -- Line 22
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to reference none", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 24
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
			end).never.to.throw()
		end)
		it("should be able to check if none", function() -- Line 29
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:IsNone()).to.equal(true)
		end)
		it("should be able to check if not some", function() -- Line 34
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:IsSome()).to.equal(false)
		end)
	end)
	describe("Equality", function() -- Line 40
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should equal the same some from same options", function() -- Line 41
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_3 = Parent_upvr.Some(32)
			expect(any_Some_result1_3).to.equal(any_Some_result1_3)
		end)
		it("should equal the same some from different options", function() -- Line 46
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32)).to.equal(Parent_upvr.Some(32))
		end)
	end)
	describe("Assert", function() -- Line 53
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should assert that a some option is an option", function() -- Line 54
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(Parent_upvr.Some(10))).to.equal(true)
		end)
		it("should assert that a none option is an option", function() -- Line 58
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(Parent_upvr.None)).to.equal(true)
		end)
		it("should assert that a non-option is not an option", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(10)).to.equal(false)
			expect(Parent_upvr.Is(true)).to.equal(false)
			expect(Parent_upvr.Is(false)).to.equal(false)
			expect(Parent_upvr.Is("Test")).to.equal(false)
			expect(Parent_upvr.Is({})).to.equal(false)
			expect(Parent_upvr.Is(function() -- Line 68
			end)).to.equal(false)
			expect(Parent_upvr.Is(coroutine.create(function() -- Line 69
			end))).to.equal(false)
			expect(Parent_upvr.Is(Parent_upvr)).to.equal(false)
		end)
	end)
	describe("Unwrap", function() -- Line 74
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 75
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_5_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 77
				--[[ Upvalues[1]:
					[1]: any_Some_result1_5_upvr (readonly)
				]]
				any_Some_result1_5_upvr:Unwrap()
			end).never.to.throw()
			expect(any_Some_result1_5_upvr:Unwrap()).to.equal(10)
		end)
		it("should fail to unwrap a none option", function() -- Line 83
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr = Parent_upvr.None
			expect(function() -- Line 85
				--[[ Upvalues[1]:
					[1]: None_upvr (readonly)
				]]
				None_upvr:Unwrap()
			end).to.throw()
		end)
	end)
	describe("Expect", function() -- Line 91
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should expect a some option", function() -- Line 92
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_13_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 94
				--[[ Upvalues[1]:
					[1]: any_Some_result1_13_upvr (readonly)
				]]
				any_Some_result1_13_upvr:Expect("Expecting some value")
			end).never.to.throw()
			expect(any_Some_result1_13_upvr:Unwrap()).to.equal(10)
		end)
		it("should fail when expecting on a none option", function() -- Line 100
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_3 = Parent_upvr.None
			expect(function() -- Line 102
				--[[ Upvalues[1]:
					[1]: None_upvr_3 (readonly)
				]]
				None_upvr_3:Expect("Expecting some value")
			end).to.throw()
		end)
	end)
	describe("ExpectNone", function() -- Line 108
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should fail to expect a none option", function() -- Line 109
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_9_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 111
				--[[ Upvalues[1]:
					[1]: any_Some_result1_9_upvr (readonly)
				]]
				any_Some_result1_9_upvr:ExpectNone("Expecting some value")
			end).to.throw()
		end)
		it("should expect a none option", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_4 = Parent_upvr.None
			expect(function() -- Line 118
				--[[ Upvalues[1]:
					[1]: None_upvr_4 (readonly)
				]]
				None_upvr_4:ExpectNone("Expecting some value")
			end).never.to.throw()
		end)
	end)
	describe("UnwrapOr", function() -- Line 124
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 125
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):UnwrapOr(20)).to.equal(10)
		end)
		it("should unwrap a none option", function() -- Line 130
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:UnwrapOr(20)).to.equal(20)
		end)
	end)
	describe("UnwrapOrElse", function() -- Line 136
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 137
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):UnwrapOrElse(function() -- Line 139
				return 30
			end)).to.equal(10)
		end)
		it("should unwrap a none option", function() -- Line 145
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:UnwrapOrElse(function() -- Line 147
				return 30
			end)).to.equal(30)
		end)
	end)
	describe("And", function() -- Line 154
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the second option with and when both are some", function() -- Line 155
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_12 = Parent_upvr.Some(2)
			expect(Parent_upvr.Some(1):And(any_Some_result1_12)).to.equal(any_Some_result1_12)
		end)
		it("should return none when first option is some and second option is none", function() -- Line 161
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(1):And(Parent_upvr.None):IsNone()).to.equal(true)
		end)
		it("should return none when first option is none and second option is some", function() -- Line 167
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:And(Parent_upvr.Some(2)):IsNone()).to.equal(true)
		end)
		it("should return none when both options are none", function() -- Line 173
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:And(Parent_upvr.None):IsNone()).to.equal(true)
		end)
	end)
	describe("AndThen", function() -- Line 180
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should pass the some value to the predicate", function() -- Line 181
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			Parent_upvr.Some(32):AndThen(function(arg1) -- Line 183
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal(32)
				return Parent_upvr.None
			end)
		end)
		it("should throw if an option is not returned from predicate", function() -- Line 189
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_upvr = Parent_upvr.Some(32)
			expect(function() -- Line 191
				--[[ Upvalues[1]:
					[1]: any_Some_result1_upvr (readonly)
				]]
				any_Some_result1_upvr:AndThen(function() -- Line 192
				end)
			end).to.throw()
		end)
		it("should return none if the option is none", function() -- Line 196
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:AndThen(function() -- Line 198
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.Some(10)
			end):IsNone()).to.equal(true)
		end)
		it("should return option of predicate if option is some", function() -- Line 203
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_AndThen_result1 = Parent_upvr.Some(32):AndThen(function() -- Line 205
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.Some(10)
			end)
			expect(any_AndThen_result1:IsSome()).to.equal(true)
			expect(any_AndThen_result1:Unwrap()).to.equal(10)
		end)
	end)
	describe("Or", function() -- Line 213
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the first option if it is some", function() -- Line 214
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_8 = Parent_upvr.Some(10)
			expect(any_Some_result1_8:Or(Parent_upvr.Some(20))).to.equal(any_Some_result1_8)
		end)
		it("should return the second option if the first one is none", function() -- Line 220
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_11 = Parent_upvr.Some(20)
			expect(Parent_upvr.None:Or(any_Some_result1_11)).to.equal(any_Some_result1_11)
		end)
	end)
	describe("OrElse", function() -- Line 227
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the first option if it is some", function() -- Line 228
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1 = Parent_upvr.Some(10)
			local any_Some_result1_7_upvr = Parent_upvr.Some(20)
			expect(any_Some_result1:OrElse(function() -- Line 231
				--[[ Upvalues[1]:
					[1]: any_Some_result1_7_upvr (readonly)
				]]
				return any_Some_result1_7_upvr
			end)).to.equal(any_Some_result1)
		end)
		it("should return the second option if the first one is none", function() -- Line 236
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_10_upvr = Parent_upvr.Some(20)
			expect(Parent_upvr.None:OrElse(function() -- Line 239
				--[[ Upvalues[1]:
					[1]: any_Some_result1_10_upvr (readonly)
				]]
				return any_Some_result1_10_upvr
			end)).to.equal(any_Some_result1_10_upvr)
		end)
		it("should throw if the predicate does not return an option", function() -- Line 244
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_2 = Parent_upvr.None
			expect(function() -- Line 246
				--[[ Upvalues[1]:
					[1]: None_upvr_2 (readonly)
				]]
				None_upvr_2:OrElse(function() -- Line 247
				end)
			end).to.throw()
		end)
	end)
	describe("XOr", function() -- Line 252
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return first option if first option is some and second option is none", function() -- Line 253
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_6 = Parent_upvr.Some(1)
			expect(any_Some_result1_6:XOr(Parent_upvr.None)).to.equal(any_Some_result1_6)
		end)
		it("should return second option if first option is none and second option is some", function() -- Line 259
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_4 = Parent_upvr.Some(2)
			expect(Parent_upvr.None:XOr(any_Some_result1_4)).to.equal(any_Some_result1_4)
		end)
		it("should return none if first and second option are some", function() -- Line 265
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(1):XOr(Parent_upvr.Some(2))).to.equal(Parent_upvr.None)
		end)
		it("should return none if first and second option are none", function() -- Line 271
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:XOr(Parent_upvr.None)).to.equal(Parent_upvr.None)
		end)
	end)
	describe("Filter", function() -- Line 278
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return none if option is none", function() -- Line 279
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:Filter(function() -- Line 281
			end)).to.equal(Parent_upvr.None)
		end)
		it("should return none if option is some but fails predicate", function() -- Line 284
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):Filter(function(arg1) -- Line 286
				return false
			end)).to.equal(Parent_upvr.None)
		end)
		it("should return self if option is some and passes predicate", function() -- Line 291
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_2 = Parent_upvr.Some(10)
			expect(any_Some_result1_2:Filter(function(arg1) -- Line 293
				return true
			end)).to.equal(any_Some_result1_2)
		end)
	end)
	describe("Contains", function() -- Line 299
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return true if some option contains the given value", function() -- Line 300
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32):Contains(32)).to.equal(true)
		end)
		it("should return false if some option does not contain the given value", function() -- Line 305
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32):Contains(64)).to.equal(false)
		end)
		it("should return false if option is none", function() -- Line 310
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:Contains(64)).to.equal(false)
		end)
	end)
	describe("ToString", function() -- Line 316
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return string of none option", function() -- Line 317
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(tostring(Parent_upvr.None)).to.equal("Option<None>")
		end)
		it("should return string of some option with type", function() -- Line 322
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			for _, v in ipairs({10, true, false, "test", {}, function() -- Line 323
			end, coroutine.create(function() -- Line 323
			end), workspace}) do
				expect(tostring(Parent_upvr.Some(v))).to.equal("Option<%s>":format(typeof(v)))
			end
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_signal@1.5.0.signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:02
-- Luau version 6, Types version 3
-- Time taken: 0.004362 seconds

local var1_upvw
local function acquireRunnerThreadAndCallEventHandler_upvr(arg1, ...) -- Line 53, Named "acquireRunnerThreadAndCallEventHandler"
	--[[ Upvalues[1]:
		[1]: var1_upvw (read and write)
	]]
	var1_upvw = nil
	arg1(...)
	var1_upvw = var1_upvw
end
local function runEventHandlerInFreeThread_upvr(...) -- Line 64, Named "runEventHandlerInFreeThread"
	--[[ Upvalues[1]:
		[1]: acquireRunnerThreadAndCallEventHandler_upvr (readonly)
	]]
	acquireRunnerThreadAndCallEventHandler_upvr(...)
	while true do
		acquireRunnerThreadAndCallEventHandler_upvr(coroutine.yield())
	end
end
local tbl_upvr_2 = {}
tbl_upvr_2.__index = tbl_upvr_2
local function new(arg1, arg2) -- Line 90
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local module_2 = {
		Connected = true;
	}
	module_2._signal = arg1
	module_2._fn = arg2
	module_2._next = false
	return setmetatable(module_2, tbl_upvr_2)
end
tbl_upvr_2.new = new
function tbl_upvr_2.Disconnect(arg1) -- Line 99
	local var4
	if not var4 then
	else
		var4 = false
		arg1.Connected = var4
		var4 = arg1._signal._handlerListHead
		if var4 == arg1 then
			var4 = arg1._signal
			var4._handlerListHead = arg1._next
			return
		end
		var4 = arg1._signal._handlerListHead
		while var4 and var4._next ~= arg1 do
			var4 = var4._next
		end
		if var4 then
			var4._next = arg1._next
		end
	end
end
tbl_upvr_2.Destroy = tbl_upvr_2.Disconnect
local tbl = {}
local function __index(arg1, arg2) -- Line 126
	error("Attempt to get Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__index = __index
local function __newindex(arg1, arg2, arg3) -- Line 129
	error("Attempt to set Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__newindex = __newindex
setmetatable(tbl_upvr_2, tbl)
local tbl_upvr = {}
tbl_upvr.__index = tbl_upvr
function tbl_upvr.new() -- Line 165
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	return setmetatable({
		_handlerListHead = false;
		_proxyHandler = nil;
	}, tbl_upvr)
end
function tbl_upvr.Wrap(arg1) -- Line 186
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var8
	if typeof(arg1) ~= "RBXScriptSignal" then
		var8 = false
	else
		var8 = true
	end
	assert(var8, "Argument #1 to Signal.Wrap must be a RBXScriptSignal; got "..typeof(arg1))
	var8 = tbl_upvr
	local any_new_result1_upvr = var8.new()
	var8 = arg1:Connect(function(...) -- Line 192
		--[[ Upvalues[1]:
			[1]: any_new_result1_upvr (readonly)
		]]
		any_new_result1_upvr:Fire(...)
	end)
	any_new_result1_upvr._proxyHandler = var8
	return any_new_result1_upvr
end
function tbl_upvr.Is(arg1) -- Line 204
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var11 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= tbl_upvr then
			var11 = false
		else
			var11 = true
		end
	end
	return var11
end
function tbl_upvr.Connect(arg1, arg2) -- Line 221
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local any_new_result1 = tbl_upvr_2.new(arg1, arg2)
	if arg1._handlerListHead then
		any_new_result1._next = arg1._handlerListHead
		arg1._handlerListHead = any_new_result1
		return any_new_result1
	end
	arg1._handlerListHead = any_new_result1
	return any_new_result1
end
function tbl_upvr.ConnectOnce(arg1, arg2) -- Line 237
	return arg1:Once(arg2)
end
function tbl_upvr.Once(arg1, arg2) -- Line 256
	local var14_upvw = false
	local var15_upvw
	var15_upvw = arg1:Connect(function(...) -- Line 259
		--[[ Upvalues[3]:
			[1]: var14_upvw (read and write)
			[2]: var15_upvw (read and write)
			[3]: arg2 (readonly)
		]]
		if var14_upvw then
		else
			var14_upvw = true
			var15_upvw:Disconnect()
			arg2(...)
		end
	end)
	return var15_upvw
end
function tbl_upvr.GetConnections(arg1) -- Line 270
	local module = {}
	local _handlerListHead = arg1._handlerListHead
	while _handlerListHead do
		table.insert(module, _handlerListHead)
	end
	return module
end
function tbl_upvr.DisconnectAll(arg1) -- Line 288
	local _handlerListHead_4 = arg1._handlerListHead
	while _handlerListHead_4 do
		_handlerListHead_4.Connected = false
	end
	arg1._handlerListHead = false
end
function tbl_upvr.Fire(arg1, ...) -- Line 312
	--[[ Upvalues[2]:
		[1]: var1_upvw (read and write)
		[2]: runEventHandlerInFreeThread_upvr (readonly)
	]]
	local _handlerListHead_2 = arg1._handlerListHead
	while _handlerListHead_2 do
		if _handlerListHead_2.Connected then
			if not var1_upvw then
				var1_upvw = coroutine.create(runEventHandlerInFreeThread_upvr)
			end
			task.spawn(var1_upvw, _handlerListHead_2._fn, ...)
		end
	end
end
function tbl_upvr.FireDeferred(arg1, ...) -- Line 333
	local _handlerListHead_3 = arg1._handlerListHead
	while _handlerListHead_3 do
		task.defer(_handlerListHead_3._fn, ...)
	end
end
function tbl_upvr.Wait(arg1) -- Line 356
	local var22_upvw = false
	local var23_upvw
	local current_thread_upvr = coroutine.running()
	var23_upvw = arg1:Connect(function(...) -- Line 360
		--[[ Upvalues[3]:
			[1]: var22_upvw (read and write)
			[2]: var23_upvw (read and write)
			[3]: current_thread_upvr (readonly)
		]]
		if var22_upvw then
		else
			var22_upvw = true
			var23_upvw:Disconnect()
			task.spawn(current_thread_upvr, ...)
		end
	end)
	return coroutine.yield()
end
function tbl_upvr.Destroy(arg1) -- Line 383
	arg1:DisconnectAll()
	local rawget_result1 = rawget(arg1, "_proxyHandler")
	if rawget_result1 then
		rawget_result1:Disconnect()
	end
end
setmetatable(tbl_upvr, {
	__index = function(arg1, arg2) -- Line 393, Named "__index"
		error("Attempt to get Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
	__newindex = function(arg1, arg2, arg3) -- Line 396, Named "__newindex"
		error("Attempt to set Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
})
return {
	new = tbl_upvr.new;
	Wrap = tbl_upvr.Wrap;
	Is = tbl_upvr.Is;
}

-- ReplicatedStorage.Packages._Index.sleitnick_signal@1.5.0.signal.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:03
-- Luau version 6, Types version 3
-- Time taken: 0.005251 seconds

local function AwaitCondition_upvr(arg1, arg2) -- Line 1, Named "AwaitCondition"
	while true do
		if arg1() then
			return true
		end
		if (arg2 or 10) < os.clock() - os.clock() then
			return false
		end
		task.wait()
	end
end
return function() -- Line 15
	--[[ Upvalues[1]:
		[1]: AwaitCondition_upvr (readonly)
	]]
	local Parent_upvr = require(script.Parent)
	local var3_upvw
	local function _(arg1) -- Line 20, Named "NumConns"
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		local var4 = arg1
		if not var4 then
			var4 = var3_upvw
		end
		return #var4:GetConnections()
	end
	beforeEach(function() -- Line 25
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: Parent_upvr (readonly)
		]]
		var3_upvw = Parent_upvr.new()
	end)
	afterEach(function() -- Line 29
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		var3_upvw:Destroy()
	end)
	describe("Constructor", function() -- Line 33
		--[[ Upvalues[3]:
			[1]: Parent_upvr (readonly)
			[2]: var3_upvw (read and write)
			[3]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should create a new signal and fire it", function() -- Line 34
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: var3_upvw (copied, read and write)
			]]
			expect(Parent_upvr.Is(var3_upvw)).to.equal(true)
			task.defer(function() -- Line 36
				--[[ Upvalues[1]:
					[1]: var3_upvw (copied, read and write)
				]]
				var3_upvw:Fire(10, 20)
			end)
			local any_Wait_result1, any_Wait_result2_2 = var3_upvw:Wait()
			expect(any_Wait_result1).to.equal(10)
			expect(any_Wait_result2_2).to.equal(20)
		end)
		it("should create a proxy signal and connect to it", function() -- Line 44
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local any_Wrap_result1 = Parent_upvr.Wrap(game:GetService("RunService").Heartbeat)
			expect(Parent_upvr.Is(any_Wrap_result1)).to.equal(true)
			local var14_upvw = false
			any_Wrap_result1:Connect(function() -- Line 48
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				var14_upvw = true
			end)
			expect(AwaitCondition_upvr(function() -- Line 51
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				return var14_upvw
			end, 2)).to.equal(true)
			any_Wrap_result1:Destroy()
		end)
	end)
	describe("FireDeferred", function() -- Line 58
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should be able to fire primitive argument", function() -- Line 59
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local var19_upvw
			var3_upvw:Connect(function(arg1) -- Line 62
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				var19_upvw = arg1
			end)
			var3_upvw:FireDeferred(10)
			expect(AwaitCondition_upvr(function() -- Line 66
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				local var22
				if var19_upvw ~= 10 then
					var22 = false
				else
					var22 = true
				end
				return var22
			end, 1)).to.equal(true)
		end)
		it("should be able to fire a reference based argument", function() -- Line 71
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local tbl_2_upvr = {10, 20}
			local var25_upvw
			var3_upvw:Connect(function(arg1) -- Line 74
				--[[ Upvalues[1]:
					[1]: var25_upvw (read and write)
				]]
				var25_upvw = arg1
			end)
			var3_upvw:FireDeferred(tbl_2_upvr)
			expect(AwaitCondition_upvr(function() -- Line 78
				--[[ Upvalues[2]:
					[1]: tbl_2_upvr (readonly)
					[2]: var25_upvw (read and write)
				]]
				local var28
				if tbl_2_upvr ~= var25_upvw then
					var28 = false
				else
					var28 = true
				end
				return var28
			end, 1)).to.equal(true)
		end)
	end)
	describe("Fire", function() -- Line 84
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should be able to fire primitive argument", function() -- Line 85
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var31_upvw
			var3_upvw:Connect(function(arg1) -- Line 88
				--[[ Upvalues[1]:
					[1]: var31_upvw (read and write)
				]]
				var31_upvw = arg1
			end)
			var3_upvw:Fire(10)
			expect(var31_upvw).to.equal(10)
		end)
		it("should be able to fire a reference based argument", function() -- Line 95
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local tbl = {10, 20}
			local var35_upvw
			var3_upvw:Connect(function(arg1) -- Line 98
				--[[ Upvalues[1]:
					[1]: var35_upvw (read and write)
				]]
				var35_upvw = arg1
			end)
			var3_upvw:Fire(tbl)
			expect(var35_upvw).to.equal(tbl)
		end)
	end)
	describe("ConnectOnce", function() -- Line 106
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should only capture first fire", function() -- Line 107
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var39_upvw
			local any_ConnectOnce_result1 = var3_upvw:ConnectOnce(function(arg1) -- Line 109
				--[[ Upvalues[1]:
					[1]: var39_upvw (read and write)
				]]
				var39_upvw = arg1
			end)
			expect(any_ConnectOnce_result1.Connected).to.equal(true)
			var3_upvw:Fire(10)
			expect(any_ConnectOnce_result1.Connected).to.equal(false)
			var3_upvw:Fire(20)
			expect(var39_upvw).to.equal(10)
		end)
	end)
	describe("Wait", function() -- Line 120
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should be able to wait for a signal to fire", function() -- Line 121
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			task.defer(function() -- Line 122
				--[[ Upvalues[1]:
					[1]: var3_upvw (copied, read and write)
				]]
				var3_upvw:Fire(10, 20, 30)
			end)
			local any_Wait_result1_2, any_Wait_result2, any_Wait_result3 = var3_upvw:Wait()
			expect(any_Wait_result1_2).to.equal(10)
			expect(any_Wait_result2).to.equal(20)
			expect(any_Wait_result3).to.equal(30)
		end)
	end)
	describe("DisconnectAll", function() -- Line 132
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should disconnect all connections", function() -- Line 133
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			var3_upvw:Connect(function() -- Line 134
			end)
			var3_upvw:Connect(function() -- Line 135
			end)
			local var52
			if not var52 then
				var52 = var3_upvw
			end
			expect(#var52:GetConnections()).to.equal(2)
			var3_upvw:DisconnectAll()
			local var53
			if not var53 then
				var53 = var3_upvw
			end
			expect(#var53:GetConnections()).to.equal(0)
		end)
	end)
	describe("Disconnect", function() -- Line 142
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should disconnect connection", function() -- Line 143
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var57
			if not var57 then
				var57 = var3_upvw
			end
			expect(#var57:GetConnections()).to.equal(1)
			var3_upvw:Connect(function() -- Line 144
			end):Disconnect()
			local var58
			if not var58 then
				var58 = var3_upvw
			end
			expect(#var58:GetConnections()).to.equal(0)
		end)
		it("should still work if connections disconnected while firing", function() -- Line 150
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var60_upvw = 0
			var3_upvw:Connect(function() -- Line 153
				--[[ Upvalues[1]:
					[1]: var60_upvw (read and write)
				]]
				var60_upvw += 1
			end)
			local var63_upvw
			var63_upvw = var3_upvw:Connect(function() -- Line 156
				--[[ Upvalues[2]:
					[1]: var63_upvw (read and write)
					[2]: var60_upvw (read and write)
				]]
				var63_upvw:Disconnect()
				var60_upvw += 1
			end)
			var3_upvw:Connect(function() -- Line 160
				--[[ Upvalues[1]:
					[1]: var60_upvw (read and write)
				]]
				var60_upvw += 1
			end)
			var3_upvw:Fire()
			expect(var60_upvw).to.equal(3)
		end)
		it("should still work if connections disconnected while firing deferred", function() -- Line 167
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local var66_upvw = 0
			var3_upvw:Connect(function() -- Line 170
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				var66_upvw += 1
			end)
			local var69_upvw
			var69_upvw = var3_upvw:Connect(function() -- Line 173
				--[[ Upvalues[2]:
					[1]: var69_upvw (read and write)
					[2]: var66_upvw (read and write)
				]]
				var69_upvw:Disconnect()
				var66_upvw += 1
			end)
			var3_upvw:Connect(function() -- Line 177
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				var66_upvw += 1
			end)
			var3_upvw:FireDeferred()
			expect(AwaitCondition_upvr(function() -- Line 181
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				local var72
				if var66_upvw ~= 3 then
					var72 = false
				else
					var72 = true
				end
				return var72
			end)).to.equal(true)
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:32
-- Luau version 6, Types version 3
-- Time taken: 0.000201 seconds

return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.Trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:46
-- Luau version 6, Types version 3
-- Time taken: 0.000177 seconds

return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.streamable
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:05
-- Luau version 6, Types version 3
-- Time taken: 0.000243 seconds

return {
	Streamable = require(script.Streamable);
	StreamableUtil = require(script.StreamableUtil);
}

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.streamable.Streamable
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:06
-- Luau version 6, Types version 3
-- Time taken: 0.002266 seconds

local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
local module_upvr_4 = {}
module_upvr_4.__index = module_upvr_4
function module_upvr_4.new(arg1, arg2) -- Line 96
	--[[ Upvalues[3]:
		[1]: module_upvr_4 (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local module_upvr_2 = {}
	setmetatable(module_upvr_2, module_upvr_4)
	module_upvr_2._trove = Trove_upvr.new()
	module_upvr_2._shown = module_upvr_2._trove:Construct(Signal_upvr)
	module_upvr_2._shownTrove = Trove_upvr.new()
	module_upvr_2._trove:Add(module_upvr_2._shownTrove)
	module_upvr_2.Instance = arg1:FindFirstChild(arg2)
	local function OnInstanceSet_upvr() -- Line 107, Named "OnInstanceSet"
		--[[ Upvalues[1]:
			[1]: module_upvr_2 (readonly)
		]]
		local Instance_upvr = module_upvr_2.Instance
		if typeof(Instance_upvr) == "Instance" then
			module_upvr_2._shown:Fire(Instance_upvr, module_upvr_2._shownTrove)
			module_upvr_2._shownTrove:Connect(Instance_upvr:GetPropertyChangedSignal("Parent"), function() -- Line 111
				--[[ Upvalues[2]:
					[1]: Instance_upvr (readonly)
					[2]: module_upvr_2 (copied, readonly)
				]]
				if not Instance_upvr.Parent then
					module_upvr_2._shownTrove:Clean()
				end
			end)
			module_upvr_2._shownTrove:Add(function() -- Line 116
				--[[ Upvalues[2]:
					[1]: module_upvr_2 (copied, readonly)
					[2]: Instance_upvr (readonly)
				]]
				if module_upvr_2.Instance == Instance_upvr then
					module_upvr_2.Instance = nil
				end
			end)
		end
	end
	module_upvr_2._trove:Connect(arg1.ChildAdded, function(arg1_2) -- Line 124, Named "OnChildAdded"
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: module_upvr_2 (readonly)
			[3]: OnInstanceSet_upvr (readonly)
		]]
		if arg1_2.Name == arg2 and not module_upvr_2.Instance then
			module_upvr_2.Instance = arg1_2
			OnInstanceSet_upvr()
		end
	end)
	if module_upvr_2.Instance then
		OnInstanceSet_upvr()
	end
	return module_upvr_2
end
function module_upvr_4.primary(arg1) -- Line 146
	--[[ Upvalues[3]:
		[1]: module_upvr_4 (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local module_upvr = {}
	setmetatable(module_upvr, module_upvr_4)
	module_upvr._trove = Trove_upvr.new()
	module_upvr._shown = module_upvr._trove:Construct(Signal_upvr)
	module_upvr._shownTrove = Trove_upvr.new()
	module_upvr._trove:Add(module_upvr._shownTrove)
	module_upvr.Instance = arg1.PrimaryPart
	module_upvr._trove:Connect(arg1:GetPropertyChangedSignal("PrimaryPart"), function() -- Line 157, Named "OnPrimaryPartChanged"
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: module_upvr (readonly)
		]]
		local PrimaryPart_4 = arg1.PrimaryPart
		module_upvr._shownTrove:Clean()
		module_upvr.Instance = PrimaryPart_4
		if PrimaryPart_4 then
			module_upvr._shown:Fire(PrimaryPart_4, module_upvr._shownTrove)
		end
	end)
	if module_upvr.Instance then
		local PrimaryPart = arg1.PrimaryPart
		module_upvr._shownTrove:Clean()
		module_upvr.Instance = PrimaryPart
		if PrimaryPart then
			module_upvr._shown:Fire(PrimaryPart, module_upvr._shownTrove)
		end
	end
	return module_upvr
end
function module_upvr_4.Observe(arg1, arg2) -- Line 184
	if arg1.Instance then
		task.spawn(arg2, arg1.Instance, arg1._shownTrove)
	end
	return arg1._shown:Connect(arg2)
end
function module_upvr_4.Destroy(arg1) -- Line 196
	arg1._trove:Destroy()
end
return module_upvr_4

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.streamable.Streamable.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:07
-- Luau version 6, Types version 3
-- Time taken: 0.002882 seconds

return function() -- Line 1
	local var2_upvw
	local var3_upvw
	local function _(arg1) -- Line 7, Named "CreateInstance"
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		local Folder = Instance.new("Folder")
		Folder.Name = arg1
		Folder.Archivable = false
		Folder.Parent = var2_upvw
		return Folder
	end
	local function _() -- Line 15, Named "CreatePrimary"
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		local Part_2 = Instance.new("Part")
		Part_2.Anchored = true
		Part_2.Parent = var3_upvw
		var3_upvw.PrimaryPart = Part_2
		return Part_2
	end
	beforeAll(function() -- Line 23
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw = Instance.new("Folder")
		var2_upvw.Name = "KnitTestFolder"
		var2_upvw.Archivable = false
		var2_upvw.Parent = workspace
		var3_upvw = Instance.new("Model")
		var3_upvw.Name = "KnitTestModel"
		var3_upvw.Archivable = false
		var3_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 34
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw:ClearAllChildren()
		var3_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 39
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw:Destroy()
		var3_upvw:Destroy()
	end)
	local Streamable_upvr = require(script.Parent.Streamable)
	describe("Streamable", function() -- Line 44
		--[[ Upvalues[3]:
			[1]: var2_upvw (read and write)
			[2]: Streamable_upvr (readonly)
			[3]: var3_upvw (read and write)
		]]
		it("should detect instance that is immediately available", function() -- Line 45
			--[[ Upvalues[2]:
				[1]: var2_upvw (copied, read and write)
				[2]: Streamable_upvr (copied, readonly)
			]]
			local Folder_2 = Instance.new("Folder")
			Folder_2.Name = "TestImmediate"
			Folder_2.Archivable = false
			Folder_2.Parent = var2_upvw
			local var13 = Folder_2
			local any_new_result1 = Streamable_upvr.new(var2_upvw, "TestImmediate")
			local var15_upvw = 0
			local var16_upvw = 0
			any_new_result1:Observe(function(arg1, arg2) -- Line 50
				--[[ Upvalues[2]:
					[1]: var15_upvw (read and write)
					[2]: var16_upvw (read and write)
				]]
				var15_upvw += 1
				arg2:Add(function() -- Line 52
					--[[ Upvalues[1]:
						[1]: var16_upvw (copied, read and write)
					]]
					var16_upvw += 1
				end)
			end)
			task.wait()
			var13.Parent = nil
			task.wait()
			var13.Parent = var2_upvw
			task.wait()
			any_new_result1:Destroy()
			task.wait()
			expect(var15_upvw).to.equal(2)
			expect(var16_upvw).to.equal(2)
		end)
		it("should detect instance that is not immediately available", function() -- Line 67
			--[[ Upvalues[2]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var2_upvw (copied, read and write)
			]]
			local any_new_result1_2 = Streamable_upvr.new(var2_upvw, "TestImmediate")
			local var21_upvw = 0
			local var22_upvw = 0
			any_new_result1_2:Observe(function(arg1, arg2) -- Line 71
				--[[ Upvalues[2]:
					[1]: var21_upvw (read and write)
					[2]: var22_upvw (read and write)
				]]
				var21_upvw += 1
				arg2:Add(function() -- Line 73
					--[[ Upvalues[1]:
						[1]: var22_upvw (copied, read and write)
					]]
					var22_upvw += 1
				end)
			end)
			task.wait(0.1)
			local Folder_3 = Instance.new("Folder")
			Folder_3.Name = "TestImmediate"
			Folder_3.Archivable = false
			Folder_3.Parent = var2_upvw
			local var26 = Folder_3
			task.wait()
			var26.Parent = nil
			task.wait()
			var26.Parent = var2_upvw
			task.wait()
			any_new_result1_2:Destroy()
			task.wait()
			expect(var21_upvw).to.equal(2)
			expect(var22_upvw).to.equal(2)
		end)
		it("should detect primary part that is immediately available", function() -- Line 90
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: Streamable_upvr (copied, readonly)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Anchored = true
			Part_3.Parent = var3_upvw
			var3_upvw.PrimaryPart = Part_3
			local var29 = Part_3
			local any_primary_result1_2 = Streamable_upvr.primary(var3_upvw)
			local var31_upvw = 0
			local var32_upvw = 0
			any_primary_result1_2:Observe(function(arg1, arg2) -- Line 95
				--[[ Upvalues[2]:
					[1]: var31_upvw (read and write)
					[2]: var32_upvw (read and write)
				]]
				var31_upvw += 1
				arg2:Add(function() -- Line 97
					--[[ Upvalues[1]:
						[1]: var32_upvw (copied, read and write)
					]]
					var32_upvw += 1
				end)
			end)
			task.wait()
			var29.Parent = nil
			task.wait()
			var29.Parent = var3_upvw
			var3_upvw.PrimaryPart = var29
			task.wait()
			any_primary_result1_2:Destroy()
			task.wait()
			expect(var31_upvw).to.equal(2)
			expect(var32_upvw).to.equal(2)
		end)
		it("should detect primary part that is not immediately available", function() -- Line 113
			--[[ Upvalues[2]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var3_upvw (copied, read and write)
			]]
			local any_primary_result1 = Streamable_upvr.primary(var3_upvw)
			local var37_upvw = 0
			local var38_upvw = 0
			any_primary_result1:Observe(function(arg1, arg2) -- Line 117
				--[[ Upvalues[2]:
					[1]: var37_upvw (read and write)
					[2]: var38_upvw (read and write)
				]]
				var37_upvw += 1
				arg2:Add(function() -- Line 119
					--[[ Upvalues[1]:
						[1]: var38_upvw (copied, read and write)
					]]
					var38_upvw += 1
				end)
			end)
			task.wait(0.1)
			local Part = Instance.new("Part")
			Part.Anchored = true
			Part.Parent = var3_upvw
			var3_upvw.PrimaryPart = Part
			local var42 = Part
			task.wait()
			var42.Parent = nil
			task.wait()
			var42.Parent = var3_upvw
			var3_upvw.PrimaryPart = var42
			task.wait()
			any_primary_result1:Destroy()
			task.wait()
			expect(var37_upvw).to.equal(2)
			expect(var38_upvw).to.equal(2)
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.streamable.StreamableUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:08
-- Luau version 6, Types version 3
-- Time taken: 0.001342 seconds

local module = {}
local Trove_upvr = require(script.Parent.Parent.Trove)
function module.Compound(arg1, arg2) -- Line 47
	--[[ Upvalues[1]:
		[1]: Trove_upvr (readonly)
	]]
	local any_new_result1 = Trove_upvr.new()
	local any_new_result1_upvr = Trove_upvr.new()
	local var9_upvw = false
	local function _() -- Line 51, Named "Check"
		--[[ Upvalues[4]:
			[1]: var9_upvw (read and write)
			[2]: arg1 (readonly)
			[3]: arg2 (readonly)
			[4]: any_new_result1_upvr (readonly)
		]]
		if var9_upvw then
		else
			for _, v_2 in pairs(arg1) do
				if not v_2.Instance then return end
			end
			var9_upvw = true
			arg2(arg1, any_new_result1_upvr)
		end
	end
	local function Cleanup_upvr() -- Line 63, Named "Cleanup"
		--[[ Upvalues[2]:
			[1]: var9_upvw (read and write)
			[2]: any_new_result1_upvr (readonly)
		]]
		if not var9_upvw then
		else
			var9_upvw = false
			any_new_result1_upvr:Clean()
		end
	end
	for _, v in pairs(arg1) do
		any_new_result1:Add(v:Observe(function(arg1_2, arg2_2) -- Line 71
			--[[ Upvalues[5]:
				[1]: var9_upvw (read and write)
				[2]: arg1 (readonly)
				[3]: arg2 (readonly)
				[4]: any_new_result1_upvr (readonly)
				[5]: Cleanup_upvr (readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
			if var9_upvw then
				-- KONSTANTWARNING: GOTO [20] #18
			end
			-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [3] 4. Error Block 10 start (CF ANALYSIS FAILED)
			local _, _, _ = pairs(arg1)
			-- KONSTANTERROR: [3] 4. Error Block 10 end (CF ANALYSIS FAILED)
		end))
	end
	any_new_result1:Add(Cleanup_upvr)
	return any_new_result1
end
return module

-- ReplicatedStorage.Packages._Index.sleitnick_streamable@1.2.4.streamable.StreamableUtil.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:09
-- Luau version 6, Types version 3
-- Time taken: 0.001609 seconds

return function() -- Line 1
	local var2_upvw
	local function _(arg1) -- Line 7, Named "CreateInstance"
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		local Folder_3 = Instance.new("Folder")
		Folder_3.Name = arg1
		Folder_3.Archivable = false
		Folder_3.Parent = var2_upvw
		return Folder_3
	end
	beforeAll(function() -- Line 15
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw = Instance.new("Folder")
		var2_upvw.Name = "KnitTest"
		var2_upvw.Archivable = false
		var2_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 22
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 26
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw:Destroy()
	end)
	local Streamable_upvr = require(script.Parent.Streamable)
	local StreamableUtil_upvr = require(script.Parent.StreamableUtil)
	describe("Compound", function() -- Line 30
		--[[ Upvalues[3]:
			[1]: Streamable_upvr (readonly)
			[2]: var2_upvw (read and write)
			[3]: StreamableUtil_upvr (readonly)
		]]
		it("should capture multiple streams", function() -- Line 31
			--[[ Upvalues[3]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var2_upvw (copied, read and write)
				[3]: StreamableUtil_upvr (copied, readonly)
			]]
			local any_new_result1 = Streamable_upvr.new(var2_upvw, "ABC")
			local any_new_result1_2 = Streamable_upvr.new(var2_upvw, "XYZ")
			local var13_upvw = 0
			local var14_upvw = 0
			StreamableUtil_upvr.Compound({
				S1 = any_new_result1;
				S2 = any_new_result1_2;
			}, function(arg1, arg2) -- Line 36
				--[[ Upvalues[2]:
					[1]: var13_upvw (read and write)
					[2]: var14_upvw (read and write)
				]]
				var13_upvw += 1
				arg2:Add(function() -- Line 38
					--[[ Upvalues[1]:
						[1]: var14_upvw (copied, read and write)
					]]
					var14_upvw += 1
				end)
			end)
			local Folder = Instance.new("Folder")
			Folder.Name = "ABC"
			Folder.Archivable = false
			Folder.Parent = var2_upvw
			local var19 = Folder
			local Folder_2 = Instance.new("Folder")
			Folder_2.Name = "XYZ"
			Folder_2.Archivable = false
			Folder_2.Parent = var2_upvw
			local var21 = Folder_2
			task.wait()
			var19.Parent = nil
			task.wait()
			var19.Parent = var2_upvw
			task.wait()
			var19.Parent = nil
			var21.Parent = nil
			task.wait()
			var21.Parent = var2_upvw
			task.wait()
			expect(var13_upvw).to.equal(2)
			expect(var14_upvw).to.equal(2)
			any_new_result1:Destroy()
			any_new_result1_2:Destroy()
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_symbol@2.0.1.symbol
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:10
-- Luau version 6, Types version 3
-- Time taken: 0.000618 seconds

return function(arg1) -- Line 45, Named "Symbol"
	local newproxy_result1 = newproxy(true)
	local var2_upvw
	if not var2_upvw then
		var2_upvw = ""
	end
	getmetatable(newproxy_result1).__tostring = function() -- Line 50
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		return "Symbol("..var2_upvw..')'
	end
	return newproxy_result1
end

-- ReplicatedStorage.Packages._Index.sleitnick_symbol@2.0.1.symbol.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:11
-- Luau version 6, Types version 3
-- Time taken: 0.001686 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Constructor", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a new symbol", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local Parent_upvr_result1_2 = Parent_upvr("Test")
			local expect_result1 = expect(Parent_upvr_result1_2)
			expect_result1.to.be.a("userdata")
			if Parent_upvr_result1_2 ~= Parent_upvr_result1_2 then
				expect_result1 = false
			else
				expect_result1 = true
			end
			expect(expect_result1).to.equal(true)
			expect(tostring(Parent_upvr_result1_2)).to.equal("Symbol(Test)")
		end)
		it("should create a new symbol with no name", function() -- Line 12
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var3_result1 = Parent_upvr()
			local expect_result1_2 = expect(var3_result1)
			expect_result1_2.to.be.a("userdata")
			if var3_result1 ~= var3_result1 then
				expect_result1_2 = false
			else
				expect_result1_2 = true
			end
			expect(expect_result1_2).to.equal(true)
			expect(tostring(var3_result1)).to.equal("Symbol()")
		end)
		it("should be unique regardless of the name", function() -- Line 19
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
			local var11
			if Parent_upvr("Test") ~= Parent_upvr("Test") then
				var11 = false
			else
				var11 = true
			end
			expect(var11).to.equal(false)
			if Parent_upvr() ~= Parent_upvr() then
				var11 = false
				-- KONSTANTWARNING: GOTO [29] #24
			end
			-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [28] 23. Error Block 29 start (CF ANALYSIS FAILED)
			var11 = true
			expect(var11).to.equal(false)
			if Parent_upvr("Test") ~= Parent_upvr() then
				var11 = false
				-- KONSTANTWARNING: GOTO [47] #38
			end
			-- KONSTANTERROR: [28] 23. Error Block 29 end (CF ANALYSIS FAILED)
		end)
		it("should be useable as a table key", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local Parent_upvr_result1 = Parent_upvr()
			expect(({
				[Parent_upvr_result1] = 100;
			})[Parent_upvr_result1]).to.equal(100)
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_table-util@1.2.0.table-util
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:13
-- Luau version 6, Types version 3
-- Time taken: 0.012429 seconds

local module = {}
local HttpService_upvr = game:GetService("HttpService")
local random_state_upvr = Random.new()
local function Sync_upvr(arg1, arg2) -- Line 84, Named "Sync"
	--[[ Upvalues[1]:
		[1]: Sync_upvr (readonly)
	]]
	local var15
	if type(arg1) ~= "table" then
		var15 = false
	else
		var15 = true
	end
	assert(var15, "First argument must be a table")
	if type(arg2) ~= "table" then
		var15 = false
	else
		var15 = true
	end
	assert(var15, "Second argument must be a table")
	var15 = arg1
	local clone_3 = table.clone(var15)
	var15 = pairs(clone_3)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(clone_3)
	for i_2, v_2 in pairs_result1, pairs_result2, pairs_result3 do
		local var20 = arg2[i_2]
		if var20 == nil then
			clone_3[i_2] = nil
		elseif type(v_2) ~= type(var20) then
			if type(var20) == "table" then
				local function DeepCopy(arg1_3) -- Line 44
					--[[ Upvalues[1]:
						[1]: DeepCopy (readonly)
					]]
					local clone = table.clone(arg1_3)
					for i_29, v_24 in clone do
						if type(v_24) == "table" then
							clone[i_29] = DeepCopy(v_24)
						end
					end
					return clone
				end
				clone_3[i_2] = DeepCopy(var20)
			else
				clone_3[i_2] = var20
			end
		else
			DeepCopy = v_2
			if type(DeepCopy) == "table" then
				DeepCopy = v_2
				clone_3[i_2] = Sync_upvr(DeepCopy, var20)
			end
		end
	end
	pairs_result1 = pairs(arg2)
	for i_3, v_3 in pairs(arg2) do
		if clone_3[i_3] == nil then
			DeepCopy = v_3
			if type(DeepCopy) == "table" then
				function DeepCopy(arg1_4) -- Line 44
					--[[ Upvalues[1]:
						[1]: var27_upvr (readonly)
					]]
					local clone_10 = table.clone(arg1_4)
					for i_4, v_4 in clone_10 do
						if type(v_4) == "table" then
							clone_10[i_4] = var27_upvr(v_4)
						end
					end
					return clone_10
				end
				local var27_upvr = DeepCopy
				clone_3[i_3] = var27_upvr(v_3)
			else
				clone_3[i_3] = v_3
			end
		end
	end
	return clone_3
end
local function Reconcile_upvr(arg1, arg2) -- Line 156, Named "Reconcile"
	--[[ Upvalues[1]:
		[1]: Reconcile_upvr (readonly)
	]]
	local var35
	if type(arg1) ~= "table" then
		var35 = false
	else
		var35 = true
	end
	assert(var35, "First argument must be a table")
	if type(arg2) ~= "table" then
		var35 = false
	else
		var35 = true
	end
	assert(var35, "Second argument must be a table")
	var35 = arg1
	var35 = arg2
	for i_5, v_5 in var35 do
		local var36 = arg1[i_5]
		if var36 == nil then
			if type(v_5) == "table" then
				local function DeepCopy_upvr(arg1_5) -- Line 44, Named "DeepCopy"
					--[[ Upvalues[1]:
						[1]: DeepCopy_upvr (readonly)
					]]
					local clone_2 = table.clone(arg1_5)
					for i_6, v_6 in clone_2 do
						if type(v_6) == "table" then
							clone_2[i_6] = DeepCopy_upvr(v_6)
						end
					end
					return clone_2
				end
				table.clone(var35)[i_5] = DeepCopy_upvr(v_5)
			else
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				table.clone(var35)[i_5] = v_5
			end
		else
			DeepCopy_upvr = var36
			if type(DeepCopy_upvr) == "table" then
				DeepCopy_upvr = v_5
				if type(DeepCopy_upvr) == "table" then
					DeepCopy_upvr = var36
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.clone(var35)[i_5] = Reconcile_upvr(DeepCopy_upvr, v_5)
				else
					function DeepCopy_upvr(arg1_6) -- Line 44, Named "DeepCopy"
						--[[ Upvalues[1]:
							[1]: var40_upvr (readonly)
						]]
						local clone_8 = table.clone(arg1_6)
						for i_7, v_7 in clone_8 do
							if type(v_7) == "table" then
								clone_8[i_7] = var40_upvr(v_7)
							end
						end
						return clone_8
					end
					local var40_upvr = DeepCopy_upvr
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.clone(var35)[i_5] = var40_upvr(var36)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.clone(var35)
end
local function Map_upvr(arg1, arg2) -- Line 262, Named "Map"
	local var51
	if type(arg1) ~= "table" then
		var51 = false
	else
		var51 = true
	end
	assert(var51, "First argument must be a table")
	if type(arg2) ~= "function" then
		var51 = false
	else
		var51 = true
	end
	assert(var51, "Second argument must be a function")
	var51 = #arg1
	var51 = arg1
	for i_8, v_8 in var51 do
		table.create(var51)[i_8] = arg2(v_8, i_8, arg1)
		local var53
	end
	return var53
end
function module.Copy(arg1, arg2) -- Line 40
	if not arg2 then
		return table.clone(arg1)
	end
	local function DeepCopy(arg1_2) -- Line 44
		--[[ Upvalues[1]:
			[1]: DeepCopy (readonly)
		]]
		local clone_7 = table.clone(arg1_2)
		for i, v in clone_7 do
			if type(v) == "table" then
				clone_7[i] = DeepCopy(v)
			end
		end
		return clone_7
	end
	return DeepCopy(arg1)
end
module.Sync = Sync_upvr
module.Reconcile = Reconcile_upvr
function module.SwapRemove(arg1, arg2) -- Line 209
	local len_3 = #arg1
	arg1[arg2] = arg1[len_3]
	arg1[len_3] = nil
end
function module.SwapRemoveFirstValue(arg1, arg2) -- Line 234
	local table_find_result1 = table.find(arg1, arg2)
	if table_find_result1 then
		local len_2 = #arg1
		arg1[table_find_result1] = arg1[len_2]
		arg1[len_2] = nil
	end
	return table_find_result1
end
module.Map = Map_upvr
function module.Filter(arg1, arg2) -- Line 292
	local var62
	if type(arg1) ~= "table" then
		var62 = false
	else
		var62 = true
	end
	assert(var62, "First argument must be a table")
	if type(arg2) ~= "function" then
		var62 = false
	else
		var62 = true
	end
	assert(var62, "Second argument must be a function")
	var62 = #arg1
	local table_create_result1_2 = table.create(var62)
	var62 = #arg1
	if 0 < var62 then
		var62 = 0
		for i_9, v_9 in arg1 do
			if arg2(v_9, i_9, arg1) then
				var62 += 1
				table_create_result1_2[var62] = v_9
			end
		end
		return table_create_result1_2
	end
	var62 = arg1
	for i_10, _ in var62 do
		if arg2(i_9, i_10, arg1) then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table_create_result1_2[i_10] = i_9
		end
	end
	return table_create_result1_2
end
function module.Reduce(arg1, arg2, arg3) -- Line 335
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var76
	if type(arg1) ~= "table" then
		var76 = false
	else
		var76 = true
	end
	assert(var76, "First argument must be a table")
	if type(arg2) ~= "function" then
		var76 = false
	else
		var76 = true
	end
	assert(var76, "Second argument must be a function")
	var76 = #arg1
	if 0 < var76 then
		var76 = 1
		if arg3 == nil then
			var76 = 2
		end
		for i_11 = var76, #arg1 do
		end
		return arg2(arg1[1], arg1[i_11], i_11, arg1)
	end
	if arg3 == nil then
		local next_result1_2 = next(arg1)
	end
	for i_12, v_11 in next, arg1, next_result1_2 do
	end
	return arg2(next_result1_2, v_11, i_12, arg1)
end
function module.Assign(arg1, ...) -- Line 378
	local clone_6 = table.clone(arg1)
	for _, v_12 in {...} do
		for i_14, v_13 in v_12 do
			clone_6[i_14] = v_13
		end
	end
	return clone_6
end
function module.Extend(arg1, arg2) -- Line 407
	local clone_5 = table.clone(arg1)
	for _, v_14 in arg2 do
		table.insert(clone_5, v_14)
	end
	return clone_5
end
function module.Reverse(arg1) -- Line 432
	local len_4 = #arg1
	local table_create_result1_5 = table.create(len_4)
	for i_16 = 1, len_4 do
		table_create_result1_5[i_16] = arg1[len_4 - i_16 + 1]
	end
	return table_create_result1_5
end
function module.Shuffle(arg1, arg2) -- Line 459
	--[[ Upvalues[1]:
		[1]: random_state_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var101
	if type(arg1) ~= "table" then
		var101 = false
	else
		var101 = true
	end
	assert(var101, "First argument must be a table")
	var101 = arg1
	local clone_9 = table.clone(var101)
	if typeof(arg2) == "Random" then
		var101 = arg2
	else
		var101 = random_state_upvr
	end
	for i_17 = #arg1, 2, -1 do
		local any_NextInteger_result1_2 = var101:NextInteger(1, i_17)
		clone_9[i_17] = clone_9[any_NextInteger_result1_2]
		clone_9[any_NextInteger_result1_2] = clone_9[i_17]
		local var104
	end
	return var104
end
function module.Sample(arg1, arg2, arg3) -- Line 489
	--[[ Upvalues[1]:
		[1]: random_state_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 25 start (CF ANALYSIS FAILED)
	local var109
	if type(arg1) ~= "table" then
		var109 = false
	else
		var109 = true
	end
	assert(var109, "First argument must be a table")
	if type(arg2) ~= "number" then
		var109 = false
		-- KONSTANTWARNING: GOTO [24] #19
	end
	-- KONSTANTERROR: [0] 1. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [23] 18. Error Block 27 start (CF ANALYSIS FAILED)
	var109 = true
	assert(var109, "Second argument must be a number")
	var109 = arg1
	local clone_4 = table.clone(var109)
	var109 = table.create(arg2)
	if typeof(arg3) == "Random" then
	else
	end
	local len_5 = #arg1
	local clamped_2 = math.clamp(arg2, 1, len_5)
	for i_18 = 1, clamped_2 do
		local any_NextInteger_result1 = random_state_upvr:NextInteger(i_18, len_5)
		clone_4[i_18] = clone_4[any_NextInteger_result1]
		clone_4[any_NextInteger_result1] = clone_4[i_18]
		local _
	end
	table.move(clone_4, 1, clamped_2, 1, var109)
	do
		return var109
	end
	-- KONSTANTERROR: [23] 18. Error Block 27 end (CF ANALYSIS FAILED)
end
function module.Flat(arg1, arg2) -- Line 526
	local var115_upvr
	if type(arg2) == "number" then
		var115_upvr = arg2
	else
		var115_upvr = 1
	end
	local table_create_result1_upvr = table.create(#arg1)
	local function Scan(arg1_7, arg2_2) -- Line 529
		--[[ Upvalues[3]:
			[1]: var115_upvr (readonly)
			[2]: Scan (readonly)
			[3]: table_create_result1_upvr (readonly)
		]]
		for _, v_15 in arg1_7 do
			if type(v_15) == "table" and arg2_2 < var115_upvr then
				Scan(v_15, arg2_2 + 1)
			else
				table.insert(table_create_result1_upvr, v_15)
			end
		end
	end
	Scan(arg1, 0)
	return table_create_result1_upvr
end
function module.FlatMap(arg1, arg2) -- Line 563
	--[[ Upvalues[1]:
		[1]: Map_upvr (readonly)
	]]
	local Map_result1 = Map_upvr(arg1, arg2)
	local table_create_result1_3_upvr = table.create(#Map_result1)
	local var121_upvr = 1
	local function Scan_upvr(arg1_8, arg2_3) -- Line 529, Named "Scan"
		--[[ Upvalues[3]:
			[1]: var121_upvr (readonly)
			[2]: Scan_upvr (readonly)
			[3]: table_create_result1_3_upvr (readonly)
		]]
		for _, v_16 in arg1_8 do
			if type(v_16) == "table" and arg2_3 < var121_upvr then
				Scan_upvr(v_16, arg2_3 + 1)
			else
				table.insert(table_create_result1_3_upvr, v_16)
			end
		end
	end
	var121_upvr = Scan_upvr
	var121_upvr(Map_result1, 0)
	return table_create_result1_3_upvr
end
function module.Keys(arg1) -- Line 589
	local table_create_result1 = table.create(#arg1)
	for i_21 in arg1 do
		table.insert(table_create_result1, i_21)
	end
	return table_create_result1
end
function module.Values(arg1) -- Line 619
	local table_create_result1_4 = table.create(#arg1)
	for _, v_17 in arg1 do
		table.insert(table_create_result1_4, v_17)
	end
	return table_create_result1_4
end
function module.Find(arg1, arg2) -- Line 658
	for i_23, v_18 in arg1 do
		if arg2(v_18, i_23, arg1) then
			return v_18, i_23
		end
	end
	return nil, nil
end
function module.Every(arg1, arg2) -- Line 687
	for i_24, v_19 in arg1 do
		if not arg2(v_19, i_24, arg1) then
			return false
		end
	end
	return true
end
function module.Some(arg1, arg2) -- Line 716
	for i_25, v_20 in arg1 do
		if arg2(v_20, i_25, arg1) then
			return true
		end
	end
	return false
end
function module.Truncate(arg1, arg2) -- Line 742
	local len = #arg1
	local clamped = math.clamp(arg2, 1, len)
	if clamped == len then
		return table.clone(arg1)
	end
	return table.move(arg1, 1, clamped, 1, table.create(clamped))
end
function module.Zip(...) -- Line 775
	local ZipIteratorMap
	if 0 >= select('#', ...) then
		ZipIteratorMap = false
	else
		ZipIteratorMap = true
	end
	assert(ZipIteratorMap, "Must supply at least 1 table")
	function ZipIteratorMap(arg1, arg2) -- Line 790
		for i_27, v_22 in arg1 do
			local next_result1 = next(v_22, arg2)
			if next_result1 ~= nil then
				({})[i_27] = next_result1
			else
				return nil, nil
			end
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		return arg2, {}
	end
	local args_list = {...}
	if 0 < #args_list[1] then
		return function(arg1, arg2) -- Line 777, Named "ZipIteratorArray"
			local var143 = arg2 + 1
			for i_26, v_21 in arg1 do
				local var144 = v_21[var143]
				if var144 ~= nil then
					({})[i_26] = var144
				else
					return nil, nil
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return var143, {}
		end, args_list, 0
	end
	return ZipIteratorMap, args_list, nil
end
function module.Lock(arg1) -- Line 828
	local function Freeze_upvr(arg1_9) -- Line 829, Named "Freeze"
		--[[ Upvalues[1]:
			[1]: Freeze_upvr (readonly)
		]]
		for i_28, v_23 in pairs(arg1_9) do
			if type(v_23) == "table" then
				arg1_9[i_28] = Freeze_upvr(v_23)
			end
		end
		return table.freeze(arg1_9)
	end
	return Freeze_upvr(arg1)
end
function module.IsEmpty(arg1) -- Line 858
	local var154
	if next(arg1) ~= nil then
		var154 = false
	else
		var154 = true
	end
	return var154
end
function module.EncodeJSON(arg1) -- Line 870
	--[[ Upvalues[1]:
		[1]: HttpService_upvr (readonly)
	]]
	return HttpService_upvr:JSONEncode(arg1)
end
function module.DecodeJSON(arg1) -- Line 882
	--[[ Upvalues[1]:
		[1]: HttpService_upvr (readonly)
	]]
	return HttpService_upvr:JSONDecode(arg1)
end
return module

-- ReplicatedStorage.Packages._Index.sleitnick_table-util@1.2.0.table-util.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:14
-- Luau version 6, Types version 3
-- Time taken: 0.016425 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Copy (Deep)", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a deep table copy", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_19 = {
				a = {
					b = {
						c = {
							d = 32;
						};
					};
				};
			}
			local any_Copy_result1_3 = Parent_upvr.Copy(tbl_19, true)
			expect(tbl_19).never.to.equal(any_Copy_result1_3)
			expect(tbl_19.a).never.to.equal(any_Copy_result1_3.a)
			expect(any_Copy_result1_3.a.b.c.d).to.equal(tbl_19.a.b.c.d)
		end)
	end)
	describe("Copy (Shallow)", function() -- Line 14
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a shallow dictionary copy", function() -- Line 15
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_23 = {
				a = {
					b = {
						c = {
							d = 32;
						};
					};
				};
			}
			local any_Copy_result1_2 = Parent_upvr.Copy(tbl_23)
			expect(any_Copy_result1_2).never.to.equal(tbl_23)
			expect(any_Copy_result1_2.a).to.equal(tbl_23.a)
			expect(any_Copy_result1_2.a.b.c.d).to.equal(tbl_23.a.b.c.d)
		end)
		it("should create a shallow array copy", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_2 = {10, 20, 30, 40}
			local any_Copy_result1 = Parent_upvr.Copy(tbl_2)
			expect(any_Copy_result1).never.to.equal(tbl_2)
			for i, v in ipairs(tbl_2) do
				expect(any_Copy_result1[i]).to.equal(v)
			end
		end)
	end)
	describe("Sync", function() -- Line 33
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should sync tables", function() -- Line 34
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_7 = {
				a = 32;
				b = 64;
				c = 128;
				e = {
					h = 1;
				};
			}
			local any_Sync_result1 = Parent_upvr.Sync({
				a = 32;
				b = 10;
				d = 1;
				e = {
					h = 2;
					n = 2;
				};
				f = {
					x = 10;
				};
			}, tbl_7)
			expect(any_Sync_result1.a).to.equal(tbl_7.a)
			expect(any_Sync_result1.b).to.equal(10)
			expect(any_Sync_result1.c).to.equal(tbl_7.c)
			expect(any_Sync_result1.d).never.to.be.ok()
			expect(any_Sync_result1.e.h).to.equal(2)
			expect(any_Sync_result1.e.n).never.to.be.ok()
			expect(any_Sync_result1.f).never.to.be.ok()
		end)
	end)
	describe("Reconcile", function() -- Line 48
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should reconcile table", function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_8 = {
				kills = 0;
				deaths = 0;
				xp = 10;
				stuff = {};
				stuff2 = "abc";
				stuff3 = {"data"};
			}
			local tbl_24 = {
				kills = 10;
				deaths = 4;
				stuff = {"abc", "xyz"};
				extra = 5;
				stuff2 = {
					abc = 10;
				};
				stuff3 = true;
			}
			local any_Reconcile_result1 = Parent_upvr.Reconcile(tbl_24, tbl_8)
			expect(any_Reconcile_result1).never.to.equal(tbl_24)
			expect(any_Reconcile_result1).never.to.equal(tbl_8)
			expect(any_Reconcile_result1.kills).to.equal(10)
			expect(any_Reconcile_result1.deaths).to.equal(4)
			expect(any_Reconcile_result1.xp).to.equal(10)
			expect(any_Reconcile_result1.stuff[1]).to.equal("abc")
			expect(any_Reconcile_result1.stuff[2]).to.equal("xyz")
			expect(any_Reconcile_result1.extra).to.equal(5)
			expect(type(any_Reconcile_result1.stuff2)).to.equal("table")
			expect(any_Reconcile_result1.stuff2).never.to.equal(tbl_24.stuff2)
			expect(any_Reconcile_result1.stuff2.abc).to.equal(10)
			expect(type(any_Reconcile_result1.stuff3)).to.equal("boolean")
			expect(any_Reconcile_result1.stuff3).to.equal(true)
		end)
	end)
	describe("SwapRemove", function() -- Line 70
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should swap remove index", function() -- Line 71
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_21 = {1, 2, 3, 4, 5}
			Parent_upvr.SwapRemove(tbl_21, 3)
			expect(#tbl_21).to.equal(4)
			expect(tbl_21[3]).to.equal(5)
		end)
	end)
	describe("SwapRemoveFirstValue", function() -- Line 79
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should swap remove first value given", function() -- Line 80
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_5 = {"hello", "world", "goodbye", "planet"}
			Parent_upvr.SwapRemoveFirstValue(tbl_5, "world")
			expect(#tbl_5).to.equal(3)
			expect(tbl_5[2]).to.equal("planet")
		end)
	end)
	describe("Map", function() -- Line 88
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should map table", function() -- Line 89
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Map_result1 = Parent_upvr.Map({{
				FirstName = "John";
				LastName = "Doe";
			}, {
				FirstName = "Jane";
				LastName = "Smith";
			}}, function(arg1) -- Line 94
				return arg1.FirstName..' '..arg1.LastName
			end)
			expect(any_Map_result1[1]).to.equal("John Doe")
			expect(any_Map_result1[2]).to.equal("Jane Smith")
		end)
	end)
	describe("Filter", function() -- Line 102
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should filter table", function() -- Line 103
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Filter_result1 = Parent_upvr.Filter({10, 20, 30, 40, 50, 60, 70, 80, 90}, function(arg1) -- Line 105
				local var60 = false
				if 30 <= arg1 then
					if arg1 > 60 then
						var60 = false
					else
						var60 = true
					end
				end
				return var60
			end)
			expect(#any_Filter_result1).to.equal(4)
			expect(any_Filter_result1[1]).to.equal(30)
			expect(any_Filter_result1[#any_Filter_result1]).to.equal(60)
		end)
	end)
	describe("Reduce", function() -- Line 114
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should reduce table with numbers", function() -- Line 115
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({1, 2, 3, 4, 5}, function(arg1, arg2) -- Line 117
				return arg1 + arg2
			end)).to.equal(15)
		end)
		it("should reduce table", function() -- Line 123
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1, arg2) -- Line 125
				return arg1 + arg2.Score
			end, 0)).to.equal(60)
		end)
		it("should reduce table with initial value", function() -- Line 131
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1, arg2) -- Line 133
				return arg1 + arg2.Score
			end, 40)).to.equal(100)
		end)
		it("should reduce functions", function() -- Line 139
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({function(arg1) -- Line 140, Named "Square"
				return arg1 * arg1
			end, function(arg1) -- Line 143, Named "Double"
				return arg1 * 2
			end}, function(arg1, arg2) -- Line 146
				return function(arg1_2) -- Line 147
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					return arg1(arg2(arg1_2))
				end
			end)(10)).to.equal(400)
		end)
	end)
	describe("Assign", function() -- Line 156
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should assign tables", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Assign_result1 = Parent_upvr.Assign({
				a = 32;
				x = 100;
			}, {
				b = 64;
				c = 128;
			}, {
				a = 10;
				c = 100;
				d = 200;
			})
			expect(any_Assign_result1.a).to.equal(10)
			expect(any_Assign_result1.b).to.equal(64)
			expect(any_Assign_result1.c).to.equal(100)
			expect(any_Assign_result1.d).to.equal(200)
			expect(any_Assign_result1.x).to.equal(100)
		end)
	end)
	describe("Extend", function() -- Line 170
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should extend tables", function() -- Line 171
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Extend({'a', 'b', 'c'}, {'d', 'e', 'f'}))).to.equal("abcdef")
		end)
	end)
	describe("Reverse", function() -- Line 179
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a table in reverse", function() -- Line 180
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Reverse({1, 2, 3}))).to.equal("321")
		end)
	end)
	describe("Shuffle", function() -- Line 187
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should shuffle a table", function() -- Line 188
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_9_upvr = {1, 2, 3, 4, 5}
			expect(function() -- Line 190
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_9_upvr (readonly)
				]]
				Parent_upvr.Shuffle(tbl_9_upvr)
			end).never.to.throw()
		end)
	end)
	describe("Sample", function() -- Line 196
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should sample a table", function() -- Line 197
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(#Parent_upvr.Sample({1, 2, 3, 4, 5}, 3)).to.equal(3)
		end)
	end)
	describe("Flat", function() -- Line 204
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should flatten table", function() -- Line 205
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Flat({1, 2, 3, {4, 5, {6, 7}}}, 3))).to.equal("1234567")
		end)
	end)
	describe("FlatMap", function() -- Line 212
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should map and flatten table", function() -- Line 213
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.FlatMap({1, 2, 3, 4, 5, 6, 7}, function(arg1) -- Line 215
				local module = {}
				module[1] = arg1
				module[2] = arg1 * 2
				return module
			end))).to.equal("12243648510612714")
		end)
	end)
	describe("Keys", function() -- Line 222
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should give all keys of table", function() -- Line 223
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Keys_result1 = Parent_upvr.Keys({
				a = 1;
				b = 2;
				c = 3;
			})
			expect(#any_Keys_result1).to.equal(3)
			expect(table.find(any_Keys_result1, 'a')).to.be.ok()
			expect(table.find(any_Keys_result1, 'b')).to.be.ok()
			expect(table.find(any_Keys_result1, 'c')).to.be.ok()
		end)
	end)
	describe("Values", function() -- Line 233
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should give all values of table", function() -- Line 234
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Values_result1 = Parent_upvr.Values({
				a = 1;
				b = 2;
				c = 3;
			})
			expect(#any_Values_result1).to.equal(3)
			expect(table.find(any_Values_result1, 1)).to.be.ok()
			expect(table.find(any_Values_result1, 2)).to.be.ok()
			expect(table.find(any_Values_result1, 3)).to.be.ok()
		end)
	end)
	describe("Find", function() -- Line 244
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should find item in array", function() -- Line 245
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Find_result1, any_Find_result2_2 = Parent_upvr.Find({10, 20, 30}, function(arg1) -- Line 247
				if arg1 ~= 20 then
				else
				end
				return true
			end)
			expect(any_Find_result1).to.be.ok()
			expect(any_Find_result2_2).to.equal(2)
			expect(any_Find_result1).to.equal(20)
		end)
		it("should find item in dictionary", function() -- Line 255
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Find_result1_2, any_Find_result2 = Parent_upvr.Find({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1) -- Line 257
				local var132
				if arg1.Score ~= 20 then
					var132 = false
				else
					var132 = true
				end
				return var132
			end)
			expect(any_Find_result1_2).to.be.ok()
			expect(any_Find_result2).to.equal(2)
			expect(any_Find_result1_2.Score).to.equal(20)
		end)
	end)
	describe("Every", function() -- Line 266
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should see every value is above 20", function() -- Line 267
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Every({21, 40, 200}, function(arg1) -- Line 269
				local var139
				if 20 >= arg1 then
					var139 = false
				else
					var139 = true
				end
				return var139
			end)).to.equal(true)
		end)
		it("should see every value is not above 20", function() -- Line 275
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Every({20, 40, 200}, function(arg1) -- Line 277
				local var143
				if 20 >= arg1 then
					var143 = false
				else
					var143 = true
				end
				return var143
			end)).never.to.equal(true)
		end)
	end)
	describe("Some", function() -- Line 284
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should see some value is above 20", function() -- Line 285
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some({5, 40, 1}, function(arg1) -- Line 287
				local var148
				if 20 >= arg1 then
					var148 = false
				else
					var148 = true
				end
				return var148
			end)).to.equal(true)
		end)
		it("should see some value is not above 20", function() -- Line 293
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some({5, 15, 1}, function(arg1) -- Line 295
				local var152
				if 20 >= arg1 then
					var152 = false
				else
					var152 = true
				end
				return var152
			end)).never.to.equal(true)
		end)
	end)
	describe("Truncate", function() -- Line 302
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should truncate an array", function() -- Line 303
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_3 = {1, 2, 3, 4, 5}
			local any_Truncate_result1_2 = Parent_upvr.Truncate(tbl_3, 3)
			expect(#any_Truncate_result1_2).to.equal(3)
			expect(any_Truncate_result1_2[1]).to.equal(tbl_3[1])
			expect(any_Truncate_result1_2[2]).to.equal(tbl_3[2])
			expect(any_Truncate_result1_2[3]).to.equal(tbl_3[3])
		end)
		it("should truncate an array with out of bounds sizes", function() -- Line 312
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_20_upvr = {1, 2, 3, 4, 5}
			expect(function() -- Line 314
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_20_upvr (readonly)
				]]
				Parent_upvr.Truncate(tbl_20_upvr, -1)
			end).to.never.throw()
			expect(function() -- Line 317
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_20_upvr (readonly)
				]]
				Parent_upvr.Truncate(tbl_20_upvr, #tbl_20_upvr + 1)
			end).to.never.throw()
			local any_Truncate_result1 = Parent_upvr.Truncate(tbl_20_upvr, #tbl_20_upvr + 10)
			expect(#any_Truncate_result1).to.equal(#tbl_20_upvr)
			expect(any_Truncate_result1).to.never.equal(tbl_20_upvr)
		end)
	end)
	describe("Lock", function() -- Line 326
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should lock a table", function() -- Line 327
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_18_upvr = {
				abc = {
					xyz = {
						num = 32;
					};
				};
			}
			expect(function() -- Line 329
				--[[ Upvalues[1]:
					[1]: tbl_18_upvr (readonly)
				]]
				tbl_18_upvr.abc.xyz.num = 64
			end).never.to.throw()
			expect(tbl_18_upvr.abc.xyz.num).to.equal(64)
			expect(tbl_18_upvr).to.equal(Parent_upvr.Lock(tbl_18_upvr))
			expect(function() -- Line 335
				--[[ Upvalues[1]:
					[1]: tbl_18_upvr (readonly)
				]]
				tbl_18_upvr.abc.xyz.num = 10
			end).to.throw()
		end)
	end)
	describe("Zip", function() -- Line 341
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should zip arrays together", function() -- Line 342
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_17 = {1, 2, 3, 4, 5}
			local tbl_16 = {9, 8, 7, 6, 5}
			local tbl_22 = {1, 1, 1, 1, 1}
			local var181
			for i_2, v_2 in Parent_upvr.Zip(tbl_17, tbl_16, tbl_22) do
				expect(v_2[1]).to.equal(tbl_17[i_2])
				expect(v_2[2]).to.equal(tbl_16[i_2])
				expect(v_2[3]).to.equal(tbl_22[i_2])
			end
			expect(nil).to.equal(math.min(#tbl_17, #tbl_16, #tbl_22))
		end)
		it("should zip arrays of different lengths together", function() -- Line 356
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl = {1, 2, 3, 4, 5}
			local tbl_15 = {9, 8, 7, 6}
			local tbl_14 = {1, 1, 1}
			local var193
			for i_3, v_3 in Parent_upvr.Zip(tbl, tbl_15, tbl_14) do
				expect(v_3[1]).to.equal(tbl[i_3])
				expect(v_3[2]).to.equal(tbl_15[i_3])
				expect(v_3[3]).to.equal(tbl_14[i_3])
			end
			expect(nil).to.equal(math.min(#tbl, #tbl_15, #tbl_14))
		end)
		it("should zip maps together", function() -- Line 370
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_13 = {
				a = 10;
				b = 20;
				c = 30;
			}
			local tbl_4 = {
				a = 100;
				b = 200;
				c = 300;
			}
			local tbl_12 = {
				a = 3000;
				b = 2000;
				c = 3000;
			}
			for i_4, v_4 in Parent_upvr.Zip(tbl_13, tbl_4, tbl_12) do
				expect(v_4[1]).to.equal(tbl_13[i_4])
				expect(v_4[2]).to.equal(tbl_4[i_4])
				expect(v_4[3]).to.equal(tbl_12[i_4])
			end
		end)
		it("should zip maps of different keys together", function() -- Line 381
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_11 = {
				a = 10;
				b = 20;
				c = 30;
				d = 40;
			}
			local tbl_10 = {
				a = 100;
				b = 200;
				c = 300;
				z = 10;
			}
			local tbl_6 = {
				a = 3000;
				b = 2000;
				c = 3000;
				x = 0;
			}
			for i_5, v_5 in Parent_upvr.Zip(tbl_11, tbl_10, tbl_6) do
				expect(v_5[1]).to.equal(tbl_11[i_5])
				expect(v_5[2]).to.equal(tbl_10[i_5])
				expect(v_5[3]).to.equal(tbl_6[i_5])
			end
		end)
	end)
	describe("IsEmpty", function() -- Line 393
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should detect that table is empty", function() -- Line 394
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({})).to.equal(true)
		end)
		it("should detect that array is not empty", function() -- Line 400
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({10, 20, 30})).to.equal(false)
		end)
		it("should detect that dictionary is not empty", function() -- Line 406
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({
				a = 10;
				b = 20;
				c = 30;
			})).to.equal(false)
		end)
	end)
	describe("JSON", function() -- Line 413
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should encode json", function() -- Line 414
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.EncodeJSON({
				hello = "world";
			})).to.equal("{\"hello\":\"world\"}")
		end)
		it("should decode json", function() -- Line 420
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_DecodeJSON_result1 = Parent_upvr.DecodeJSON("{\"hello\":\"world\"}")
			expect(any_DecodeJSON_result1).to.be.a("table")
			expect(any_DecodeJSON_result1.hello).to.equal("world")
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_timer@1.1.2.Signal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:47:32
-- Luau version 6, Types version 3
-- Time taken: 0.000201 seconds

return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

-- ReplicatedStorage.Packages._Index.sleitnick_timer@1.1.2.timer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:15
-- Luau version 6, Types version 3
-- Time taken: 0.002921 seconds

local RunService_upvr = game:GetService("RunService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Signal)
function module_upvr.new(arg1) -- Line 73
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local var4
	if type(arg1) ~= "number" then
		var4 = false
	else
		var4 = true
	end
	assert(var4, "Argument #1 to Timer.new must be a number; got "..type(arg1))
	if 0 > arg1 then
		var4 = false
	else
		var4 = true
	end
	assert(var4, "Argument #1 to Timer.new must be greater or equal to 0; got "..tostring(arg1))
	var4 = {}
	local setmetatable_result1 = setmetatable(var4, module_upvr)
	var4 = nil
	setmetatable_result1._runHandle = var4
	setmetatable_result1.Interval = arg1
	var4 = RunService_upvr.Heartbeat
	setmetatable_result1.UpdateSignal = var4
	var4 = time
	setmetatable_result1.TimeFunction = var4
	var4 = true
	setmetatable_result1.AllowDrift = var4
	var4 = Signal_upvr.new()
	setmetatable_result1.Tick = var4
	return setmetatable_result1
end
function module_upvr.Simple(arg1, arg2, arg3, arg4, arg5) -- Line 103
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var6 = arg4
	if not var6 then
		var6 = RunService_upvr.Heartbeat
	end
	local var7_upvr = arg5
	if not var7_upvr then
		var7_upvr = time
	end
	if arg3 then
		task.defer(arg2)
	end
	local var9_upvw = var7_upvr() + arg1
	return var6:Connect(function() -- Line 116
		--[[ Upvalues[4]:
			[1]: var7_upvr (readonly)
			[2]: var9_upvw (read and write)
			[3]: arg1 (readonly)
			[4]: arg2 (readonly)
		]]
		local var7_result1 = var7_upvr()
		if var9_upvw <= var7_result1 then
			var9_upvw = var7_result1 + arg1
			task.defer(arg2)
		end
	end)
end
function module_upvr.Is(arg1) -- Line 128
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var11 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_upvr then
			var11 = false
		else
			var11 = true
		end
	end
	return var11
end
function module_upvr._startTimer(arg1) -- Line 132
	local TimeFunction_upvr_2 = arg1.TimeFunction
	local var14_upvw = TimeFunction_upvr_2() + arg1.Interval
	arg1._runHandle = arg1.UpdateSignal:Connect(function() -- Line 135
		--[[ Upvalues[3]:
			[1]: TimeFunction_upvr_2 (readonly)
			[2]: var14_upvw (read and write)
			[3]: arg1 (readonly)
		]]
		local var12_result1 = TimeFunction_upvr_2()
		if var14_upvw <= var12_result1 then
			var14_upvw = var12_result1 + arg1.Interval
			arg1.Tick:Fire()
		end
	end)
end
function module_upvr._startTimerNoDrift(arg1) -- Line 144
	local var16_upvw
	if 0 >= arg1.Interval then
		var16_upvw = false
	else
		var16_upvw = true
	end
	assert(var16_upvw, "Interval must be greater than 0 when AllowDrift is set to false")
	local TimeFunction_upvr = arg1.TimeFunction
	var16_upvw = 1
	local TimeFunction_upvr_result1_upvr = TimeFunction_upvr()
	local var20_upvw = TimeFunction_upvr_result1_upvr + arg1.Interval
	arg1._runHandle = arg1.UpdateSignal:Connect(function() -- Line 150
		--[[ Upvalues[5]:
			[1]: TimeFunction_upvr (readonly)
			[2]: var20_upvw (read and write)
			[3]: var16_upvw (read and write)
			[4]: TimeFunction_upvr_result1_upvr (readonly)
			[5]: arg1 (readonly)
		]]
		while var20_upvw <= TimeFunction_upvr() do
			var16_upvw += 1
			var20_upvw = TimeFunction_upvr_result1_upvr + arg1.Interval * var16_upvw
			arg1.Tick:Fire()
		end
	end)
end
function module_upvr.Start(arg1) -- Line 167
	if arg1._runHandle then
	else
		if arg1.AllowDrift then
			arg1:_startTimer()
			return
		end
		arg1:_startTimerNoDrift()
	end
end
function module_upvr.StartNow(arg1) -- Line 186
	if arg1._runHandle then
	else
		arg1.Tick:Fire()
		arg1:Start()
	end
end
function module_upvr.Stop(arg1) -- Line 201
	if not arg1._runHandle then
	else
		arg1._runHandle:Disconnect()
		arg1._runHandle = nil
	end
end
function module_upvr.IsRunning(arg1) -- Line 218
	local var21
	if arg1._runHandle == nil then
		var21 = false
	else
		var21 = true
	end
	return var21
end
function module_upvr.Destroy(arg1) -- Line 225
	arg1.Tick:Destroy()
	arg1:Stop()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_timer@1.1.2.timer.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:16
-- Luau version 6, Types version 3
-- Time taken: 0.001798 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Timer", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new(0.1)
			var4_upvw.TimeFunction = os.clock
		end)
		afterEach(function() -- Line 12
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should create a new timer", function() -- Line 19
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: var4_upvw (read and write)
			]]
			expect(Parent_upvr.Is(var4_upvw)).to.equal(true)
		end)
		it("should tick appropriately", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			var4_upvw:Start()
			var4_upvw.Tick:Wait()
			local var9 = os.clock() - os.clock()
			expect(var9).to.be.near(var9, 0.02)
		end)
		it("should start immediately", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var11_upvw
			var4_upvw.Tick:Connect(function() -- Line 34
				--[[ Upvalues[1]:
					[1]: var11_upvw (read and write)
				]]
				if not var11_upvw then
					var11_upvw = os.clock()
				end
			end)
			var4_upvw:StartNow()
			var4_upvw.Tick:Wait()
			expect(var11_upvw).to.be.a("number")
			expect(var11_upvw - os.clock()).to.be.near(0, 0.02)
		end)
		it("should stop", function() -- Line 46
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var14_upvw = 0
			var4_upvw.Tick:Connect(function() -- Line 48
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				var14_upvw += 1
			end)
			var4_upvw:StartNow()
			var4_upvw:Stop()
			task.wait(1)
			expect(var14_upvw).to.equal(1)
		end)
		it("should detect if running", function() -- Line 57
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(var4_upvw:IsRunning()).to.equal(false)
			var4_upvw:Start()
			expect(var4_upvw:IsRunning()).to.equal(true)
			var4_upvw:Stop()
			expect(var4_upvw:IsRunning()).to.equal(false)
			var4_upvw:StartNow()
			expect(var4_upvw:IsRunning()).to.equal(true)
			var4_upvw:Stop()
			expect(var4_upvw:IsRunning()).to.equal(false)
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_trove@0.4.2.trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:17
-- Luau version 6, Types version 3
-- Time taken: 0.003693 seconds

local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function GetObjectCleanupFunction_upvr(arg1, arg2) -- Line 10, Named "GetObjectCleanupFunction"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	local typeof_result1 = typeof(arg1)
	if typeof_result1 == "function" then
		return newproxy_result1_upvr_2
	end
	if typeof_result1 == "thread" then
		return newproxy_result1_upvr
	end
	if arg2 then
		return arg2
	end
	if typeof_result1 == "Instance" then
		return "Destroy"
	end
	if typeof_result1 == "RBXScriptConnection" then
		return "Disconnect"
	end
	if typeof_result1 == "table" then
		if typeof(arg1.Destroy) == "function" then
			return "Destroy"
		end
		if typeof(arg1.Disconnect) == "function" then
			return "Disconnect"
		end
	end
	error("Failed to get cleanup function for object "..typeof_result1..": "..tostring(arg1), 3)
end
local function _(arg1) -- Line 34, Named "AssertPromiseLike"
	if type(arg1) ~= "table" or type(arg1.getStatus) ~= "function" or type(arg1.finally) ~= "function" or type(arg1.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new() -- Line 57
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._objects = {}
	return setmetatable_result1
end
function module_upvr.Extend(arg1) -- Line 82
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	return arg1:Construct(module_upvr)
end
function module_upvr.Clone(arg1, arg2) -- Line 90
	return arg1:Add(arg2:Clone())
end
function module_upvr.Construct(arg1, arg2, ...) -- Line 127
	local var6
	local type_result1 = type(arg2)
	if type_result1 == "table" then
		var6 = arg2.new(...)
	elseif type_result1 == "function" then
		var6 = arg2(...)
	end
	return arg1:Add(var6)
end
function module_upvr.Connect(arg1, arg2, arg3) -- Line 153
	return arg1:Add(arg2:Connect(arg3))
end
local RunService_upvr = game:GetService("RunService")
function module_upvr.BindToRenderStep(arg1, arg2, arg3, arg4) -- Line 170
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	RunService_upvr:BindToRenderStep(arg2, arg3, arg4)
	arg1:Add(function() -- Line 172
		--[[ Upvalues[2]:
			[1]: RunService_upvr (copied, readonly)
			[2]: arg2 (readonly)
		]]
		RunService_upvr:UnbindFromRenderStep(arg2)
	end)
end
function module_upvr.AddPromise(arg1, arg2) -- Line 200
	if type(arg2) ~= "table" or type(arg2.getStatus) ~= "function" or type(arg2.finally) ~= "function" or type(arg2.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
	if arg2:getStatus() == "Started" then
		arg2:finally(function() -- Line 203
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			return arg1:_findAndRemoveFromObjects(arg2, false)
		end)
		arg1:Add(arg2, "cancel")
	end
	return arg2
end
function module_upvr.Add(arg1, arg2, arg3) -- Line 259
	--[[ Upvalues[1]:
		[1]: GetObjectCleanupFunction_upvr (readonly)
	]]
	local tbl = {}
	tbl[1] = arg2
	tbl[2] = GetObjectCleanupFunction_upvr(arg2, arg3)
	table.insert(arg1._objects, tbl)
	return arg2
end
function module_upvr.Remove(arg1, arg2) -- Line 275
	return arg1:_findAndRemoveFromObjects(arg2, true)
end
function module_upvr.Clean(arg1) -- Line 284
	for _, v in ipairs(arg1._objects) do
		arg1:_cleanupObject(v[1], v[2])
	end
	table.clear(arg1._objects)
end
function module_upvr._findAndRemoveFromObjects(arg1, arg2, arg3) -- Line 291
	local _objects = arg1._objects
	for i_2, v_2 in ipairs(_objects) do
		if v_2[1] == arg2 then
			local len = #_objects
			_objects[i_2] = _objects[len]
			_objects[len] = nil
			if arg3 then
				arg1:_cleanupObject(v_2[1], v_2[2])
			end
			return true
		end
	end
	return false
end
function module_upvr._cleanupObject(arg1, arg2, arg3) -- Line 307
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	if arg3 == newproxy_result1_upvr_2 then
		arg2()
	else
		if arg3 == newproxy_result1_upvr then
			coroutine.close(arg2)
			return
		end
		arg2[arg3](arg2)
	end
end
function module_upvr.AttachToInstance(arg1, arg2) -- Line 330
	assert(arg2:IsDescendantOf(game), "Instance is not a descendant of the game hierarchy")
	return arg1:Connect(arg2.Destroying, function() -- Line 332
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:Destroy()
	end)
end
function module_upvr.Destroy(arg1) -- Line 340
	arg1:Clean()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_trove@0.4.2.trove.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:18
-- Luau version 6, Types version 3
-- Time taken: 0.005108 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Trove", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new()
		end)
		afterEach(function() -- Line 11
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should add and clean up roblox instance", function() -- Line 18
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_4 = Instance.new("Part")
			Part_4.Parent = workspace
			var4_upvw:Add(Part_4)
			var4_upvw:Destroy()
			expect(Part_4.Parent).to.equal(nil)
		end)
		it("should add and clean up roblox connection", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1 = workspace.Changed:Connect(function() -- Line 27
			end)
			var4_upvw:Add(any_Connect_result1)
			var4_upvw:Destroy()
			expect(any_Connect_result1.Connected).to.equal(false)
		end)
		it("should add and clean up a table with a destroy method", function() -- Line 33
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_2 = {
				Destroyed = false;
			}
			local function Destroy(arg1) -- Line 35
				arg1.Destroyed = true
			end
			tbl_2.Destroy = Destroy
			var4_upvw:Add(tbl_2)
			var4_upvw:Destroy()
			expect(tbl_2.Destroyed).to.equal(true)
		end)
		it("should add and clean up a table with a disconnect method", function() -- Line 43
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl = {
				Connected = true;
				Disconnect = function(arg1) -- Line 45, Named "Disconnect"
					arg1.Connected = false
				end;
			}
			var4_upvw:Add(tbl)
			var4_upvw:Destroy()
			expect(tbl.Connected).to.equal(false)
		end)
		it("should add and clean up a function", function() -- Line 53
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var17_upvw = false
			var4_upvw:Add(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: var17_upvw (read and write)
				]]
				var17_upvw = true
			end)
			var4_upvw:Destroy()
			expect(var17_upvw).to.equal(true)
		end)
		it("should allow a custom cleanup method", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_3 = {
				Cleaned = false;
				Cleanup = function(arg1) -- Line 64, Named "Cleanup"
					arg1.Cleaned = true
				end;
			}
			var4_upvw:Add(tbl_3, "Cleanup")
			var4_upvw:Destroy()
			expect(tbl_3.Cleaned).to.equal(true)
		end)
		it("should return the object passed to add", function() -- Line 72
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part = Instance.new("Part")
			expect(Part).to.equal(var4_upvw:Add(Part))
			var4_upvw:Destroy()
		end)
		it("should fail to add object without proper cleanup method", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_4_upvr = {}
			expect(function() -- Line 81
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: tbl_4_upvr (readonly)
				]]
				var4_upvw:Add(tbl_4_upvr)
			end).to.throw()
		end)
		it("should construct an object and add it", function() -- Line 86
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_upvr = {}
			tbl_upvr.__index = tbl_upvr
			function tbl_upvr.new(arg1) -- Line 89
				--[[ Upvalues[1]:
					[1]: tbl_upvr (readonly)
				]]
				local setmetatable_result1 = setmetatable({}, tbl_upvr)
				setmetatable_result1._msg = arg1
				setmetatable_result1._destroyed = false
				return setmetatable_result1
			end
			function tbl_upvr.Destroy(arg1) -- Line 95
				arg1._destroyed = true
			end
			local any_Construct_result1 = var4_upvw:Construct(tbl_upvr, "abc")
			expect(typeof(any_Construct_result1)).to.equal("table")
			expect(getmetatable(any_Construct_result1)).to.equal(tbl_upvr)
			expect(any_Construct_result1._msg).to.equal("abc")
			expect(any_Construct_result1._destroyed).to.equal(false)
			var4_upvw:Destroy()
			expect(any_Construct_result1._destroyed).to.equal(true)
		end)
		it("should connect to a signal", function() -- Line 108
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_4 = var4_upvw:Connect(workspace.Changed, function() -- Line 109
			end)
			expect(typeof(any_Connect_result1_4)).to.equal("RBXScriptConnection")
			expect(any_Connect_result1_4.Connected).to.equal(true)
			var4_upvw:Destroy()
			expect(any_Connect_result1_4.Connected).to.equal(false)
		end)
		it("should remove an object", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_2 = var4_upvw:Connect(workspace.Changed, function() -- Line 117
			end)
			expect(var4_upvw:Remove(any_Connect_result1_2)).to.equal(true)
			expect(any_Connect_result1_2.Connected).to.equal(false)
		end)
		it("should not remove an object not in the trove", function() -- Line 122
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_3 = workspace.Changed:Connect(function() -- Line 123
			end)
			expect(var4_upvw:Remove(any_Connect_result1_3)).to.equal(false)
			expect(any_Connect_result1_3.Connected).to.equal(true)
			any_Connect_result1_3:Disconnect()
		end)
		it("should attach to instance", function() -- Line 129
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Parent = workspace
			local any_AttachToInstance_result1 = var4_upvw:AttachToInstance(Part_3)
			expect(any_AttachToInstance_result1.Connected).to.equal(true)
			Part_3:Destroy()
			expect(any_AttachToInstance_result1.Connected).to.equal(false)
		end)
		it("should fail to attach to instance not in hierarchy", function() -- Line 138
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_2_upvr = Instance.new("Part")
			expect(function() -- Line 140
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: Part_2_upvr (readonly)
				]]
				var4_upvw:AttachToInstance(Part_2_upvr)
			end).to.throw()
		end)
		it("should extend itself", function() -- Line 145
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			local any_Extend_result1 = var4_upvw:Extend()
			local var47_upvw = false
			any_Extend_result1:Add(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: var47_upvw (read and write)
				]]
				var47_upvw = true
			end)
			expect(any_Extend_result1).to.be.a("table")
			expect(getmetatable(any_Extend_result1)).to.equal(Parent_upvr)
			var4_upvw:Clean()
			expect(var47_upvw).to.equal(true)
		end)
		it("should clone an instance", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Construct_result1_2 = var4_upvw:Construct(Instance.new, "Part")
			any_Construct_result1_2.Name = "TroveCloneTest"
			local clone = var4_upvw:Clone(any_Construct_result1_2)
			expect(typeof(clone)).to.equal("Instance")
			expect(clone).to.never.equal(any_Construct_result1_2)
			expect(clone.Name).to.equal("TroveCloneTest")
			expect(any_Construct_result1_2.Name).to.equal(clone.Name)
		end)
		it("should clean up a thread", function() -- Line 168
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local coroutine_create_result1 = coroutine.create(function() -- Line 169
			end)
			var4_upvw:Add(coroutine_create_result1)
			expect(coroutine.status(coroutine_create_result1)).to.equal("suspended")
			var4_upvw:Clean()
			expect(coroutine.status(coroutine_create_result1)).to.equal("dead")
		end)
	end)
end

-- ReplicatedStorage.Packages._Index.sleitnick_trove@0.5.0.trove
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:19
-- Luau version 6, Types version 3
-- Time taken: 0.004088 seconds

local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function GetObjectCleanupFunction_upvr(arg1, arg2) -- Line 10, Named "GetObjectCleanupFunction"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	local typeof_result1 = typeof(arg1)
	if typeof_result1 == "function" then
		return newproxy_result1_upvr_2
	end
	if typeof_result1 == "thread" then
		return newproxy_result1_upvr
	end
	if arg2 then
		return arg2
	end
	if typeof_result1 == "Instance" then
		return "Destroy"
	end
	if typeof_result1 == "RBXScriptConnection" then
		return "Disconnect"
	end
	if typeof_result1 == "table" then
		if typeof(arg1.Destroy) == "function" then
			return "Destroy"
		end
		if typeof(arg1.Disconnect) == "function" then
			return "Disconnect"
		end
	end
	error("Failed to get cleanup function for object "..typeof_result1..": "..tostring(arg1), 3)
end
local function _(arg1) -- Line 34, Named "AssertPromiseLike"
	if type(arg1) ~= "table" or type(arg1.getStatus) ~= "function" or type(arg1.finally) ~= "function" or type(arg1.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new() -- Line 57
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._objects = {}
	setmetatable_result1._cleaning = false
	return setmetatable_result1
end
function module_upvr.Extend(arg1) -- Line 83
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:Extend() while cleaning", 2)
	end
	return arg1:Construct(module_upvr)
end
function module_upvr.Clone(arg1, arg2) -- Line 94
	if arg1._cleaning then
		error("Cannot call trove:Clone() while cleaning", 2)
	end
	return arg1:Add(arg2:Clone())
end
function module_upvr.Construct(arg1, arg2, ...) -- Line 134
	if arg1._cleaning then
		error("Cannot call trove:Construct() while cleaning", 2)
	end
	local var6
	local type_result1 = type(arg2)
	if type_result1 == "table" then
		var6 = arg2.new(...)
	elseif type_result1 == "function" then
		var6 = arg2(...)
	end
	return arg1:Add(var6)
end
function module_upvr.Connect(arg1, arg2, arg3) -- Line 163
	if arg1._cleaning then
		error("Cannot call trove:Connect() while cleaning", 2)
	end
	return arg1:Add(arg2:Connect(arg3))
end
local RunService_upvr = game:GetService("RunService")
function module_upvr.BindToRenderStep(arg1, arg2, arg3, arg4) -- Line 183
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:BindToRenderStep() while cleaning", 2)
	end
	RunService_upvr:BindToRenderStep(arg2, arg3, arg4)
	arg1:Add(function() -- Line 188
		--[[ Upvalues[2]:
			[1]: RunService_upvr (copied, readonly)
			[2]: arg2 (readonly)
		]]
		RunService_upvr:UnbindFromRenderStep(arg2)
	end)
end
function module_upvr.AddPromise(arg1, arg2) -- Line 216
	if arg1._cleaning then
		error("Cannot call trove:AddPromise() while cleaning", 2)
	end
	if type(arg2) ~= "table" or type(arg2.getStatus) ~= "function" or type(arg2.finally) ~= "function" or type(arg2.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
	if arg2:getStatus() == "Started" then
		arg2:finally(function() -- Line 222
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			if arg1._cleaning then
			else
				arg1:_findAndRemoveFromObjects(arg2, false)
			end
		end)
		arg1:Add(arg2, "cancel")
	end
	return arg2
end
function module_upvr.Add(arg1, arg2, arg3) -- Line 281
	--[[ Upvalues[1]:
		[1]: GetObjectCleanupFunction_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:Add() while cleaning", 2)
	end
	local tbl = {}
	tbl[1] = arg2
	tbl[2] = GetObjectCleanupFunction_upvr(arg2, arg3)
	table.insert(arg1._objects, tbl)
	return arg2
end
function module_upvr.Remove(arg1, arg2) -- Line 300
	if arg1._cleaning then
		error("Cannot call trove:Remove() while cleaning", 2)
	end
	return arg1:_findAndRemoveFromObjects(arg2, true)
end
function module_upvr.Clean(arg1) -- Line 313
	if arg1._cleaning then
	else
		arg1._cleaning = true
		for _, v_2 in arg1._objects do
			arg1:_cleanupObject(v_2[1], v_2[2])
		end
		table.clear(arg1._objects)
		arg1._cleaning = false
	end
end
function module_upvr._findAndRemoveFromObjects(arg1, arg2, arg3) -- Line 325
	local _objects = arg1._objects
	for i, v in ipairs(_objects) do
		if v[1] == arg2 then
			local len = #_objects
			_objects[i] = _objects[len]
			_objects[len] = nil
			if arg3 then
				arg1:_cleanupObject(v[1], v[2])
			end
			return true
		end
	end
	return false
end
function module_upvr._cleanupObject(arg1, arg2, arg3) -- Line 341
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	if arg3 == newproxy_result1_upvr_2 then
		arg2()
	else
		if arg3 == newproxy_result1_upvr then
			coroutine.close(arg2)
			return
		end
		arg2[arg3](arg2)
	end
end
function module_upvr.AttachToInstance(arg1, arg2) -- Line 364
	if arg1._cleaning then
		error("Cannot call trove:AttachToInstance() while cleaning", 2)
	elseif not arg2:IsDescendantOf(game) then
		error("Instance is not a descendant of the game hierarchy", 2)
	end
	return arg1:Connect(arg2.Destroying, function() -- Line 370
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:Destroy()
	end)
end
function module_upvr.Destroy(arg1) -- Line 378
	arg1:Clean()
end
return module_upvr

-- ReplicatedStorage.Packages._Index.sleitnick_trove@0.5.0.trove.init.spec
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:20
-- Luau version 6, Types version 3
-- Time taken: 0.004985 seconds

return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Trove", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new()
		end)
		afterEach(function() -- Line 11
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should add and clean up roblox instance", function() -- Line 18
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_4 = Instance.new("Part")
			Part_4.Parent = workspace
			var4_upvw:Add(Part_4)
			var4_upvw:Destroy()
			expect(Part_4.Parent).to.equal(nil)
		end)
		it("should add and clean up roblox connection", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_2 = workspace.Changed:Connect(function() -- Line 27
			end)
			var4_upvw:Add(any_Connect_result1_2)
			var4_upvw:Destroy()
			expect(any_Connect_result1_2.Connected).to.equal(false)
		end)
		it("should add and clean up a table with a destroy method", function() -- Line 33
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl = {
				Destroyed = false;
			}
			local function Destroy(arg1) -- Line 35
				arg1.Destroyed = true
			end
			tbl.Destroy = Destroy
			var4_upvw:Add(tbl)
			var4_upvw:Destroy()
			expect(tbl.Destroyed).to.equal(true)
		end)
		it("should add and clean up a table with a disconnect method", function() -- Line 43
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_4 = {
				Connected = true;
				Disconnect = function(arg1) -- Line 45, Named "Disconnect"
					arg1.Connected = false
				end;
			}
			var4_upvw:Add(tbl_4)
			var4_upvw:Destroy()
			expect(tbl_4.Connected).to.equal(false)
		end)
		it("should add and clean up a function", function() -- Line 53
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var17_upvw = false
			var4_upvw:Add(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: var17_upvw (read and write)
				]]
				var17_upvw = true
			end)
			var4_upvw:Destroy()
			expect(var17_upvw).to.equal(true)
		end)
		it("should allow a custom cleanup method", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_5 = {
				Cleaned = false;
				Cleanup = function(arg1) -- Line 64, Named "Cleanup"
					arg1.Cleaned = true
				end;
			}
			var4_upvw:Add(tbl_5, "Cleanup")
			var4_upvw:Destroy()
			expect(tbl_5.Cleaned).to.equal(true)
		end)
		it("should return the object passed to add", function() -- Line 72
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part = Instance.new("Part")
			expect(Part).to.equal(var4_upvw:Add(Part))
			var4_upvw:Destroy()
		end)
		it("should fail to add object without proper cleanup method", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_2_upvr = {}
			expect(function() -- Line 81
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: tbl_2_upvr (readonly)
				]]
				var4_upvw:Add(tbl_2_upvr)
			end).to.throw()
		end)
		it("should construct an object and add it", function() -- Line 86
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_3_upvr = {}
			tbl_3_upvr.__index = tbl_3_upvr
			function tbl_3_upvr.new(arg1) -- Line 89
				--[[ Upvalues[1]:
					[1]: tbl_3_upvr (readonly)
				]]
				local setmetatable_result1 = setmetatable({}, tbl_3_upvr)
				setmetatable_result1._msg = arg1
				setmetatable_result1._destroyed = false
				return setmetatable_result1
			end
			function tbl_3_upvr.Destroy(arg1) -- Line 95
				arg1._destroyed = true
			end
			local any_Construct_result1_2 = var4_upvw:Construct(tbl_3_upvr, "abc")
			expect(typeof(any_Construct_result1_2)).to.equal("table")
			expect(getmetatable(any_Construct_result1_2)).to.equal(tbl_3_upvr)
			expect(any_Construct_result1_2._msg).to.equal("abc")
			expect(any_Construct_result1_2._destroyed).to.equal(false)
			var4_upvw:Destroy()
			expect(any_Construct_result1_2._destroyed).to.equal(true)
		end)
		it("should connect to a signal", function() -- Line 108
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_4 = var4_upvw:Connect(workspace.Changed, function() -- Line 109
			end)
			expect(typeof(any_Connect_result1_4)).to.equal("RBXScriptConnection")
			expect(any_Connect_result1_4.Connected).to.equal(true)
			var4_upvw:Destroy()
			expect(any_Connect_result1_4.Connected).to.equal(false)
		end)
		it("should remove an object", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1 = var4_upvw:Connect(workspace.Changed, function() -- Line 117
			end)
			expect(var4_upvw:Remove(any_Connect_result1)).to.equal(true)
			expect(any_Connect_result1.Connected).to.equal(false)
		end)
		it("should not remove an object not in the trove", function() -- Line 122
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_3 = workspace.Changed:Connect(function() -- Line 123
			end)
			expect(var4_upvw:Remove(any_Connect_result1_3)).to.equal(false)
			expect(any_Connect_result1_3.Connected).to.equal(true)
			any_Connect_result1_3:Disconnect()
		end)
		it("should attach to instance", function() -- Line 129
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Parent = workspace
			local any_AttachToInstance_result1 = var4_upvw:AttachToInstance(Part_3)
			expect(any_AttachToInstance_result1.Connected).to.equal(true)
			Part_3:Destroy()
			expect(any_AttachToInstance_result1.Connected).to.equal(false)
		end)
		it("should fail to attach to instance not in hierarchy", function() -- Line 138
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_2_upvr = Instance.new("Part")
			expect(function() -- Line 140
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: Part_2_upvr (readonly)
				]]
				var4_upvw:AttachToInstance(Part_2_upvr)
			end).to.throw()
		end)
		it("should extend itself", function() -- Line 145
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			local any_Extend_result1 = var4_upvw:Extend()
			local var47_upvw = false
			any_Extend_result1:Add(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: var47_upvw (read and write)
				]]
				var47_upvw = true
			end)
			expect(any_Extend_result1).to.be.a("table")
			expect(getmetatable(any_Extend_result1)).to.equal(Parent_upvr)
			var4_upvw:Clean()
			expect(var47_upvw).to.equal(true)
		end)
		it("should clone an instance", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Construct_result1 = var4_upvw:Construct(Instance.new, "Part")
			any_Construct_result1.Name = "TroveCloneTest"
			local clone = var4_upvw:Clone(any_Construct_result1)
			expect(typeof(clone)).to.equal("Instance")
			expect(clone).to.never.equal(any_Construct_result1)
			expect(clone.Name).to.equal("TroveCloneTest")
			expect(any_Construct_result1.Name).to.equal(clone.Name)
		end)
		it("should clean up a thread", function() -- Line 168
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local coroutine_create_result1 = coroutine.create(function() -- Line 169
			end)
			var4_upvw:Add(coroutine_create_result1)
			expect(coroutine.status(coroutine_create_result1)).to.equal("suspended")
			var4_upvw:Clean()
			expect(coroutine.status(coroutine_create_result1)).to.equal("dead")
		end)
		it("should not allow objects added during cleanup", function() -- Line 176
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(function() -- Line 177
				--[[ Upvalues[1]:
					[1]: var4_upvw (copied, read and write)
				]]
				var4_upvw:Add(function() -- Line 178
					--[[ Upvalues[1]:
						[1]: var4_upvw (copied, read and write)
					]]
					var4_upvw:Add(function() -- Line 179
					end)
				end)
				var4_upvw:Clean()
			end).to.throw()
		end)
		it("should not allow objects to be removed during cleanup", function() -- Line 185
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(function() -- Line 186
				--[[ Upvalues[1]:
					[1]: var4_upvw (copied, read and write)
				]]
				local function var61_upvr() -- Line 187
				end
				var4_upvw:Add(var61_upvr)
				var4_upvw:Add(function() -- Line 189
					--[[ Upvalues[2]:
						[1]: var4_upvw (copied, read and write)
						[2]: var61_upvr (readonly)
					]]
					var4_upvw:Remove(var61_upvr)
				end)
				var4_upvw:Clean()
			end).to.throw()
		end)
	end)
end

-- ReplicatedStorage.CommonModules.DataCompress
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:22
-- Luau version 6, Types version 3
-- Time taken: 0.005304 seconds

-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local module_2 = {}
local tbl_upvr = {}
local var11 = 0
for i = 32, 127 do
	if i ~= 34 and i ~= 92 then
		local string_char_result1_2 = string.char(i)
		tbl_upvr[string_char_result1_2] = var11
		tbl_upvr[var11] = string_char_result1_2
	end
end
local tbl = {}
for i_2 = 1, 34 do
	local var14 = i_2
	local var16 = ({34, 92, 127})[var14 - 31] or var14
	local string_char_result1_3 = string.char(var16)
	local string_char_result1 = string.char(var16 + 31)
	tbl[string_char_result1_3] = string_char_result1
	tbl[string_char_result1] = string_char_result1_3
	local var19_upvr
end
local function _(arg1) -- Line 25, Named "escape"
	--[[ Upvalues[1]:
		[1]: var19_upvr (readonly)
	]]
	return arg1:gsub("[%c\"\\]", function(arg1_2) -- Line 26
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return '\x7F'..var19_upvr[arg1_2]
	end)
end
local function _(arg1) -- Line 31, Named "unescape"
	--[[ Upvalues[1]:
		[1]: var19_upvr (readonly)
	]]
	return arg1:gsub("\x7F(.)", function(arg1_3) -- Line 32
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return var19_upvr[arg1_3]
	end)
end
local function _(arg1) -- Line 37, Named "copy"
	local module = {}
	for i_3, v in pairs(arg1) do
		module[i_3] = v
	end
	return module
end
local function _(arg1) -- Line 45, Named "tobase93"
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var30
	repeat
		local var31 = arg1 % 93
		var30 = tbl_upvr[var31]..var30
	until (arg1 - var31) / 93 == 0
	return var30
end
local function tobase10_upvr(arg1) -- Line 55, Named "tobase10"
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var34 = 0
	for i_4 = 1, #arg1 do
		var34 += 93 ^ (i_4 - 1) * tbl_upvr[arg1:sub(-i_4, -i_4)]
	end
	return var34
end
function module_2.Compress(arg1) -- Line 63
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: var19_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 35 start (CF ANALYSIS FAILED)
	local tbl_4 = {}
	local pairs_result1_3, _, pairs_result3 = pairs(tbl_upvr)
	local var47_upvw
	for i_5, v_2 in pairs_result1_3, var47_upvw, pairs_result3 do
		tbl_4[i_5] = v_2
	end
	local var48_upvr = tbl_4
	local tbl_upvr_2 = {}
	var47_upvw = 1
	local tbl_3_upvr = {}
	local var51_upvw = 0
	local function _(arg1_4) -- Line 70, Named "listkey"
		--[[ Upvalues[6]:
			[1]: var48_upvr (readonly)
			[2]: tbl_upvr (copied, readonly)
			[3]: var47_upvw (read and write)
			[4]: var51_upvw (read and write)
			[5]: tbl_3_upvr (readonly)
			[6]: tbl_upvr_2 (readonly)
		]]
		local var52 = var48_upvr[arg1_4]
		local var53
		repeat
			local var54 = var52 % 93
			var53 = tbl_upvr[var54]..var53
		until (var52 - var54) / 93 == 0
		local var55 = var53
		var53 = var47_upvw
		if var53 < #var55 then
			var53 = var47_upvw
			var47_upvw = #var55
			var51_upvw = 0
			tbl_3_upvr[var53] = var51_upvw
		end
		var53 = #tbl_upvr_2 + 1
		tbl_upvr_2[var53] = ' ':rep(var47_upvw - #var55)..var55
		var53 = var51_upvw
		var51_upvw = var53 + 1
	end
	local function var57(arg1_5) -- Line 26
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return '\x7F'..var19_upvr[arg1_5]
	end
	local _ = 1
	-- KONSTANTERROR: [0] 1. Error Block 35 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [65] 58. Error Block 33 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [65.18]
	local var60
	if var47_upvw < #var60 then
		tbl_3_upvr[var47_upvw] = var51_upvw
		var47_upvw = #var60
		var51_upvw = 0
	end
	tbl_upvr_2[#tbl_upvr_2 + 1] = ' ':rep(var47_upvw - #var60)..var60
	var51_upvw += 1
	local var61 = #var48_upvr + 1
	var48_upvr[var57] = var61
	var48_upvr[var61] = var57
	if 10000 <= 0 + 1 then
		wait()
	end
	-- KONSTANTERROR: [65] 58. Error Block 33 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [40] 35. Error Block 39 start (CF ANALYSIS FAILED)
	if wait() then
		-- KONSTANTWARNING: GOTO [91] #82
	end
	-- KONSTANTERROR: [40] 35. Error Block 39 end (CF ANALYSIS FAILED)
end
function module_2.Decompress(arg1) -- Line 104
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: tobase10_upvr (readonly)
		[3]: var19_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local tbl_5 = {}
	for i_6, v_3 in pairs(tbl_upvr) do
		tbl_5[i_6] = v_3
	end
	local var86 = tbl_5
	local module_3 = {}
	local any_match_result1, any_match_result2 = arg1:match("(.-)|(.*)")
	local tbl_2 = {}
	local var91 = 1
	for i_7 in any_match_result1:gmatch("%d+") do
		local var95 = #tbl_2 + 1
		tbl_2[var95] = any_match_result2:sub(var91, var91 + i_7 * var95 - 1)
		local var96
	end
	local var97
	for i_8 = 1, #var96 do
		for i_9 in var96[i_8]:gmatch('.':rep(i_8)) do
			if var97 then
				if var86[tobase10_upvr(i_9)] then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					module_3[#module_3 + 1] = var86[tobase10_upvr(i_9)]
					var86[#var86 + 1] = var97..var86[tobase10_upvr(i_9)]:sub(1, 1)
				else
					local var101 = var97..var97:sub(1, 1)
					module_3[#module_3 + 1] = var101
					var86[#var86 + 1] = var101
				end
			else
				module_3[1] = var101
			end
		end
	end
	return table.concat(module_3):gsub("\x7F(.)", function(arg1_6) -- Line 32
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return var19_upvr[arg1_6]
	end)
end
return module_2

-- ReplicatedStorage.CommonModules.CoreUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:23
-- Luau version 6, Types version 3
-- Time taken: 0.000637 seconds

local module = {}
module.__index = module
local var9
for _, v in pairs(script:GetDescendants()) do
	if v:IsA("ModuleScript") then
		local v_2 = require(v)
		v_2.__index = v_2
		if not var9 then
			var9 = v_2
		else
			var9 = setmetatable(v_2, var9)
			var9 = v_2
		end
	end
end
return setmetatable(module, var9)

-- ReplicatedStorage.CommonModules.CoreUtil.CommonVariables
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:24
-- Luau version 6, Types version 3
-- Time taken: 0.005467 seconds

return {
	Directions = {
		Up = Vector3.new(0, 1, 0);
		Down = Vector3.new(0, -1, 0);
		Forward = Vector3.new(1, 0, 0);
		Back = Vector3.new(-1, 0, 0);
		Left = Vector3.new(0, 0, 1);
		Right = Vector3.new(0, 0, -1);
	};
	Badges = {229625477066452, 1437872626639825, 231119644614158, 4139755977933519, 1642478039352243, 1291643517476504, 2045076234781931, 4460677254887057, 89488805301833, 2842197254378018, 1553423802563029, 4205149178611816, 2532931131676682, 3552037880169685, 2184198202663641, 2070520117153328, 725497835714812, 4254753589823055, 4246293575429864, 3379157258755019, 3058954510847229, 1231964068369981, 3170936748963907, 4481010433767182, 2588229707231261, 107461536650824, 2273905913694336, 586162765289105, 82114763758870, 4448519138604339, 1695156608904630};
	DefaultIsland = {"0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,73|!  A 6 7 1 4 0 , S t o n e   B l o c k 1 , 3 5 8!)!+!-!/!1!3!5 D i r t!5!*!,!.!0!2 k 2!6 5 6 , G r a s s 5!M 7 , O a k   L e a v e s!L 1!& 0 2 7!!", "0,162|!  A 1 4 1 3 0 , S t o n e   B l o c k 1 , 3 5 7!)!+!-!/!1!3 5 , D i r t!5!7 3!:!,!.!0!2!4!A!C t 2!I!<!L!3!5!B!D!H!G , G r a s s 8!6 5 6!S!K!> k 4!d 9 , O a k   L e a v e s!5 1 2 7 4 3!H!*!J!=!M!Z!e!g#$!?!d!k#!!T!i!W!P!5#-!h!M!@!X!E!d!R#7!R#3#) k!f#7!F 5!5!^!`!b!O!D#D!_!a#B!@#=!U k!H#A#(#P#B!9!o!q!s!u!w#2!;#4!V!6 6 7 1 5!!", "0,138|!  A 9 0 3 5 8 , S t o n e   B l o c k 3 ,!& 6!)!+!-!/!1!3 1!6!9!,!.!0!2 k 2!6 5!5!*!B!<!E 7 , D i r t!?!&!?!Q!S!G!K!;!D!3!O!X!T!H 0!P!R t!G!?![!C!=!F ,!i!:!k!E!?!o!L!^!m!a!U 4 9 , G r a s s!{!a!G!}#  s!U 5!d#'#!   W e e d!? 4!A!]!l!s!e!Y#6!q!>!H!8!j!M!3!5!&!{#A!v!? 8!$ 0 4!!", "0,279|!  A 3 7 3 4 9 , S t o n e   B l o c k 2 , 3 5 7!)!+!-!/!1!3 5!6 5 4!:!,!.!0!2 k 1 ,!@!*!E!=!H!J!7!J D i r t!J!M!<!G!3 8 ,!T!V!Q 5 0!_!U!W ,!9!Y!F!>!4!e!a!6 2 6!D!Z!l!5 2!d!` t!5!^!j!O!3!S!f!Q 2!L!;!k!H!C 1!( G r a s s#!!o!5#-#/ s!r#2!z!p!C C o b b l e s#'!J O a k   L e a v#B!J 2#4#.#0 3 ,!C#F#H#J#L#N!s#(#  ,#5#S!A!(!}![!I , 1!q!7#T#e!l!b!|#'!~ k#T!7#&!N#f!9!7!5#m!P!h#]#r!b!d#|!3!5!i#q#f#$#v!t!H!v!5!y!X$)#n ,#p#w$4$1!p#{$3!H#8!(!y!5#d$<#_$@$:$ #f!^ 1!r#a#1!n!g!@$L#T$0!f#Q#6#$!J#=#?#A#C!E$U#0$;$7#}$L!J#+#`#R#7!6$g#6!C 3 2#T#W#I#K#M$M$Y#@#B#'!5#i 4 4 7!!", "0,233|!  A 1 1 3 5 8 0 , S t o n e   B l o c k 1 ,!& 8!*!,!.!0!2!4 3!7 5 6!:!-!/!1!3 k 5!A!@!+!E!=!H 9!A!)!M!<!G!4 2 ,!9!T!F!>!5!7 2 4!D!U!^!@ 2!6![!O!W ,!Q!i!V!_ 3 2!L!;!]!H!J 2!) D i r t!h!t!j!_!m# !o!6!z!|!6 3 1#$!N!o!J!~#.!e , 1 7 ,#( t!@ 1!S#%!^!X#8#*#, , C o b b l e s!t#1!d!H!@#8!X!n!^!b 1!J G r a s s#'!{ t!X!C#W#Y#[ ,!J#@ ,#b#Z#A!9#D#F#H#J!E!@#i s!C#5#h#X#Z!9!6#s!C!q!) O a k   L e a v#I!6#m#G#I!t!X$!$$$&$($*#4#w#c   W e e d#*!X#s$9$;$=!`$0$#$%$'$) s#` 4 7 3 9!!", "0,217|!  A 6 0 5 7 0 , S t o n e   B l o c k 1 , 3 5 8!)!+!-!/!1!3 3!6!&!:!,!.!0!2 k 4!A!I!*!D!=!G!9!7!(!L!<!F!? , 5!C!T!> k!@ 3 2!@!S!E![!@!`!Y!c!G!5 9!g!N!3!5!_ 2!l!U k 7 , 1!k!b!m k!q!x!;!h!n!6 2!5!y!s!q!K!~!z!@ 1!u D i r t#%#*!s!5 1!R#4![!q 3!w!r!d ,#)!M#5!v#>!i!v 6 ,#/#1!q 1#3#B#:#I#0#2!6#-#E!V#H#&![!I 1!@ G r a s s!5#J t#L!@#e!5#_#a#c#T!u#Y!G#^#`#b#X#9!G#L!X#k#b 1#H#<!k C o b b l e s!~!@ O a k   L e a v$'!o!B$+$-$/$1$3!v#- 3 9 1!!", "0,376|!  A 7 9 1 9 , S t o n e   B l o c k 2 , 3 5 7!(!*!,!.!0!2 5!5 5!?!)!+!-!/!1 k 6!@!4!C!;!F!2 1 0!5 2 4!9!D!<!G 3 , 2!K!:!E!=!3 ,!I!L!_!X!R!]!V!N!H!Z!Q!d!W!O ,!P!U!M!` 1!R!v!n!j!' 1!8!y!`!4!r!~!G!4 3!&!s!e!2!4!}!^!o!a 1!? D i r t!x#.!j!v 1#7!i#  ,#3#5!v#'#-#=!G#:#)#/!v 8#H#9!q!T#@ t!Y 1!h!t#F#?#4 t#&#1#L#>#O#X!v!T#$!2#R!v G r a s s!4#P#R!Y#P#f#h#j#B 1!c#8!`!T C o b b l e s!^!4#g#i s!Y#z#|#~$!!D#q$&#<#U#+!q!Y$%#s!8#'#K$)#}$ $#!q 2 5 6 7$0#* k!Y!6#v#E!>!@#b#w!G!T$C#/#&$?#]!G!?![$T!2!' 3 2!Y#c k!8 2!m$M$2$H$1$E!g$X k!v!B$d#0#D$g#!$c$I!a#'!'$_!4$f$D#R$z$Q!5#W#A!b$j#Z$w$n!v%'$t#:$m%+ ,#2#` ,#K$_#t$p$D#:$s$g#:#_%#%4%/%!#6%2$j!v#p!5#[$x!q!Q$:$+!^$P!j#!%D#X!T%<%A!'%E#'%-$g!I%K$<$- ,$5#k ,%]$,!,$.#s%C%`#r s%N!`!Y#T%7%$%>%a 1!T$$%k$F!A%j$&!4 4 0 7 6 4!!", "0,270|!  A 8 4 8 6 8 , S t o n e   B l o c k 3 , 3 5 6!)!+!-!/!1!3 5!6 2 7!:!,!.!0!2!4 , 2!@!*!E!=!H!9 3!K!D!<!G!3 1!6!T!F!>!I 2 2!Z!O!3!(!R!`!M!U!]!` 4!a!V!I 1!(!g![!H!5!9!q!b!I!R 0!l!i ,!C!v!m!` 1!u!;!r!3##!z# !]!X!y!{!H!`#%!N!m!5#$#/#(!J , D i r t!5!L#&!w!` 3!o#7 k!` 9#F##!k#+!H!X!k#;#=!5!~#A!m#-#6#M!3#5#*#U#, , 1!5#Q t!X#Y k#O#:#<#>!}#i#=#C 1#@#3#_ 1!X C o b b l e s#&#e#^!s#9#f!X!C#c#~#r#N#m t#C$+#S$+!X G r a s s#W#q!h!P ,#v#x#z#|!E$1$3$5!`$<#y#{#} ,$2$4 s!f$ !W$;#w$F$?!-$A$K$($9$O$W#'!I$8$[!5$J$5#t$0!Y$a$6!6 1!C$E$>$H 3!C$f!k 9 3 4#a!!", "0,441|!  A 3 2 2 1 8 , S t o n e   B l o c k 3 , 3 3 0!)!+!-!/!1!3 1 , 2 5!:!,!.!0!2 k!C!$ 7!D!<!G!3!C 2!5!*!E!=!H 6!6!B!M!F!> k!@!C!T!N!^!@!%![!V!3!L!$!S!;!]!H!`!g!O!4 , 1 9!q!^!5 4!w!H!z!$!9!b!n!? ,!(#!!h k 2!t!L#'!r#*!v#-!d!6!u!{!3!5!X#1!|!t!a!m#(#*!5 D i r t!@#8#=!r!@#A#C!@ 3!'#5!_!t!@#9#$ 1!z#S#P!C#J#D ,#,#G#2#M#^!U#.#Q#O!z 1# #_!H#*#Y#B#[#b!c!o ,#Z#L 1#F#c#2 1#*#W!C#0#j#$#Z#*!z#t#%#s#n!@ G r a s s#u#<#x!W , C o b b l e s!m$*$,$.#&$ #) ,#~$2#6 ,$+$- s!v!C$H$.#u!L$5$7$9$;!E#?$L$> s!C#h 7!( O a k   L e a v$:$V!L$_$a$c$e$:!5 3 5$i$`$b$d$f s#*#z 3 8!7#O#L#M#O#*!Z#W$x$}!Y#p## k!z%$$A!} 2#w#q!3#?%!!A#{$A!X!k#O!y%;!A#i$E k!v!~%5%)#(!5#N%%$'#W#u$D%2!s%1%*%G%E#d%M%*#? 1%S!^$x#R$A!@ 1$1%N$x%?%N#I$)#3%Y#k#e%I 1#@#n%G%f#K%h%'#z#f!t%d%*$=$I%q t%[$(%r$M$/#3%P#(!X$Q$8$:$<$G$X$@%@%_%7&0&-%{!9%n%r#M!(&)$S!m!5$W$I   W e e d!e!v&#!z 7%X ,$j$t$m&$$p!v&M$l$v$o 5!X&S$u$:!J 5!C&Y&O#g 4 6 6 3!!", "0,294|!  A 1 0 9 8 5 9 , S t o n e   B l o c k 3 , 2 7!*!,!.!0!2!4 2 , 3!8!:!-!/!1!3 k 5!7 4!D!<!G!4!J!B!J!+!E!=!H!9 2!@!T!N!> k 8!A!Y!M!F!^!@!S!;!d!H!6 2 0!c!V!? ,!g!U!O!5!A 1!)![!i!4!6!6!y!o k 1!7!n!t!6 1!`!~#& , 6#%!^!|#(#.!H##!x!h# !@ 1!9#*!e ,#)#6#+ 3#9#2!p#5!s#< 1#- D i r t!@!)#J#L!Z#?!^###A#:#S#3 ,!$#C!u 1!L#;#Y G r a s s###P t#4 ,#c#e#g ,#i!@#V#]#- C o b b l e s!h###m#f!9#v#x#z#|!E## 1!J$  s!`!6#q!v!)$$#y#{!h!L 2#-$,   W e e d##$+#d#f!Q 2## O a k   L e a v#{#U#-$G$I W o o$?!A!( ,$R$;$U$W 3 5!9$[$K$M#{!@$[$T$V$F$H$J$L$N s#r 5!J$c$n$f$Z$l$i$W$t$e$p$X$s$l$d$o!L$`$b%!$u$} 6 6 9 5 4!!", "0,277|!  A 5 7 5 6 9 , S t o n e   B l o c k 3 , 3!&!)!+!-!/!1!3 6 , 2 5!9!,!.!0!2 k 4!6 2!5!*!D!<!G!( 2 2!C!;!F!3!S!S!M!U!=!H!J 1!T!E!]!Q!`!Z!b!G!` D i r t!e!:!g!3!`!L!o!O!3!I 3 1!(!f!u k!S!?!{!V!}!@!i!k!m , G r a s s!`!I!j!l!`!n!N##!S!x!z!t#6 , 7!a!|!5 1#=#1 t!Y#:!]!`!B#C#E#5!]!5!x#=#!#G ,#4![!h ,!B#Q!G!I#A#)#+#-!S#C!`!?#C!I#Y!q!6 1 8#>##!B#*#,#.#l!]!S#o#-#T!p!^#]#u s!?#&!l#f#F#V#8 , C o b b l e s!o!? 2#k#g k!`#{!?$%$'$)$+$-!D!5 O a k   L e a v$,!r#t#_ s   W e e d$G!I$8$*$,!o!`$>$@$B$D$F!6 9!B$W$A$C$E s!w 5$_$?$a$Z s!B!7$g$X$b$,$l!$ ,$`$Y$c#3!y 6 0 4!!", "0,315|!  A 5 6 3 7 , S t o n e   B l o c k!' 2 5!(!*!,!.!0!2 4 , 3 2!=!)!+!-!/!1!3 ,!@!7!C!:!F 6!> 2 2!J!9!E!2!Q!A!8!D!; k!Q 2 3 , D i r t 1!R!Y!F!_!a!c!_!?!Q!B!S!Z!V!f!L!U!H!Q!j t!Q!i!b t!_!o!g!u 3 1 9!s!T![ ,!'# !t k!_ 1!' G r a s s!w!|!z!`!|!e#2#4 s!e!x!e#,#(!z 2 0#'!Z!=#=#5!n!X#-#<#3#5#B#N#D!H#G#K s!6#A ,#@#;#H!F!e!?!e C o b b l e s!X!6 2 8#`!2!_#X!l!P ,#e#g#i#k!C!_ O a k   L e a v#j#b#G#}$ $#$%$'!O!6#w#h#j!X!Q$*$!$$$&#?!> 9!6$6$,$9#b 5#o$>$8#j!l$B ,$D$-$: 1!5 9 6#M!K#(!6 3 5!W$R!Z!N!5#p k!=!?$W!p!F!r#C!Z!e!I!x!'!m$]!l$]!]#P#>#7!c!Q#X#^!c#J#Q$:$k$e!h ,#s!H$x$q$]$p#5$_!^#v#f$2#z!,#m!'$J$@$l!O!=$1#y!X!e%1#j!z$)#~$7$K!V 4 4$B!!", "0,110|!  A 8 3 3 0 9 , S t o n e   B l o c k 2 , 3 5 7!)!+!-!/!1!3 4 , 2 6 , D i r t 3!6!B!:!,!.!0!2 k!C 2!I G r a s s 8!J!I C o b b l e s!; e 1!L!<!O!?!A!9 O a k   L e a v!c!g!*!M!=!P!5 3!K!^!`!b!d!M!g!n!p!r!t!v , 9 7 5 0 0!!", "0,52|!  A 3 1 0 1 9 , S t o n e   B l o c k 1 , 3 5!(!*!,!.!0!2 k 2!6 5 8 , O a k   L e a v e s!@ 1 5 0!Q 9!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!"};
	MiddleIsland = {"0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!"};
}

-- ReplicatedStorage.CommonModules.CoreUtil.CommonSettings
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:25
-- Luau version 6, Types version 3
-- Time taken: 0.013758 seconds

local module = {}
local UserInputService_2 = game:GetService("UserInputService")
module.DefultSwingAnimationId = "rbxassetid://16923391391"
module.DefultHoldingAnimationId = "rbxassetid://16913220551"
module.PlacementRange = 15
module.TicksPerSecond = 60
module.MaxCraftingYield = 1000
module.MaxEconomyYield = 1000
module.AttackRadius = 8
module.IslandMaxSize = {
	X = 360;
	Y = 360;
	Z = 360;
}
module.Version = "0.7.0"
module.ItemRaritys = {{
	Name = "Uncommon";
	MinimumChance = 0.1;
}, {
	Name = "Rare";
	MinimumChance = 0.05;
}, {
	Name = "Epic";
	MinimumChance = 0.01;
}, {
	Name = "Legendary";
	MinimumChance = 0.001;
}}
module.RespawnCoolDown = 15
module.DashCoolDown = 1
module.ExpansionIslandSize = 400000
module.DefultIslandSize = 120000
local TouchEnabled = UserInputService_2.TouchEnabled
if TouchEnabled then
	TouchEnabled = not UserInputService_2.KeyboardEnabled
	if TouchEnabled then
		TouchEnabled = not UserInputService_2.MouseEnabled
	end
end
module.OnMobile = TouchEnabled
module.BadgeTitleColors = {-- : First try: runluau:11745: attempt to index nil with 't'

module.LiveGameId = 6312076081
module.DevGameId = 5479094235
local function INLINED_2() -- Internal function, doesn't exist in bytecode
	tbl_45.Forest = 18713199560
	tbl_45.Mines = 18713201144
	tbl_45.Citadel = 16337574675
	tbl_45.Island = 15844572582
	local tbl_45 = {}
	return tbl_45
end
if game.GameId ~= module.DevGameId or not INLINED_2() then
end
module.PlaceIds = {
	Island = 18629143858;
	Citadel = 18629157045;
	Mines = 18840340290;
	Forest = 18840343072;
}
module.MasteryLayoutOrder = {
	Forestry = {
		Overall = 0;
		["Oak Wood"] = 1;
		["Mahogany Wood"] = 2;
		["Cherry Wood"] = 3;
		["Ash Wood"] = 4;
		["Dark Hollow Wood"] = 5;
	};
	Combat = {
		Overall = 0;
		GreenSlime = 1;
		Gizmo = 2;
		Rattles = 3;
		Muncher = 4;
		Flamelet = 5;
		GrimThorn = 6;
	};
	Farming = {
		Overall = 0;
		Wheat = 1;
		Carrot = 2;
		Tomato = 3;
		Corn = 4;
		Strawberry = 5;
		["Red Potato"] = 6;
		["White Mushroom"] = 7;
		Watermelon = 8;
	};
	Mining = {
		Overall = 0;
		["Stone Rock"] = 1;
		["Clay Mud"] = 2;
		["Basalt Rock"] = 3;
		["Coal Ore"] = 4;
		["Copper Ore"] = 5;
		["Iron Ore"] = 6;
		["Marble Rock"] = 7;
		["Cobalt Ore"] = 8;
		["Silver Ore"] = 9;
		["Gold Ore"] = 10;
		["Diamond Ore"] = 11;
	};
}
module.ScytheRanges = {
	["Iron Scythe"] = 1;
	["Gold Scythe"] = 2;
}
module.DamageIncreaseWeapons = {
	["Clockwork Sword"] = {
		Mobs = {"Gizmo", "Muncher"};
		DamageMultiplier = 2;
	};
	["Inferno Sword"] = {
		Mobs = {"Flamelet"};
		DamageMultiplier = 2;
	};
	["Slime Sword"] = {
		Mobs = {"Green Slime"};
		DamageMultiplier = 2;
	};
	["Twilight Sword"] = {
		Mobs = {"GrimThorn"};
		DamageMultiplier = 2;
	};
	["Bone Sword"] = {
		Mobs = {"Rattles"};
		DamageMultiplier = 2;
	};
}
module.StoreOrder = {"Pink Island", "Theme Pack", "Pro Backpack", "Island Expansion", "Dragon Storage Chest Product", "Small Coins Pack", "Medium Coins Pack", "Large Coins Pack"}
module.RegenChances = {
	Mines = {{{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Basalt Rock Block";
		Weight = 0.15;
	}, {
		BlockId = "Coal Ore Block";
		Weight = 0.15;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.2;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Basalt Rock Block";
		Weight = 0.35;
	}, {
		BlockId = "Coal Ore Block";
		Weight = 0.35;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Copper Ore Block";
		Weight = 0.3;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Iron Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Marble Rock Block";
		Weight = 0.2;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Iron Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Marble Rock Block";
		Weight = 0.2;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Cobalt Ore Block";
		Weight = 0.3;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.549;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Silver Ore Block";
		Weight = 0.05;
	}, {
		BlockId = "Gold Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Gold Block";
		Weight = 0.001;
	}, {
		BlockId = "Coal Block";
		Weight = 0.1;
	}}, {{
		BlockId = "Clay Mud Block";
		Weight = 1;
	}}, {{
		BlockId = "Black Poppy Flower";
		Weight = 0.0987;
	}, {
		BlockId = "Blue Poppy Flower";
		Weight = 0.15;
	}, {
		BlockId = "Green Poppy Flower";
		Weight = 0.15;
	}, {
		BlockId = "White Poppy Flower";
		Weight = 0.15;
	}, {
		BlockId = "Yellow Poppy Flower";
		Weight = 0.15;
	}, {
		BlockId = "Red Poppy Flower";
		Weight = 0.15;
	}, {
		BlockId = "Mushroom";
		Weight = 0.15;
	}, {
		BlockId = "Rainbow Poppy Flower";
		Weight = 0.0013;
	}}, {{
		BlockId = "Gold Ore Block";
		Weight = 0.3;
	}, {
		BlockId = "Marble Block";
		Weight = 0.1;
	}, {
		BlockId = "Silver Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Coal Block";
		Weight = 0.1;
	}, {
		BlockId = "Diamond Ore Block";
		Weight = 0.2;
	}}};
	Woods = {{{
		BlockId = "OakTreeE";
		Weight = 1;
	}, {
		BlockId = "OakTreeD";
		Weight = 2;
	}, {
		BlockId = "OakTreeC";
		Weight = 3;
	}, {
		BlockId = "OakTreeB";
		Weight = 4;
	}, {
		BlockId = "OakTreeA";
		Weight = 5;
	}}, {{
		BlockId = "MahoganyTreeB";
		Weight = 3;
	}, {
		BlockId = "MahoganyTreeA";
		Weight = 1;
	}}, {{
		BlockId = "AshTreeB";
		Weight = 3;
	}, {
		BlockId = "AshTreeA";
		Weight = 1;
	}}, {{
		BlockId = "CherryTreeB";
		Weight = 3;
	}, {
		BlockId = "CherryTreeA";
		Weight = 1;
	}}, {{
		BlockId = "DarkHollowTreeE";
		Weight = 5;
	}, {
		BlockId = "DarkHollowTreeD";
		Weight = 4;
	}, {
		BlockId = "DarkHollowTreeC";
		Weight = 3;
	}, {
		BlockId = "DarkHollowTreeB";
		Weight = 2;
	}, {
		BlockId = "DarkHollowTreeB";
		Weight = 1;
	}}};
}
module.XPRewards = {
	Combat = {
		Overall = {};
	};
	Mining = {
		Overall = {};
	};
	Farming = {
		Overall = {};
	};
	Forestry = {
		Overall = {};
	};
}
module.PlayerFromXP = {10, 25, 40, 75, 100, 150, 200, 300, 450, 700, 1000, 1750, 2500, 3000, 4500, 7500, 12000, 16000, 23000, 32000, 50000, 70000, 110000, 150000, 200000, 250000, 350000, 450000, 600000, 750000, 925000, 1250000, 1500000, 1750000, 2000000, 2500000, 3000000, 3500000, 4250000, 5000000, 5750000, 6500000, 7250000, 8000000, 9000000, 10000000, 11000000, 12000000, 13000000, 14000000, 15000000, 16500000, 18000000, 20000000, 22000000, 24000000, 26000000, 28000000, 30000000, 32000000, 34000000, 36000000, 38000000, 40000000, 45000000, 50000000, 55000000, 60000000, 70000000, 80000000, 90000000, 100000000, 110000000, 120000000, 130000000, 140000000, 150000000, 165000000, 180000000, 200000000, 225000000, 250000000, 275000000, 300000000, 325000000, 350000000, 375000000, 400000000, 450000000, 500000000, 550000000, 600000000, 650000000, 700000000, 750000000, 900000000, 1050000000, 1250000000}
module.MasteryFromXP = {5, 15, 25, 50, 65, 80, 100, 150, 200, 250, 350, 475, 650, 800, 1000, 1300, 2000, 2750, 3900, 5000, 6500, 9000, 11000, 15000, 20000, 30000, 42500, 55000, 75000, 110000}
module.SubMasteryFromXP = {1, 3, 4, 5, 7, 10, 13, 18, 25, 33, 45, 60, 81, 110, 148, 200, 270, 365, 493, 665, 898, 1213, 1637, 2210, 2984, 4028, 5438, 7342, 9911, 13380}
return module

-- ReplicatedStorage.CommonModules.CoreUtil.Tasks
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:26
-- Luau version 6, Types version 3
-- Time taken: 0.000404 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
return {
	GetTaskType = function(arg1, arg2) -- Line 6, Named "GetTaskType"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		return require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetDefinitions().Task[arg2]
	end;
}

-- ReplicatedStorage.CommonModules.CoreUtil.Util.BlockUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:27
-- Luau version 6, Types version 3
-- Time taken: 0.016855 seconds

local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_2_upvr = {
	Resources = {
		Crop = {"Carrot Seed", "Corn Seed", "White Mushroom Seed", "Red Potato Seed", "Strawberry Seed", "Tomato Seed", "Watermelon Seed"};
		Ore = {"Angelite Ore Block", "Basalt Rock Block", "Clay Mud Block", "Coal Ore Block", "Cobalt Ore Block", "Copper Ore Block", "Diamond Ore Block", "Dragonstone Ore Block", "Emerald Ore Block", "Gold Ore Block", "Iron Ore Block", "Marble Rock Block", "Onyx Ore Block", "Rhodium Ore Block", "Ruby Ore Block", "Silver Ore Block", "Stone Rock Block"};
	};
}
function module_2_upvr.IsBlockResource(arg1, arg2, arg3) -- Line 42
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1_3, pairs_result2_2, pairs_result3_2 = pairs(module_2_upvr.Resources)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 41. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 41. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [18] 13. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [18] 13. Error Block 2 end (CF ANALYSIS FAILED)
end
function module_2_upvr.TableToVector3(arg1, arg2) -- Line 64
	return Vector3.new(arg2.X, arg2.Y, arg2.Z)
end
function module_2_upvr.Vector3ToTable(arg1, arg2) -- Line 68
	return {
		X = arg2.X;
		Y = arg2.Y;
		Z = arg2.Z;
	}
end
function module_2_upvr.RotationCompresser(arg1, arg2, arg3, arg4) -- Line 72
	if arg2 then
		return "RX"..tostring(arg4.Rotation.X)..'Y'..tostring(arg4.Rotation.Y)..'Z'..tostring(arg4.Rotation.Z).."PX"..tostring(arg4.Position.X)..'Y'..tostring(arg4.Position.Y)..'Z'..tostring(arg4.Position.Z)
	end
	local any_split_result1 = arg3:split('P')
	local function extractNumbers(arg1_2) -- Line 83
		local module_4 = {}
		local var16
		for i = 1, #arg1_2 do
			local any_sub_result1 = arg1_2:sub(i, i)
			if tonumber(any_sub_result1) then
				var16 = var16..any_sub_result1
			elseif var16 ~= "" then
				table.insert(module_4, tonumber(var16))
				var16 = ""
			end
		end
		if var16 ~= "" then
			i = tonumber(var16)
			table.insert(module_4, i)
		end
		return module_4
	end
	local extractNumbers_result1 = extractNumbers(any_split_result1[2])
	local extractNumbers_result1_2 = extractNumbers(any_split_result1[1]:split('R')[2])
	return {
		Rotation = {
			X = extractNumbers_result1_2[1];
			Y = extractNumbers_result1_2[2];
			Z = extractNumbers_result1_2[3];
		};
		Position = {
			X = extractNumbers_result1[1];
			Y = extractNumbers_result1[2];
			Z = extractNumbers_result1[3];
		};
	}
end
function module_2_upvr.ExpandGrid(arg1, arg2, arg3, arg4) -- Line 123
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local tbl_2 = {}
	for i_5 = 1, arg4.X do
		tbl_2[i_5] = {}
		for i_6 = 1, arg4.Y do
			tbl_2[i_5][i_6] = {}
			for i_7 = 1, arg4.Z do
				tbl_2[i_5][i_6][i_7] = '0'
			end
		end
	end
	for i_8 = 1, arg3.X do
		for i_9 = 1, arg3.Y do
			for i_10 = 1, arg3.Z do
				local var92 = (function(arg1_3) -- Line 126, Named "DecodeCompressedString"
					--[[ Upvalues[1]:
						[1]: arg2 (readonly)
					]]
					-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
					local var71
					local function INLINED() -- Internal function, doesn't exist in bytecode
						var71 = arg2:split(',')
						return var71
					end
					if not arg2 or arg2 == "" or not INLINED() then
						var71 = {}
					end
					for _, v_upvr in pairs(var71) do
						local var75
						local var76
						local pcall_result1, _ = pcall(function() -- Line 136
							--[[ Upvalues[1]:
								[1]: v_upvr (readonly)
							]]
							v_upvr:gsub("%([)([^%]]+)%)", "")
						end)
						local var81
						if pcall_result1 then
							if v_upvr:match("%(([^%]]+)%)") then
								var81 = tonumber(v_upvr:match("%(([^%]]+)%)"))
								var81 = type(var81)
								if var81 ~= "number" then
								end
								var81 = v_upvr:split('(')
								var75 = var81[1]
								var81 = v_upvr:split(')')
								var76 = var81[2]
							else
								var81 = v_upvr:match("([^%d]+)(%d+)")
								local any_match_result1, any_match_result2 = v_upvr:match("([^%d]+)(%d+)")
								var75 = any_match_result1
								var76 = any_match_result2
							end
							local function INLINED_2() -- Internal function, doesn't exist in bytecode
								any_match_result1 = tonumber(var76)
								return any_match_result1
							end
							if not var76 or not INLINED_2() then
								any_match_result1 = tonumber(v_upvr)
							end
							var76 = any_match_result1
							var75 = var75 or ""
							any_match_result1 = var76
							for _ = 1, any_match_result1 do
								table.insert({}, var75)
								local var84
							end
						end
					end
					return var84
				end)(arg2)[(i_8 - 1) * arg3.Y * arg3.Z + (i_9 - 1) * arg3.Z + i_10]
				local var93 = tbl_2[i_8]
				if var92 == "" then
					var93 = '0'
				else
					var93 = var92
				end
				var93[i_9][i_10] = var93
			end
		end
	end
	for i_11 = 1, arg4.X do
		for i_12 = 1, arg4.Y do
			for i_13 = 1, arg4.Z do
				table.insert({}, tbl_2[i_11][i_12][i_13])
				local var94
			end
		end
	end
	return (function(arg1_4) -- Line 164, Named "EncodeCompressedString"
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local module = {}
		local var90
		for i_4 = 1, #arg1_4 do
			if arg1_4[i_4] == var90 then
			else
				if var90 == '0' then
					table.insert(module, tostring(0 + 1))
				else
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.insert(module, var90..(0 + 1))
				end
				var90 = arg1_4[i_4]
			end
		end
		if var90 == '0' then
			i_4 = tostring(1)
			table.insert(module, i_4)
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			i_4 = var90..1
			table.insert(module, i_4)
		end
		return table.concat(module, ',')
	end)(var94)
end
function module_2_upvr.GetPositionFromModel(arg1, arg2) -- Line 241
	if not arg2 then return end
	local var95
	if arg2:IsA("Model") then
		var95 = arg2.PrimaryPart.Position
	else
		var95 = arg2.Position
	end
	return arg1:ToDataPos(arg1:Vector3ToTable(var95))
end
function module_2_upvr.SetPosition(arg1, arg2, arg3) -- Line 258
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_TableToVector3_result1_3 = module_2_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(any_TableToVector3_result1_3, any_TableToVector3_result1_3 + arg2.PrimaryPart.CFrame.LookVector))
	else
		arg2.Position = any_TableToVector3_result1_3
	end
end
function module_2_upvr.SetRotation(arg1, arg2, arg3) -- Line 271
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_TableToVector3_result1_2 = module_2_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(arg2.PrimaryPart.CFrame.Position) * CFrame.Angles(math.rad(any_TableToVector3_result1_2.x), math.rad(any_TableToVector3_result1_2.y), math.rad(any_TableToVector3_result1_2.z)))
	else
		arg2.Orientation = any_TableToVector3_result1_2
	end
end
function module_2_upvr.CreateBlockModel(arg1, arg2, arg3, arg4, arg5) -- Line 285
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	local var98
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var98 = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg2):Clone()
		return var98
	end
	if type(arg2) ~= "string" or not INLINED_3() then
		var98 = arg2:Clone()
	end
	module_2_upvr:SetPosition(var98, arg3)
	module_2_upvr:SetRotation(var98, arg4 or Vector3.new(0, 0, 0))
	var98.Parent = arg5
	return var98
end
function module_2_upvr.UpdateBlockTextures(arg1, arg2, arg3) -- Line 298
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg2:IsA("Model") then
	else
		for _, v_9 in pairs(arg2:GetDescendants()) do
			if v_9:IsA("Texture") then
				v_9.Transparency = 0
			end
		end
		local any_TableToVector3_result1 = module_2_upvr:TableToVector3(module_2_upvr:ToDataPos(arg2.Position))
		for _, v_10 in pairs(arg3) do
			for _, v_11 in pairs(arg2:GetDescendants()) do
				if v_11:IsA("Texture") then
					if Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 + arg2.CFrame.LookVector and v_11.Face == Enum.NormalId.Front then
						v_11.Transparency = 1
					elseif Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 - arg2.CFrame.LookVector and v_11.Face == Enum.NormalId.Back then
						v_11.Transparency = 1
					elseif Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 + arg2.CFrame.RightVector and v_11.Face == Enum.NormalId.Right then
						v_11.Transparency = 1
					elseif Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 - arg2.CFrame.RightVector and v_11.Face == Enum.NormalId.Left then
						v_11.Transparency = 1
					elseif Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 + arg2.CFrame.UpVector and v_11.Face == Enum.NormalId.Top then
						v_11.Transparency = 1
					elseif Vector3.new(v_10.X, v_10.Y, v_10.Z) == any_TableToVector3_result1 - arg2.CFrame.UpVector and v_11.Face == Enum.NormalId.Bottom then
						v_11.Transparency = 1
					end
				end
			end
		end
	end
end
local TableUtil_upvr = require(game.ReplicatedStorage.Packages.TableUtil)
function module_2_upvr.GetAdjacentPositions(arg1, arg2) -- Line 340
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_2_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
	]]
	arg2 = module_2_upvr:Vector3ToTable(arg2)
	local var120 = arg2
	local module_3 = {}
	for _, v_2 in pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil).Directions) do
		local any_Copy_result1 = TableUtil_upvr.Copy(var120, true)
		any_Copy_result1.X += v_2.X
		any_Copy_result1.Y += v_2.Y
		any_Copy_result1.Z += v_2.Z
		table.insert(module_3, any_Copy_result1)
	end
	return module_3
end
function module_2_upvr.GetValueAtPosition(arg1, arg2, arg3) -- Line 363
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 21 start (CF ANALYSIS FAILED)
	local var126
	if RunService_upvr:IsServer() then
		var126 = Knit_upvr.GetService("BlockService")
	else
		var126 = Knit_upvr.GetController("BlockController")
	end
	-- KONSTANTERROR: [0] 1. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [43] 34. Error Block 9 start (CF ANALYSIS FAILED)
	do
		return arg2[arg3.World][arg3.Level][arg3.Index].BlockObj
	end
	do
		return
	end
	-- KONSTANTERROR: [43] 34. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [56] 43. Error Block 19 start (CF ANALYSIS FAILED)
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] then
		if arg2[arg3.X][arg3.Y][arg3.Z] == 0 then return end
		return arg2[arg3.X][arg3.Y][arg3.Z]
	end
	-- KONSTANTERROR: [56] 43. Error Block 19 end (CF ANALYSIS FAILED)
end
function module_2_upvr.PositionToString(arg1, arg2) -- Line 385
	return tostring(arg2.X..':'..arg2.Y..':'..arg2.Z)
end
function module_2_upvr.GetBlockPositionsFromOrigin(arg1, arg2, arg3) -- Line 389
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_2_upvr (readonly)
	]]
	if not arg2 then
		local var145 = false
		if game.PlaceId ~= require(ReplicatedStorage_upvr.CommonModules.CoreUtil).PlaceIds.Island then
			var145 = {}
		end
		return var145
	end
	if not arg3.Rotation then
		local tbl_5 = {
			X = 0;
			Y = 0;
			Z = 0;
		}
	end
	arg3.Rotation = tbl_5
	tbl_5 = arg3
	local var147 = tbl_5
	if var147 then
		var147 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Block)[arg3.Id]
	end
	if not var147 then
		for i_15, v_3 in pairs(arg3) do
			print(i_15, v_3)
		end
		return {}, {}
	end
	if not var147.Size then
		local tbl_4 = {
			X = 1;
			Y = 1;
			Z = 1;
		}
	end
	local function _(arg1_5) -- Line 409, Named "NormaliseVector"
		return Vector3.new(math.floor(arg1_5.X + 0.5), math.floor(arg1_5.Y + 0.5), math.floor(arg1_5.Z + 0.5))
	end
	local function _(arg1_6) -- Line 413, Named "GetDominantValue"
		if arg1_6.X ~= 0 and arg1_6.X ~= -0 then
			return arg1_6.X
		end
		if arg1_6.Y ~= 0 and arg1_6.Y ~= -0 then
			return arg1_6.Y
		end
		return arg1_6.Z
	end
	local tbl_3 = {}
	local var153 = CFrame.new(arg3.Position.X, arg3.Position.Y, arg3.Position.Z) * CFrame.Angles(math.rad(arg3.Rotation.X), math.rad(arg3.Rotation.Y), math.rad(arg3.Rotation.Z))
	for _, v_4 in ipairs({'X', 'Y', 'Z'}) do
		for i_17, v_5 in pairs({var153.LookVector, var153.RightVector, var153.UpVector}) do
			local var162 = Vector3.new(math.floor(v_5.X + 0.5), math.floor(v_5.Y + 0.5), math.floor(v_5.Z + 0.5))[v_4]
			if var162 ~= 0 and var162 ~= -0 then
				tbl_3[v_4] = var162
			end
		end
	end
	for i_18 = tbl_3.X, tbl_4.X * tbl_3.X, tbl_3.X do
		for i_19 = tbl_3.Y, tbl_4.Y * tbl_3.Y, tbl_3.Y do
			i_17 = tbl_3.Z
			v_5 = tbl_4.Z
			for i_20 = i_17, v_5 * tbl_3.Z, tbl_3.Z do
				v_5 = {}
				v_5.X = arg3.Position.X + tbl_3.X * -1 + i_18
				v_5.Y = arg3.Position.Y + tbl_3.Y * -1 + i_19
				v_5.Z = arg3.Position.Z + tbl_3.Z * -1 + i_20
				local any_GetValueAtPosition_result1 = module_2_upvr:GetValueAtPosition(arg2, v_5)
				if any_GetValueAtPosition_result1 and any_GetValueAtPosition_result1 ~= 0 then
					table.insert({}, any_GetValueAtPosition_result1)
				end
				table.insert({}, v_5)
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	return {}, {}
end
function module_2_upvr.BlockValidation(arg1, arg2, arg3, arg4, arg5) -- Line 461
	--[[ Upvalues[4]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: module_2_upvr (readonly)
		[4]: RunService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 59 start (CF ANALYSIS FAILED)
	local BlockService = Knit_upvr.GetService("BlockService")
	local Block_2 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Block)
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	if not BlockService.IsMainHub then
		if arg4.X <= 0 or CoreUtil_2.IslandMaxSize.X < arg4.X then return end
		if arg4.Y <= 0 or CoreUtil_2.IslandMaxSize.Y < arg4.Y then return end
		if arg4.Z <= 0 or CoreUtil_2.IslandMaxSize.Z < arg4.Z then return end
	end
	if RunService_upvr:IsServer() then
		local var174
		if not BlockService.IsMainHub then
			if arg2 and BlockService.IslandOwner and BlockService.IslandOwner ~= arg2 then return end
			local any_GetData_result1_2 = CoreUtil_2:GetData(BlockService.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
			if not any_GetData_result1_2 then return end
			local function INLINED_5() -- Internal function, doesn't exist in bytecode
				var174 = CoreUtil_2.ExpansionIslandSize
				return var174
			end
			if not table.find(any_GetData_result1_2.OwnedPasses, "Island Expansion") or not INLINED_5() then
				var174 = CoreUtil_2.DefultIslandSize
			end
			if var174 < any_GetData_result1_2.BlockCount + 1 then
				Knit_upvr.GetService("PlayerService").Client.Warn:Fire(BlockService.IslandOwner, "Island placement limit reached")
				return
			end
		end
		-- KONSTANTWARNING: GOTO [157] #104
	end
	-- KONSTANTERROR: [0] 1. Error Block 59 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [150] 99. Error Block 50 start (CF ANALYSIS FAILED)
	local var176
	if Block_2[arg3] and Block_2[arg3].BehaviourData then
		var176 = Block_2[arg3].BehaviourData
		var176 = arg3
		if not require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours)[var176.Id]:Validate(var176, arg4, arg5) then return end
	end
	local tbl_6 = {}
	tbl_6.Position = arg4
	tbl_6.Rotation = arg5
	tbl_6.Id = arg3
	if #module_2_upvr:GetBlockPositionsFromOrigin(Knit_upvr.GetController("BlockController").Blocks, tbl_6) ~= 0 then
		var176 = false
	else
		var176 = true
	end
	do
		return var176
	end
	-- KONSTANTERROR: [150] 99. Error Block 50 end (CF ANALYSIS FAILED)
end
function module_2_upvr.ToDataPos(arg1, arg2) -- Line 528
	return {
		X = arg2.X / 3 + 1;
		Y = arg2.Y / 3 + 1;
		Z = arg2.Z / 3 + 1;
	}
end
function module_2_upvr.ToWorldPos(arg1, arg2) -- Line 532
	return {
		X = (arg2.X - 1) * 3;
		Y = (arg2.Y - 1) * 3;
		Z = (arg2.Z - 1) * 3;
	}
end
function module_2_upvr.IteratePositionTable(arg1, arg2, arg3) -- Line 536
	for i_21, v_6 in pairs(arg2) do
		for i_22, v_7 in pairs(v_6) do
			for i_23, v_8 in pairs(v_7) do
				arg3(v_8, {
					X = i_21;
					Y = i_22;
					Z = i_23;
				})
			end
		end
	end
end
function module_2_upvr.SetValueAtPosition(arg1, arg2, arg3, arg4) -- Line 552
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] then
		arg2[arg3.X][arg3.Y][arg3.Z] = arg4
	else
		warn("Invalid position")
	end
end
function module_2_upvr.RoundPosToGridPos(arg1, arg2) -- Line 560
	return Vector3.new(math.floor((arg2.x + 1.5) / 3) * 3, math.floor((arg2.y + 1.5) / 3) * 3, math.floor((arg2.z + 1.5) / 3) * 3)
end
function module_2_upvr.GenerateBlockIndex(arg1) -- Line 567
	return game:GetService("HttpService"):GenerateGUID(false)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.CoreUtil.Util.CommonUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:28
-- Luau version 6, Types version 3
-- Time taken: 0.009632 seconds

local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_2_upvr = {
	MaybeYield = function(arg1, arg2, arg3) -- Line 12, Named "MaybeYield"
		--[[ Upvalues[1]:
			[1]: RunService_upvr (readonly)
		]]
		local tick_result1_upvr = tick()
		local function _() -- Line 16, Named "ResetTimer"
			--[[ Upvalues[3]:
				[1]: arg2 (read and write)
				[2]: tick_result1_upvr (readonly)
				[3]: arg3 (readonly)
			]]
			arg2 = tick_result1_upvr + arg3
		end
		if arg2 <= tick_result1_upvr then
			RunService_upvr.Heartbeat:Wait()
			arg2 = tick_result1_upvr + arg3
		end
		return arg2, tick() - tick_result1_upvr
	end;
	ProgressTextDecode = function(arg1, arg2, arg3, arg4) -- Line 33, Named "ProgressTextDecode"
		local string_split_result1 = string.split(arg2 or "", '&')
		for i = 1, #string_split_result1 do
			if i % 2 == 0 then
				local var9 = ""
				if string_split_result1[i]:split(':')[1] == "Progress" then
					var9 = tostring(arg3.Progress[arg4][string_split_result1[i]:split(':')[2]])
				elseif string_split_result1[i]:split(':')[1] == "Goal" then
					var9 = tostring(arg3.Def.TaskParams[arg4][string_split_result1[i]:split(':')[2]])
				end
				table.insert({}, var9)
			else
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				table.insert({}, string_split_result1[i])
			end
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		return table.concat({}, "")
	end;
}
local MessagingService_upvr = game:GetService("MessagingService")
local HttpService_upvr = game:GetService("HttpService")
function module_2_upvr.SendGlobalMessage(arg1, arg2, arg3) -- Line 63
	--[[ Upvalues[2]:
		[1]: MessagingService_upvr (readonly)
		[2]: HttpService_upvr (readonly)
	]]
	for i_2 = 1, 5 do
		local pcall_result1_2, pcall_result2_2 = pcall(function() -- Line 68
			--[[ Upvalues[4]:
				[1]: MessagingService_upvr (copied, readonly)
				[2]: arg2 (readonly)
				[3]: HttpService_upvr (copied, readonly)
				[4]: arg3 (readonly)
			]]
			MessagingService_upvr:PublishAsync(arg2, HttpService_upvr:JSONEncode(arg3))
		end)
		if pcall_result1_2 then
			return true
		end
		warn("Failed to publish message: "..pcall_result2_2)
		if i_2 < 5 then
			wait(2)
		end
	end
	return false
end
function module_2_upvr.GetArmourMitigation(arg1, arg2) -- Line 85
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetData_result1 = CoreUtil_2:GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then
		return 0
	end
	return CoreUtil_2:PlayerLevelFromXP(any_GetData_result1.Masteries.Overall) * 0.007
end
function module_2_upvr.GetHealthFromLevel(arg1, arg2) -- Line 99
	return 50 + arg2 * 2
end
function module_2_upvr.GetCatagorysFromLevelReq(arg1, arg2) -- Line 103
	local next_result1 = next(arg2)
	if not next_result1 then return end
	local next_result1_3, _ = next(arg2[next_result1])
	if not next_result1_3 then return end
	return next_result1, next_result1_3
end
function module_2_upvr.IsMasterySucceeded(arg1, arg2, arg3) -- Line 115
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if not arg3 then return end
	local next_result1_4 = next(arg3)
	if not next_result1_4 then return end
	local next_result1_2, next_result2 = next(arg3[next_result1_4])
	if not next_result1_2 then return end
	local var24
	if next_result1_2 == "Overall" then
		var24 = module_2_upvr:MasteryLevelFromXP(arg2[next_result1_4][next_result1_2])
	else
		var24 = module_2_upvr:SubMasteryLevelFromXP(arg2[next_result1_4][next_result1_2])
	end
	if next_result2 > var24 then
	else
	end
	return true, var24, next_result2
end
function module_2_upvr.RequireDefinitions(arg1) -- Line 137
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	for _, v in pairs(ReplicatedStorage_upvr.CommonModules.DefinitionModules:GetChildren()) do
		if v:IsA("ModuleScript") then
			({})[v.Name] = require(v)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_2_upvr.GetDefinitionFromId(arg1, arg2) -- Line 152
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for _, v_2 in pairs(module_2_upvr:RequireDefinitions()) do
		for i_5, v_3 in pairs(v_2) do
			if i_5 == arg2 then
				return v_3
			end
		end
	end
end
function module_2_upvr.GetLevelReqDefs(arg1) -- Line 161
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	for _, v_4 in pairs(module_2_upvr:RequireDefinitions()) do
		for _, v_5 in pairs(v_4) do
			if v_5.LevelReq then
				for i_8, v_6 in pairs(v_5.LevelReq) do
					if not module[i_8] then
						module[i_8] = {}
					end
					for i_9, v_7 in pairs(v_6) do
						if not module[i_8][i_9] then
							module[i_8][i_9] = {}
						end
						if not module[i_8][i_9][v_7] then
							module[i_8][i_9][v_7] = {
								UnlockedItems = {};
							}
						end
						table.insert(module[i_8][i_9][v_7].UnlockedItems, {
							Catagory = v_5.Catagory;
							ItemId = v_5.Id;
						})
					end
				end
			end
		end
	end
	return module
end
function module_2_upvr.PlayerLevelFromXP(arg1, arg2) -- Line 185
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_10, v_8 in pairs(CoreUtil.PlayerFromXP) do
		if arg2 < v_8 then
			return i_10 - 1, v_8 - arg2 / v_8
		end
	end
	return #CoreUtil.PlayerFromXP, 1
end
function module_2_upvr.MasteryLevelFromXP(arg1, arg2) -- Line 198
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil_4 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_11, v_9 in pairs(CoreUtil_4.MasteryFromXP) do
		if arg2 < v_9 then
			return i_11 - 1, v_9 - arg2 / v_9
		end
	end
	return #CoreUtil_4.MasteryFromXP, 1
end
function module_2_upvr.SubMasteryLevelFromXP(arg1, arg2) -- Line 211
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil_3 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_12, v_10 in pairs(CoreUtil_3.SubMasteryFromXP) do
		if arg2 < v_10 then
			return i_12 - 1, v_10 - arg2 / v_10
		end
	end
	return #CoreUtil_3.SubMasteryFromXP, 1
end
function module_2_upvr.GenerateRandomFromWeight(arg1, arg2) -- Line 226
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local type_result1 = type(arg2[1])
	local var109
	for _, v_11 in pairs(arg2) do
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var109 = v_11.Weight
			return var109
		end
		if type_result1 ~= "table" or not INLINED() then
			var109 = v_11
		end
		local var110 = 0 + var109
	end
	local var114
	for i_14, v_12 in pairs(arg2) do
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var114 = v_12.Weight
			return var114
		end
		if type_result1 ~= "table" or not INLINED_2() then
			var114 = v_12
		end
		if math.random() * var110 <= 0 + var114 then
			if type_result1 ~= "table" or not v_12 then
			end
			for _, v_13 in pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil).ItemRaritys) do
				if var114 / var110 <= v_13.MinimumChance then
				end
			end
			return i_14, v_13.Name
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	return i_14, v_13.Name
end
function module_2_upvr.ValidateHumanoid(arg1, arg2) -- Line 263
	if not arg2 or not arg2.Parent then return end
	if not arg2.PrimaryPart then return end
	if not arg2:FindFirstChild("HumanoidRootPart") then return end
	if not arg2:FindFirstChild("Humanoid") then return end
	if arg2.Humanoid.Health == 0 then return end
	return true
end
function module_2_upvr.RecurseTable(arg1, arg2, arg3) -- Line 275
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for i_16, v_14 in pairs(arg2) do
		if type(v_14) == "table" then
			module_2_upvr:RecurseTable(v_14, arg3)
		else
			arg3(arg2, i_16, v_14)
		end
	end
end
function module_2_upvr.CustomYeild(arg1, arg2, ...) -- Line 308
	local tbl_upvr = {}
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local pairs_result1_9, pairs_result2_7, pairs_result3_6 = pairs({...})
	for _, v_15 in pairs_result1_9, pairs_result2_7, pairs_result3_6 do
		table.insert(tbl_upvr, v_15:Connect(function(...) -- Line 315
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire(...)
		end))
	end
	pairs_result1_9 = arg2
	local var134_upvr = pairs_result1_9
	if var134_upvr then
		var134_upvr = task.delay
		var134_upvr = var134_upvr(arg2, function() -- Line 320
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire()
		end)
	end
	local var137_upvw
	var137_upvw = BindableEvent_upvr.Event:Connect(function() -- Line 325
		--[[ Upvalues[4]:
			[1]: var137_upvw (read and write)
			[2]: BindableEvent_upvr (readonly)
			[3]: var134_upvr (readonly)
			[4]: tbl_upvr (readonly)
		]]
		task.wait()
		var137_upvw:Disconnect()
		BindableEvent_upvr:Destroy()
		if var134_upvr then
			task.cancel(var134_upvr)
		end
		for _, v_16 in pairs(tbl_upvr) do
			v_16:Disconnect()
		end
	end)
	return BindableEvent_upvr.Event:Wait()
end
function module_2_upvr.LoadAnimation(arg1, arg2, arg3) -- Line 338
	local Animation = Instance.new("Animation", arg2)
	Animation.AnimationId = arg3
	return arg2:LoadAnimation(Animation)
end
function module_2_upvr.GetModelFromDef(arg1, arg2) -- Line 344
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2.Catagory or not ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg2.Catagory) then return end
	local SOME = ReplicatedStorage_upvr.Prefabs[arg2.Catagory]:FindFirstChild(arg2.Id)
	if not SOME then return end
	return SOME
end
function module_2_upvr.GetObjectFromIndex(arg1, arg2, arg3) -- Line 351
	for i_19, v_17 in pairs(arg2) do
		if arg3 == v_17.Index then
			return v_17, i_19
		end
	end
end
function module_2_upvr.WeldToPart(arg1, arg2, arg3) -- Line 359
	-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
	local var150
	if arg2:IsA("Model") then
		var150 = var150.PrimaryPart
		-- KONSTANTWARNING: GOTO [15] #13
	end
	-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 13 start (CF ANALYSIS FAILED)
	if var150:IsA("BasePart") then
	else
		return
	end
	local Weld = Instance.new("Weld")
	Weld.Part0 = var150
	Weld.Part1 = arg3
	Weld.C0 = var150.CFrame:inverse()
	Weld.C1 = arg3.CFrame:inverse()
	Weld.Parent = var150
	do
		return Weld
	end
	-- KONSTANTERROR: [8] 7. Error Block 13 end (CF ANALYSIS FAILED)
end
local Promise_upvr = require(game.ReplicatedStorage.Packages.Promise)
function module_2_upvr.GetData(arg1, arg2, arg3) -- Line 381
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	local var153
	if not var153 then return end
	if Promise_upvr.is(var153) then
		local _, any_await_result2 = var153:await()
		var153 = any_await_result2
	end
	return var153
end
local BadgeService_upvr = game:GetService("BadgeService")
function module_2_upvr.AwardBadge(arg1, arg2, arg3) -- Line 398
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: BadgeService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	if not arg2 or not arg3 or RunService_upvr:IsClient() then return end
	local pcall_result1, pcall_result2 = pcall(function() -- Line 408
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: arg3 (readonly)
		]]
		return BadgeService_upvr:GetBadgeInfoAsync(arg3)
	end)
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [57] 49. Error Block 13 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [57] 49. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [60] 52. Error Block 14 start (CF ANALYSIS FAILED)
	warn("Error while fetching badge info: "..pcall_result2)
	-- KONSTANTERROR: [60] 52. Error Block 14 end (CF ANALYSIS FAILED)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.CoreUtil.Util.InventoryUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:30
-- Luau version 6, Types version 3
-- Time taken: 0.008445 seconds

local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module = {
	EquipTool = function(arg1, arg2, arg3, arg4) -- Line 9, Named "EquipTool"
		--[[ Upvalues[2]:
			[1]: ReplicatedStorage_upvr (readonly)
			[2]: RunService_upvr (readonly)
		]]
		local clone = arg4:Clone()
		local var17
		if RunService_upvr:IsClient() then
			var17 = "ClientTool"
		else
			var17 = "ServerTool"
		end
		clone.Name = var17
		var17 = clone:IsA("Model")
		if var17 then
			var17 = arg3.Catagory
			if var17 == "Block" then
				var17 = clone.PrimaryPart
				for _, v in ipairs(clone:GetDescendants()) do
					if v:IsA("BasePart") then
						if v.Name == "Seat" then
							v:Destroy()
						else
							v.Position = (v.Position - var17.Position) * 0.5 + var17.Position
							v.Size *= 0.5
							v.CanCollide = false
						end
					end
				end
			end
			var17 = nil
			for _, v_2 in pairs(clone:GetDescendants()) do
				if v_2:IsA("BasePart") and v_2 ~= var17 then
					if not var17 then
						var17 = v_2
					else
						require(ReplicatedStorage_upvr.CommonModules.CoreUtil):WeldToPart(var17, v_2)
						var17 = v_2
					end
				end
			end
			for _, v_3 in pairs(clone:GetDescendants()) do
				if v_3:IsA("BasePart") then
					v_3.Anchored = false
				end
			end
			local var27 = clone
			if var27:IsA("Model") then
				var27:SetPrimaryPartCFrame(arg2.RightHand.CFrame)
			elseif var27.PrimaryPart:IsA("BasePart") then
				var27.PrimaryPart.CFrame = arg2.RightHand.CFrame
			end
			require(ReplicatedStorage_upvr.CommonModules.CoreUtil):WeldToPart(clone.PrimaryPart, arg2.RightHand)
		else
			var17 = arg3.Catagory
			if var17 == "Block" then
				var17 = false
				clone.CanCollide = var17
				var17 = false
				clone.Anchored = var17
				var17 = clone.Size
				var17 /= 2
				clone.Size = var17
			end
			var17 = clone
			if var17:IsA("Model") then
				var17:SetPrimaryPartCFrame(arg2.RightHand.CFrame)
				var17 = var17.PrimaryPart
			elseif var17:IsA("BasePart") then
				var17.CFrame = arg2.RightHand.CFrame
			end
			require(ReplicatedStorage_upvr.CommonModules.CoreUtil):WeldToPart(clone, arg2.RightHand)
		end
		clone.Parent = arg2
		return clone
	end;
	GetItemInInventory = function(arg1, arg2, arg3) -- Line 87, Named "GetItemInInventory"
		for _, v_4 in pairs(arg2) do
			if v_4.Id == arg3 then
				return v_4
			end
		end
	end;
	GetSlotFromIndex = function(arg1, arg2, arg3) -- Line 95, Named "GetSlotFromIndex"
		for i_5, v_5 in pairs(arg2) do
			if v_5.Index == arg3 then
				return v_5, i_5
			end
		end
	end;
}
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function module.SwapInventorySlots(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 103
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local var88
	if arg3 then
		local any_GetSlotFromIndex_result1, any_GetSlotFromIndex_result2 = CoreUtil_2:GetSlotFromIndex(arg3, arg5)
		var88 = any_GetSlotFromIndex_result1
		local var91 = any_GetSlotFromIndex_result2
	end
	if arg4 then
		local any_GetSlotFromIndex_result1_3, any_GetSlotFromIndex_result2_4 = CoreUtil_2:GetSlotFromIndex(arg4, arg6)
		local var94 = any_GetSlotFromIndex_result1_3
		local var95 = any_GetSlotFromIndex_result2_4
	end
	if not arg2 and var88 and var94 and var88.Id == var94.Id then
		var94.Stack += var88.Stack
		table.remove(arg3, var91)
	else
		if var88 then
			var88.Index = arg6
			local var96
			if not arg2 then
				var96 = false
				for _, v_7 in pairs(arg4) do
					if v_7.Id == var88.Id then
						v_7.Stack += var88.Stack
						var96 = true
					end
				end
				if not var96 then
					table.insert(arg4, var88)
				end
			end
		end
		if var94 then
			var94.Index = arg5
			if not arg2 then
				var96 = false
				for _, v_8 in pairs(arg3) do
					if v_8.Id == var94.Id then
						v_8.Stack += var94.Stack
						var96 = true
					end
				end
				if not var96 then
					table.insert(arg3, var94)
				end
			end
		end
		if not arg2 then
			if var94 and var88 then
				if var91 < var95 then
					var96 = table.remove
					var96(arg3, var91)
					var96 = table.remove
					var96(arg4, var95)
				else
					var96 = table.remove
					var96(arg4, var95)
					var96 = table.remove
					var96(arg3, var91)
				end
			else
				if var94 then
					var96 = table.remove
					var96(arg4, var95)
				end
				if var88 then
					var96 = table.remove
					var96(arg3, var91)
				end
			end
		end
		if RunService_upvr:IsServer() then
			Knit_upvr.GetService("InventoryService"):ToggleChestIndestructibilitys()
		end
	end
end
function module.GetFirstFreeInventorySpace(arg1, arg2, arg3, arg4) -- Line 189
	-- KONSTANTERROR: [0] 1. Error Block 14 start (CF ANALYSIS FAILED)
	if not arg4 then
		local tbl = {
			Min = 1;
		}
		tbl.Max = arg2
	end
	local _ = tbl
	-- KONSTANTERROR: [0] 1. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 4 start (CF ANALYSIS FAILED)
	local _, _, _ = pairs(arg3)
	-- KONSTANTERROR: [15] 12. Error Block 4 end (CF ANALYSIS FAILED)
end
function module.RemoveFullStacks(arg1, arg2, arg3) -- Line 201
	for i_6, v_6 in pairs(arg2) do
		if arg3 and v_6.Stack + arg3 <= 64 then
			({})[i_6] = v_6
		elseif not arg3 and v_6.Stack ~= 64 then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			;({})[i_6] = v_6
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
return module

-- ReplicatedStorage.CommonModules.CoreUtil.Util.MobUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:31
-- Luau version 6, Types version 3
-- Time taken: 0.003614 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module = {}
local RunService_upvr = game:GetService("RunService")
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function module.GetRandomSpawnPosition(arg1, arg2, arg3, arg4, arg5) -- Line 12
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: TableUtil_upvr (readonly)
	]]
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local var40
	if RunService_upvr:IsServer() then
		var40 = Knit_upvr.GetService("BlockService").Blocks
	else
		var40 = Knit_upvr.GetController("BlockController").Blocks
	end
	local vector3_2 = Vector3.new(arg3, arg3, arg3)
	local var42 = arg2 - 0.5 * vector3_2
	local var43 = arg2 + 0.5 * vector3_2
	local any_ReadVoxels_result1_2, any_ReadVoxels_result2_2 = game.Workspace.Terrain:ReadVoxels(Region3.new(var42, var43):ExpandToGrid(4), 4)
	local Size_2 = any_ReadVoxels_result1_2.Size
	for i = 1, Size_2.X do
		for i_2 = 1, Size_2.Y do
			for i_3 = 1, Size_2.Z do
				if any_ReadVoxels_result2_2[i][i_2][i_3] == 0 then
					table.insert({}, Vector3.new(i, i_2, i_3))
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	for _, v in pairs(TableUtil_upvr.Shuffle({})) do
		i_2 = v / Size_2
		local workspace_Raycast_result1 = workspace:Raycast(var42 + i_2 * (var43 - var42), Vector3.new(0, -10, 0))
		if workspace_Raycast_result1 and workspace_Raycast_result1.Distance >= arg4 then
			local var51 = workspace_Raycast_result1.Position + Vector3.new(0, arg4, 0)
			if not CoreUtil_2:GetValueAtPosition(var40, CoreUtil_2:Vector3ToTable(CoreUtil_2:ToDataPos(CoreUtil_2:RoundPosToGridPos(var51)))) and #workspace:GetPartBoundsInBox(CFrame.new(var51), Vector3.new(arg4, arg4, arg4)) == 0 then
				return var51
			end
		end
	end
end
function module.IsMobMiningResource(arg1, arg2) -- Line 81
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	for _, v_2 in pairs(Knit_upvr.GetService("MobService").Anchors) do
		if v_2.Underling and v_2.Underling.TargetBlockObject and v_2.Underling.TargetBlockObject.Index == arg2 then
			return true
		end
	end
	return false
end
function module.GetUnderlingFromIndex(arg1, arg2) -- Line 95
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	for _, v_3 in pairs(Knit_upvr.GetService("MobService").Anchors) do
		if v_3.Underling and v_3.Underling.Index == arg2 then
			return v_3.Underling, v_3
		end
	end
end
return module

-- ReplicatedStorage.CommonModules.CoreUtil.Util.ValidationUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:32
-- Luau version 6, Types version 3
-- Time taken: 0.005889 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {
	ValidateDeveloperProductId = function(arg1, arg2) -- Line 10, Named "ValidateDeveloperProductId"
		return arg1:ValidateInteger(arg2)
	end;
	ValidateCraft = function(arg1, arg2, arg3, arg4) -- Line 14, Named "ValidateCraft"
		for i, v in pairs(arg3.CraftIngredients) do
			local function INLINED() -- Internal function, doesn't exist in bytecode
				local any_GetItemInInventory_result1 = require(script.Parent.Parent):GetItemInInventory(arg2, i)
				return any_GetItemInInventory_result1
			end
			if i ~= "BenchType" and i ~= "Output" and (not INLINED() or any_GetItemInInventory_result1.Stack < v * (arg4 or 1)) then
				return false
			end
		end
		return true
	end;
	ValidatePlayerIsIslandOwner = function(arg1, arg2) -- Line 25, Named "ValidatePlayerIsIslandOwner"
		--[[ Upvalues[1]:
			[1]: Knit_upvr (readonly)
		]]
		if arg2 == Knit_upvr.GetService("BlockService").IslandOwner then
			return true
		end
	end;
	ValidateString = function(arg1, arg2) -- Line 30, Named "ValidateString"
		if type(arg2) == "string" then
			return true
		end
	end;
	ValidatePlayerJoin = function(arg1, arg2) -- Line 34, Named "ValidatePlayerJoin"
		--[[ Upvalues[2]:
			[1]: ReplicatedStorage_upvr (readonly)
			[2]: Knit_upvr (readonly)
		]]
		local BlockService = Knit_upvr.GetService("BlockService")
		if game.PlaceId ~= require(ReplicatedStorage_upvr.CommonModules.CoreUtil).PlaceIds.Island then
			return true
		end
		if BlockService.ServerShutDown then
			print("Server Shut Down is true", arg2.UserId)
			return false
		end
		if not BlockService.IslandOwner and #game.Players:GetPlayers() == 1 then
			return true
		end
		if BlockService.IslandOwner == arg2 then
			return true
		end
		if table.find(Knit_upvr.GetService("PlayerService").PlayerAcceptanceList, arg2.Name) then
			print("Player is on acceptance list", arg2.UserId)
			return true
		end
		print("Shutdown")
	end;
}
function module_upvr.ValidatePlayerDistance(arg1, arg2, arg3) -- Line 68
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Parent = require(script.Parent.Parent)
	local var12
	if not Parent:ValidateHumanoid(arg2.Character) then
		warn("NO CHARACTER")
	else
		if not module_upvr:ValidatePosition(var12) then
			warn("NO POSITION")
			return
		end
		if game.PlaceId ~= Parent.PlaceIds.Island then
			var12 = workspace.Nodes[var12.World][var12.Level][var12.Index].Position
		else
			var12 = Parent:TableToVector3(Parent:ToWorldPos(var12))
		end
		if (arg2.Character.HumanoidRootPart.Position - var12).Magnitude <= Parent.PlacementRange + 5 then
			return true
		end
	end
end
function module_upvr.ValidateMobIds(arg1, arg2, arg3) -- Line 87
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if type(arg3) ~= "table" then return end
	for i_2, v_2 in pairs(arg3) do
		if type(i_2) ~= "number" or 0 + 1 ~= i_2 then return end
		if not module_upvr:ValidateString(v_2) then return end
	end
	return true
end
function module_upvr.ValidateEquippedTool(arg1, arg2, arg3) -- Line 102
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg3) then
	else
		local any_GetData_result1 = require(script.Parent.Parent):GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		if any_GetData_result1.EquippedItemId == arg3 then
			return true
		end
	end
end
function module_upvr.ValidateDamage(arg1, arg2, arg3) -- Line 119
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	local Parent_2 = require(script.Parent.Parent)
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local any_GetData_result1_2 = Parent_2:GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_2 or not any_GetData_result1_2.EquippedItemId or not BlockService_2.IsMainHub and not any_GetData_result1_2.IslandSettings.CollaborativeBuilding and arg2 ~= BlockService_2.IslandOwner then
		warn("no data or no island owner")
	else
		if type(arg3) ~= "number" then
			warn("not number")
			return
		end
		local any_GetDefinitionFromId_result1 = Parent_2:GetDefinitionFromId(any_GetData_result1_2.EquippedItemId)
		if not any_GetDefinitionFromId_result1 or any_GetDefinitionFromId_result1.Catagory ~= "Tool" then return end
		local var26 = Parent_2:RequireDefinitions().Tool[any_GetDefinitionFromId_result1.Id]
		if not var26 or not var26.DamageTable then return end
		for _, v_4 in pairs(var26.DamageTable) do
			if v_4 == arg3 then
				return true
			end
		end
		warn("no tool does this damage")
	end
end
function module_upvr.ValidatePosition(arg1, arg2) -- Line 147
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [16] 11. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [16] 11. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [23] 16. Error Block 3 start (CF ANALYSIS FAILED)
	warn("var typew wrong")
	do
		return
	end
	-- KONSTANTERROR: [23] 16. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 20. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 20. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_upvr.ValidateRotation(arg1, arg2) -- Line 173
	local tbl = {0, 90, 180, 270, 360}
	if type(arg2) ~= "table" and type(arg2) ~= "vector" then
		warn("var typew wrong")
	else
		if not arg2.X or not arg2.Y or not arg2.Z then
			warn("structure wrong")
			return
		end
		if type(arg2.X) ~= "number" or math.floor(arg2.X) ~= arg2.X or arg2.X < 0 then
			warn("not int")
			return
		end
		if type(arg2.Y) ~= "number" or math.floor(arg2.Y) ~= arg2.Y or arg2.Y < 0 then
			warn("not int")
			return
		end
		if type(arg2.Z) ~= "number" or math.floor(arg2.Z) ~= arg2.Z or arg2.Z < 0 then
			warn("not int")
			return
		end
		if table.find(tbl, arg2.X) and table.find(tbl, arg2.Y) and table.find(tbl, arg2.Z) then
			return true
		end
	end
end
function module_upvr.ValidateInteger(arg1, arg2) -- Line 188
	if type(arg2) == "number" and math.floor(arg2) == arg2 then
		return true
	end
end
function module_upvr.ValidateStorageId(arg1, arg2) -- Line 192
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg2) then return end
	local any_split_result1 = arg2:split('/')
	if #any_split_result1 ~= 3 then return end
	for _, v_3 in pairs(any_split_result1) do
		local tonumber_result1 = tonumber(v_3)
		if not tonumber_result1 or math.floor(tonumber_result1) ~= tonumber_result1 or tonumber_result1 < 0 then
			warn("not int")
			return
		end
	end
	return true
end
function module_upvr.ValidateInventoryType(arg1, arg2) -- Line 203
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg2) then
	else
		if arg2 == "Inventory" then
			return true
		end
		local any_split_result1_2 = arg2:split('&')
		if any_split_result1_2[1] == "Underling" or any_split_result1_2[1] == "Chest" then
			if not any_split_result1_2[2] or not module_upvr:ValidateString(any_split_result1_2[2]) then return end
			return true
		end
	end
end
function module_upvr.ValidateDef(arg1, arg2) -- Line 213
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if type(arg2) ~= "table" or not arg2.Id or not module_upvr:ValidateString(arg2.Id) then
	else
		local any_GetDefinitionFromId_result1_2 = require(script.Parent.Parent):GetDefinitionFromId(arg2.Id)
		if any_GetDefinitionFromId_result1_2 then
			return any_GetDefinitionFromId_result1_2
		end
	end
end
return module_upvr

-- ReplicatedStorage.CommonModules.CoreUtil.Util.TaskUtil
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:33
-- Luau version 6, Types version 3
-- Time taken: 0.001006 seconds

return {
	GetHealthFromQuests = function(arg1, arg2) -- Line 10, Named "GetHealthFromQuests"
		local var18 = 0
		for _, v in pairs(arg2.Tasks) do
			if v.Id == "Farlight Crystals" then
				for _, v_2 in pairs(v.Progress) do
					var18 += v_2.NumberCollected
				end
			end
		end
		for _, v_3 in pairs(arg2.CompletedTasks) do
			if v_3.Id == "Farlight Crystals" then
				for _, v_4 in pairs(v_3.Progress) do
					var18 += v_4.NumberCollected
				end
			end
		end
		return var18
	end;
}

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.CampDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:36
-- Luau version 6, Types version 3
-- Time taken: 0.000510 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.MobTypes = arg2
	module.MobLimit = arg3
	module.RespawnTime = arg4
	module.SpawnRadius = arg5
	module.AggroRange = arg6
	module.LeashRange = arg7
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:37
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:37
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1c
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:37
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1d
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:37
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1e
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:37
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1f
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1g
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1h
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines2a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:39
-- Luau version 6, Types version 3
-- Time taken: 0.000360 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Gizmo"}, 1, {
	Min = 30;
	Max = 40;
}, 22, 18, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines2b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:40
-- Luau version 6, Types version 3
-- Time taken: 0.000342 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Gizmo"}, 1, {
	Min = 30;
	Max = 40;
}, 30, 18, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines2c
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:40
-- Luau version 6, Types version 3
-- Time taken: 0.000342 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Gizmo"}, 1, {
	Min = 30;
	Max = 40;
}, 30, 18, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines2d
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:39
-- Luau version 6, Types version 3
-- Time taken: 0.000360 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Gizmo"}, 1, {
	Min = 30;
	Max = 40;
}, 22, 18, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6c
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:41
-- Luau version 6, Types version 3
-- Time taken: 0.000387 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 25, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6d
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:42
-- Luau version 6, Types version 3
-- Time taken: 0.000354 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 40, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6e
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:43
-- Luau version 6, Types version 3
-- Time taken: 0.000330 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 32, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6f
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:44
-- Luau version 6, Types version 3
-- Time taken: 0.000335 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 30, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:46
-- Luau version 6, Types version 3
-- Time taken: 0.000331 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 46, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:47
-- Luau version 6, Types version 3
-- Time taken: 0.000333 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 28, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:48
-- Luau version 6, Types version 3
-- Time taken: 0.000354 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 28, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:49
-- Luau version 6, Types version 3
-- Time taken: 0.000315 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 30, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3c
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:50
-- Luau version 6, Types version 3
-- Time taken: 0.000341 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 15, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3d
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:51
-- Luau version 6, Types version 3
-- Time taken: 0.000333 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 34, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3e
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:50
-- Luau version 6, Types version 3
-- Time taken: 0.000341 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 15, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines3f
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:51
-- Luau version 6, Types version 3
-- Time taken: 0.000333 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Rattles"}, 1, {
	Min = 25;
	Max = 40;
}, 34, 18, 70)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines6g
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:52
-- Luau version 6, Types version 3
-- Time taken: 0.000344 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Flamelet"}, 1, {
	Min = 30;
	Max = 45;
}, 20, 20, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines4a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:53
-- Luau version 6, Types version 3
-- Time taken: 0.000341 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Muncher"}, 1, {
	Min = 40;
	Max = 45;
}, 30, 16, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines7a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:54
-- Luau version 6, Types version 3
-- Time taken: 0.000410 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"GrimThorn"}, 2, {
	Min = 30;
	Max = 45;
}, 25, 32, 33)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines5a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:56
-- Luau version 6, Types version 3
-- Time taken: 0.000328 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Muncher"}, 1, {
	Min = 60;
	Max = 90;
}, 30, 16, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines5b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:56
-- Luau version 6, Types version 3
-- Time taken: 0.000328 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Muncher"}, 1, {
	Min = 60;
	Max = 90;
}, 30, 16, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines5c
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:56
-- Luau version 6, Types version 3
-- Time taken: 0.000328 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Muncher"}, 1, {
	Min = 60;
	Max = 90;
}, 30, 16, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines5d
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:56
-- Luau version 6, Types version 3
-- Time taken: 0.000328 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Muncher"}, 1, {
	Min = 60;
	Max = 90;
}, 30, 16, 60)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1k
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1i
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines1j
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:38
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Green Slime", "Slimegore"}, 1, {
	Min = 10;
	Max = 30;
}, 22, 28, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines8b
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:57
-- Luau version 6, Types version 3
-- Time taken: 0.000416 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Blue Flamelet"}, 1, {
	Min = 50;
	Max = 90;
}, 42, 32, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Camp.DefinitionModules.Mines8a
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:57
-- Luau version 6, Types version 3
-- Time taken: 0.000416 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {"Blue Flamelet"}, 1, {
	Min = 50;
	Max = 90;
}, 42, 32, 80)

-- ReplicatedStorage.CommonModules.DefinitionModules.Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.BlockDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:58
-- Luau version 6, Types version 3
-- Time taken: 0.000626 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Block"
	module.Health = arg2
	module.DamageCatagory = arg3
	module.BehaviourData = arg4
	module.Size = arg5
	module.CanBeMined = arg6
	module.CanBePlaced = arg7
	module.CanBeRotated = arg8
	module.SeeThrough = arg9
	module.AccentColor = arg10
	module.LootData = arg11
	module.CraftIngredients = arg12
	module.SearchTags = arg13
	module.EconomyInfo = arg14
	module.LevelReq = arg15
	module.DisplayImage = arg16
	module.SoundData = arg17
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Grass
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:59
-- Luau version 6, Types version 3
-- Time taken: 0.000681 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Farmland", {
	Id = "Grass Behaviour";
}, nil, true, true, false, false, Color3.fromRGB(142, 74, 38), {
	SetItems = {{
		ItemId = "Dirt";
		Catagory = "Block";
	}};
}, nil, {}, nil, nil, "rbxassetid://17450179681", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Dirt
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:00
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Farmland", {
	Id = "Dirt Behaviour";
	TickCount = {
		Defult = 10;
	};
	Morph = "Grass";
}, nil, true, true, false, false, Color3.fromRGB(169, 89, 50), nil, nil, {"Dirt"}, {
	BuyPrice = 10;
	SellPrice = 1;
}, nil, "rbxassetid://17450131787", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stone Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:01
-- Luau version 6, Types version 3
-- Time taken: 0.000675 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 48, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(177, 179, 179), nil, {
	Stone = 1;
}, {}, {
	BuyPrice = 10;
	SellPrice = 2;
}, nil, "rbxassetid://17450254568", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Marble Brick Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:02
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Marble = 10;
	Clay = 1;
}, {"Marble", "Brick"}, {
	SellPrice = 52;
}, nil, "rbxassetid://18523677719", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Silver Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:03
-- Luau version 6, Types version 3
-- Time taken: 0.000623 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(212, 218, 218), nil, {
	Silver = 16;
}, {}, {
	SellPrice = 450;
}, nil, "rbxassetid://17450256320", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Bedrock
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:04
-- Luau version 6, Types version 3
-- Time taken: 0.000764 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, nil, nil, nil, nil, true, true, false, false, Color3.fromRGB(49, 49, 52), nil, nil, {}, nil, nil, "rbxassetid://17449960534", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Basalt Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:05
-- Luau version 6, Types version 3
-- Time taken: 0.000644 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(91, 95, 97), nil, {
	Basalt = 10;
}, {}, {
	BuyPrice = 200;
	SellPrice = 20;
}, nil, "rbxassetid://17449961632", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Cobblestone
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:06
-- Luau version 6, Types version 3
-- Time taken: 0.000661 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 48, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 181, 181), nil, {
	Stone = 1;
}, {}, {
	BuyPrice = 20;
	SellPrice = 2;
}, nil, "rbxassetid://17449980684", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Marble Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:08
-- Luau version 6, Types version 3
-- Time taken: 0.000693 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(221, 224, 224), nil, {
	Marble = 10;
}, {"Marble", "Block"}, {
	BuyPrice = 500;
	SellPrice = 50;
}, nil, "rbxassetid://17450209897", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Pink Grass
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:09
-- Luau version 6, Types version 3
-- Time taken: 0.000601 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242974", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Lantern Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:10
-- Luau version 6, Types version 3
-- Time taken: 0.000664 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://17450218528", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.SpiderWeb
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:11
-- Luau version 6, Types version 3
-- Time taken: 0.000544 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(167, 167, 167), nil, nil, {}, nil, nil, "rbxassetid://17450255129", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slime Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:12
-- Luau version 6, Types version 3
-- Time taken: 0.000720 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Slime Behaviour";
}, nil, true, true, false, false, Color3.fromRGB(204, 228, 178), nil, {
	["Green Goo"] = 16;
}, {}, {
	SellPrice = 40;
}, {
	Combat = {
		GreenSlime = 6;
	};
}, "rbxassetid://17450292990", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ladder
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:13
-- Luau version 6, Types version 3
-- Time taken: 0.000658 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 5;
}, {"Ladder"}, {
	SellPrice = 20;
}, {
	Forestry = {
		["Mahogany Wood"] = 3;
	};
}, "rbxassetid://17450218677", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Tilled Dirt
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:14
-- Luau version 6, Types version 3
-- Time taken: 0.000727 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Farmland", nil, nil, true, true, false, false, Color3.fromRGB(142, 74, 38), {
	SetItems = {{
		ItemId = "Dirt";
		Catagory = "Block";
	}};
}, nil, {}, {
	SellPrice = 0;
}, nil, "rbxassetid://17450131787", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Blue Torch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:15
-- Luau version 6, Types version 3
-- Time taken: 0.001277 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(12, 111, 154), nil, {
	["Blue Flame"] = 1;
	["Ash Wood"] = 1;
}, {"Torch"}, {
	SellPrice = 95;
}, nil, "rbxassetid://86147698054583", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Pink Stone Brick Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:16
-- Luau version 6, Types version 3
-- Time taken: 0.000687 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(214, 176, 235), nil, nil, {"Stone", "Brick"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149243202", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Coal Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:17
-- Luau version 6, Types version 3
-- Time taken: 0.000659 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 48, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(72, 74, 72), nil, {
	Coal = 10;
}, {}, {
	BuyPrice = 400;
	SellPrice = 44;
}, nil, "rbxassetid://17449982597", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Cobalt Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:19
-- Luau version 6, Types version 3
-- Time taken: 0.000658 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(21, 186, 229), nil, {
	Cobalt = 10;
}, {}, {
	BuyPrice = 3000;
	SellPrice = 300;
}, nil, "rbxassetid://17449981893", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Copper Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:20
-- Luau version 6, Types version 3
-- Time taken: 0.000631 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(203, 168, 73), nil, {
	Copper = 10;
}, {}, {
	BuyPrice = 800;
	SellPrice = 80;
}, nil, "rbxassetid://17449980052", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Grass Weed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:21
-- Luau version 6, Types version 3
-- Time taken: 0.000594 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(56, 110, 12), nil, {
	Dirt = 1;
}, {}, {
	SellPrice = 1;
}, nil, "rbxassetid://17450179860", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fire Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:22
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	Flame = 8;
	Coal = 8;
}, {}, {
	SellPrice = 225;
}, {
	Combat = {
		Flamelet = 2;
	};
}, "rbxassetid://17450162937", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Diamond Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:23
-- Luau version 6, Types version 3
-- Time taken: 0.000634 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 120, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(227, 212, 35), nil, {
	Diamond = 10;
}, {}, {
	BuyPrice = 20000;
	SellPrice = 2000;
}, nil, "rbxassetid://102146858790501", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Iron Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:24
-- Luau version 6, Types version 3
-- Time taken: 0.000707 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(216, 216, 216), nil, {
	Iron = 10;
}, {}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, nil, "rbxassetid://17450200035", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Gold Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:25
-- Luau version 6, Types version 3
-- Time taken: 0.000640 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 120, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(227, 212, 35), nil, {
	Gold = 10;
}, {}, {
	BuyPrice = 5500;
	SellPrice = 550;
}, nil, "rbxassetid://17450180936", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Vines
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:26
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Leaves"] = 8;
}, {"Ladder", "Vine"}, {
	SellPrice = 24;
}, {
	Forestry = {
		["Mahogany Wood"] = 6;
	};
}, "rbxassetid://17747129789", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood Table
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:27
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 4;
}, {"Ladder"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 4;
	};
}, "rbxassetid://18538539885", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wooden Crate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:28
-- Luau version 6, Types version 3
-- Time taken: 0.000682 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Oak Plank"] = 4;
}, {"Furniture"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Oak Wood"] = 7;
	};
}, "rbxassetid://18523679531", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Blue Wall Torch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:29
-- Luau version 6, Types version 3
-- Time taken: 0.000706 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(12, 111, 154), nil, {
	["Blue Flame"] = 1;
	["Ash Wood"] = 1;
}, {"Torch"}, {
	SellPrice = 95;
}, nil, "rbxassetid://92317079075109", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Danger Sign
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:31
-- Luau version 6, Types version 3
-- Time taken: 0.000571 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(231, 191, 0), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245335", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Electric FX Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:32
-- Luau version 6, Types version 3
-- Time taken: 0.000607 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(85, 170, 255), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149244540", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fog FX Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:33
-- Luau version 6, Types version 3
-- Time taken: 0.000635 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149244829", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Rain FX Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:34
-- Luau version 6, Types version 3
-- Time taken: 0.000591 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245057", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Crimson Ornate Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:35
-- Luau version 6, Types version 3
-- Time taken: 0.000585 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 85, 84), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246586", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Crimson Moss Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:36
-- Luau version 6, Types version 3
-- Time taken: 0.000635 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(169, 8, 40), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246922", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Jungle Vines
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:37
-- Luau version 6, Types version 3
-- Time taken: 0.000629 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(60, 162, 34), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247150", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Sword Throne
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:38
-- Luau version 6, Types version 3
-- Time taken: 0.000616 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(159, 109, 140), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245735", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Jungle Grass Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:39
-- Luau version 6, Types version 3
-- Time taken: 0.000608 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(0, 88, 15), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247523", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Jungle Moss Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:41
-- Luau version 6, Types version 3
-- Time taken: 0.000756 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(0, 89, 13), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Crimson Grass Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:42
-- Luau version 6, Types version 3
-- Time taken: 0.000602 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(170, 4, 44), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246217", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Tiki Head Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:43
-- Luau version 6, Types version 3
-- Time taken: 0.000585 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149248228", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Tiki Pole Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:44
-- Luau version 6, Types version 3
-- Time taken: 0.000624 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149248579", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Red Brick Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:45
-- Luau version 6, Types version 3
-- Time taken: 0.000610 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523676370", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stone Brick Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:46
-- Luau version 6, Types version 3
-- Time taken: 0.000655 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Stone = 1;
	Clay = 1;
}, {"Stone", "Brick"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450254407", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Basalt Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:47
-- Luau version 6, Types version 3
-- Time taken: 0.000606 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, nil, {"Basalt"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523675319", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood Chair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:48
-- Luau version 6, Types version 3
-- Time taken: 0.000719 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 4;
}, {"Ladder"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 4;
	};
}, "rbxassetid://18113235353", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Hay Bale
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:49
-- Luau version 6, Types version 3
-- Time taken: 0.000820 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(221, 224, 224), nil, {
	Wheat = 256;
}, {"Wheat", "Block"}, {
	SellPrice = 1152;
}, {
	Farming = {
		Wheat = 5;
	};
}, "rbxassetid://18523677992", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Hanging Lantern
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:50
-- Luau version 6, Types version 3
-- Time taken: 0.000680 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	["Scrap Metal"] = 10;
	Coal = 1;
	Glass = 1;
}, {}, {
	SellPrice = 64;
}, {
	Combat = {
		Gizmo = 4;
	};
}, "rbxassetid://18523678879", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood Barrel
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:52
-- Luau version 6, Types version 3
-- Time taken: 0.000694 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Cherry Wood"] = 4;
	Iron = 2;
}, {"Furniture"}, {
	SellPrice = 70;
}, {
	Forestry = {
		["Cherry Wood"] = 5;
	};
}, "rbxassetid://18523680240", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Candles
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:53
-- Luau version 6, Types version 3
-- Time taken: 0.000958 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	Flame = 1;
	Coal = 1;
}, {}, {
	SellPrice = 28;
}, {
	Combat = {
		Flamelet = 1;
	};
}, "rbxassetid://18523679728", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Basalt Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:54
-- Luau version 6, Types version 3
-- Time taken: 0.000649 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, {
	Basalt = 1;
	Output = 2;
}, {"Basalt"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523675047", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Red Brick Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:56
-- Luau version 6, Types version 3
-- Time taken: 0.000671 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Stone = 1;
	Clay = 1;
}, {"Stone", "Brick"}, {
	SellPrice = 4;
}, nil, "rbxassetid://18523676216", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Red Brick Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:57
-- Luau version 6, Types version 3
-- Time taken: 0.000723 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, {
	Stone = 1;
	Clay = 1;
	Output = 2;
}, {"Stone"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523676827", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Spotlight
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:58
-- Luau version 6, Types version 3
-- Time taken: 0.000678 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 3;
	};
}, "rbxassetid://18523678168", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Workbench
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:49:59
-- Luau version 6, Types version 3
-- Time taken: 0.001040 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	Silver = 64;
	["Scrap Metal"] = 64;
	["Red Dye"] = 10;
}, {}, {
	BuyPrice = 10000;
	SellPrice = 3275;
}, nil, "rbxassetid://128010283759302", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Mushroom Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:00
-- Luau version 6, Types version 3
-- Time taken: 0.000668 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 21, 23), nil, {
	Mushroom = 10;
}, {}, {
	SellPrice = 200;
}, nil, "rbxassetid://133023260754761", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Rainbow Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:01
-- Luau version 6, Types version 3
-- Time taken: 0.000675 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Rainbow Behaviour";
	GlowingPartName = {"HB"};
}, nil, true, true, false, false, Color3.fromRGB(91, 95, 97), nil, {
	["Rainbow Dye"] = 10;
}, {}, {
	SellPrice = 50000;
}, nil, "rbxassetid://85552498770796", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Green Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:02
-- Luau version 6, Types version 3
-- Time taken: 0.000697 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Green Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://113952519511996", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Red Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:03
-- Luau version 6, Types version 3
-- Time taken: 0.000703 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://98571776132336", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Mushroom
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:04
-- Luau version 6, Types version 3
-- Time taken: 0.000663 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(159, 21, 23), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://127784338367397", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Orange Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:05
-- Luau version 6, Types version 3
-- Time taken: 0.000724 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://105881719260846", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Blue Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:07
-- Luau version 6, Types version 3
-- Time taken: 0.000685 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(12, 111, 154), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Blue Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://89073236860634", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Chain
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:08
-- Luau version 6, Types version 3
-- Time taken: 0.000953 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, {
	Iron = 10;
}, {}, {
	SellPrice = 150;
}, {
	Mining = {
		["Iron Ore"] = 4;
	};
}, "rbxassetid://85863489674290", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Torch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:09
-- Luau version 6, Types version 3
-- Time taken: 0.000732 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(154, 58, 27), nil, {
	Coal = 1;
	["Oak Wood"] = 1;
}, {"Torch"}, {
	BuyPrice = 30;
	SellPrice = 3;
}, {
	Forestry = {
		["Oak Wood"] = 6;
	};
}, "rbxassetid://17450296179", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wall Torch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:10
-- Luau version 6, Types version 3
-- Time taken: 0.000699 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(154, 58, 27), nil, {
	Coal = 1;
	["Oak Wood"] = 1;
}, {"Torch"}, {
	BuyPrice = 30;
	SellPrice = 3;
}, {
	Forestry = {
		["Oak Wood"] = 8;
	};
}, "rbxassetid://18113390286", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Purple Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:11
-- Luau version 6, Types version 3
-- Time taken: 0.000748 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
	["Blue Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://90785513649149", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Yellow Lightcube
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:12
-- Luau version 6, Types version 3
-- Time taken: 0.000717 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Yellow Dye"] = 1;
}, {"Light"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://100899279712885", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Black
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:14
-- Luau version 6, Types version 3
-- Time taken: 0.000696 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	Clay = 1;
	["Black Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985779", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:15
-- Luau version 6, Types version 3
-- Time taken: 0.000780 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(63, 145, 221), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985569", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Brown
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:16
-- Luau version 6, Types version 3
-- Time taken: 0.000723 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(131, 96, 53), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985425", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Cyan
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:17
-- Luau version 6, Types version 3
-- Time taken: 0.000782 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(29, 225, 230), nil, {
	Clay = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985231", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Green
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:18
-- Luau version 6, Types version 3
-- Time taken: 0.000737 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(70, 166, 25), nil, {
	Clay = 1;
	["Green Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985121", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Light Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:19
-- Luau version 6, Types version 3
-- Time taken: 0.000715 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(125, 216, 229), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984978", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Lime
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:21
-- Luau version 6, Types version 3
-- Time taken: 0.000728 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(179, 228, 93), nil, {
	Clay = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984746", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Orange
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:22
-- Luau version 6, Types version 3
-- Time taken: 0.000699 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(223, 169, 68), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984450", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Pink
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:23
-- Luau version 6, Types version 3
-- Time taken: 0.000885 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(226, 103, 229), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984249", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Purple
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:24
-- Luau version 6, Types version 3
-- Time taken: 0.000683 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(182, 99, 229), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984038", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Red
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:25
-- Luau version 6, Types version 3
-- Time taken: 0.000661 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(229, 96, 93), nil, {
	Clay = 1;
	["Red Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983792", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay White
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:26
-- Luau version 6, Types version 3
-- Time taken: 0.000755 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(230, 230, 230), nil, {
	Clay = 1;
	["White Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983460", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Yellow
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:28
-- Luau version 6, Types version 3
-- Time taken: 0.000708 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(229, 218, 97), nil, {
	Clay = 1;
	["Yellow Dye"] = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983272", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Vase
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:29
-- Luau version 6, Types version 3
-- Time taken: 0.000680 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 171, 171), nil, {
	Clay = 10;
}, {"Clay", "Block"}, {
	SellPrice = 50;
}, {
	Mining = {
		["Clay Mud"] = 5;
	};
}, "rbxassetid://18523679966", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Clay.Clay Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:30
-- Luau version 6, Types version 3
-- Time taken: 0.000646 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(171, 171, 171), nil, {
	Clay = 1;
}, {"Clay", "Block"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983040", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Ash Plank
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:31
-- Luau version 6, Types version 3
-- Time taken: 0.000652 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(213, 199, 170), nil, {
	["Ash Wood"] = 1;
	Output = 4;
}, {"Plank", "Ash"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449948311", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Cherry Plank
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:32
-- Luau version 6, Types version 3
-- Time taken: 0.000636 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(209, 189, 179), nil, {
	["Cherry Wood"] = 1;
	Output = 4;
}, {"Cherry", "Plank"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986617", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Dark Hollow Plank
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:33
-- Luau version 6, Types version 3
-- Time taken: 0.000684 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(161, 157, 181), nil, {
	["Dark Hollow Wood"] = 1;
	Output = 4;
}, {"Dark Hollow", "Plank"}, {
	SellPrice = 10;
}, nil, "rbxassetid://17450133827", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Mahogany Plank
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:34
-- Luau version 6, Types version 3
-- Time taken: 0.000770 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(180, 124, 113), nil, {
	["Mahogany Wood"] = 1;
	Output = 4;
}, {"Mahogany", "Plank"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450210787", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Oak Plank
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:36
-- Luau version 6, Types version 3
-- Time taken: 0.000680 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(205, 182, 119), nil, {
	["Oak Wood"] = 1;
	Output = 4;
}, {"Oak", "Plank"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523720888", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Ash Wood
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:37
-- Luau version 6, Types version 3
-- Time taken: 0.000588 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://17449947767", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Cherry Wood
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:38
-- Luau version 6, Types version 3
-- Time taken: 0.000595 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(209, 190, 181), nil, nil, {}, {
	SellPrice = 10;
}, nil, "rbxassetid://17449985946", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Dark Hollow Wood
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:39
-- Luau version 6, Types version 3
-- Time taken: 0.000610 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(144, 146, 170), nil, nil, {}, {
	SellPrice = 40;
}, nil, "rbxassetid://17450133333", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Mahogany Wood
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:40
-- Luau version 6, Types version 3
-- Time taken: 0.000627 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(154, 84, 74), nil, nil, {}, {
	SellPrice = 16;
}, nil, "rbxassetid://17450210062", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Wood.Oak Wood
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:41
-- Luau version 6, Types version 3
-- Time taken: 0.000597 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(210, 190, 133), nil, nil, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://18523720764", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Leaves.Cherry Leaves
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:42
-- Luau version 6, Types version 3
-- Time taken: 0.000678 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(52, 143, 95), nil, nil, {}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986933", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Leaves.Dark Hollow Leaves
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:43
-- Luau version 6, Types version 3
-- Time taken: 0.000626 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(47, 175, 201), nil, nil, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://17450133982", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Leaves.Mahogany Leaves
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:44
-- Luau version 6, Types version 3
-- Time taken: 0.000715 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(79, 150, 49), nil, nil, {}, {
	SellPrice = 3;
}, nil, "rbxassetid://17450211025", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Leaves.Oak Leaves
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:45
-- Luau version 6, Types version 3
-- Time taken: 0.000590 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(102, 128, 56), nil, nil, {}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523760151", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Leaves.Ash Leaves
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:47
-- Luau version 6, Types version 3
-- Time taken: 0.000612 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(114, 186, 60), nil, nil, {}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449948482", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass White
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:48
-- Luau version 6, Types version 3
-- Time taken: 0.000663 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(163, 161, 162), nil, {
	Glass = 1;
	["White Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181630", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Black
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:49
-- Luau version 6, Types version 3
-- Time taken: 0.000650 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(26, 26, 29), nil, {
	Glass = 1;
	["Black Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183992", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:50
-- Luau version 6, Types version 3
-- Time taken: 0.000900 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(58, 55, 97), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183565", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Cyan
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:51
-- Luau version 6, Types version 3
-- Time taken: 0.001008 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(49, 101, 100), nil, {
	Glass = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182957", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Brown
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:52
-- Luau version 6, Types version 3
-- Time taken: 0.000757 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(69, 55, 46), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183120", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:53
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(106, 106, 116), nil, {
	Coal = 2;
}, {"Glass", "Block"}, {
	BuyPrice = 60;
	SellPrice = 2;
}, nil, "rbxassetid://17450181282", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Green
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:54
-- Luau version 6, Types version 3
-- Time taken: 0.000686 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(47, 74, 37), nil, {
	Glass = 1;
	["Green Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182759", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Light Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:55
-- Luau version 6, Types version 3
-- Time taken: 0.000653 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(19, 83, 108), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182566", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Lime
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:57
-- Luau version 6, Types version 3
-- Time taken: 0.000676 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(19, 108, 30), nil, {
	Glass = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182428", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Orange
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:58
-- Luau version 6, Types version 3
-- Time taken: 0.001015 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(143, 73, 11), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182271", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Pink
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:50:59
-- Luau version 6, Types version 3
-- Time taken: 0.000773 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(159, 117, 147), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182108", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Purple
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:00
-- Luau version 6, Types version 3
-- Time taken: 0.000839 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(77, 16, 91), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181985", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Red
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:01
-- Luau version 6, Types version 3
-- Time taken: 0.000748 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(97, 27, 26), nil, {
	Glass = 1;
	["Red Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181819", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Glass.Glass Yellow
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:02
-- Luau version 6, Types version 3
-- Time taken: 0.000678 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(102, 117, 85), nil, {
	Glass = 1;
	["Yellow Dye"] = 1;
}, {"Glass", "Block"}, {
	BuyPrice = 60;
	SellPrice = 6;
}, nil, "rbxassetid://17450181435", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Ash Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:03
-- Luau version 6, Types version 3
-- Time taken: 0.000717 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(207, 187, 154), nil, {
	["Ash Plank"] = 1;
	Output = 2;
}, {"Ash", "Slab"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449948150", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Cherry Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:04
-- Luau version 6, Types version 3
-- Time taken: 0.000598 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(212, 194, 186), nil, nil, {"Cherry", "Slab"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17746718139", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Dark Hollow Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:05
-- Luau version 6, Types version 3
-- Time taken: 0.000651 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(163, 159, 182), nil, nil, {"Dark Hollow", "Slab"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17746718480", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Mahogany Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:06
-- Luau version 6, Types version 3
-- Time taken: 0.000665 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(161, 94, 79), nil, {
	["Mahogany Plank"] = 1;
	Output = 2;
}, {"Slab", "Mahogany"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450210467", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Oak Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:08
-- Luau version 6, Types version 3
-- Time taken: 0.000715 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(204, 179, 111), nil, {
	["Oak Plank"] = 1;
	Output = 2;
}, {"Plank", "Oak"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523720589", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Marble Brick Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Error occured while requesting the API, error:

--[[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    <head>
        <title>The page is temporarily unavailable</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <style type="text/css">
            /*<![CDATA[*/
            body {
                background-color: #fff;
                color: #000;
                font-size: 0.9em;
                font-family: sans-serif,helvetica;
                margin: 0;
                padding: 0;
            }
            :link {
                color: #c00;
            }
            :visited {
                color: #c00;
            }
            a:hover {
                color: #f50;
            }
            h1 {
                text-align: center;
                margin: 0;
                padding: 0.6em 2em 0.4em;
                background-color: #294172;
                color: #fff;
                font-weight: normal;
                font-size: 1.75em;
                border-bottom: 2px solid #000;
            }
            h1 strong {
                font-weight: bold;
                font-size: 1.5em;
            }
            h2 {
                text-align: center;
                background-color: #3C6EB4;
                font-size: 1.1em;
                font-weight: bold;
                color: #fff;
                margin: 0;
                padding: 0.5em;
                border-bottom: 2px solid #294172;
            }
            h3 {
                text-align: center;
                background-color: #ff0000;
                padding: 0.5em;
                color: #fff;
            }
            hr {
                display: none;
            }
            .content {
                padding: 1em 5em;
            }
            .alert {
                border: 2px solid #000;
            }

            img {
                border: 2px solid #fff;
                padding: 2px;
                margin: 2px;
            }
            a:hover img {
                border: 2px solid #294172;
            }
            .logos {
                margin: 1em;
                text-align: center;
            }
            /*]]>*/
        </style>
    </head>

    <body>
        <h1><strong>nginx error!</strong></h1>

        <div class="content">

            <h3>The page you are looking for is temporarily unavailable.  Please try again later.</h3>

            <div class="alert">
                <h2>Website Administrator</h2>
                <div class="content">
                    <p>Something has triggered an error on your
                    website.  This is the default error page for
                    <strong>nginx</strong> that is distributed with
                    Fedora.  It is located
                    <tt>/usr/share/nginx/html/50x.html</tt></p>

                    <p>You should customize this error page for your own
                    site or edit the <tt>error_page</tt> directive in
                    the <strong>nginx</strong> configuration file
                    <tt>/etc/nginx/nginx.conf</tt>.</p>

                </div>
            </div>

            <div class="logos">
                <a href="http://nginx.net/"><img
                    src="/nginx-logo.png"
                    alt="[ Powered by nginx ]"
                    width="121" height="32" /></a>

                <a href="http://fedoraproject.org/"><img 
                    src="/poweredby.png"
                    alt="[ Powered by Fedora ]" 
                    width="88" height="31" /></a>
            </div>
        </div>
    </body>
</html>

--]]

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Stone Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:09
-- Luau version 6, Types version 3
-- Time taken: 0.000697 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, {
	Stone = 1;
	Output = 2;
}, {"Stone"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17450252971", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Marble Brick Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:11
-- Luau version 6, Types version 3
-- Time taken: 0.000688 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Marble"}, {
	SellPrice = 3;
}, nil, "rbxassetid://18523677607", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Pink Stone Brick Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:12
-- Luau version 6, Types version 3
-- Time taken: 0.000587 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242061", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Ash Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:13
-- Luau version 6, Types version 3
-- Time taken: 0.000636 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(207, 187, 154), nil, nil, {"Ash", "Slab"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746718251", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Cherry Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Error occured while requesting the API, error:

--[[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    <head>
        <title>The page is temporarily unavailable</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <style type="text/css">
            /*<![CDATA[*/
            body {
                background-color: #fff;
                color: #000;
                font-size: 0.9em;
                font-family: sans-serif,helvetica;
                margin: 0;
                padding: 0;
            }
            :link {
                color: #c00;
            }
            :visited {
                color: #c00;
            }
            a:hover {
                color: #f50;
            }
            h1 {
                text-align: center;
                margin: 0;
                padding: 0.6em 2em 0.4em;
                background-color: #294172;
                color: #fff;
                font-weight: normal;
                font-size: 1.75em;
                border-bottom: 2px solid #000;
            }
            h1 strong {
                font-weight: bold;
                font-size: 1.5em;
            }
            h2 {
                text-align: center;
                background-color: #3C6EB4;
                font-size: 1.1em;
                font-weight: bold;
                color: #fff;
                margin: 0;
                padding: 0.5em;
                border-bottom: 2px solid #294172;
            }
            h3 {
                text-align: center;
                background-color: #ff0000;
                padding: 0.5em;
                color: #fff;
            }
            hr {
                display: none;
            }
            .content {
                padding: 1em 5em;
            }
            .alert {
                border: 2px solid #000;
            }

            img {
                border: 2px solid #fff;
                padding: 2px;
                margin: 2px;
            }
            a:hover img {
                border: 2px solid #294172;
            }
            .logos {
                margin: 1em;
                text-align: center;
            }
            /*]]>*/
        </style>
    </head>

    <body>
        <h1><strong>nginx error!</strong></h1>

        <div class="content">

            <h3>The page you are looking for is temporarily unavailable.  Please try again later.</h3>

            <div class="alert">
                <h2>Website Administrator</h2>
                <div class="content">
                    <p>Something has triggered an error on your
                    website.  This is the default error page for
                    <strong>nginx</strong> that is distributed with
                    Fedora.  It is located
                    <tt>/usr/share/nginx/html/50x.html</tt></p>

                    <p>You should customize this error page for your own
                    site or edit the <tt>error_page</tt> directive in
                    the <strong>nginx</strong> configuration file
                    <tt>/etc/nginx/nginx.conf</tt>.</p>

                </div>
            </div>

            <div class="logos">
                <a href="http://nginx.net/"><img
                    src="/nginx-logo.png"
                    alt="[ Powered by nginx ]"
                    width="121" height="32" /></a>

                <a href="http://fedoraproject.org/"><img 
                    src="/poweredby.png"
                    alt="[ Powered by Fedora ]" 
                    width="88" height="31" /></a>
            </div>
        </div>
    </body>
</html>

--]]

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Dark Hollow Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:15
-- Luau version 6, Types version 3
-- Time taken: 0.000642 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(163, 159, 182), nil, {
	["Dark Hollow Plank"] = 1;
	Output = 2;
}, {"Dark Hollow", "Slab"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17450133653", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Mahogany Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:16
-- Luau version 6, Types version 3
-- Time taken: 0.000604 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(161, 94, 79), nil, nil, {"Slab", "Mahogany"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746718755", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Oak Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:17
-- Luau version 6, Types version 3
-- Time taken: 0.000834 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(204, 179, 111), nil, nil, {"Plank", "Oak"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523721258", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Stone Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:18
-- Luau version 6, Types version 3
-- Time taken: 0.000651 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, nil, {"Stone"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17746719710", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Pink Stone Brick Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:19
-- Luau version 6, Types version 3
-- Time taken: 0.001091 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242506", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Stone Brick Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Error occured while requesting the API, error:

--[[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
    <head>
        <title>The page is temporarily unavailable</title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <style type="text/css">
            /*<![CDATA[*/
            body {
                background-color: #fff;
                color: #000;
                font-size: 0.9em;
                font-family: sans-serif,helvetica;
                margin: 0;
                padding: 0;
            }
            :link {
                color: #c00;
            }
            :visited {
                color: #c00;
            }
            a:hover {
                color: #f50;
            }
            h1 {
                text-align: center;
                margin: 0;
                padding: 0.6em 2em 0.4em;
                background-color: #294172;
                color: #fff;
                font-weight: normal;
                font-size: 1.75em;
                border-bottom: 2px solid #000;
            }
            h1 strong {
                font-weight: bold;
                font-size: 1.5em;
            }
            h2 {
                text-align: center;
                background-color: #3C6EB4;
                font-size: 1.1em;
                font-weight: bold;
                color: #fff;
                margin: 0;
                padding: 0.5em;
                border-bottom: 2px solid #294172;
            }
            h3 {
                text-align: center;
                background-color: #ff0000;
                padding: 0.5em;
                color: #fff;
            }
            hr {
                display: none;
            }
            .content {
                padding: 1em 5em;
            }
            .alert {
                border: 2px solid #000;
            }

            img {
                border: 2px solid #fff;
                padding: 2px;
                margin: 2px;
            }
            a:hover img {
                border: 2px solid #294172;
            }
            .logos {
                margin: 1em;
                text-align: center;
            }
            /*]]>*/
        </style>
    </head>

    <body>
        <h1><strong>nginx error!</strong></h1>

        <div class="content">

            <h3>The page you are looking for is temporarily unavailable.  Please try again later.</h3>

            <div class="alert">
                <h2>Website Administrator</h2>
                <div class="content">
                    <p>Something has triggered an error on your
                    website.  This is the default error page for
                    <strong>nginx</strong> that is distributed with
                    Fedora.  It is located
                    <tt>/usr/share/nginx/html/50x.html</tt></p>

                    <p>You should customize this error page for your own
                    site or edit the <tt>error_page</tt> directive in
                    the <strong>nginx</strong> configuration file
                    <tt>/etc/nginx/nginx.conf</tt>.</p>

                </div>
            </div>

            <div class="logos">
                <a href="http://nginx.net/"><img
                    src="/nginx-logo.png"
                    alt="[ Powered by nginx ]"
                    width="121" height="32" /></a>

                <a href="http://fedoraproject.org/"><img 
                    src="/poweredby.png"
                    alt="[ Powered by Fedora ]" 
                    width="88" height="31" /></a>
            </div>
        </div>
    </body>
</html>

--]]

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Slabs.Stone Brick Vertical Slab
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:21
-- Luau version 6, Types version 3
-- Time taken: 0.000642 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746719428", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Black Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:22
-- Luau version 6, Types version 3
-- Time taken: 0.000642 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449960289", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Blue Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:23
-- Luau version 6, Types version 3
-- Time taken: 0.000680 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(7, 7, 186), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449960127", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Green Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:24
-- Luau version 6, Types version 3
-- Time taken: 0.000664 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(10, 44, 5), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450179091", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Red Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:25
-- Luau version 6, Types version 3
-- Time taken: 0.000648 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(162, 0, 0), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450240377", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.White Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:26
-- Luau version 6, Types version 3
-- Time taken: 0.000660 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(179, 179, 179), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450306546", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Yellow Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:27
-- Luau version 6, Types version 3
-- Time taken: 0.000668 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(130, 77, 0), nil, nil, {"Block"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450305112", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.White Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:28
-- Luau version 6, Types version 3
-- Time taken: 0.000649 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["White Poppy Flower"] = 3;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://123943904337534", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Purple Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:30
-- Luau version 6, Types version 3
-- Time taken: 0.000703 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 1;
	["Blue Poppy Flower"] = 2;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://89235393248987", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Pink Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:31
-- Luau version 6, Types version 3
-- Time taken: 0.000645 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 1;
	["White Poppy Flower"] = 2;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://132170209309891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Blue Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:32
-- Luau version 6, Types version 3
-- Time taken: 0.000643 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Blue Poppy Flower"] = 3;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://110309318204022", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Yellow Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:33
-- Luau version 6, Types version 3
-- Time taken: 0.000671 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Yellow Poppy Flower"] = 3;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://117307818692068", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Cyan Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:34
-- Luau version 6, Types version 3
-- Time taken: 0.000652 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Green Poppy Flower"] = 1;
	["Blue Poppy Flower"] = 1;
	["White Poppy Flower"] = 1;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://109191003336891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Red Potted Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:35
-- Luau version 6, Types version 3
-- Time taken: 0.000642 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 3;
}, {}, {
	SellPrice = 8;
}, nil, "rbxassetid://123687799250902", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Flowers.Rainbow Poppy Flower
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:37
-- Luau version 6, Types version 3
-- Time taken: 0.000749 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Rainbow Behaviour";
	GlowingPartName = {"Flower"};
}, nil, true, true, true, true, Color3.fromRGB(85, 0, 204), nil, nil, {"Block"}, {
	SellPrice = 5000;
}, nil, "rbxassetid://112376192089402", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Ash Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:38
-- Luau version 6, Types version 3
-- Time taken: 0.000790 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(170, 151, 116), nil, {
	["Ash Plank"] = 8;
	Iron = 1;
}, {"Wood", "Doors"}, {
	SellPrice = 55;
}, {
	Forestry = {
		["Ash Wood"] = 2;
	};
}, "rbxassetid://17449948775", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Cherry Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:39
-- Luau version 6, Types version 3
-- Time taken: 0.000722 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(133, 106, 96), nil, {
	["Cherry Plank"] = 8;
}, {"Wood", "Doors"}, {
	SellPrice = 22;
}, {
	Forestry = {
		["Cherry Wood"] = 2;
	};
}, "rbxassetid://17449987159", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Dark Hollow Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:40
-- Luau version 6, Types version 3
-- Time taken: 0.000712 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(93, 94, 118), nil, {
	["Dark Hollow Plank"] = 8;
	Iron = 2;
}, {"Wood", "Doors"}, {
	SellPrice = 110;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 2;
	};
}, "rbxassetid://17450134187", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Mahogany Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:41
-- Luau version 6, Types version 3
-- Time taken: 0.000760 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(114, 57, 47), nil, {
	["Mahogany Plank"] = 8;
}, {"Wood", "Doors"}, {
	SellPrice = 32;
}, {
	Forestry = {
		["Mahogany Wood"] = 2;
	};
}, "rbxassetid://17450211238", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Oak Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:42
-- Luau version 6, Types version 3
-- Time taken: 0.000770 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Oak Plank"] = 8;
}, {"Wood", "Doors"}, {
	SellPrice = 10;
}, {
	Forestry = {
		["Oak Wood"] = 2;
	};
}, "rbxassetid://18523721119", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Oak Trap Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:44
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Oak Plank"] = 4;
}, {"Wood", "Doors"}, {
	SellPrice = 5;
}, {
	Forestry = {
		["Oak Wood"] = 3;
	};
}, "rbxassetid://18523720158", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Ash Trap Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:45
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Ash Plank"] = 4;
	Iron = 1;
}, {"Wood", "Doors"}, {
	SellPrice = 25;
}, {
	Forestry = {
		["Ash Wood"] = 3;
	};
}, "rbxassetid://18523675807", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Mahogany Trap Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:46
-- Luau version 6, Types version 3
-- Time taken: 0.000738 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Mahogany Plank"] = 4;
}, {"Wood", "Doors"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 3;
	};
}, "rbxassetid://18523675652", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Cherry Trap Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:47
-- Luau version 6, Types version 3
-- Time taken: 0.000668 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Cherry Plank"] = 4;
}, {"Wood", "Doors"}, {
	SellPrice = 11;
}, {
	Forestry = {
		["Cherry Wood"] = 3;
	};
}, "rbxassetid://18523675180", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Doors.Dark Hollow Trap Door
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:48
-- Luau version 6, Types version 3
-- Time taken: 0.000780 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Dark Hollow Plank"] = 4;
	Iron = 1;
}, {"Wood", "Doors"}, {
	SellPrice = 55;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 3;
	};
}, "rbxassetid://18523675490", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Iron Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:49
-- Luau version 6, Types version 3
-- Time taken: 0.001008 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 720, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Iron Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	LevelCatagoryPath = {
		Mining = {"Iron Ore Block"};
	};
	RandItems = {{
		ItemId = "Iron";
		Catagory = "Item";
		Weight = 0.955;
	}, {
		ItemId = "Mystic Iron Fragment";
		Catagory = "Item";
		Weight = 0.005;
	}};
}, nil, {"Iron", "Ore", "Block"}, nil, nil, "rbxassetid://17450199694", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Basalt Rock Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:51
-- Luau version 6, Types version 3
-- Time taken: 0.000854 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 176, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(104, 107, 110), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Basalt Rock"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		ItemId = "Basalt";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Basalt", "Ore", "Block"}, nil, nil, "rbxassetid://17449961289", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Clay Mud Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:52
-- Luau version 6, Types version 3
-- Time taken: 0.000855 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 108, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Clay Mud"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		ItemId = "Clay";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Clay", "Ore", "Block"}, nil, nil, "rbxassetid://17449984589", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Coal Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:53
-- Luau version 6, Types version 3
-- Time taken: 0.000875 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 176, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(134, 136, 138), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Coal Ore"] = {
				Min = 2.877;
				Max = 2.87;
			};
		};
	};
	SetItems = {{
		ItemId = "Coal";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Coal", "Ore", "Block"}, nil, nil, "rbxassetid://17449982324", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Cobalt Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:54
-- Luau version 6, Types version 3
-- Time taken: 0.000870 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1500, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Cobalt Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		ItemId = "Cobalt";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Cobalt", "Ore", "Block"}, nil, nil, "rbxassetid://17449981582", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Copper Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:55
-- Luau version 6, Types version 3
-- Time taken: 0.000870 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 380, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Copper Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		ItemId = "Copper";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Copper", "Ore", "Block"}, nil, nil, "rbxassetid://17449979813", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Diamond Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:56
-- Luau version 6, Types version 3
-- Time taken: 0.000905 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 9600, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.99, 0.01};
	XP = {
		Mining = {
			["Diamond Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		ItemId = "Diamond";
		Catagory = "Item";
		Weight = 0.9945;
	}, {
		ItemId = "Mystic Diamond Fragment";
		Catagory = "Item";
		Weight = 0.005;
	}, {
		ItemId = "Diamond Knife";
		Catagory = "Tool";
		Weight = 0.0005;
	}};
}, nil, {"Diamond", "Ore", "Block"}, nil, nil, "rbxassetid://73869871521037", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Marble Rock Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:57
-- Luau version 6, Types version 3
-- Time taken: 0.000857 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 380, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(227, 228, 230), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Marble Rock"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		ItemId = "Marble";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Marble", "Ore", "Block"}, nil, nil, "rbxassetid://17450209800", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Silver Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:51:59
-- Luau version 6, Types version 3
-- Time taken: 0.000901 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1800, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Silver Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		ItemId = "Silver";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Silver", "Ore", "Block"}, nil, nil, "rbxassetid://17450256213", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Stone Rock Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:00
-- Luau version 6, Types version 3
-- Time taken: 0.000861 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 128, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Stone Rock"] = {
				Min = 2.877;
				Max = 2.877;
			};
		};
	};
	SetItems = {{
		ItemId = "Stone";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Stone", "Ore", "Block"}, nil, nil, "rbxassetid://17450338474", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Ore Blocks.Gold Ore Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:01
-- Luau version 6, Types version 3
-- Time taken: 0.000853 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2400, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Gold Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		ItemId = "Gold";
		Catagory = "Item";
		Weight = 0.995;
	}, {
		ItemId = "Mystic Gold Fragment";
		Catagory = "Item";
		Weight = 0.005;
	}};
}, nil, {"Gold", "Ore", "Block"}, nil, nil, "rbxassetid://17450180720", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Oak Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:02
-- Luau version 6, Types version 3
-- Time taken: 0.000659 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(208, 187, 127), nil, {
	["Oak Plank"] = 1;
}, {"Wood", "Stairs"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523720382", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Dark Hollow Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:03
-- Luau version 6, Types version 3
-- Time taken: 0.000660 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(149, 150, 173), nil, {
	["Dark Hollow Plank"] = 1;
	Output = 1;
}, {"Wood", "Stairs"}, {
	SellPrice = 10;
}, nil, "rbxassetid://17450133483", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Mahogany Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:04
-- Luau version 6, Types version 3
-- Time taken: 0.000695 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(144, 80, 67), nil, {
	["Mahogany Plank"] = 1;
}, {"Wood", "Stairs"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450210295", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Cherry Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:05
-- Luau version 6, Types version 3
-- Time taken: 0.000677 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(212, 194, 186), nil, {
	["Cherry Plank"] = 1;
}, {"Wood", "Stairs"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986270", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Ash Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:06
-- Luau version 6, Types version 3
-- Time taken: 0.000749 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(206, 186, 153), nil, {
	["Ash Plank"] = 1;
}, {"Wood", "Stairs"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449947997", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Stone Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:07
-- Luau version 6, Types version 3
-- Time taken: 0.000642 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(162, 165, 165), nil, {
	Stone = 1;
}, {"Stone", "Stairs"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450252876", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Marble Brick Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:09
-- Luau version 6, Types version 3
-- Time taken: 0.000664 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Marble = 1;
	Clay = 1;
}, {"Marble", "Stairs"}, {
	SellPrice = 6;
}, nil, "rbxassetid://18523677465", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Pink Stone Brick Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:10
-- Luau version 6, Types version 3
-- Time taken: 0.000627 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, nil, {"Stone", "Stairs"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242303", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Stone Brick Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:11
-- Luau version 6, Types version 3
-- Time taken: 0.000650 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Stone = 1;
	Clay = 1;
}, {"Stone", "Stairs"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450253960", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Red Brick Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:12
-- Luau version 6, Types version 3
-- Time taken: 0.000877 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Stone = 1;
	Clay = 1;
}, {"Stone", "Stairs"}, {
	SellPrice = 4;
}, nil, "rbxassetid://18523676573", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Stairs.Basalt Stair
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:13
-- Luau version 6, Types version 3
-- Time taken: 0.000641 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(162, 165, 165), nil, {
	Basalt = 1;
}, {"Basalt", "Stairs"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523680401", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Yellow
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:14
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Yellow Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237209", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon White
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:15
-- Luau version 6, Types version 3
-- Time taken: 0.000690 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["White Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238843", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Cyan
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:16
-- Luau version 6, Types version 3
-- Time taken: 0.000705 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238383", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Green
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:18
-- Luau version 6, Types version 3
-- Time taken: 0.000687 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238175", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:19
-- Luau version 6, Types version 3
-- Time taken: 0.000692 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237982", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Purple
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:20
-- Luau version 6, Types version 3
-- Time taken: 0.000681 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236363", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Red
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:21
-- Luau version 6, Types version 3
-- Time taken: 0.000783 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236972", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Lime
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:22
-- Luau version 6, Types version 3
-- Time taken: 0.000661 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237813", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Black
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:23
-- Luau version 6, Types version 3
-- Time taken: 0.000839 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Black Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238612", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Orange
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:25
-- Luau version 6, Types version 3
-- Time taken: 0.000676 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237487", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Light Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:26
-- Luau version 6, Types version 3
-- Time taken: 0.000668 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237644", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Neon.Neon Pink
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:27
-- Luau version 6, Types version 3
-- Time taken: 0.000846 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
}, {"Neon", "Block"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236716", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Yellow
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:28
-- Luau version 6, Types version 3
-- Time taken: 0.000681 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Yellow Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138242027", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet White
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:29
-- Luau version 6, Types version 3
-- Time taken: 0.000668 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["White Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241865", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Red
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:30
-- Luau version 6, Types version 3
-- Time taken: 0.000646 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241697", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Purple
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:31
-- Luau version 6, Types version 3
-- Time taken: 0.000727 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241524", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Pink
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:32
-- Luau version 6, Types version 3
-- Time taken: 0.000711 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241342", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Orange
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:33
-- Luau version 6, Types version 3
-- Time taken: 0.000696 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241153", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Lime
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:34
-- Luau version 6, Types version 3
-- Time taken: 0.000896 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240942", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Light Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:36
-- Luau version 6, Types version 3
-- Time taken: 0.000655 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240717", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Green
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:37
-- Luau version 6, Types version 3
-- Time taken: 0.000685 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240267", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Brown
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:38
-- Luau version 6, Types version 3
-- Time taken: 0.000806 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239677", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Blue
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:39
-- Luau version 6, Types version 3
-- Time taken: 0.000681 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239463", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Black
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:40
-- Luau version 6, Types version 3
-- Time taken: 0.000641 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Black Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239217", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Grey
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:42
-- Luau version 6, Types version 3
-- Time taken: 0.000679 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Black Dye"] = 1;
	["White Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18292259119", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Carpet.Carpet Cyan
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:43
-- Luau version 6, Types version 3
-- Time taken: 0.000657 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
}, {"Cloth", "Block"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239950", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Grey Table Lamp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:44
-- Luau version 6, Types version 3
-- Time taken: 0.000674 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	Iron = 3;
}, {}, {
	SellPrice = 1250;
}, nil, "rbxassetid://137266675231307", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Bookcase
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:45
-- Luau version 6, Types version 3
-- Time taken: 0.000658 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 64;
}, {}, {
	BuyPrice = 8000;
	SellPrice = 1024;
}, {
	Forestry = {
		["Mahogany Wood"] = 13;
	};
}, "rbxassetid://72444683872808", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Yellow Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:46
-- Luau version 6, Types version 3
-- Time taken: 0.000692 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Yellow Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://95356583713945", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Red Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:47
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://128701112153035", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Purple Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:48
-- Luau version 6, Types version 3
-- Time taken: 0.000676 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Blue Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://140334581331937", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Pink Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:50
-- Luau version 6, Types version 3
-- Time taken: 0.000695 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["White Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://110113908660978", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Lime Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:51
-- Luau version 6, Types version 3
-- Time taken: 0.000760 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Green Dye"] = 4;
	["Yellow Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://94749016214075", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Light Blue Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:52
-- Luau version 6, Types version 3
-- Time taken: 0.000700 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Blue Dye"] = 4;
	["White Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://124787850669920", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Green Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:53
-- Luau version 6, Types version 3
-- Time taken: 0.000735 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Green Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://118349050074839", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Cyan Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:54
-- Luau version 6, Types version 3
-- Time taken: 0.000679 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["White Dye"] = 2;
	["Blue Dye"] = 3;
	["Green Dye"] = 3;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://122471000769183", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Brown Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:55
-- Luau version 6, Types version 3
-- Time taken: 0.000670 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Green Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://96922813859553", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Blue Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:56
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Blue Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://124787850669920", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Blue Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:57
-- Luau version 6, Types version 3
-- Time taken: 0.000692 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Blue Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://139159251474835", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Orange Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:52:58
-- Luau version 6, Types version 3
-- Time taken: 0.000661 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Yellow Dye"] = 4;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://119571246499821", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Sofa Section
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:00
-- Luau version 6, Types version 3
-- Time taken: 0.000695 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 8;
}, {}, {
	SellPrice = 200;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://95658767672808", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Nightstand
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:01
-- Luau version 6, Types version 3
-- Time taken: 0.000696 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 12;
}, {}, {
	SellPrice = 192;
}, {
	Forestry = {
		["Mahogany Wood"] = 14;
	};
}, "rbxassetid://135954876637027", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Sofa Section Corner
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:02
-- Luau version 6, Types version 3
-- Time taken: 0.000640 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 8;
}, {}, {
	SellPrice = 200;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://84041874646395", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Wood Stool
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:03
-- Luau version 6, Types version 3
-- Time taken: 0.000662 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 16;
}, {}, {
	BuyPrice = 500;
	SellPrice = 128;
}, {
	Forestry = {
		["Oak Wood"] = 4;
	};
}, "rbxassetid://95076402124243", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Red Table Lamp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:04
-- Luau version 6, Types version 3
-- Time taken: 0.000891 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 2;
	Glass = 1;
}, {}, {
	SellPrice = 1250;
}, nil, "rbxassetid://96336224703055", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Gold Table Lamp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:05
-- Luau version 6, Types version 3
-- Time taken: 0.000692 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	Gold = 1;
}, {}, {
	SellPrice = 1300;
}, nil, "rbxassetid://122993425239263", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Plate Set
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:06
-- Luau version 6, Types version 3
-- Time taken: 0.000742 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Silver = 8;
}, {}, {
	SellPrice = 360;
}, {
	Mining = {
		["Silver Ore"] = 4;
	};
}, "rbxassetid://109192070373117", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Red Royal Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:07
-- Luau version 6, Types version 3
-- Time taken: 0.000694 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 2;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Ash Wood"] = 32;
	Cloth = 128;
	["Red Dye"] = 8;
}, {}, {
	SellPrice = 1920;
}, {
	Forestry = {
		["Ash Wood"] = 10;
	};
}, "rbxassetid://131010761992002", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Sofa Section Basic
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:09
-- Luau version 6, Types version 3
-- Time taken: 0.000669 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 4;
}, {}, {
	SellPrice = 160;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://76686637133653", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Mug
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:10
-- Luau version 6, Types version 3
-- Time taken: 0.000705 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 2;
	["Red Dye"] = 1;
}, {}, {
	SellPrice = 6;
}, {
	Mining = {
		["Clay Mud"] = 3;
	};
}, "rbxassetid://91798667238490", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Large Umbrella
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:11
-- Luau version 6, Types version 3
-- Time taken: 0.000638 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Silver = 16;
	Cloth = 16;
}, {}, {
	SellPrice = 880;
}, {
	Mining = {
		["Silver Ore"] = 5;
	};
}, "rbxassetid://140440166061583", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Tall Lamp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:12
-- Luau version 6, Types version 3
-- Time taken: 0.000646 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	Silver = 8;
}, {}, {
	SellPrice = 1600;
}, nil, "rbxassetid://129506083564962", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Metal Grate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:13
-- Luau version 6, Types version 3
-- Time taken: 0.000714 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Iron = 8;
}, {}, {
	SellPrice = 120;
}, {
	Mining = {
		["Iron Ore"] = 3;
	};
}, "rbxassetid://80503716410729", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Teal Luxury Sofa
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:14
-- Luau version 6, Types version 3
-- Time taken: 0.000709 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Ash Wood"] = 16;
	Cloth = 64;
	["Blue Dye"] = 8;
	["Green Dye"] = 8;
}, {}, {
	SellPrice = 1000;
}, {
	Forestry = {
		["Ash Wood"] = 5;
	};
}, "rbxassetid://96469256030435", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Teal Table Lamp
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:15
-- Luau version 6, Types version 3
-- Time taken: 0.000702 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["Green Dye"] = 1;
	Glass = 1;
}, {}, {
	SellPrice = 1250;
}, nil, "rbxassetid://88274230006419", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Tumbler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:16
-- Luau version 6, Types version 3
-- Time taken: 0.000651 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 4;
	Iron = 8;
}, {}, {
	SellPrice = 180;
}, {
	Forestry = {
		["Mahogany Wood"] = 5;
	};
}, "rbxassetid://89173462079513", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Black Bed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:17
-- Luau version 6, Types version 3
-- Time taken: 0.000705 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Black Dye"] = 8;
}, {}, {
	SellPrice = 250;
}, nil, "rbxassetid://112453688410246", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Furniture.Campfire
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:19
-- Luau version 6, Types version 3
-- Time taken: 0.000710 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Stone = 16;
	Coal = 8;
	Flame = 1;
}, {}, {
	SellPrice = 89;
}, {
	Mining = {
		["Stone Rock"] = 5;
	};
}, "rbxassetid://135348259891202", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.Jessetc Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:20
-- Luau version 6, Types version 3
-- Time taken: 0.000600 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://75238177627312", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.Gravycatman Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:21
-- Luau version 6, Types version 3
-- Time taken: 0.000607 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://120719695915734", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.Sisterguard Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:22
-- Luau version 6, Types version 3
-- Time taken: 0.000628 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://94025977688238", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.DV Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:23
-- Luau version 6, Types version 3
-- Time taken: 0.000801 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://128746625330823", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.Hoopie Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:24
-- Luau version 6, Types version 3
-- Time taken: 0.000610 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://139759850019143", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.Witchycatlady Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:25
-- Luau version 6, Types version 3
-- Time taken: 0.000628 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://86236381833529", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Creator.TanqR Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:27
-- Luau version 6, Types version 3
-- Time taken: 0.000605 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, nil, nil, nil, "rbxassetid://75616834948516", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.DarkHollow Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:28
-- Luau version 6, Types version 3
-- Time taken: 0.000697 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Dark Hollow Plank"] = 4;
}, {"Wood", "Fence"}, {
	SellPrice = 40;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 15;
	};
}, "rbxassetid://127589614043198", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.Mahogany Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:29
-- Luau version 6, Types version 3
-- Time taken: 0.000708 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Mahogany Plank"] = 4;
}, {"Wood", "Fence"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 15;
	};
}, "rbxassetid://132520176706380", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.StoneBrick Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:30
-- Luau version 6, Types version 3
-- Time taken: 0.000720 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	Stone = 10;
	Clay = 10;
}, {"Stone", "Fence"}, {
	SellPrice = 40;
}, {
	Mining = {
		["Clay Mud"] = 14;
	};
}, "rbxassetid://132629333900553", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.Ash Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:31
-- Luau version 6, Types version 3
-- Time taken: 0.000721 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Ash Plank"] = 4;
}, {"Wood", "Fence"}, {
	SellPrice = 20;
}, {
	Forestry = {
		["Ash Wood"] = 15;
	};
}, "rbxassetid://123278750868057", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.Oak Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:32
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Oak Plank"] = 4;
}, {"Wood", "Fence"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Oak Wood"] = 15;
	};
}, "rbxassetid://110347022678499", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.Cherry Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:33
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Cherry Plank"] = 4;
}, {"Wood", "Fence"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Cherry Wood"] = 15;
	};
}, "rbxassetid://75289427990940", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Fences.Stone Fence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:34
-- Luau version 6, Types version 3
-- Time taken: 0.000732 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	Stone = 10;
}, {"Stone", "Fence"}, {
	SellPrice = 20;
}, {
	Mining = {
		["Stone Rock"] = 15;
	};
}, "rbxassetid://95560713252316", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Blocks.Trophies.Technoblade Trophy
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:35
-- Luau version 6, Types version 3
-- Time taken: 0.000541 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, nil, {}, nil, nil, "rbxassetid://134303220276264", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Carrot Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:36
-- Luau version 6, Types version 3
-- Time taken: 0.001059 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 36;
		Max = 44;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Carrot = 0.7;
			};
		};
		SetItems = {{
			ItemId = "Carrot";
			Catagory = "Food";
		}, {
			ItemId = "Carrot Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			ItemId = "Carrot Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(233, 132, 52), nil, nil, {}, {
	BuyPrice = 275;
	SellPrice = 27;
}, {
	Farming = {
		Overall = 2;
	};
}, "rbxassetid://17449987576", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Strawberry Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:37
-- Luau version 6, Types version 3
-- Time taken: 0.001068 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 70;
		Max = 78;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Strawberry = 0.4;
			};
		};
		SetItems = {{
			ItemId = "Strawberry";
			Catagory = "Food";
		}, {
			ItemId = "Strawberry Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			ItemId = "Strawberry Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(44, 93, 16), nil, nil, {}, {
	BuyPrice = 2400;
	SellPrice = 240;
}, {
	Farming = {
		Overall = 9;
	};
}, "rbxassetid://17450252284", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.White Mushroom Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:39
-- Luau version 6, Types version 3
-- Time taken: 0.001085 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 22;
		Max = 30;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				["White Mushroom"] = 0.1;
			};
		};
		SetItems = {{
			ItemId = "White Mushroom";
			Catagory = "Food";
		}, {
			ItemId = "White Mushroom Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.998;
		}, {
			ItemId = "White Mushroom Seed";
			Catagory = "Block";
			Weight = 0.002;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(220, 220, 220), nil, nil, {}, {
	BuyPrice = 4500;
	SellPrice = 450;
}, {
	Farming = {
		Overall = 13;
	};
}, "rbxassetid://17450306939", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Red Potato Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:40
-- Luau version 6, Types version 3
-- Time taken: 0.001140 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 70;
		Max = 78;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				["Red Potato"] = 0.3;
			};
		};
		SetItems = {{
			ItemId = "Red Potato";
			Catagory = "Food";
		}, {
			ItemId = "Red Potato Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			ItemId = "Red Potato Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(128, 79, 56), nil, nil, {}, {
	BuyPrice = 3600;
	SellPrice = 360;
}, {
	Farming = {
		Overall = 11;
	};
}, "rbxassetid://17450240206", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Wheat Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:41
-- Luau version 6, Types version 3
-- Time taken: 0.001032 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 18;
		Max = 22;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Wheat = 0.8;
			};
		};
		SetItems = {{
			ItemId = "Wheat";
			Catagory = "Food";
		}, {
			ItemId = "Wheat Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.95;
		}, {
			ItemId = "Wheat Seed";
			Catagory = "Block";
			Weight = 0.05;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(202, 184, 94), nil, nil, {}, {
	BuyPrice = 90;
	SellPrice = 9;
}, nil, "rbxassetid://17450307297", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Corn Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:42
-- Luau version 6, Types version 3
-- Time taken: 0.001094 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 60;
		Max = 68;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Corn = 0.5;
			};
		};
		SetItems = {{
			ItemId = "Corn";
			Catagory = "Food";
		}, {
			ItemId = "Corn Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			ItemId = "Corn Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, false, true, Color3.fromRGB(198, 180, 93), nil, nil, {}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, {
	Farming = {
		Overall = 7;
	};
}, "rbxassetid://17449979003", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Tomato Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:43
-- Luau version 6, Types version 3
-- Time taken: 0.001115 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 60;
		Max = 68;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Tomato = 0.6;
			};
		};
		SetItems = {{
			ItemId = "Tomato";
			Catagory = "Food";
		}, {
			ItemId = "Tomato Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			ItemId = "Tomato Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, false, true, Color3.fromRGB(41, 92, 14), nil, nil, {}, {
	BuyPrice = 900;
	SellPrice = 90;
}, {
	Farming = {
		Overall = 5;
	};
}, "rbxassetid://17450296427", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Crops.Watermelon Seed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:44
-- Luau version 6, Types version 3
-- Time taken: 0.001156 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 68;
		Max = 76;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Watermelon = 0.05;
			};
		};
		SetItems = {{
			ItemId = "Watermelon";
			Catagory = "Food";
		}, {
			ItemId = "Watermelon Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.998;
		}, {
			ItemId = "Watermelon Seed";
			Catagory = "Block";
			Weight = 0.002;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {}, {
	BuyPrice = 6500;
	SellPrice = 700;
}, {
	Farming = {
		Overall = 15;
	};
}, "rbxassetid://17450307499", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.OakTreeE
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:45
-- Luau version 6, Types version 3
-- Time taken: 0.000965 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 90, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		ItemId = "Oak Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.OakTreeD
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:46
-- Luau version 6, Types version 3
-- Time taken: 0.000863 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 135, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		ItemId = "Oak Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.OakTreeC
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:46
-- Luau version 6, Types version 3
-- Time taken: 0.000863 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 135, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		ItemId = "Oak Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.OakTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:47
-- Luau version 6, Types version 3
-- Time taken: 0.000833 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 180, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 56, 20), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		ItemId = "Oak Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.OakTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:49
-- Luau version 6, Types version 3
-- Time taken: 0.000976 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 270, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 56, 20), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		ItemId = "Oak Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.AshTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:50
-- Luau version 6, Types version 3
-- Time taken: 0.000915 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 760, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(34, 29, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Ash Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Ash Wood"};
	};
	SetItems = {{
		ItemId = "Ash Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Ash Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.AshTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:51
-- Luau version 6, Types version 3
-- Time taken: 0.000902 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1270, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(39, 32, 24), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Ash Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Ash Wood"};
	};
	SetItems = {{
		ItemId = "Ash Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Ash Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.CherryTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:52
-- Luau version 6, Types version 3
-- Time taken: 0.000830 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 210, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(88, 22, 8), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Cherry Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Cherry Wood"};
	};
	SetItems = {{
		ItemId = "Cherry Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Cherry Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.CherryTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:53
-- Luau version 6, Types version 3
-- Time taken: 0.000921 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(88, 22, 8), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Cherry Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Cherry Wood"};
	};
	SetItems = {{
		ItemId = "Cherry Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Cherry Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.MahoganyTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:54
-- Luau version 6, Types version 3
-- Time taken: 0.000860 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 420, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(56, 45, 44), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Mahogany Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Mahogany Wood"};
	};
	SetItems = {{
		ItemId = "Mahogany Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Mahogany Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.MahoganyTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:55
-- Luau version 6, Types version 3
-- Time taken: 0.001002 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 700, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(48, 38, 37), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Mahogany Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Mahogany Wood"};
	};
	SetItems = {{
		ItemId = "Mahogany Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Mahogany Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTreeE
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:56
-- Luau version 6, Types version 3
-- Time taken: 0.001630 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1410, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTreeD
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:58
-- Luau version 6, Types version 3
-- Time taken: 0.000940 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1880, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTreeC
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:59
-- Luau version 6, Types version 3
-- Time taken: 0.001085 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:00
-- Luau version 6, Types version 3
-- Time taken: 0.000906 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2820, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:01
-- Luau version 6, Types version 3
-- Time taken: 0.000988 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 3290, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTallTreeA
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:01
-- Luau version 6, Types version 3
-- Time taken: 0.000988 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 3290, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTallTreeB
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:00
-- Luau version 6, Types version 3
-- Time taken: 0.000906 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2820, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTallTreeC
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:59
-- Luau version 6, Types version 3
-- Time taken: 0.001085 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTallTreeD
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:58
-- Luau version 6, Types version 3
-- Time taken: 0.000940 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1880, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Trees.DarkHollowTallTreeE
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:53:56
-- Luau version 6, Types version 3
-- Time taken: 0.001630 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1410, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		ItemId = "Dark Hollow Wood";
		Catagory = "Block";
		Weight = 1;
	}, {
		ItemId = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.5;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Chests.Dragonstone Chest
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:02
-- Luau version 6, Types version 3
-- Time taken: 0.000745 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 128;
}, nil, true, true, true, true, Color3.fromRGB(17, 63, 137), nil, nil, {}, nil, nil, "rbxassetid://119807050069973", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Chests.Large Chest
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:03
-- Luau version 6, Types version 3
-- Time taken: 0.000803 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 32;
}, nil, true, true, true, true, Color3.fromRGB(153, 90, 38), nil, {
	["Cherry Wood"] = 256;
	Iron = 64;
}, {}, {
	BuyPrice = 12000;
	SellPrice = 3000;
}, {
	Forestry = {
		["Oak Wood"] = 5;
	};
}, "rbxassetid://104774911865969", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Chests.Small Chest
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:04
-- Luau version 6, Types version 3
-- Time taken: 0.000826 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 16;
}, nil, true, true, true, true, Color3.fromRGB(57, 21, 5), nil, {
	["Oak Wood"] = 32;
	Iron = 8;
}, {}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, {
	Forestry = {
		["Oak Wood"] = 1;
	};
}, "rbxassetid://70562097982665", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Chests.Diamond Chest
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:05
-- Luau version 6, Types version 3
-- Time taken: 0.000709 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 80, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 64;
}, nil, true, true, true, true, Color3.fromRGB(0, 150, 153), nil, {
	Diamond = 64;
	Silver = 64;
}, {}, {
	BuyPrice = 750000;
	SellPrice = 15700;
}, {
	Mining = {
		["Diamond Ore"] = 10;
	};
}, "rbxassetid://93016932178431", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Carrot Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:06
-- Luau version 6, Types version 3
-- Time taken: 0.000710 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Carrot Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 25000;
	SellPrice = 2500;
}, {
	Farming = {
		Carrot = 20;
	};
}, "rbxassetid://17860237450", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Cherry Wood Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:07
-- Luau version 6, Types version 3
-- Time taken: 0.000695 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Cherry Wood Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 50000;
	SellPrice = 5000;
}, {
	Forestry = {
		["Cherry Wood"] = 20;
	};
}, "rbxassetid://17860237199", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Basalt Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:08
-- Luau version 6, Types version 3
-- Time taken: 0.000877 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Basalt Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Mining = {
		["Basalt Rock"] = 16;
	};
}, "rbxassetid://17860237673", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Clay Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:10
-- Luau version 6, Types version 3
-- Time taken: 0.000682 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Clay Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Mining = {
		["Clay Mud"] = 15;
	};
}, "rbxassetid://17860236943", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Coal Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:11
-- Luau version 6, Types version 3
-- Time taken: 0.000800 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Coal Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Mining = {
		["Coal Ore"] = 15;
	};
}, "rbxassetid://17860236638", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Cobalt Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:12
-- Luau version 6, Types version 3
-- Time taken: 0.000713 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Cobalt Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Mining = {
		["Cobalt Ore"] = 22;
	};
}, "rbxassetid://17860236450", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Gold Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:13
-- Luau version 6, Types version 3
-- Time taken: 0.000687 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Gold Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Mining = {
		["Gold Ore"] = 28;
	};
}, "rbxassetid://17860235499", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})


-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Copper Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:14
-- Luau version 6, Types version 3
-- Time taken: 0.000721 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Copper Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 30000;
	SellPrice = 3000;
}, {
	Mining = {
		["Copper Ore"] = 20;
	};
}, "rbxassetid://17860236342", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Iron Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:15
-- Luau version 6, Types version 3
-- Time taken: 0.000812 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Iron Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Mining = {
		["Iron Ore"] = 20;
	};
}, "rbxassetid://17860235299", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Mahogany Wood Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:16
-- Luau version 6, Types version 3
-- Time taken: 0.000679 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Mahogany Wood Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Forestry = {
		["Mahogany Wood"] = 20;
	};
}, "rbxassetid://17860235088", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Silver Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:17
-- Luau version 6, Types version 3
-- Time taken: 0.000892 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Silver Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Mining = {
		["Silver Ore"] = 20;
	};
}, "rbxassetid://17860234187", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Dark Hollow Wood Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:19
-- Luau version 6, Types version 3
-- Time taken: 0.000682 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Dark Hollow Wood Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 20;
	};
}, "rbxassetid://17860235760", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Tomato Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:20
-- Luau version 6, Types version 3
-- Time taken: 0.000751 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Tomato Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 40000;
	SellPrice = 4000;
}, {
	Farming = {
		Tomato = 20;
	};
}, "rbxassetid://17860233668", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Corn Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:21
-- Luau version 6, Types version 3
-- Time taken: 0.000738 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Corn Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 50000;
	SellPrice = 5000;
}, {
	Farming = {
		Corn = 20;
	};
}, "rbxassetid://17860236119", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Strawberry Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:22
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Strawberry Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Farming = {
		Strawberry = 20;
	};
}, "rbxassetid://17860233872", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.White Mushroom Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:23
-- Luau version 6, Types version 3
-- Time taken: 0.000708 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "White Mushroom Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 400000;
	SellPrice = 40000;
}, {
	Farming = {
		["White Mushroom"] = 20;
	};
}, "rbxassetid://17860238878", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Red Potato Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:24
-- Luau version 6, Types version 3
-- Time taken: 0.000714 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Red Potato Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Farming = {
		["Red Potato"] = 20;
	};
}, "rbxassetid://17860234326", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Watermelon Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:25
-- Luau version 6, Types version 3
-- Time taken: 0.000695 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Watermelon Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Farming = {
		Watermelon = 20;
	};
}, "rbxassetid://17860233513", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Ash Wood Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:26
-- Luau version 6, Types version 3
-- Time taken: 0.000677 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Ash Wood Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Forestry = {
		["Ash Wood"] = 20;
	};
}, "rbxassetid://17860237940", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Oak Wood Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:27
-- Luau version 6, Types version 3
-- Time taken: 0.000748 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Oak Wood Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 20000;
	SellPrice = 2000;
}, {
	Forestry = {
		["Oak Wood"] = 20;
	};
}, "rbxassetid://17860234486", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Wheat Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:28
-- Luau version 6, Types version 3
-- Time taken: 0.000684 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Wheat Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Farming = {
		Wheat = 10;
	};
}, "rbxassetid://17860233354", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Stone Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:29
-- Luau version 6, Types version 3
-- Time taken: 0.000775 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Stone Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Mining = {
		["Stone Rock"] = 10;
	};
}, "rbxassetid://17860234060", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Marble Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:31
-- Luau version 6, Types version 3
-- Time taken: 0.000669 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Marble Underling";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 25000;
	SellPrice = 2500;
}, {
	Mining = {
		["Marble Rock"] = 20;
	};
}, "rbxassetid://17860234788", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.Underling Anchors.Flower Underling Anchor
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:32
-- Luau version 6, Types version 3
-- Time taken: 0.000647 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Behaviour";
	UnderlingType = "Flower Underling";
}, nil, true, true, false, true, Color3.fromRGB(131, 43, 143), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, nil, "rbxassetid://94126383320426", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.ObbyBlocks.Spiked Floor Trap
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:33
-- Luau version 6, Types version 3
-- Time taken: 0.000679 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "SpikeTrap Behaviour";
	TickCount = {
		Defult = 1;
	};
}, nil, true, true, false, true, Color3.fromRGB(17, 17, 17), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://111456247415355", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.ObbyBlocks.Kill Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:34
-- Luau version 6, Types version 3
-- Time taken: 0.000641 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "Damage Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(45, 45, 45), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://130917596997238", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.ObbyBlocks.Disappear Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:35
-- Luau version 6, Types version 3
-- Time taken: 0.000638 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Disappear Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(86, 86, 86), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://98027699013985", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.ObbyBlocks.Checkpoint Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:36
-- Luau version 6, Types version 3
-- Time taken: 0.000697 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Checkpoint Behaviour";
	BlockType = "Checkpoint";
}, nil, true, true, false, false, Color3.fromRGB(220, 116, 255), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://94553218266210", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Block.DefinitionModules.ObbyBlocks.Finish Line Block
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:37
-- Luau version 6, Types version 3
-- Time taken: 0.000774 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "Checkpoint Behaviour";
	BlockType = "Finish Line";
}, nil, true, true, false, false, Color3.fromRGB(220, 116, 255), nil, nil, {}, {
	SellPrice = 20;
}, nil, "rbxassetid://106322001446304", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:38
-- Luau version 6, Types version 3
-- Time taken: 0.000926 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 12
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Activate = arg2
	module.Inititate = arg3
	module.ValidateFunction = arg4
	module.AdjChangeFunction = arg5
	module.GetLootData = arg6
	module.DestroyingFunction = arg7
	return setmetatable(module, module_2_upvr)
end
local CoreUtil_upvr = require(game:GetService("ReplicatedStorage").CommonModules.CoreUtil)
function module_2_upvr.Validate(arg1, arg2, arg3, arg4, arg5) -- Line 25
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
	local var6
	if not var6 then
		local var7 = any_RequireDefinitions_result1.Block[arg2]
		if var7 then
			var7 = any_RequireDefinitions_result1.Block[arg2].BehaviourData
		end
		var6 = var7
		if not var6 then return end
	end
	return arg1.ValidateFunction(arg2, arg3, arg4, var6)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Stair Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:39
-- Luau version 6, Types version 3
-- Time taken: 0.003519 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local tbl_upvr = {"InLeft", "InRight", "OutLeft", "OutRight"}
function NormaliseVector(arg1) -- Line 18
	return Vector3.new(math.round(arg1.X), math.round(arg1.Y), math.round(arg1.Z))
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function StairChange(arg1, arg2, arg3, arg4) -- Line 22
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 128 start (CF ANALYSIS FAILED)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if arg4 then
		if arg4 == 0 then
		else
			SOME:Destroy()
			SOME = CoreUtil:CreateBlockModel(ReplicatedStorage_upvr.Prefabs.StairFamilies:FindFirstChild(arg1.Id):FindFirstChild(tbl_upvr[arg4]), CoreUtil:ToWorldPos(arg1.Position), arg1.Rotation, workspace.Island)
			SOME.Name = arg1.Index
		end
	end
	local tbl = {
		Front = nil;
		Back = nil;
		Left = nil;
		Right = nil;
	}
	local var8 = SOME
	if not var8 then return end
	if var8:IsA("Model") then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local pairs_result1, pairs_result2, pairs_result3 = pairs(CoreUtil:GetAdjacentPositions(arg1.Position))
	-- KONSTANTERROR: [0] 1. Error Block 128 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [271] 177. Error Block 31 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [271] 177. Error Block 31 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 74. Error Block 10 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 74. Error Block 10 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 127
	return true
end
function Initialise(arg1) -- Line 131
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var12
	if var12 then return end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var12 = arg1.TickProgress.Stage
		return var12
	end
	if not arg1.TickProgress or not INLINED() then
		var12 = nil
	end
	if not arg1.TickProgress then
		arg1.TickProgress = {
			Stage = 0;
		}
	end
	return StairChange(arg1, true, nil, var12)
end
function Validate(arg1, arg2, arg3, arg4) -- Line 139
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 143
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return StairChange(arg2, arg1, arg3)
end
function GetLootData(arg1) -- Line 149
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 154
	return true
end
function SpawnExtra(arg1) -- Line 158
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Dirt Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:40
-- Luau version 6, Types version 3
-- Time taken: 0.001735 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function Activate(arg1) -- Line 12
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService = Knit_upvr.GetService("BlockService")
		local Position = arg1.Position
		BlockService:DestroyBlock(Position)
		BlockService:PlaceBlock(nil, "Grass", Position)
	end
end
function Initialise(arg1) -- Line 27
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local any_GetValueAtPosition_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(BlockService_2.Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y + 1;
		Z = arg1.Position.Z;
	})
	if not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1 == 0 then
		BlockService_2:ToggleTickObject(true, arg1)
	else
		BlockService_2:ToggleTickObject(false, arg1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 45
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 49
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y + 1 and arg3.Position.Z == arg2.Position.Z then
		local BlockService_3 = Knit_upvr.GetService("BlockService")
		if arg1 == "Destroying" then
			BlockService_3:ToggleTickObject(true, arg2)
			return
		end
		if arg1 == "Placing" then
			BlockService_3:ToggleTickObject(false, arg2)
		end
	end
end
function GetLootData(arg1, arg2) -- Line 63
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 68
	return true
end
function SpawnExtra(arg1) -- Line 72
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Crop Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:42
-- Luau version 6, Types version 3
-- Time taken: 0.003075 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	local Part = arg1.Part
	if not Part then
		warn("ERROR INITIALISING CROP:"..tostring(arg1.Id))
	else
		for _, v in pairs(Part.Stages:GetChildren()) do
			local var13
			if tonumber(v.Name) == arg2 then
				var13 = 0
			else
				var13 = 1
			end
			v.Transparency = var13
		end
	end
end
function Activate(arg1) -- Line 25
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local any_RequireDefinitions_result1_2 = CoreUtil_upvr:RequireDefinitions()
		local BlockService = Knit_upvr.GetService("BlockService")
		BlockService:UpdateTickProgress(arg1, {
			Stage = arg1.TickProgress.Stage + 1;
		})
		UpdateModel(arg1, arg1.TickProgress.Stage)
		local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
		if arg1.TickProgress.Stage < any_RequireDefinitions_result1_2.Block[arg1.Id].BehaviourData.StageCount then
			if SOME_2 then
				SOME_2.HB.ParticleEmitter.Enabled = false
			end
			return true
		end
		if arg1.TickProgress.Stage == any_RequireDefinitions_result1_2.Block[arg1.Id].BehaviourData.StageCount then
			if SOME_2 then
				SOME_2.HB.ParticleEmitter.Enabled = true
			end
			BlockService.Client.UpdateBlockObject:FireAll(arg1)
		end
		BlockService:ToggleTickObject(false, arg1)
	end
end
function Initialise(arg1) -- Line 54
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
		local SOME = workspace.Island:FindFirstChild(arg1.Index)
		if not arg1.TickProgress or arg1.TickProgress.Stage < any_RequireDefinitions_result1.Block[arg1.Id].BehaviourData.StageCount then
			if SOME then
				SOME.HB.ParticleEmitter.Enabled = false
			end
			Knit_upvr.GetService("BlockService"):ToggleTickObject(true, arg1)
		elseif arg1.TickProgress.Stage == any_RequireDefinitions_result1.Block[arg1.Id].BehaviourData.StageCount and SOME then
			SOME.HB.ParticleEmitter.Enabled = true
		end
		UpdateModel(arg1, arg1.TickProgress.Stage or 1)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 78
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 13 start (CF ANALYSIS FAILED)
	if RunService_upvr:IsServer() then
	else
	end
	-- KONSTANTERROR: [0] 1. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [58] 40. Error Block 8 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [58] 40. Error Block 8 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 43. Error Block 9 start (CF ANALYSIS FAILED)
	do
		return true
	end
	-- KONSTANTERROR: [61] 43. Error Block 9 end (CF ANALYSIS FAILED)
end
function AdjacentChange(arg1, arg2, arg3) -- Line 101
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var20 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService_2 = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService_2.IslandOwner then
			InventoryService:CollectLoot(BlockService_2.IslandOwner, InventoryService:GenerateLootTable(var20.LootData, var20):GenerateLoot())
		end
		BlockService_2:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 123
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	if arg2.TickProgress.Stage == CoreUtil_upvr:RequireDefinitions().Block[arg2.Id].BehaviourData.StageCount then
		return arg1.BehaviourData.GrownLootData
	end
	return arg1.LootData
end
function Destroying(arg1) -- Line 136
	return true
end
function SpawnExtra(arg1) -- Line 141
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Door Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:43
-- Luau version 6, Types version 3
-- Time taken: 0.004621 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 51 start (CF ANALYSIS FAILED)
	local SOME = workspace.Island:FindFirstChild(arg1)
	local var38
	if not SOME then
		var38 = arg1
		warn("ERROR INITIALISING DOOR:"..tostring(var38))
		return
	end
	local pairs_result1, pairs_result2, pairs_result3 = pairs(SOME.Stages:GetChildren())
	-- KONSTANTERROR: [0] 1. Error Block 51 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [181] 126. Error Block 78 start (CF ANALYSIS FAILED)
	var38.CanQuery = false
	if tonumber(var38.Name) == arg2 then
	else
	end
	var38.ProximityPrompt.Enabled = false
	-- KONSTANTERROR: [181] 126. Error Block 78 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 22. Error Block 85 start (CF ANALYSIS FAILED)
	if arg2 == 1 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [199.13]
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
				-- KONSTANTWARNING: GOTO [158] #110
			end
		end
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if false == arg2 then
		-- KONSTANTWARNING: GOTO [169] #118
	end
	-- KONSTANTERROR: [29] 22. Error Block 85 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 64
	return true
end
function Initialise(arg1) -- Line 68
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_upvr = Knit_upvr.GetService("BlockService")
		local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME_2 then
			warn("ERROR INITIALISING DOOR:"..tostring(arg1.Index))
			return
		end
		SOME_2.Stages[1].ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 79
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 1 then
				BlockService_upvr:UpdateTickProgress(arg1, {
					Stage = 2;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		SOME_2.Stages[2].ProximityPrompt.Triggered:Connect(function(arg1_3) -- Line 85
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 2 then
				BlockService_upvr:UpdateTickProgress(arg1, {
					Stage = 1;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		if not arg1.TickProgress then
			BlockService_upvr:UpdateTickProgress(arg1, {
				Stage = 2;
			})
		end
		UpdateModel(arg1.Index, arg1.TickProgress.Stage)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 100
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	local var49
	if RunService_upvr:IsServer() then
		var49 = Knit_upvr.GetService("BlockService").Blocks
	else
		var49 = Knit_upvr.GetController("BlockController").Blocks
	end
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(var49, {
		X = arg2.X;
		Y = arg2.Y - 1;
		Z = arg2.Z;
	}) then
		return true
	end
end
function AdjacentChange(arg1, arg2, arg3) -- Line 119
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var51 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService.IslandOwner then
			InventoryService:CollectLoot(BlockService.IslandOwner, InventoryService:GenerateLootTable(var51.LootData, var51):GenerateLoot())
		end
		BlockService:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 141
	return nil
end
function Destroying(arg1) -- Line 145
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 150
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Underling Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:44
-- Luau version 6, Types version 3
-- Time taken: 0.001921 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function ToggleAnchor(arg1, arg2) -- Line 12
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	coroutine.wrap(function() -- Line 14
		--[[ Upvalues[3]:
			[1]: ReplicatedStorage_upvr (copied, readonly)
			[2]: arg1 (readonly)
			[3]: arg2 (readonly)
		]]
		local MobService = require(ReplicatedStorage_upvr.Packages.Knit).GetService("MobService")
		if arg1 then
			return MobService:StartAnchor(arg2)
		end
		return MobService:DestroyAnchor(arg2)
	end)()
end
function Activate(arg1) -- Line 30
	return true
end
local Promise_upvr = require(ReplicatedStorage_upvr.Packages.Promise)
function Initialise(arg1) -- Line 34
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Promise_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return Promise_upvr.new(function() -- Line 38
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
	end)
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function Validate(arg1, arg2, arg3, arg4) -- Line 46
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
		return true
	end
	local BlockService = Knit_upvr.GetService("BlockService")
	local any_GetData_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(BlockService.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then return end
	if any_GetData_result1.AnchorSlots <= Knit_upvr.GetService("MobService").AnchorSlotsPlaced then
		Knit_upvr.GetService("PlayerService").Client.Warn:Fire(BlockService.IslandOwner, "You have the max underlings on your island for your mastery level")
		return false
	end
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 69
	return true
end
function GetLootData(arg1) -- Line 73
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 78
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return ToggleAnchor(false, arg1)
end
function SpawnExtra(arg1) -- Line 83
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Chest Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:45
-- Luau version 6, Types version 3
-- Time taken: 0.001407 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
function Activate(arg1) -- Line 12
	return true
end
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 16
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local any_GetData_result1 = CoreUtil_upvr:GetData(Knit_upvr.GetService("BlockService").IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then return end
	local tostring_result1 = tostring(arg1.Position.X..'/'..arg1.Position.Y..'/'..arg1.Position.Z)
	if not any_GetData_result1.Storages[tostring_result1] then
		any_GetData_result1.Storages[tostring_result1] = {
			StorageCap = CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.ChestSize;
			Storage = {};
		}
	end
	Knit_upvr.GetService("InventoryService"):ToggleChestIndestructibilitys()
	workspace.Island[arg1.Index].HB.ProximityPrompt.Enabled = true
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 56
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 60
	return true
end
function GetLootData(arg1, arg2) -- Line 64
	return arg1.LootData
end
function Destroying(arg1) -- Line 68
	return true
end
function SpawnExtra(arg1) -- Line 72
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Grass Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:46
-- Luau version 6, Types version 3
-- Time taken: 0.002694 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function ToDirt(arg1) -- Line 10
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
	]]
	local BlockService = Knit_upvr.GetService("BlockService")
	local any_Copy_result1 = TableUtil_upvr.Copy(arg1.Position)
	if not BlockService.IslandInitialised then
	else
		BlockService:DestroyBlock(any_Copy_result1)
		BlockService:PlaceBlock(nil, "Dirt", any_Copy_result1)
	end
end
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function Activate(arg1) -- Line 23
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_2 = Knit_upvr.GetService("BlockService")
		local Position = arg1.Position
		BlockService_2:DestroyBlock(Position)
		BlockService_2:PlaceBlock(nil, CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.Morph, Position)
	end
end
function Initialise(arg1) -- Line 38
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(Knit_upvr.GetService("BlockService").Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y + 1;
		Z = arg1.Position.Z;
	}) then
		ToDirt(arg1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 54
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 58
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		if arg2.Id == "Grass" and arg3.Id ~= "Grass" and arg3.Id ~= "Tilled Dirt" and arg3.Id ~= "Dirt" then return end
		if arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y + 1 and arg3.Position.Z == arg2.Position.Z and arg1 == "Placing" then
			ToDirt(arg2)
		end
	end
end
function GetLootData(arg1, arg2) -- Line 69
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 74
	return true
end
function SpawnExtra(arg1) -- Line 78
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Trap Door Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:47
-- Luau version 6, Types version 3
-- Time taken: 0.004476 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 51 start (CF ANALYSIS FAILED)
	local SOME = workspace.Island:FindFirstChild(arg1)
	local var38
	if not SOME then
		var38 = arg1
		warn("ERROR INITIALISING TRAP DOOR:"..tostring(var38))
		return
	end
	local pairs_result1, pairs_result2, pairs_result3 = pairs(SOME.Stages:GetChildren())
	-- KONSTANTERROR: [0] 1. Error Block 51 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [172] 120. Error Block 78 start (CF ANALYSIS FAILED)
	var38.CanQuery = false
	if tonumber(var38.Name) == arg2 then
	else
	end
	var38.ProximityPrompt.Enabled = false
	-- KONSTANTERROR: [172] 120. Error Block 78 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 22. Error Block 85 start (CF ANALYSIS FAILED)
	if arg2 == 1 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [190.13]
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
				-- KONSTANTWARNING: GOTO [149] #104
			end
		end
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if false == arg2 then
		-- KONSTANTWARNING: GOTO [160] #112
	end
	-- KONSTANTERROR: [29] 22. Error Block 85 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 61
	return true
end
function Initialise(arg1) -- Line 65
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_2_upvr = Knit_upvr.GetService("BlockService")
		local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME_2 then
			warn("ERROR INITIALISING TRAP DOOR:"..tostring(arg1.Index))
			return
		end
		SOME_2.Stages[1].ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 76
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_2_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 1 then
				BlockService_2_upvr:UpdateTickProgress(arg1, {
					Stage = 2;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		SOME_2.Stages[2].ProximityPrompt.Triggered:Connect(function(arg1_3) -- Line 82
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_2_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 2 then
				BlockService_2_upvr:UpdateTickProgress(arg1, {
					Stage = 1;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		if not arg1.TickProgress then
			BlockService_2_upvr:UpdateTickProgress(arg1, {
				Stage = 2;
			})
		end
		UpdateModel(arg1.Index, arg1.TickProgress.Stage)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 97
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 101
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var49 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService.IslandOwner then
			InventoryService:CollectLoot(BlockService.IslandOwner, InventoryService:GenerateLootTable(var49.LootData, var49):GenerateLoot())
		end
		BlockService:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 123
	return nil
end
function Destroying(arg1) -- Line 127
	return true
end
function SpawnExtra(arg1) -- Line 131
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Slime Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:48
-- Luau version 6, Types version 3
-- Time taken: 0.001489 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function BouncePlayer() -- Line 12
end
function Activate(arg1) -- Line 17
	return true
end
function Initialise(arg1) -- Line 21
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	if not RunService_upvr:IsClient() then return end
	local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	workspace.Island:WaitForChild(arg1.Index).Touched:Connect(function(arg1_2) -- Line 28
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (readonly)
		]]
		if arg1_2.Parent == game.Players.LocalPlayer.Character and CoreUtil_upvr:ValidateHumanoid(game.Players.LocalPlayer.Character) then
			arg1_2.Parent.Humanoid.JumpPower = 100
			arg1_2.Parent.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			wait(0.1)
			arg1_2.Parent.Humanoid.JumpPower = 50
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 42
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 48
	return true
end
function GetLootData(arg1) -- Line 52
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 57
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 62
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Workbench Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:49
-- Luau version 6, Types version 3
-- Time taken: 0.001359 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
function Activate(arg1) -- Line 12
	return true
end
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Initialise(arg1) -- Line 16
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if not RunService_upvr:IsClient() then
	else
		local SOME = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME then
			warn("ERROR INITIALISING DOOR:"..tostring(arg1.Index))
			return
		end
		local ProximityPrompt = Instance.new("ProximityPrompt")
		ProximityPrompt.Parent = SOME.HB
		ProximityPrompt.Enabled = true
		ProximityPrompt.ObjectText = "Workbench"
		ProximityPrompt.ActionText = "Open Crafting"
		ProximityPrompt.RequiresLineOfSight = false
		ProximityPrompt.MaxActivationDistance = 8
		ProximityPrompt.KeyboardKeyCode = Enum.KeyCode.F
		local any_GetController_result1_upvr = Knit_upvr.GetController("UIController")
		ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 34
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_upvr (readonly)
				[2]: arg1 (readonly)
			]]
			any_GetController_result1_upvr:ToggleUI("Crafting", true, arg1.Id)
		end)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 40
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 44
	return true
end
function GetLootData(arg1, arg2) -- Line 48
	return nil
end
function Destroying(arg1) -- Line 52
	return true
end
function SpawnExtra(arg1) -- Line 56
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Checkpoint Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:50
-- Luau version 6, Types version 3
-- Time taken: 0.001883 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Activate(arg1) -- Line 12
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 18
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	SOME.Touched:Connect(function(arg1_2) -- Line 25
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: Knit_upvr (copied, readonly)
			[3]: arg1 (readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			local PlayerService_2 = Knit_upvr.GetService("PlayerService")
			if CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.BlockType == "Finish Line" then
				PlayerService_2.RespawnBlocks[any_GetPlayerFromCharacter_result1] = nil
				return
			end
			PlayerService_2.RespawnBlocks[any_GetPlayerFromCharacter_result1] = arg1.Position
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 48
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 52
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 60
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 65
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 82
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Fence Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:51
-- Luau version 6, Types version 3
-- Time taken: 0.003763 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local tbl_upvr = {"HorizFront", "HorizBack", "HorizLeft", "HorizRight"}
function NormaliseVector(arg1) -- Line 18
	return Vector3.new(math.round(arg1.X), math.round(arg1.Y), math.round(arg1.Z))
end
function SetFenceVisibilities(arg1, arg2) -- Line 22
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	if arg2 == 0 then
	end
	local tostring_result1 = tostring(1111)
	for _ = 1, 4 - #tostring_result1 do
		tostring_result1 = '0'..tostring_result1
		local var24
	end
	local any_split_result1 = var24:split("")
	local var29
	for i_2, v in pairs(any_split_result1) do
		if v ~= '1' then
			var29 = false
		else
			var29 = true
		end
		any_split_result1[i_2] = var29
	end
	for i_3, v_2 in pairs(any_split_result1) do
		var29 = tbl_upvr[i_3]
		for _, v_3 in pairs(arg1:GetDescendants()) do
			local Name = v_3.Name
			if Name == var29 then
				if v_2 == true then
					Name = 0
				else
					Name = 1
				end
				v_3.Transparency = Name
				Name = pairs(v_3:GetChildren())
				for _, v_4 in pairs(v_3:GetChildren()) do
					local children = v_4:IsA("Texture")
					if children then
						if v_2 == true then
							children = 0
						else
							children = 1
						end
						v_4.Transparency = children
					end
				end
			end
		end
	end
end
function StairChange(arg1, arg2, arg3, arg4) -- Line 56
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 47 start (CF ANALYSIS FAILED)
	local var41 = -1
	if arg3 then
		var41 = "AdjChance"
	else
		var41 = "InitChange"
	end
	print("StairChange : ", arg1.Index:sub(var41), " : ", var41)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if arg4 then
		SetFenceVisibilities(SOME, arg4)
		return
	end
	local _ = {'0', '0', '0', '0'}
	if not SOME.PrimaryPart then
		print(SOME.ClassName)
		return
	end
	local pairs_result1_2, pairs_result2_5, pairs_result3 = pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetAdjacentPositions(arg1.Position))
	-- KONSTANTERROR: [0] 1. Error Block 47 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [213] 151. Error Block 31 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [213] 151. Error Block 31 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [85] 60. Error Block 10 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [85] 60. Error Block 10 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 123
	return true
end
function Initialise(arg1) -- Line 127
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	local var48
	if var48 then return end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var48 = arg1.TickProgress.Stage
		return var48
	end
	if not arg1.TickProgress or not INLINED() then
		var48 = nil
	end
	if not arg1.TickProgress then
		Knit_upvr.GetService("BlockService"):UpdateTickProgress(arg1, {
			Stage = 0;
		})
	end
	return StairChange(arg1, true, nil, var48)
end
function Validate(arg1, arg2, arg3, arg4) -- Line 142
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 146
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return StairChange(arg2, arg1, arg3)
end
function GetLootData(arg1) -- Line 151
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 156
	return true
end
function SpawnExtra(arg1) -- Line 160
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Disappear Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:53
-- Luau version 6, Types version 3
-- Time taken: 0.002389 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local TweenService_upvr = game:GetService("TweenService")
function Initialise(arg1) -- Line 19
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_upvr then return end
	SOME_upvr.Touched:Connect(function(arg1_2) -- Line 26
		--[[ Upvalues[3]:
			[1]: SOME_upvr (readonly)
			[2]: CoreUtil_upvr (copied, readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if SOME_upvr.Transparency ~= 0 then
		else
			local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
			if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
				TweenService_upvr:Create(SOME_upvr, TweenInfo.new(3), {
					Transparency = 1;
				}):Play()
				for _, v_2 in pairs(SOME_upvr:GetDescendants()) do
					if v_2:IsA("Texture") then
						TweenService_upvr:Create(v_2, TweenInfo.new(3), {
							Transparency = 1;
						}):Play()
					end
				end
				task.wait(3)
				if not SOME_upvr.Parent then return end
				SOME_upvr.CanCollide = false
				task.delay(5, function() -- Line 46
					--[[ Upvalues[2]:
						[1]: SOME_upvr (copied, readonly)
						[2]: TweenService_upvr (copied, readonly)
					]]
					if not SOME_upvr.Parent then
					else
						SOME_upvr.CanCollide = true
						TweenService_upvr:Create(SOME_upvr, TweenInfo.new(3), {
							Transparency = 0;
						}):Play()
						for _, v_3 in pairs(SOME_upvr:GetDescendants()) do
							if v_3:IsA("Texture") then
								TweenService_upvr:Create(v_3, TweenInfo.new(3), {
									Transparency = 0;
								}):Play()
							end
						end
					end
				end)
			end
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 68
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 72
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 80
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Destroying(arg1) -- Line 85
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 102
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Damage Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:54
-- Luau version 6, Types version 3
-- Time taken: 0.001682 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 19
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	SOME["Kill Block"].Touched:Connect(function(arg1_2) -- Line 26
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (copied, readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			any_GetPlayerFromCharacter_result1.Character.Humanoid.Health = 0
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 42
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 46
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 54
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Destroying(arg1) -- Line 59
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 76
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.SpikeTrap Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:55
-- Luau version 6, Types version 3
-- Time taken: 0.002935 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local TweenService_upvr = game:GetService("TweenService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_2 then return end
	local floored = math.floor(workspace.DistributedGameTime)
	if floored % 10 == 5 then
		TweenService_upvr:Create(SOME_2.pyramid, TweenInfo.new(0.5), {
			Position = SOME_2.cuboid.Position + Vector3.new(0, 2, 0);
		}):Play()
		SOME_2.cuboid.CanTouch = true
	elseif floored % 10 == 0 then
		TweenService_upvr:Create(SOME_2.pyramid, TweenInfo.new(0.5), {
			Position = SOME_2.cuboid.Position;
		}):Play()
		SOME_2.cuboid.CanTouch = false
	end
	return true
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 35
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	Knit_upvr.GetService("BlockService"):ToggleTickObject(true, arg1)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	local function _(arg1_2) -- Line 45
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (copied, readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			any_GetPlayerFromCharacter_result1.Character.Humanoid.Health = 0
		end
	end
	SOME.cuboid.CanTouch = false
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 58
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 62
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 70
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 75
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 92
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.DefinitionModules.Rainbow Behaviour
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:56
-- Luau version 6, Types version 3
-- Time taken: 0.002448 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local tbl_upvr = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255), Color3.fromRGB(75, 0, 130), Color3.fromRGB(148, 0, 211)}
local TweenService_upvr = game:GetService("TweenService")
local function tweenToColor_upvr(arg1, arg2, arg3) -- Line 23, Named "tweenToColor"
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	local var12
	for _, v in pairs(arg1) do
		local tbl = {}
		tbl.Color = arg2
		var12 = TweenService_upvr:Create(v, TweenInfo.new(arg3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false), tbl)
		var12:Play()
	end
	return var12
end
function Activate(arg1) -- Line 41
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 47
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: tweenToColor_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_upvr then return end
	for _, v_2 in pairs(CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.GlowingPartName) do
		local SOME = SOME_upvr:FindFirstChild(v_2)
		if SOME then
			table.insert({}, SOME)
		end
	end
	local var23_upvw = 1
	local tbl_2_upvr = {}
	coroutine.wrap(function() -- Line 64
		--[[ Upvalues[5]:
			[1]: SOME_upvr (readonly)
			[2]: tbl_upvr (copied, readonly)
			[3]: var23_upvw (read and write)
			[4]: tweenToColor_upvr (copied, readonly)
			[5]: tbl_2_upvr (readonly)
		]]
		while SOME_upvr and SOME_upvr.Parent do
			tweenToColor_upvr(tbl_2_upvr, tbl_upvr[var23_upvw], math.random(1, 1)).Completed:Wait()
			var23_upvw += 1
			if #tbl_upvr < var23_upvw then
				var23_upvw = 1
			end
		end
	end)()
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 88
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 92
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 100
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Destroying(arg1) -- Line 105
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i_3, v_3 in pairs(PlayerService.RespawnBlocks) do
		if v_3.X == arg1.Position.X and v_3.Y == arg1.Position.Y and v_3.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i_3] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 122
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

-- ReplicatedStorage.CommonModules.DefinitionModules.Food
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.FoodDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:57
-- Luau version 6, Types version 3
-- Time taken: 0.000486 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.Healing = arg4
	module.DisplayImage = arg3
	module.EconomyInfo = arg5
	module.LevelReq = arg6
	module.Animations = arg7
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Carrot
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:58
-- Luau version 6, Types version 3
-- Time taken: 0.000429 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17449987379", 3, {
	SellPrice = 14;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Corn
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:54:59
-- Luau version 6, Types version 3
-- Time taken: 0.000426 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17449978851", 5, {
	SellPrice = 45;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.White Mushroom
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:00
-- Luau version 6, Types version 3
-- Time taken: 0.000693 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450306756", 8, {
	SellPrice = 30;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Red Potato
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:01
-- Luau version 6, Types version 3
-- Time taken: 0.000361 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450240079", 8, {
	SellPrice = 71;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Tomato
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:02
-- Luau version 6, Types version 3
-- Time taken: 0.000413 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450296270", 4, {
	SellPrice = 33;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Strawberry
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:04
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450252114", 6, {
	SellPrice = 60;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Watermelon
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:05
-- Luau version 6, Types version 3
-- Time taken: 0.000367 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450307407", 10, {
	SellPrice = 125;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Food.DefinitionModules.Wheat
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:06
-- Luau version 6, Types version 3
-- Time taken: 0.000394 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450307216", 1, {
	SellPrice = 4;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.ItemDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:07
-- Luau version 6, Types version 3
-- Time taken: 0.000522 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Item"
	module.DisplayImage = arg2
	module.CraftIngredients = arg3
	module.SearchTags = arg4
	module.EconomyInfo = arg5
	module.LevelReq = arg6
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Void Shard
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:08
-- Luau version 6, Types version 3
-- Time taken: 0.000353 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450320752", nil, {"Void Shard"}, {
	SellPrice = 200;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Black Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:09
-- Luau version 6, Types version 3
-- Time taken: 0.000384 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960401", {
	["Black Poppy Flower"] = 1;
}, {"Black Dye", "Black Poppy Flower"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Blue Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:10
-- Luau version 6, Types version 3
-- Time taken: 0.000363 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960198", {
	["Blue Poppy Flower"] = 1;
}, {"Blue Dye", "Blue Poppy Flower"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Spring
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:11
-- Luau version 6, Types version 3
-- Time taken: 0.000393 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255030", nil, {"Spring"}, {
	SellPrice = 24;
}, {
	Combat = {
		Gizmo = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Twilight Blade
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:12
-- Luau version 6, Types version 3
-- Time taken: 0.000501 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450296070", {
	["Recycled Blade"] = 1;
	["Void Shard"] = 128;
	["Rage Essence"] = 1;
}, {"Twilight Blade"}, {
	SellPrice = 29000;
}, {
	Combat = {
		GrimThorn = 2;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Bones
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:13
-- Luau version 6, Types version 3
-- Time taken: 0.000398 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449959941", nil, {"Bones"}, {
	SellPrice = 8;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Skeleton Key
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:15
-- Luau version 6, Types version 3
-- Time taken: 0.000410 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255929", nil, {"Skeleton Key"}, {
	SellPrice = 3500;
}, {
	Combat = {
		Rattles = 20;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Stone
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:16
-- Luau version 6, Types version 3
-- Time taken: 0.000328 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450252601", nil, {"Stone"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Necrotic Essence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:17
-- Luau version 6, Types version 3
-- Time taken: 0.000424 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450227258", nil, {"Necrotic Essence"}, {
	SellPrice = 3600;
}, {
	Combat = {
		Rattles = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Cog
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:18
-- Luau version 6, Types version 3
-- Time taken: 0.000404 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449980434", nil, {"Cog"}, {
	SellPrice = 12;
}, {
	Combat = {
		Gizmo = 3;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Coal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:19
-- Luau version 6, Types version 3
-- Time taken: 0.000321 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449982189", nil, {"Coal"}, {
	SellPrice = 4;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Basalt
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:20
-- Luau version 6, Types version 3
-- Time taken: 0.000428 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960655", nil, {"Basalt"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Molten Core
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:22
-- Luau version 6, Types version 3
-- Time taken: 0.000431 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450209322", nil, {"Molten Core"}, {
	SellPrice = 5000;
}, {
	Combat = {
		Flamelet = 7;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Inferno Essence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:23
-- Luau version 6, Types version 3
-- Time taken: 0.000418 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450201667", nil, {"Inferno Essence"}, {
	SellPrice = 15000;
}, {
	Combat = {
		Flamelet = 10;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Light Source
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:24
-- Luau version 6, Types version 3
-- Time taken: 0.000403 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450218143", nil, {"Light Source"}, {
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.White Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:25
-- Luau version 6, Types version 3
-- Time taken: 0.000432 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450307097", {
	["White Poppy Flower"] = 1;
}, {"White Poppy Dye", "White Poppy Flower"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Blue Flame
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:26
-- Luau version 6, Types version 3
-- Time taken: 0.000345 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://109163471127228", nil, {"Flame"}, {
	SellPrice = 75;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Copper
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:28
-- Luau version 6, Types version 3
-- Time taken: 0.000360 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449979410", nil, {"Copper"}, {
	SellPrice = 8;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Cobalt
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:29
-- Luau version 6, Types version 3
-- Time taken: 0.000379 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449980873", nil, {"Cobalt"}, {
	SellPrice = 30;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Elastic Essence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:30
-- Luau version 6, Types version 3
-- Time taken: 0.000383 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450164025", nil, {"Elastic Essence"}, {
	SellPrice = 400;
}, {
	Combat = {
		GreenSlime = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Yellow Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:31
-- Luau version 6, Types version 3
-- Time taken: 0.000382 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450305296", {
	["Yellow Poppy Flower"] = 1;
}, {"Yellow Poppy Dye", "Yellow Poppy Flower"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Silver
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:32
-- Luau version 6, Types version 3
-- Time taken: 0.000360 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450256075", nil, {"Silver"}, {
	SellPrice = 45;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Scrap Metal
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:33
-- Luau version 6, Types version 3
-- Time taken: 0.000358 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450256474", nil, {"Scrap Metal"}, {
	SellPrice = 6;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Gold
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:34
-- Luau version 6, Types version 3
-- Time taken: 0.000390 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450180083", nil, {"Gold"}, {
	SellPrice = 55;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Green Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:35
-- Luau version 6, Types version 3
-- Time taken: 0.000456 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450179374", {
	["Green Poppy Flower"] = 1;
}, {"Green Dye", "Green Poppy Flower"}, {
	SellPrice = 2;
}, {
	Combat = {
		GreenSlime = 3;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Green Goo
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:37
-- Luau version 6, Types version 3
-- Time taken: 0.000358 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450179250", nil, {"Green Goo"}, {
	SellPrice = 3;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Green Slime Core
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:38
-- Luau version 6, Types version 3
-- Time taken: 0.000407 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450289051", nil, {"Green Slime Core"}, {
	SellPrice = 1000;
}, {
	Combat = {
		GreenSlime = 10;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Iron
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:39
-- Luau version 6, Types version 3
-- Time taken: 0.000334 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450199150", nil, {"Iron"}, {
	SellPrice = 15;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Magnet Shard
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:40
-- Luau version 6, Types version 3
-- Time taken: 0.000389 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450211381", nil, {"Magnet Shard"}, {
	SellPrice = 1000;
}, {
	Combat = {
		Muncher = 15;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Marble
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:41
-- Luau version 6, Types version 3
-- Time taken: 0.000332 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450209524", nil, {"Marble"}, {
	SellPrice = 5;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Twilight Essence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:42
-- Luau version 6, Types version 3
-- Time taken: 0.000388 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450295866", nil, {"Twilight Essence"}, {
	SellPrice = 25000;
}, {
	Combat = {
		GrimThorn = 8;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Skull
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:43
-- Luau version 6, Types version 3
-- Time taken: 0.000401 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255824", nil, {"Skull"}, {
	SellPrice = 80;
}, {
	Combat = {
		Rattles = 4;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Rage Essence
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:44
-- Luau version 6, Types version 3
-- Time taken: 0.000395 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450241209", nil, {"Rage Essence"}, {
	SellPrice = 3000;
}, {
	Combat = {
		Muncher = 7;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Realm Key
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:46
-- Luau version 6, Types version 3
-- Time taken: 0.000393 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450241041", nil, {"Realm Key"}, {
	SellPrice = 950000;
}, {
	Combat = {
		GrimThorn = 10;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Recycled Blade
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:47
-- Luau version 6, Types version 3
-- Time taken: 0.000392 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450240780", {
	["Scrap Metal"] = 100;
	Coal = 32;
}, {"Recycled Blade"}, {
	SellPrice = 650;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Red Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:48
-- Luau version 6, Types version 3
-- Time taken: 0.000340 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450240514", {
	["Red Poppy Flower"] = 1;
}, {"Red Poppy Flower"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Clay
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:49
-- Luau version 6, Types version 3
-- Time taken: 0.000379 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17639590424", nil, {"Clay"}, {
	SellPrice = 2;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Cloth
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:50
-- Luau version 6, Types version 3
-- Time taken: 0.000419 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449982775", nil, {"Cloth"}, {
	SellPrice = 10;
}, {
	Combat = {
		Rattles = 2;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Mystic Iron Fragment
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:51
-- Luau version 6, Types version 3
-- Time taken: 0.000337 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://78853342189133", nil, {"Mystic", "Iron", "Fragment"}, {
	SellPrice = 950;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Mystic Diamond Fragment
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:52
-- Luau version 6, Types version 3
-- Time taken: 0.000373 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://93561636237911", nil, {"Mystic", "Diamond", "Fragment"}, {
	SellPrice = 40000;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Mystic Gold Fragment
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:53
-- Luau version 6, Types version 3
-- Time taken: 0.000376 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://112675260141408", nil, {"Mystic", "Gold", "Fragment"}, {
	SellPrice = 4500;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Diamond
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:55
-- Luau version 6, Types version 3
-- Time taken: 0.000364 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://73578712424449", nil, {"Diamond"}, {
	SellPrice = 200;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Flame
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:56
-- Luau version 6, Types version 3
-- Time taken: 0.000517 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450162829", nil, {"Flame"}, {
	SellPrice = 25;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Item.DefinitionModules.Rainbow Dye
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:57
-- Luau version 6, Types version 3
-- Time taken: 0.000363 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://118501796641824", {
	["Rainbow Poppy Flower"] = 1;
}, {"Rainbow", "Rainbow Poppy Flower"}, {
	SellPrice = 5000;
}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.MobDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:58
-- Luau version 6, Types version 3
-- Time taken: 0.000543 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.MaxHealth = arg2
	module.HipHeight = arg3
	module.DefultSpeed = arg4
	module.AggrovatedSpeed = arg5
	module.Damage = arg6
	module.AttackCooldown = arg7
	module.AttackRange = arg8
	module.AttackDistance = arg9
	module.Animations = arg10
	module.LootData = arg11
	module.SoundIds = arg12
	module.RecommendedLevel = arg13
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Green Slime
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:55:59
-- Luau version 6, Types version 3
-- Time taken: 0.001022 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 64, 1.5, 10, 15, 5, 2, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GreenSlime = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GreenSlime"};
	};
	RandItems = {{
		ItemId = "Green Goo";
		Catagory = "Item";
		Weight = 0.8;
	}, {
		ItemId = "Green Dye";
		Catagory = "Item";
		Weight = 0.1965;
		LevelReq = 3;
	}, {
		ItemId = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.0025;
		LevelReq = 5;
	}, {
		ItemId = "Green Slime Core";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 10;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 5")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Gizmo
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:00
-- Luau version 6, Types version 3
-- Time taken: 0.000955 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 128, 0.2, 10, 16, 8, 2, 4, 6, {
	Idle = "rbxassetid://16960865966";
	Walk = "rbxassetid://16960861313";
	Run = "rbxassetid://16960861313";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Gizmo = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Gizmo"};
	};
	RandItems = {{
		ItemId = "Scrap Metal";
		Catagory = "Item";
		Weight = 0.79;
	}, {
		ItemId = "Cog";
		Catagory = "Item";
		Weight = 0.19;
		LevelReq = 3;
	}, {
		ItemId = "Spring";
		Catagory = "Item";
		Weight = 0.019;
		LevelReq = 5;
	}, {
		ItemId = "Fusion Essence";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 7;
	}};
}, {
	Attack = {"rbxassetid://17436929994"};
	Death = {"rbxassetid://17436930162"};
}, "Level 8")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.GrimThorn
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:01
-- Luau version 6, Types version 3
-- Time taken: 0.001046 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 2048, 2.8, 5, 26, 60, 5, 6, 8, {
	Idle = "rbxassetid://16961541964";
	Walk = "rbxassetid://16961552280";
	Run = "rbxassetid://16961552280";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GrimThorn = {
				Min = 50;
				Max = 75;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GrimThorn"};
	};
	RandItems = {{
		ItemId = "Void Shard";
		Catagory = "Item";
		Weight = 0.799999;
	}, {
		ItemId = "Black Dye";
		Catagory = "Item";
		Weight = 0.19875;
		LevelReq = 2;
	}, {
		ItemId = "Twilight Essence";
		Catagory = "Item";
		Weight = 0.00125;
		LevelReq = 5;
	}, {
		ItemId = "Realm Key";
		Catagory = "Item";
		Weight = 0.000001;
		LevelReq = 6;
	}};
}, {
	Attack = {"rbxassetid://17436926939"};
	Idle = {"rbxassetid://17436926203"};
	Movement = {"rbxassetid://17436925592"};
	Death = {"rbxassetid://17436925727"};
}, "Level 30")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Muncher
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:02
-- Luau version 6, Types version 3
-- Time taken: 0.001164 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 480, 0.2, 10, 15, 25, 2.5, 4, 6, {
	Idle = "rbxassetid://16961116747";
	Walk = "rbxassetid://16961128951";
	Run = "rbxassetid://16961128951";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Muncher = {
				Min = 4;
				Max = 6;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Muncher"};
	};
	RandItems = {{
		ItemId = "Scrap Metal";
		Catagory = "Item";
		Weight = 0.997;
	}, {
		ItemId = "Magnet Shard";
		Catagory = "Item";
		Weight = 0.002;
		LevelReq = 4;
	}, {
		ItemId = "Rage Essence";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 7;
	}};
}, {
	Attack = {"rbxassetid://17436924606", "rbxassetid://17436924734"};
	Idle = {"rbxassetid://17436926203"};
	Movement = {"rbxassetid://17436925455", "rbxassetid://17436927769", "rbxassetid://17436925242"};
	Death = {"rbxassetid://17436927097 "};
}, "Level 20")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Blue Flamelet
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:04
-- Luau version 6, Types version 3
-- Time taken: 0.001083 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 1200, 0.2, 12, 18, 70, 3, 4, 6, {
	Idle = "rbxassetid://16462098126";
	Walk = "rbxassetid://16462111519";
	Run = "rbxassetid://16462111519";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Flamelet = {
				Min = 5;
				Max = 8;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Flamelet"};
	};
	RandItems = {{
		ItemId = "Blue Flame";
		Catagory = "Item";
		Weight = 0.844;
	}, {
		ItemId = "Light Source";
		Catagory = "Item";
		Weight = 0.144;
		LevelReq = 3;
	}, {
		ItemId = "Molten Core";
		Catagory = "Item";
		Weight = 0.007;
		LevelReq = 5;
	}, {
		ItemId = "Inferno Essence";
		Catagory = "Item";
		Weight = 0.004;
		LevelReq = 7;
	}, {
		ItemId = "Diamond Hammer";
		Catagory = "Tool";
		Weight = 0.001;
		LevelReq = 15;
	}};
}, {
	Attack = {"rbxassetid://17436930330"};
	Death = {"rbxassetid://17436930563"};
}, "Level 30")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Rattles
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:05
-- Luau version 6, Types version 3
-- Time taken: 0.000945 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 200, 0.2, 12, 20, 15, 2, 4, 6, {
	Idle = "rbxassetid://16960982748";
	Walk = "rbxassetid://16960990759";
	Run = "rbxassetid://16960990759";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Rattles = {
				Min = 2;
				Max = 3;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Rattles"};
	};
	RandItems = {{
		ItemId = "Bones";
		Catagory = "Item";
		Weight = 0.878;
	}, {
		ItemId = "Cloth";
		Catagory = "Item";
		Weight = 0.1;
		LevelReq = 2;
	}, {
		ItemId = "Skull";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 4;
	}, {
		ItemId = "Necrotic Essence";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 7;
	}, {
		ItemId = "Skeleton Key";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 10;
	}};
}, {
	Attack = {"rbxassetid://17436925899"};
	Movement = {"rbxassetid://17436925592"};
	Death = {"rbxassetid://17436925727"};
}, "Level 12")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Slimegore
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:06
-- Luau version 6, Types version 3
-- Time taken: 0.001014 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 256, 1.5, 10, 15, 15, 2, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GreenSlime = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GreenSlime"};
	};
	RandItems = {{
		ItemId = "Green Goo";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		ItemId = "Green Dye";
		Catagory = "Item";
		Weight = 0.275;
		LevelReq = 3;
	}, {
		ItemId = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 5;
	}, {
		ItemId = "Green Slime Core";
		Catagory = "Item";
		Weight = 0.005;
		LevelReq = 10;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 10")

-- ReplicatedStorage.CommonModules.DefinitionModules.Mob.DefinitionModules.Flamelet
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:07
-- Luau version 6, Types version 3
-- Time taken: 0.001327 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, 600, 0.2, 12, 18, 35, 3, 4, 6, {
	Idle = "rbxassetid://16462098126";
	Walk = "rbxassetid://16462111519";
	Run = "rbxassetid://16462111519";
	Death = "rbxassetid://16462159010";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Flamelet = {
				Min = 5;
				Max = 8;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Flamelet"};
	};
	RandItems = {{
		ItemId = "Flame";
		Catagory = "Item";
		Weight = 0.927;
	}, {
		ItemId = "Light Source";
		Catagory = "Item";
		Weight = 0.07;
		LevelReq = 3;
	}, {
		ItemId = "Molten Core";
		Catagory = "Item";
		Weight = 0.002;
		LevelReq = 5;
	}, {
		ItemId = "Inferno Essence";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 7;
	}};
}, {
	Attack = {"rbxassetid://17436930330"};
	Death = {"rbxassetid://17436930563"};
}, "Level 25")

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:08
-- Luau version 6, Types version 3
-- Time taken: 0.000536 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.SubCatagory = arg3
	module.Knockback = arg4
	module.DisplayImage = arg5
	module.Animations = arg6
	module.DamageTable = arg7
	module.CraftIngredients = arg8
	module.SearchTags = arg9
	module.EconomyInfo = arg10
	module.LevelReq = arg11
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Clockwork Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:09
-- Luau version 6, Types version 3
-- Time taken: 0.000558 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17449982911", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	Spring = 64;
	Cog = 256;
	["Magnet Shard"] = 3;
}, {"Weapon", "Tool"}, {
	SellPrice = 8250;
}, {
	Combat = {
		Muncher = 25;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Cobalt Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:11
-- Luau version 6, Types version 3
-- Time taken: 0.000604 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 13, "rbxassetid://17449981025", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 1;
	Farmland = 1;
	Mobs = 20;
}, {
	Cobalt = 320;
	["Recycled Blade"] = 1;
}, {"Weapon", "Tool"}, {
	BuyPrice = 120000;
	SellPrice = 10000;
}, {
	Combat = {
		Overall = 12;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Inferno Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:12
-- Luau version 6, Types version 3
-- Time taken: 0.000562 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17450200437", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	["Inferno Essence"] = 1;
	["Molten Core"] = 1;
	Flame = 256;
}, {"Weapon", "Tool"}, {
	SellPrice = 27000;
}, {
	Combat = {
		Flamelet = 25;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Slime Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:13
-- Luau version 6, Types version 3
-- Time taken: 0.000603 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17450255637", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	["Elastic Essence"] = 1;
	["Green Goo"] = 512;
	["Green Slime Core"] = 1;
}, {"Weapon", "Tool"}, {
	SellPrice = 3500;
}, {
	Combat = {
		GreenSlime = 25;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Copper Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:14
-- Luau version 6, Types version 3
-- Time taken: 0.000622 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 12, "rbxassetid://17449979580", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 1;
	Farmland = 1;
	Mobs = 8;
}, {
	Copper = 128;
	["Oak Wood"] = 128;
	Coal = 32;
	["Scrap Metal"] = 12;
}, {"Weapon", "Tool"}, {
	BuyPrice = 20000;
	SellPrice = 2100;
}, {
	Combat = {
		Overall = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Twilight Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:15
-- Luau version 6, Types version 3
-- Time taken: 0.000703 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17450295614", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 72;
}, {
	["Twilight Blade"] = 1;
	Bones = 512;
	["Twilight Essence"] = 1;
	Silver = 32;
}, {"Weapon", "Tool"}, {
	SellPrice = 62500;
}, {
	Combat = {
		GrimThorn = 30;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Iron Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:16
-- Luau version 6, Types version 3
-- Time taken: 0.000584 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 12, "rbxassetid://17450199284", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 0.5;
	Farmland = 0.5;
	Mobs = 16;
}, {
	Iron = 192;
	["Cherry Wood"] = 256;
	Coal = 64;
}, {"Weapon", "Tool"}, {
	BuyPrice = 70000;
	SellPrice = 5440;
}, {
	Combat = {
		Overall = 8;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Gold Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:17
-- Luau version 6, Types version 3
-- Time taken: 0.000599 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17450180284", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	Gold = 128;
	["Mystic Gold Fragment"] = 1;
	["Recycled Blade"] = 1;
	Coal = 64;
}, {"Weapon", "Tool"}, {
	BuyPrice = 275000;
	SellPrice = 12300;
}, {
	Combat = {
		Overall = 16;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Wood Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:18
-- Luau version 6, Types version 3
-- Time taken: 0.000481 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 8, "rbxassetid://17450305764", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 0.5;
	Farmland = 0.5;
	Mobs = 4;
}, nil, {"Weapon", "Tool"}, nil, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Stone Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:19
-- Luau version 6, Types version 3
-- Time taken: 0.000578 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://17450252748", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 1;
	Farmland = 1;
	Mobs = 6;
}, {
	Stone = 64;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 400;
	SellPrice = 100;
}, {
	Combat = {
		Overall = 1;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Bone Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:20
-- Luau version 6, Types version 3
-- Time taken: 0.000596 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://17746400648", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Necrotic Essence"] = 1;
	Skull = 8;
	Bones = 512;
}, {"Weapon", "Tool"}, {
	SellPrice = 8225;
}, {
	Combat = {
		Rattles = 25;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Dev Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:21
-- Luau version 6, Types version 3
-- Time taken: 0.000457 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 18, "rbxassetid://17450305764", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925197259"};
}, {
	Misc = 1000;
	Forestry = 1000;
	Mining = 1000;
	Farmland = 1000;
	Mobs = 1000;
}, nil, {"Weapon", "Tool"}, nil, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Diamond Sword
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:23
-- Luau version 6, Types version 3
-- Time taken: 0.000633 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://97275383182356", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 48;
}, {
	Diamond = 64;
	Silver = 256;
	["Mystic Diamond Fragment"] = 1;
	["Gold Sword"] = 1;
	Coal = 32;
}, {"Weapon", "Tool"}, {
	BuyPrice = 2000000;
	SellPrice = 77000;
}, {
	Combat = {
		Overall = 25;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Diamond Knife
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:24
-- Luau version 6, Types version 3
-- Time taken: 0.000528 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://80844676965413", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://120093236388442", "rbxassetid://94483152874579"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 1;
	Farmland = 1;
	Mobs = 35;
}, nil, {"Weapon", "Tool"}, {
	SellPrice = 70000;
}, {
	Mining = {
		["Diamond Ore"] = 20;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Swords.Diamond Hammer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:25
-- Luau version 6, Types version 3
-- Time taken: 0.000511 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 20, "rbxassetid://91084604041232", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://130722898864586"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 100;
}, nil, {"Weapon", "Tool"}, {
	SellPrice = 200000;
}, {
	Mining = {
		["Diamond Ore"] = 15;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Wood Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:26
-- Luau version 6, Types version 3
-- Time taken: 0.000495 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450305997", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 5;
	Farmland = 1;
	Mobs = 1;
}, nil, {"Weapon", "Tool"}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Cobalt Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:27
-- Luau version 6, Types version 3
-- Time taken: 0.000594 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17449981368", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 48;
	Farmland = 5;
	Mobs = 4;
}, {
	Cobalt = 256;
	["Mahogany Wood"] = 64;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 100000;
	SellPrice = 8750;
}, {
	Mining = {
		Overall = 12;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Stone Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:28
-- Luau version 6, Types version 3
-- Time taken: 0.000602 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450253167", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 9;
	Farmland = 2;
	Mobs = 2;
}, {
	Stone = 32;
}, {"Weapon", "Tool"}, {
	BuyPrice = 250;
	SellPrice = 50;
}, {
	Mining = {
		Overall = 2;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Iron Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:29
-- Luau version 6, Types version 3
-- Time taken: 0.000594 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450199575", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 24;
	Farmland = 4;
	Mobs = 3;
}, {
	Iron = 128;
	["Cherry Wood"] = 64;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 50000;
	SellPrice = 2550;
}, {
	Mining = {
		Overall = 8;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Diamond Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:30
-- Luau version 6, Types version 3
-- Time taken: 0.000641 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://99272952987509", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 256;
	Farmland = 12;
	Mobs = 5;
}, {
	Diamond = 64;
	Silver = 64;
	["Mystic Diamond Fragment"] = 1;
	["Gold Pickaxe"] = 1;
	Coal = 32;
}, {"Weapon", "Tool"}, {
	BuyPrice = 1250000;
	SellPrice = 70000;
}, {
	Mining = {
		Overall = 24;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Copper Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:31
-- Luau version 6, Types version 3
-- Time taken: 0.000600 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17449979692", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 14;
	Farmland = 3;
	Mobs = 3;
}, {
	Copper = 64;
	["Oak Wood"] = 64;
}, {"Weapon", "Tool"}, {
	BuyPrice = 9000;
	SellPrice = 900;
}, {
	Mining = {
		Overall = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Pickaxe.Gold Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:33
-- Luau version 6, Types version 3
-- Time taken: 0.000577 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450180549", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 128;
	Farmland = 10;
	Mobs = 4;
}, {
	Gold = 128;
	["Mystic Gold Fragment"] = 1;
	["Ash Wood"] = 128;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 250000;
	SellPrice = 14250;
}, {
	Mining = {
		Overall = 16;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Cobalt Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:34
-- Luau version 6, Types version 3
-- Time taken: 0.000593 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17449982087", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 3;
	Forestry = 24;
	Mining = 3;
	Farmland = 3;
	Mobs = 3;
}, {
	Cobalt = 256;
	["Mahogany Wood"] = 64;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 100000;
	SellPrice = 8750;
}, {
	Forestry = {
		Overall = 12;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Copper Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:35
-- Luau version 6, Types version 3
-- Time taken: 0.000614 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17449980243", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 2;
	Forestry = 12;
	Mining = 2;
	Farmland = 2;
	Mobs = 2;
}, {
	Copper = 64;
	["Oak Wood"] = 64;
}, {"Weapon", "Tool"}, {
	BuyPrice = 9000;
	SellPrice = 900;
}, {
	Forestry = {
		Overall = 5;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Diamond Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:36
-- Luau version 6, Types version 3
-- Time taken: 0.000608 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://75197210061286", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 4;
	Forestry = 90;
	Mining = 4;
	Farmland = 4;
	Mobs = 4;
}, {
	Diamond = 32;
	Silver = 64;
	["Mystic Diamond Fragment"] = 1;
	["Gold Axe"] = 1;
	Coal = 32;
}, {"Weapon", "Tool"}, {
	BuyPrice = 1000000;
	SellPrice = 63600;
}, {
	Forestry = {
		Overall = 24;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Iron Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:37
-- Luau version 6, Types version 3
-- Time taken: 0.000574 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450200283", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 2;
	Forestry = 16;
	Mining = 2;
	Farmland = 2;
	Mobs = 2;
}, {
	Iron = 128;
	["Cherry Wood"] = 64;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 50000;
	SellPrice = 2550;
}, {
	Forestry = {
		Overall = 8;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Wood Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:38
-- Luau version 6, Types version 3
-- Time taken: 0.000475 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450306391", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 1;
	Forestry = 5;
	Mining = 1;
	Farmland = 1;
	Mobs = 1;
}, nil, {"Weapon", "Tool"}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Stone Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:39
-- Luau version 6, Types version 3
-- Time taken: 0.000787 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450254799", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 1;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 1;
}, {
	Stone = 32;
}, {"Weapon", "Tool"}, {
	BuyPrice = 250;
	SellPrice = 50;
}, {
	Forestry = {
		Overall = 2;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Axe.Gold Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:40
-- Luau version 6, Types version 3
-- Time taken: 0.000640 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450181121", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 3;
	Forestry = 52;
	Mining = 3;
	Farmland = 3;
	Mobs = 3;
}, {
	Gold = 128;
	["Mystic Gold Fragment"] = 1;
	["Ash Wood"] = 128;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 250000;
	SellPrice = 14250;
}, {
	Forestry = {
		Overall = 16;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Hoe.Wood Hoe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:41
-- Luau version 6, Types version 3
-- Time taken: 0.000470 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Hoe", 1, "rbxassetid://17450308367", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925396266"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 1;
	Farmland = 10;
	Mobs = 1;
}, nil, {"Weapon", "Tool"}, nil)

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Scythe.Gold Scythe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:43
-- Luau version 6, Types version 3
-- Time taken: 0.000576 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Scythe", 1, "rbxassetid://83444405764470", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1;
	Mobs = 1;
}, {
	Gold = 32;
	["Mystic Gold Fragment"] = 1;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 100000;
	SellPrice = 6000;
}, {
	Farming = {
		Overall = 20;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Scythe.Iron Scythe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:44
-- Luau version 6, Types version 3
-- Time taken: 0.000561 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Scythe", 1, "rbxassetid://107634581481937", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1;
	Mobs = 1;
}, {
	Iron = 32;
	["Mystic Iron Fragment"] = 1;
	Coal = 16;
}, {"Weapon", "Tool"}, {
	BuyPrice = 10000;
	SellPrice = 1200;
}, {
	Farming = {
		Overall = 10;
	};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Misc.Player Pickaxe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:45
-- Luau version 6, Types version 3
-- Time taken: 0.002203 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450305997", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {"Weapon", "Tool"}, nil)
local RunService_upvr = game:GetService("RunService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function any_new_result1.Use(arg1) -- Line 36
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	if RunService_upvr:IsClient() then return end
	for _, v in pairs(game.Players:GetPlayers()) do
		if v ~= game.Players.LocalPlayer and CoreUtil_upvr:ValidateHumanoid(v.Character) and CoreUtil_upvr:ValidateHumanoid(arg1.Character) and (v.Character.HumanoidRootPart.Position - arg1.Character.HumanoidRootPart.Position).Magnitude <= 10 then
			table.insert({}, v.Character)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local pairs_result1, pairs_result2, pairs_result3_2 = pairs({})
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [144] 90. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [144] 90. Error Block 16 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [74] 48. Error Block 26 start (CF ANALYSIS FAILED)
	if table.insert({}, v.Character) then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if {} <= v.Character then
			-- KONSTANTWARNING: GOTO [144] #90
		end
	else
	end
	-- KONSTANTERROR: [74] 48. Error Block 26 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Tool.DefinitionModules.Misc.Joke Axe
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:46
-- Luau version 6, Types version 3
-- Time taken: 0.001144 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local tbl_upvr = {"Oh, I’m sorry. Did you want me to just be a normal axe? Well, guess what? You wanted to use admin tools, so this is what you get!", "Stop giving me that look. I’m an axe, not your therapist. You wanna talk about your problems, go find a Pickaxe. They love that stuff!", "Okay, I’m gonna say it—your technique is garbage. You chop like you’re scared the tree’s gonna fight back!", "You want me to chop that tree? That massive, seconds-old tree? You're a monster!", "Here’s a thought: maybe I don’t want to be your chopping buddy anymore. Ever think of that? Maybe I want to start a podcast!", "You know what? Go ahead, keep swinging. But when I snap in half, I’m haunting you as a ghost axe. That’s a thing, right?!", "You ever think maybe the trees are our friends? No, of course not! Because you're too busy whack, whack, whack! Real nice!", "Listen, if you hit one more tree without saying 'thank you,' I'm walking out. You hear me? I'm done! I don't need this!", "Every time you miss a swing, I die a little inside. Just thought you should know.", "You know, maybe I’m the one who should be swinging you around for a change! Let’s see how you like it!", "Oh, yeah, sure! Just swing me around all day like I'm some kind of chopping slave! You think I don't have dreams?!"}
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450305997", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {"Weapon", "Tool"}, nil)
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.Use(arg1) -- Line 52
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	if RunService_upvr:IsServer() then
	elseif math.random(1, 20) == 1 then
		Knit_upvr.GetController("UIController"):WarningMessage(tbl_upvr[math.random(1, #tbl_upvr)])
	end
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.UnderlingDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:47
-- Luau version 6, Types version 3
-- Time taken: 0.000557 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Underling"
	module.ToolUseTime = arg2
	module.MaxInventory = arg3
	module.RestingSpeed = arg4
	module.WorkingSpeed = arg5
	module.HipHeight = arg6
	module.WorkRadius = arg7
	module.Animations = arg8
	module.DisplayImage = arg9
	module.ResourceType = arg10
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Wheat Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:48
-- Luau version 6, Types version 3
-- Time taken: 0.000545 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 1, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233354", {
	ResourceType = "Crop";
	BlockIds = {"Wheat Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Tomato Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:49
-- Luau version 6, Types version 3
-- Time taken: 0.000476 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 2, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233668", {
	ResourceType = "Crop";
	BlockIds = {"Tomato Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Marble Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:50
-- Luau version 6, Types version 3
-- Time taken: 0.000476 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234788", {
	ResourceType = "Ore";
	BlockIds = {"Marble Rock Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Red Potato Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:51
-- Luau version 6, Types version 3
-- Time taken: 0.000552 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234326", {
	ResourceType = "Crop";
	BlockIds = {"Red Potato Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Stone Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:52
-- Luau version 6, Types version 3
-- Time taken: 0.000453 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 8, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234060", {
	ResourceType = "Ore";
	BlockIds = {"Stone Rock Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Carrot Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:53
-- Luau version 6, Types version 3
-- Time taken: 0.000497 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 1, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237450", {
	ResourceType = "Crop";
	BlockIds = {"Carrot Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Ash Wood Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:54
-- Luau version 6, Types version 3
-- Time taken: 0.000533 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237940", {
	ResourceType = "Tree";
	BlockIds = {"AshTreeB"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Mahogany Wood Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:56
-- Luau version 6, Types version 3
-- Time taken: 0.000492 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235088", {
	ResourceType = "Tree";
	BlockIds = {"MahoganyTreeB"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Basalt Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:57
-- Luau version 6, Types version 3
-- Time taken: 0.000450 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237673", {
	ResourceType = "Ore";
	BlockIds = {"Basalt Rock Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Cherry Wood Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:58
-- Luau version 6, Types version 3
-- Time taken: 0.000464 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237199", {
	ResourceType = "Tree";
	BlockIds = {"CherryTreeB"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Flower Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:56:59
-- Luau version 6, Types version 3
-- Time taken: 0.000519 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 10, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://94126383320426", {
	ResourceType = "Ore";
	BlockIds = {"Red Poppy Flower", "Blue Poppy Flower", "Green Poppy Flower", "White Poppy Flower", "Yellow Poppy Flower", "Black Poppy Flower"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Coal Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:00
-- Luau version 6, Types version 3
-- Time taken: 0.000497 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236638", {
	ResourceType = "Ore";
	BlockIds = {"Coal Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Cobalt Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:01
-- Luau version 6, Types version 3
-- Time taken: 0.000457 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 6, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236450", {
	ResourceType = "Ore";
	BlockIds = {"Cobalt Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Copper Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:02
-- Luau version 6, Types version 3
-- Time taken: 0.000476 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236342", {
	ResourceType = "Ore";
	BlockIds = {"Copper Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Corn Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:03
-- Luau version 6, Types version 3
-- Time taken: 0.000472 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 3, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236119", {
	ResourceType = "Crop";
	BlockIds = {"Corn Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Dark Hollow Wood Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:04
-- Luau version 6, Types version 3
-- Time taken: 0.000510 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 8, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235760", {
	ResourceType = "Tree";
	BlockIds = {"DarkHollowTreeE"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Gold Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:05
-- Luau version 6, Types version 3
-- Time taken: 0.000676 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 9, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235499", {
	ResourceType = "Ore";
	BlockIds = {"Gold Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Iron Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:06
-- Luau version 6, Types version 3
-- Time taken: 0.000467 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 7, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235299", {
	ResourceType = "Ore";
	BlockIds = {"Iron Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Oak Wood Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:07
-- Luau version 6, Types version 3
-- Time taken: 0.000502 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234486", {
	ResourceType = "Tree";
	BlockIds = {"OakTreeE"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Silver Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:09
-- Luau version 6, Types version 3
-- Time taken: 0.000507 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 6, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234187", {
	ResourceType = "Ore";
	BlockIds = {"Silver Ore Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Strawberry Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:10
-- Luau version 6, Types version 3
-- Time taken: 0.000502 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 3, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233872", {
	ResourceType = "Crop";
	BlockIds = {"Strawberry Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Watermelon Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:11
-- Luau version 6, Types version 3
-- Time taken: 0.000456 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233513", {
	ResourceType = "Crop";
	BlockIds = {"Watermelon Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.White Mushroom Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:12
-- Luau version 6, Types version 3
-- Time taken: 0.000455 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860238878", {
	ResourceType = "Crop";
	BlockIds = {"White Mushroom Seed"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Underling.DefinitionModules.Clay Underling
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:13
-- Luau version 6, Types version 3
-- Time taken: 0.000511 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 1, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236943", {
	ResourceType = "Ore";
	BlockIds = {"Clay Mud Block"};
})

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc.NpcDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:14
-- Luau version 6, Types version 3
-- Time taken: 0.000515 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Store = arg2
	module.Gender = arg3
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc.DefinitionModules.Gideon
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:15
-- Luau version 6, Types version 3
-- Time taken: 0.000832 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Basalt Block", "Clay Black", "Clay Blue", "Clay Brown", "Clay Cyan", "Clay Green", "Clay Light Blue", "Clay Lime", "Clay Orange", "Clay Pink", "Clay Purple", "Clay Red", "Clay White", "Clay Yellow", "Clay Block", "Carpet Black", "Carpet Blue", "Carpet Brown", "Carpet Cyan", "Carpet Green", "Carpet Grey", "Carpet Light Blue", "Carpet Lime", "Carpet Orange", "Carpet Pink", "Carpet Purple", "Carpet Red", "Carpet White", "Carpet Yellow", "Neon Black", "Neon Blue", "Neon Cyan", "Neon Green", "Neon Light Blue", "Neon Lime", "Neon Orange", "Neon Pink", "Neon Purple", "Neon Red", "Neon White", "Neon Yellow", "Coal Block", "Cobalt Block", "Copper Block", "Cobblestone", "Glass", "Glass Black", "Glass Blue", "Glass Brown", "Glass Cyan", "Glass Green", "Glass Light Blue", "Glass Lime", "Glass Orange", "Glass Pink", "Glass Purple", "Glass Red", "Glass White", "Glass Yellow", "Gold Block", "Diamond Block", "Dirt", "Iron Block", "Lantern Block", "Marble Block", "Silver Block", "Stone Block", "Torch", "Wall Torch", "Bookcase", "Spotlight", "Workbench", "Wood Stool", "Green Lightcube", "Red Lightcube", "Blue Lightcube", "Yellow Lightcube", "Purple Lightcube", "Orange Lightcube", "Small Chest", "Large Chest", "Diamond Chest"}, "Male")

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc.DefinitionModules.Moola
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:16
-- Luau version 6, Types version 3
-- Time taken: 0.000457 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Carrot Seed", "Corn Seed", "White Mushroom Seed", "Red Potato Seed", "Strawberry Seed", "Tomato Seed", "Watermelon Seed", "Wheat Seed"}, "Male")

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc.DefinitionModules.Maya
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:17
-- Luau version 6, Types version 3
-- Time taken: 0.000460 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Cobalt Sword", "Cobalt Axe", "Cobalt Pickaxe", "Gold Sword", "Gold Axe", "Gold Pickaxe", "Iron Sword", "Iron Axe", "Iron Pickaxe", "Copper Sword", "Copper Axe", "Copper Pickaxe", "Stone Sword", "Stone Axe", "Stone Pickaxe", "Iron Scythe", "Gold Scythe", "Diamond Pickaxe", "Diamond Axe", "Diamond Sword"}, "Female")

-- ReplicatedStorage.CommonModules.DefinitionModules.Npc.DefinitionModules.Oberon
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:18
-- Luau version 6, Types version 3
-- Time taken: 0.000511 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Ash Wood Underling Anchor", "Basalt Underling Anchor", "Carrot Underling Anchor", "Cherry Wood Underling Anchor", "Clay Underling Anchor", "Coal Underling Anchor", "Cobalt Underling Anchor", "Copper Underling Anchor", "Corn Underling Anchor", "Dark Hollow Wood Underling Anchor", "Gold Underling Anchor", "Iron Underling Anchor", "Mahogany Wood Underling Anchor", "Marble Underling Anchor", "Oak Wood Underling Anchor", "Red Potato Underling Anchor", "Silver Underling Anchor", "Stone Underling Anchor", "Strawberry Underling Anchor", "Tomato Underling Anchor", "Watermelon Underling Anchor", "Wheat Underling Anchor", "White Mushroom Underling Anchor", "Flower Underling Anchor"}, "Male")

-- ReplicatedStorage.CommonModules.DefinitionModules.Store
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.StoreDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:19
-- Luau version 6, Types version 3
-- Time taken: 0.000532 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Store"
	module.ProductType = arg2
	module.Type = arg3
	module.ProductId = arg4
	module.Price = arg5
	module.Giftable = arg6
	module.Limited = arg7
	module.DisplayData = arg8
	module.ExtraData = arg9
	module.LayoutOrder = arg10
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Dragon Storage Chest Product
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:20
-- Luau version 6, Types version 3
-- Time taken: 0.000469 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Chest", {1892076047}, {699}, true, false, {
	Description = "Store 128 item slots. Can be purchased more than once.";
	DisplayImage = "rbxassetid://95797451124786";
}, nil, 9)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Theme Pink
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:21
-- Luau version 6, Types version 3
-- Time taken: 0.000875 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149387881";
	SkyBG = "rbxassetid://17724630479";
	PortalBG = "rbxassetid://18149514859";
	Title = {"LIMITED", "PINK", "THEME"};
	TitleStroke = Color3.fromRGB(241, 174, 221);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Pink Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "50 per block";
	}, {
		Description = "700 per block";
	}};
}, {
	ThemeId = "Pink";
	Blocks = {{
		["Pink Stone Brick Slab"] = 50;
		["Pink Stone Brick Vertical Slab"] = 50;
		["Pink Stone Brick Stair"] = 50;
		["Pink Stone Brick Block"] = 50;
		["Pink Grass"] = 50;
	}, {
		["Pink Stone Brick Slab"] = 700;
		["Pink Stone Brick Vertical Slab"] = 700;
		["Pink Stone Brick Stair"] = 700;
		["Pink Stone Brick Block"] = 700;
		["Pink Grass"] = 700;
	}};
}, 3)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Pro Backpack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:23
-- Luau version 6, Types version 3
-- Time taken: 0.000397 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "BackpackExpansion", {1892075986}, {699}, true, false, {
	Description = "Expand inventory from 64 to 512 unique item slots.";
	DisplayImage = "rbxassetid://17861554211";
}, nil, 7)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Island Expansion
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:24
-- Luau version 6, Types version 3
-- Time taken: 0.000410 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "IslandExpansion", {1892076111}, {1499}, true, false, {
	Description = "Expand Island max block limit from 120,000 to 400,000 blocks.";
	DisplayImage = "rbxassetid://17861553833";
}, nil, 8)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.5,000 Coins Pack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:25
-- Luau version 6, Types version 3
-- Time taken: 0.000394 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Coins", {1892075880}, {399}, true, false, {
	Description = "Purchase 5,000 coins.";
	DisplayImage = "rbxassetid://17860444129";
}, {
	Coins = 5000;
}, 11)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Island Flight
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:26
-- Luau version 6, Types version 3
-- Time taken: 0.000415 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "CreatorMode", {1892075934}, {699}, true, false, {
	Description = "Double jump to enable flight (island only.) Move Up = Space Bar, Move Down = Z";
	DisplayImage = "rbxassetid://17861554038";
}, nil, 6)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.100,000 Coins Pack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:27
-- Luau version 6, Types version 3
-- Time taken: 0.000399 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Coins", {1892076360}, {3999}, true, false, {
	Description = "Purchase 100,000 Coins (best deal!)";
	DisplayImage = "rbxassetid://17860444271";
}, {
	Coins = 100000;
}, 13)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.25,000 Coins Pack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:28
-- Luau version 6, Types version 3
-- Time taken: 0.000420 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Coins", {1892076410}, {1499}, true, false, {
	Description = "Purchase 25,000 coins.";
	DisplayImage = "rbxassetid://17860443948";
}, {
	Coins = 25000;
}, 12)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Theme Crimson
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:29
-- Luau version 6, Types version 3
-- Time taken: 0.001492 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149387595";
	SkyBG = "rbxassetid://17724630044";
	PortalBG = "rbxassetid://18149513851";
	Title = {"LIMITED", "CRIMSON", "THEME"};
	TitleStroke = Color3.fromRGB(174, 0, 0);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Underworld Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "50 per block, 1 throne";
	}, {
		Description = "1k per block, 10 throne";
	}};
}, {
	ThemeId = "Underworld";
	Blocks = {{
		["Sword Throne"] = 1;
		["Crimson Ornate Block"] = 50;
		["Crimson Grass Block"] = 50;
		["Crimson Moss Block"] = 50;
	}, {
		["Sword Throne"] = 10;
		["Crimson Ornate Block"] = 1000;
		["Crimson Grass Block"] = 1000;
		["Crimson Moss Block"] = 1000;
	}};
}, 4)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Theme Storm
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:30
-- Luau version 6, Types version 3
-- Time taken: 0.000875 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149387337";
	SkyBG = "rbxassetid://17724630998";
	PortalBG = "rbxassetid://18149514128";
	Title = {"LIMITED", "STORM", "THEME"};
	TitleStroke = Color3.fromRGB(66, 124, 156);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Stormy Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "10 per block";
	}, {
		Description = "100 per block";
	}};
}, {
	ThemeId = "Storm";
	Blocks = {{
		["Electric FX Block"] = 10;
		["Fog FX Block"] = 10;
		["Rain FX Block"] = 10;
		["Danger Sign"] = 10;
	}, {
		["Electric FX Block"] = 100;
		["Fog FX Block"] = 100;
		["Rain FX Block"] = 100;
		["Danger Sign"] = 100;
	}};
}, 5)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Theme Ancient
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:31
-- Luau version 6, Types version 3
-- Time taken: 0.000945 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149388066";
	SkyBG = "rbxassetid://17724629745";
	PortalBG = "rbxassetid://18149524556";
	Title = {"LIMITED", "ANCIENT", "THEME"};
	TitleStroke = Color3.fromRGB(11, 63, 60);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Jungle Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "50 per block";
	}, {
		Description = "700 per block";
	}};
}, {
	ThemeId = "Ancient";
	Blocks = {{
		["Jungle Vines"] = 50;
		["Jungle Grass Block"] = 50;
		["Jungle Moss Block"] = 50;
		["Tiki Head Block"] = 50;
		["Tiki Pole Block"] = 50;
	}, {
		["Jungle Vines"] = 700;
		["Jungle Grass Block"] = 700;
		["Jungle Moss Block"] = 700;
		["Tiki Head Block"] = 700;
		["Tiki Pole Block"] = 700;
	}};
}, 2)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.1,000 Coins Pack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:32
-- Luau version 6, Types version 3
-- Time taken: 0.000400 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Coins", {1892075808}, {99}, true, false, {
	Description = "Purchase 1,000 coins.";
	DisplayImage = "rbxassetid://18507008511";
}, {
	Coins = 1000;
}, 10)

-- ReplicatedStorage.CommonModules.DefinitionModules.Store.DefinitionModules.Theme Obby
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:33
-- Luau version 6, Types version 3
-- Time taken: 0.000919 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1934502398, 1934506696}, {440, 999}, true, false, {
	Background = "rbxassetid://71526778823774";
	SkyBG = "rbxassetid://127418382293377";
	PortalBG = "rbxassetid://71047392553745";
	Title = {"OBBY", "PACK", "#1"};
	TitleStroke = Color3.fromRGB(126, 130, 228);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "New Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Obby Blocks";
	}};
	Purchases = {{
		Description = "5 per block";
	}, {
		Description = "50 per block";
	}};
}, {
	ThemeId = "Obby";
	Blocks = {{
		["Spiked Floor Trap"] = 5;
		["Kill Block"] = 5;
		["Disappear Block"] = 5;
		["Checkpoint Block"] = 5;
		["Finish Line Block"] = 5;
	}, {
		["Spiked Floor Trap"] = 50;
		["Kill Block"] = 50;
		["Disappear Block"] = 50;
		["Checkpoint Block"] = 50;
		["Finish Line Block"] = 50;
	}};
}, 1)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:35
-- Luau version 6, Types version 3
-- Time taken: 0.000547 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.NextTasks = arg3
	module.TaskIds = arg4
	module.TaskParams = arg5
	module.TaskRewards = arg6
	module.TaskDisplay = arg7
	module.Structured = arg8
	module.Hidden = arg9
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Greenhorn
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:36
-- Luau version 6, Types version 3
-- Time taken: 0.000698 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"The adventure begins"}, {"PlaceBlocks", "PlaceBlocks", "InventoryCollect"}, {{
	BlockGoal = 1;
	BlockId = "Tilled Dirt";
}, {
	BlockGoal = 1;
	BlockId = "Wheat Seed";
}, {
	CollectionGoal = 1;
	ItemIds = {"Wheat"};
}}, {nil, nil, nil}, {{
	Title = "Use your hoe to plow grass ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Plant wheat seed on tilled dirt ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Harvest your grown wheat ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.The adventure begins
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:37
-- Luau version 6, Types version 3
-- Time taken: 0.000640 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Rising entrepreneur"}, {"CharacterPosition", "InPlace"}, {{
	TargetPosition = Vector3.new(535, 305, 472);
	MinDistance = 20;
	PlaceId = CoreUtil.PlaceIds.Island;
}, {
	PlaceId = CoreUtil.PlaceIds.Citadel;
}}, {nil, nil}, {{
	Title = "Find a way to the other side of island";
	ProgressText = "";
}, {
	Title = "Use the portal to travel to the Citadel";
	ProgressText = "";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Rising entrepreneur
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:38
-- Luau version 6, Types version 3
-- Time taken: 0.000635 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Woodland Wanderer"}, {"Economy"}, {{
	EconType = "Sell";
	ItemId = "Wheat";
	ItemTradeGoal = 1;
}}, {nil}, {{
	Title = "Sell 1 wheat to Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Woodland Wanderer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:39
-- Luau version 6, Types version 3
-- Time taken: 0.001026 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"First Steps into the Depths"}, {"CharacterPosition", "InventoryCollect"}, {{
	TargetPosition = Vector3.new(1233, 261, 2248);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Forest;
}, {
	CollectionGoal = 32;
	ItemIds = {"Oak Wood"};
}}, {nil, nil}, {{
	Title = "Find and enter the Forest (left of citadel) ";
	ProgressText = "";
}, {
	Title = "Collect 32 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.First Steps into the Depths
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:40
-- Luau version 6, Types version 3
-- Time taken: 0.001404 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Forest Danger"}, {"CharacterPosition", "InventoryCollect", "Crafting", "InventoryCollect", "Crafting"}, {{
	TargetPosition = Vector3.new(-898, 1448, 7075);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage_upvr.CommonModules.CoreUtil).PlaceIds.Mines;
}, {
	CollectionGoal = 32;
	ItemIds = {"Stone"};
}, {
	CraftingGoal = 1;
	ItemId = "Stone Pickaxe";
}, {
	CollectionGoal = 32;
	ItemIds = {"Stone"};
}, {
	CraftingGoal = 1;
	ItemId = "Stone Axe";
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Find and enter the mines";
	ProgressText = "";
}, {
	Title = "Collect 32 Stone ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Stone Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Collect 32 Stone ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Stone Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 32
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [51] 37. Error Block 6 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [51] 37. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [54] 40. Error Block 11 start (CF ANALYSIS FAILED)
	local any_GetController_result1 = require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController")
	if CoreUtil:GetItemInInventory(any_GetController_result1.Inventory, "Stone Pickaxe") and CoreUtil:GetItemInInventory(any_GetController_result1.Inventory, "Stone Axe") then
		return true
	end
	-- KONSTANTERROR: [54] 40. Error Block 11 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Collecting Flowers
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:41
-- Luau version 6, Types version 3
-- Time taken: 0.001091 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Colored Clay"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 2;
	ItemIds = {"Black Poppy Flower"};
}, {
	CollectionGoal = 2;
	ItemIds = {"Blue Poppy Flower"};
}, {
	CollectionGoal = 2;
	ItemIds = {"Green Poppy Flower"};
}, {
	CollectionGoal = 2;
	ItemIds = {"Red Poppy Flower"};
}, {
	CollectionGoal = 2;
	ItemIds = {"White Poppy Flower"};
}, {
	CollectionGoal = 2;
	ItemIds = {"Yellow Poppy Flower"};
}}, {nil, nil, nil, nil, nil, nil}, {{
	Title = "Collect 2 Black Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 2 Blue Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 2 Green Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 2 Red Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 2 White Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 2 Yellow Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Copper Forge III
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:42
-- Luau version 6, Types version 3
-- Time taken: 0.001383 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"The Underlings"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 256;
	ItemIds = {"Oak Wood"};
}, {
	CollectionGoal = 32;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Scrap Metal"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Sword";
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Collect 128 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 256 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 32 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Kill Gizmos for 8 Scrap Metal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 31
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Copper Sword") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Iron Forge I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:43
-- Luau version 6, Types version 3
-- Time taken: 0.001325 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Pickaxe";
}}, {nil, nil, nil, nil}, {{
	Title = "Collect 128 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Iron Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Iron Pickaxe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Island Expansion
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:44
-- Luau version 6, Types version 3
-- Time taken: 0.000587 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Mining Frenzy I"}, {"Economy", "PlaceBlocks"}, {{
	EconType = "Buy";
	ItemId = "Dirt";
	ItemTradeGoal = 16;
}, {
	BlockGoal = 16;
	BlockId = "Dirt";
}}, {nil, nil}, {{
	Title = "Buy 16 Dirt from Gideon ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Expand island with 16 Dirt Blocks ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Economic Growth
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:45
-- Luau version 6, Types version 3
-- Time taken: 0.000699 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Stone Cold"}, {"Economy", "Economy", "Economy"}, {{
	EconType = "Sell";
	ItemId = "Green Goo";
	ItemTradeGoal = 32;
}, {
	EconType = "Buy";
	ItemId = "Wheat Seed";
	ItemTradeGoal = 1;
}, {
	EconType = "Sell";
	ItemId = "Wheat";
	ItemTradeGoal = 16;
}}, {nil, nil, nil}, {{
	Title = "Sell 32 Green Goo to Oberon ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Buy 1 wheat seed from Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Sell 16 wheat to Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Farming Frenzy I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:46
-- Luau version 6, Types version 3
-- Time taken: 0.001004 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge I"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 8;
	ItemIds = {"Wheat"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Carrot"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Corn"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Tomato"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Strawberry"};
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Harvest 8 Wheat ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Carrots ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Corn ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Tomatoes ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Strawberries ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Lumberjack I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:47
-- Luau version 6, Types version 3
-- Time taken: 0.000716 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Carrot Patch"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 8;
	ItemIds = {"Oak Wood"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Cherry Wood"};
}}, {nil, nil, nil}, {{
	Title = "Collect 8 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Mahogany Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Gold Forge II
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:48
-- Luau version 6, Types version 3
-- Time taken: 0.001899 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 128;
	ItemIds = {"Ash Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Gold Pickaxe";
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 128 Ash Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Gold Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Gold Pickaxe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Gold Forge I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:49
-- Luau version 6, Types version 3
-- Time taken: 0.001354 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 128;
	ItemIds = {"Ash Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Gold Axe";
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 128 Ash Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Gold Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Gold Axe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Gold Forge III
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:50
-- Luau version 6, Types version 3
-- Time taken: 0.001310 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Dark Hollow"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}, {
	CraftingGoal = 1;
	ItemId = "Gold Sword";
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Recycled Blade ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Gold Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Gold Sword") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.A Day for Clay
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:52
-- Luau version 6, Types version 3
-- Time taken: 0.000554 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Collecting Flowers"}, {"InventoryCollect"}, {{
	CollectionGoal = 16;
	ItemIds = {"Clay"};
}}, {nil}, {{
	Title = "Collect 16 Clay in the Forest ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Cobalt Forge III
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:53
-- Luau version 6, Types version 3
-- Time taken: 0.001136 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Farming Frenzy I"}, {"InventoryCollect", "Crafting", "Crafting"}, {{
	CollectionGoal = 320;
	ItemIds = {"Cobalt"};
}, {
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Sword";
}}, {nil, nil, nil}, {{
	Title = "Collect 320 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Recycled Blade ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Cobalt Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 26
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Cobalt Sword") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Carrot Patch
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:54
-- Luau version 6, Types version 3
-- Time taken: 0.000718 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge I"}, {"Economy", "InventoryCollect", "Economy"}, {{
	EconType = "Buy";
	ItemId = "Carrot Seed";
	ItemTradeGoal = 1;
}, {
	CollectionGoal = 1;
	ItemIds = {"Carrot"};
}, {
	EconType = "Sell";
	ItemId = "Carrot";
	ItemTradeGoal = 1;
}}, {nil, nil, nil}, {{
	Title = "Buy 1 carrot seed from Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Harvest your grown carrot ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Sell 1 carrot to Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Copper Forge I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:55
-- Luau version 6, Types version 3
-- Time taken: 0.001261 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge II"}, {"InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 64;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Oak Wood"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Pickaxe";
}}, {nil, nil, nil}, {{
	Title = "Collect 64 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 27
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Copper Pickaxe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Copper Forge II
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:56
-- Luau version 6, Types version 3
-- Time taken: 0.001170 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge III"}, {"InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 64;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Oak Wood"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Axe";
}}, {nil, nil, nil}, {{
	Title = "Collect 64 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 27
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Copper Axe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.The Underlings
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:57
-- Luau version 6, Types version 3
-- Time taken: 0.000626 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge I"}, {"Economy", "PlaceBlocks"}, {{
	EconType = "Buy";
	ItemId = "Wheat Underling Anchor";
	ItemTradeGoal = 1;
}, {
	BlockGoal = 1;
	BlockId = "Wheat Underling Anchor";
}}, {nil, nil}, {{
	Title = "Buy Wheat Underling from Oberon ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Place Wheat Underling near wheat ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Forest Danger
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:58
-- Luau version 6, Types version 3
-- Time taken: 0.001320 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Economic Growth"}, {"KillMob", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	KillGoal = 10;
	MobIds = {"Green Slime"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Stone"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Stone Sword";
}}, {nil, nil, nil, nil}, {{
	Title = "Kill 10 Green Slime ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Collect 64 Stone in mines ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal in mines ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Stone Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 28
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Stone Sword") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Stone Cold
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:57:59
-- Luau version 6, Types version 3
-- Time taken: 0.000724 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"A Day for Clay"}, {"Crafting", "Crafting", "Crafting"}, {{
	CraftingGoal = 1;
	ItemId = "Cobblestone";
}, {
	CraftingGoal = 1;
	ItemId = "Stone Block";
}, {
	CraftingGoal = 1;
	ItemId = "Stone Brick Block";
}}, {nil, nil, nil}, {{
	Title = "Craft Cobblestone Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft Stone Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft Stone Brick Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Colored Clay
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:00
-- Luau version 6, Types version 3
-- Time taken: 0.000690 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Island Expansion"}, {"Crafting", "Crafting", "Crafting"}, {{
	CraftingGoal = 1;
	ItemId = "Clay Red";
}, {
	CraftingGoal = 1;
	ItemId = "Clay Green";
}, {
	CraftingGoal = 1;
	ItemId = "Clay Blue";
}}, {nil, nil, nil}, {{
	Title = "Craft a Red Clay Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Green Clay Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Blue Clay Block ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Mining Frenzy I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:01
-- Luau version 6, Types version 3
-- Time taken: 0.000970 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Lumberjack I"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 8;
	ItemIds = {"Stone"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Basalt"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Marble"};
}}, {nil, nil, nil, nil, nil}, {{
	Title = "Collect 8 Stone ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Basalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Marble ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Iron Forge II
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:02
-- Luau version 6, Types version 3
-- Time taken: 0.001389 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Axe";
}}, {nil, nil, nil, nil}, {{
	Title = "Collect 128 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Iron Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Iron Axe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Iron Forge III
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:03
-- Luau version 6, Types version 3
-- Time taken: 0.001310 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge I"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 192;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 256;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Sword";
}}, {nil, nil, nil, nil}, {{
	Title = "Collect 192 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 256 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Iron Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Iron Sword") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Dark Hollow
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:05
-- Luau version 6, Types version 3
-- Time taken: 0.000692 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "KillMob"}, {{
	CollectionGoal = 64;
	ItemIds = {"Dark Hollow Wood"};
}, {
	KillGoal = 10;
	MobIds = {"GrimThorn"};
}}, {nil, nil}, {{
	Title = "Collect 64 Dark Hollow Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Kill 10 GrimThorn ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}}, true, false)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Cobalt Forge I
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:06
-- Luau version 6, Types version 3
-- Time taken: 0.001331 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 256;
	ItemIds = {"Cobalt"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Pickaxe";
}}, {nil, nil, nil, nil}, {{
	Title = "Collect 256 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Mahogany Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Cobalt Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Cobalt Pickaxe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Getting Started.Cobalt Forge II
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:07
-- Luau version 6, Types version 3
-- Time taken: 0.001301 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 256;
	ItemIds = {"Cobalt"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Axe";
}}, {nil, nil, nil, nil}, {{
	Title = "Collect 256 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Mahogany Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Cobalt Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [44] 32. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [44] 32. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 35. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, "Cobalt Axe") then
		return true
	end
	-- KONSTANTERROR: [47] 35. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Play The Game
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:08
-- Luau version 6, Types version 3
-- Time taken: 0.000547 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InPlace"}, {{
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Island;
}}, {{
	Badge = 725497835714812;
}, nil}, {{
	Title = "Play the game for the first time";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Reached Forest
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:09
-- Luau version 6, Types version 3
-- Time taken: 0.000534 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(1159, 252, 2186);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Forest;
}}, {{
	Badge = 4246293575429864;
}, nil}, {{
	Title = "Reach the forest";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Reached Citadel
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:10
-- Luau version 6, Types version 3
-- Time taken: 0.000560 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InPlace"}, {{
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 4254753589823055;
}, nil}, {{
	Title = "Visit Citadel for the first time";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Reached Mines
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:11
-- Luau version 6, Types version 3
-- Time taken: 0.000550 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(-898, 1448, 7075);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Mines;
}}, {{
	Badge = 3379157258755019;
}, nil}, {{
	Title = "Reach the Mines";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Reach 1M Coin Balance
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:12
-- Luau version 6, Types version 3
-- Time taken: 0.000457 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CoinBalance"}, {{
	BalanceGoal = 1000000;
}}, {{
	Badge = 1642478039352243;
}, nil}, {{
	Title = "Reach 1m coin balance";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Reach Player Level
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:13
-- Luau version 6, Types version 3
-- Time taken: 0.001149 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level"}, {{
	CurrentLevelGoal = 10;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 20;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 30;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 40;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 50;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 60;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 70;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 80;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 90;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 100;
	LevelPath = {"Overall"};
}}, {{
	Badge = 1291643517476504;
}, {
	Badge = 2045076234781931;
}, {
	Badge = 4460677254887057;
}, {
	Badge = 89488805301833;
}, {
	Badge = 2842197254378018;
}, {
	Badge = 1553423802563029;
}, {
	Badge = 4205149178611816;
}, {
	Badge = 2532931131676682;
}, {
	Badge = 3552037880169685;
}, {
	Badge = 2184198202663641;
}}, {{
	Title = "Reach 1m coin balance";
	ProgressText = "";
}}, false, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Collect 100 Flowers
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:14
-- Luau version 6, Types version 3
-- Time taken: 0.000964 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 32;
	ItemIds = {"Black Poppy Flower", "Blue Poppy Flower", "Green Poppy Flower", "Red Poppy Flower", "White Poppy Flower", "Yellow Poppy Flower"};
}}, {{
	Badge = 4481010433767182;
}, nil}, {{
	Title = "Collect 100 Flowers";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Purchase Item
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:16
-- Luau version 6, Types version 3
-- Time taken: 0.000528 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"MarketPurchase"}, {{
	ItemGoal = 1;
}}, {{
	Badge = 2070520117153328;
}, nil}, {{
	Title = "Purchase 1 item";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Sit on the throne
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:17
-- Luau version 6, Types version 3
-- Time taken: 0.000623 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(248, 108, 1852);
	MinDistance = 8;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 1231964068369981;
}, nil}, {{
	Title = "Sit on the throne";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Craft Recycled Blade
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:18
-- Luau version 6, Types version 3
-- Time taken: 0.000505 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Crafting"}, {{
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}}, {{
	Badge = 3170936748963907;
}, nil}, {{
	Title = "Craft A Recycled Blade";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Defeat a Grimthorn
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:19
-- Luau version 6, Types version 3
-- Time taken: 0.000550 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1;
	MobIds = {"GrimThorn"};
}}, {{
	Badge = 3058954510847229;
}, nil}, {{
	Title = "Defeat a Grimthorn";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Cosmetics Change
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:20
-- Luau version 6, Types version 3
-- Time taken: 0.000475 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CosmeticChange"}, {{
	ChangeGoal = 1;
}}, {{
	Badge = 107461536650824;
}, nil}, {{
	Title = "Change portal or sky from default";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Green Thumb
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:21
-- Luau version 6, Types version 3
-- Time taken: 0.000502 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 5000;
	ItemIds = {"Wheat"};
}}, {{
	Badge = 586162765289105;
	Portal = "Barn";
}}, {{
	Title = "Harvest 5000 Wheat";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Slime Killer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:22
-- Luau version 6, Types version 3
-- Time taken: 0.000514 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1000;
	MobIds = {"Green Slime"};
}}, {{
	Badge = 229625477066452;
	Portal = "Slime";
}}, {{
	Title = "Defeat 1000 Green Slime";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Leap of Faith
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:23
-- Luau version 6, Types version 3
-- Time taken: 0.000640 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(237, 245, 1764);
	MinDistance = 25;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 82114763758870;
	Portal = "Frameless";
}}, {{
	Title = "Leap of Faith";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.The Wheel Turns
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:24
-- Luau version 6, Types version 3
-- Time taken: 0.000516 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"TimePlayed"}, {{
	TotalTimeGoal = 28800;
}}, {{
	Badge = 4448519138604339;
	Sky = "Above Clouds";
}}, {{
	Title = "Play for 28800 Seconds";
	ProgressText = "Play for a total of 8 hours";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.Farlight Crystals
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:25
-- Luau version 6, Types version 3
-- Time taken: 0.000887 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Collection", "Collection", "Collection"}, {{
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[1];
	PlaceId = CoreUtil.PlaceIds.Citadel;
}, {
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[2];
	PlaceId = CoreUtil.PlaceIds.Forest;
}, {
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[3];
	PlaceId = CoreUtil.PlaceIds.Mines;
}}, {{
	Badge = 1437872626639825;
}, {
	Badge = 231119644614158;
}, {
	Badge = 4139755977933519;
}}, {{
	Title = "Collect 8 Farlight Crystals (Citadel) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Farlight Crystals (Forest) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Farlight Crystals (Mines) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}}, false, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.Task.DefinitionModules.Badges.I like Potatoes
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:26
-- Luau version 6, Types version 3
-- Time taken: 0.000556 seconds

return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 1000000;
	ItemIds = {"Red Potato"};
}}, {{
	Badge = 1695156608904630;
	Block = {
		Id = "Technoblade Trophy";
		Count = 1;
	};
}}, {{
	Title = "Harvest 1M Red Potatoes";
	ProgressText = "";
}}, true, true)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:48:35
-- Luau version 6, Types version 3
-- Time taken: 0.000438 seconds

for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:28
-- Luau version 6, Types version 3
-- Time taken: 0.000499 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.ProgressTemplate = arg2
	module.ActivationFunction = arg3
	module.IsCompleted = arg4
	return setmetatable(module, module_upvr)
end
return module_upvr

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.CharacterPosition
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:29
-- Luau version 6, Types version 3
-- Time taken: 0.001993 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	Completed = false;
}, function(arg1, arg2) -- Line 12
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Players_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var6
	if not RunService_upvr:IsServer() then return end
	local Player = arg1.Player
	local var8_upvr = arg1.Progress[arg2]
	local var9_upvr = arg1.Def.TaskParams[arg2]
	if var8_upvr.Completed == true then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local function CharacterAdded(arg1_2) -- Line 29
		--[[ Upvalues[3]:
			[1]: var9_upvr (readonly)
			[2]: var8_upvr (readonly)
			[3]: BindableEvent_upvr (readonly)
		]]
		local HumanoidRootPart = arg1_2:WaitForChild("HumanoidRootPart")
		while HumanoidRootPart and HumanoidRootPart.Parent and task.wait() do
			if (HumanoidRootPart.Position - var9_upvr.TargetPosition).Magnitude <= var9_upvr.MinDistance then
				var8_upvr.Completed = true
				BindableEvent_upvr:Fire(true)
				return
			end
		end
	end
	var6 = nil
	if var9_upvr.PlaceId == game.PlaceId then
		if Player.Character then
			coroutine.wrap(CharacterAdded)(Player.Character)
		end
		var6 = Player.CharacterAdded:Connect(CharacterAdded)
	end
	repeat
		local any_CustomYeild_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
	until any_CustomYeild_result1 == true and any_CustomYeild_result1 == Player
	BindableEvent_upvr:Destroy()
	if var6 then
		var6:Disconnect()
	end
	if type(any_CustomYeild_result1) ~= "boolean" or not any_CustomYeild_result1 then
	end
	return nil
end, function(arg1, arg2, arg3) -- Line 60
	return arg2.Completed
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.InventoryCollect
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:30
-- Luau version 6, Types version 3
-- Time taken: 0.001854 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsCollected = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.CollectionGoal <= var9_upvr.ItemsCollected then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "InventoryCollect" or not table.find(var10_upvr.ItemIds, arg3) or arg2_2 ~= Player_upvr then
		else
			local var14 = var9_upvr
			var14.ItemsCollected += math.clamp(arg4, 0, var10_upvr.CollectionGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.CollectionGoal <= var9_upvr.ItemsCollected then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 51
	local var17
	if not var17 then
		var17 = print
		var17(arg2, arg3)
	end
	if arg3.CollectionGoal > arg2.ItemsCollected then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.PlaceBlocks
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:31
-- Luau version 6, Types version 3
-- Time taken: 0.001708 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	BlocksPlaced = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.BlockGoal <= var9_upvr.BlocksPlaced then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "PlaceBlock" or arg3 ~= var10_upvr.BlockId or arg2_2 ~= Player_upvr then
		else
			local var14 = var9_upvr
			var14.BlocksPlaced += 1
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.BlockGoal <= var9_upvr.BlocksPlaced then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 51
	local var17
	if arg3.BlockGoal > arg2.BlocksPlaced then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.InPlace
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:32
-- Luau version 6, Types version 3
-- Time taken: 0.001429 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	IsInPlace = false;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 22 start (CF ANALYSIS FAILED)
	local var7
	if not RunService_upvr:IsServer() then return end
	local var8 = arg1.Progress[arg2]
	if var8.IsInPlace == true then
		return true
	end
	var7 = ReplicatedStorage_upvr.CommonModules
	var7 = Knit_upvr
	var7 = "TaskService"
	var7 = nil
	if game.PlaceId == arg1.Def.TaskParams[arg2].PlaceId then
		var8.IsInPlace = true
		-- KONSTANTWARNING: GOTO [59] #41
	end
	-- KONSTANTERROR: [0] 1. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [48] 33. Error Block 25 start (CF ANALYSIS FAILED)
	repeat
		var7 = require(var7.CoreUtil):CustomYeild(nil, Players_upvr.PlayerRemoving)
	until var7 == arg1.Player
	if not var7 then
	end
	do
		return var8.IsInPlace
	end
	-- KONSTANTERROR: [48] 33. Error Block 25 end (CF ANALYSIS FAILED)
end, function(arg1, arg2, arg3) -- Line 45
	return arg2.IsInPlace
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.Economy
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:33
-- Luau version 6, Types version 3
-- Time taken: 0.001985 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsTraded = 0;
	PriceTraded = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if (var10_upvr.ItemTradeGoal or math.huge) <= var9_upvr.ItemsTraded or (var10_upvr.PriceTradeGoal or math.huge) <= var9_upvr.PriceTraded then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var16 = var7
	until var16 == true and var16 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4, arg5, arg6) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "Economy" or arg2_2 ~= Player_upvr or arg3 ~= var10_upvr.EconType or arg4 and arg4 ~= var10_upvr.ItemId then
		else
			if var10_upvr.ItemTradeGoal then
				local var14 = var9_upvr
				var14.ItemsTraded += math.clamp(arg5, 0, var10_upvr.ItemTradeGoal)
			end
			if var10_upvr.PriceTradeGoal then
				local var15 = var9_upvr
				var15.PriceTraded += math.clamp(arg6, 0, var10_upvr.PriceTradeGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.ItemTradeGoal or math.huge) <= var9_upvr.ItemsTraded or (var10_upvr.PriceTradeGoal or math.huge) <= var9_upvr.PriceTraded then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var16
		return var7
	end
	if type(var16) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 52
	local var18 = true
	if (arg3.ItemTradeGoal or math.huge) > arg2.ItemsTraded then
		if (arg3.PriceTradeGoal or math.huge) > arg2.PriceTraded then
			var18 = false
		else
			var18 = true
		end
	end
	return var18
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.Crafting
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:34
-- Luau version 6, Types version 3
-- Time taken: 0.001707 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsCrafted = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.CraftingGoal <= var9_upvr.ItemsCrafted then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "Crafting" or arg3 ~= var10_upvr.ItemId or arg2_2 ~= Player_upvr then
		else
			local var14 = var9_upvr
			var14.ItemsCrafted += math.clamp(arg4, 0, var10_upvr.CraftingGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.CraftingGoal <= var9_upvr.ItemsCrafted then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 51
	local var17
	if arg3.CraftingGoal > arg2.ItemsCrafted then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.Collection
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:35
-- Luau version 6, Types version 3
-- Time taken: 0.007237 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
local Streamable_upvr = require(ReplicatedStorage_upvr.Packages.Streamable).Streamable
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	NumberCollected = 0;
	CollectedItems = {};
}, function(arg1, arg2) -- Line 15
	--[[ Upvalues[5]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: Streamable_upvr (readonly)
		[5]: Players_upvr (readonly)
	]]
	local var75_upvr = arg1.Progress[arg2]
	local var76_upvr = arg1.Def.TaskParams[arg2]
	local CollectionFolder_upvr = var76_upvr.CollectionFolder
	local BindableEvent_upvr_2 = Instance.new("BindableEvent")
	local DestroyCollection
	if DestroyCollection then
		DestroyCollection = var76_upvr.PlaceId
		if DestroyCollection == game.PlaceId then
			function DestroyCollection(arg1_9) -- Line 35
				--[[ Upvalues[1]:
					[1]: Streamable_upvr (copied, readonly)
				]]
				local function _(arg1_10, arg2_6) -- Line 36
					arg1_10:Destroy()
				end
				arg1_9:Destroy()
			end
			for _, v in pairs(var75_upvr.CollectedItems) do
				local function _(arg1_11, arg2_7) -- Line 36
					arg1_11:Destroy()
				end
				CollectionFolder_upvr:FindFirstChild(v):Destroy()
			end
			Knit_upvr.GetService("TaskService").UpdateTask:Connect(function(arg1_12) -- Line 47
				--[[ Upvalues[5]:
					[1]: arg1 (readonly)
					[2]: arg2 (readonly)
					[3]: var75_upvr (readonly)
					[4]: CollectionFolder_upvr (readonly)
					[5]: Streamable_upvr (copied, readonly)
				]]
				if arg1_12.Id ~= arg1.Id then
				elseif #arg1_12.Progress[arg2].CollectedItems ~= #var75_upvr.CollectedItems then
					for _, v_4 in pairs(arg1_12.Progress[arg2].CollectedItems) do
						if not table.find(var75_upvr.CollectedItems, v_4) then
							local SOME_2 = CollectionFolder_upvr:FindFirstChild(v_4)
							if SOME_2 then
								local function _(arg1_13, arg2_8) -- Line 36
									arg1_13:Destroy()
								end
								SOME_2:Destroy()
							end
						end
					end
				end
			end)
			return
		end
	end
	DestroyCollection = #var75_upvr.CollectedItems
	if DestroyCollection == var76_upvr.CollectionGoal then
		DestroyCollection = true
		return DestroyCollection
	end
	DestroyCollection = var76_upvr.PlaceId
	if DestroyCollection == game.PlaceId then
		DestroyCollection = pairs(CollectionFolder_upvr:GetChildren())
		local pairs_result1_2, pairs_result2_3, pairs_result3_4 = pairs(CollectionFolder_upvr:GetChildren())
		for _, _ in pairs_result1_2, pairs_result2_3, pairs_result3_4 do
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [121.17]
			local Name_upvr_2 = nil.Name
			local var98
			local function INLINED_3() -- Internal function, doesn't exist in bytecode
				var98 = nil.PrimaryPart
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				return var98
			end
			if not nil:IsA("Model") or not INLINED_3() then
				var98 = nil
			end
			if table.find(var75_upvr.CollectedItems, Name_upvr_2) then
			else
				local Player_upvr = arg1.Player
				local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
				local var102_upvw
				local TaskService_upvr_2 = Knit_upvr.GetService("TaskService")
				local DataHandlerService_upvr = Knit_upvr.GetService("DataHandlerService")
				local PlayerService_upvr = Knit_upvr.GetService("PlayerService")
				var102_upvw = var98.Touched:Connect(function(arg1_14) -- Line 76
					--[[ Upvalues[12]:
						[1]: Players_upvr (copied, readonly)
						[2]: Player_upvr (readonly)
						[3]: CoreUtil_upvr (readonly)
						[4]: var102_upvw (read and write)
						[5]: var75_upvr (readonly)
						[6]: Name_upvr_2 (readonly)
						[7]: TaskService_upvr_2 (readonly)
						[8]: arg1 (readonly)
						[9]: DataHandlerService_upvr (readonly)
						[10]: PlayerService_upvr (readonly)
						[11]: var76_upvr (readonly)
						[12]: BindableEvent_upvr_2 (readonly)
					]]
					if Players_upvr:GetPlayerFromCharacter(arg1_14.Parent) == Player_upvr and CoreUtil_upvr:ValidateHumanoid(arg1_14.Parent) then
						var102_upvw:Disconnect()
						table.insert(var75_upvr.CollectedItems, Name_upvr_2)
						var75_upvr.NumberCollected = #var75_upvr.CollectedItems
						TaskService_upvr_2.Client.UpdateTask:Fire(Player_upvr, arg1)
						if arg1.Id == "Farlight Crystals" then
							local any_GetData_result1 = CoreUtil_upvr:GetData(Player_upvr, DataHandlerService_upvr)
							if not any_GetData_result1 then return end
							local Miscellaneous = any_GetData_result1.Statistics.Miscellaneous
							Miscellaneous["Farlight Crystals Found"] += 1
							TaskService_upvr_2.Client.StatsUpdated:Fire(Player_upvr, any_GetData_result1.Statistics)
							PlayerService_upvr.Client.Warn:Fire(Player_upvr, "You've collected a farlight crystal")
						end
						Player_upvr.Character.Humanoid.MaxHealth = PlayerService_upvr:UpdateHealth(Player_upvr)
						if #var75_upvr.CollectedItems == var76_upvr.CollectionGoal then
							BindableEvent_upvr_2:Fire(true)
						end
					end
				end)
				table.insert({}, var102_upvw)
			end
		end
	end
	repeat
		pairs_result1_2 = CoreUtil_upvr:CustomYeild(nil, BindableEvent_upvr_2.Event, Players_upvr.PlayerRemoving)
		local var108 = pairs_result1_2
	until var108 == true and var108 == Player_upvr
	pairs_result1_2 = BindableEvent_upvr_2:Destroy
	pairs_result1_2()
	pairs_result1_2 = pairs
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	pairs_result1_2 = pairs_result1_2({})
	local pairs_result1_2_result1, pairs_result1_2_result2, pairs_result1_2_result3 = pairs_result1_2({})
	for _, v_3 in pairs_result1_2_result1, pairs_result1_2_result2, pairs_result1_2_result3 do
		v_3:Disconnect()
	end
	local function INLINED_4() -- Internal function, doesn't exist in bytecode
		pairs_result1_2_result1 = var108
		return pairs_result1_2_result1
	end
	if type(var108) ~= "boolean" or not INLINED_4() then
		pairs_result1_2_result1 = nil
	end
	return pairs_result1_2_result1
end, function(arg1, arg2, arg3) -- Line 121
	local var113
	if #arg2.CollectedItems ~= arg3.CollectionGoal then
		var113 = false
	else
		var113 = true
	end
	return var113
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.CoinBalance
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:36
-- Luau version 6, Types version 3
-- Time taken: 0.002146 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	CoinsCollected = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local any_GetData_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(Player_upvr, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_upvr then return end
	if (var10_upvr.CoinsCollectGoal or math.huge) <= var9_upvr.CoinsCollected or (var10_upvr.BalanceGoal or math.huge) <= any_GetData_result1_upvr.Coins then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var17 = var7
	until var17 == true and var17 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 38
		--[[ Upvalues[7]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: any_GetData_result1_upvr (readonly)
			[7]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "CoinsChanged" or arg2_2 ~= Player_upvr then
		else
			if var10_upvr.CoinsCollectGoal then
				local var16 = var9_upvr
				var16.CoinsCollected += math.clamp(arg3, 0, var10_upvr.CoinsCollectGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.CoinsCollectGoal or math.huge) <= var9_upvr.CoinsCollected or (var10_upvr.BalanceGoal or math.huge) <= any_GetData_result1_upvr.Coins then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var17
		return var7
	end
	if type(var17) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 60
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local any_GetData_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then return end
	local var20 = true
	if (arg3.CoinsCollectGoal or math.huge) > arg2.CoinsCollected then
		if (arg3.BalanceGoal or math.huge) > any_GetData_result1.Coins then
			var20 = false
		else
			var20 = true
		end
	end
	return var20
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.Level
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:37
-- Luau version 6, Types version 3
-- Time taken: 0.005290 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	XpEarned = 0;
	LevelsEarned = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetData_result1_2_upvr = CoreUtil_upvr:GetData(Player_upvr, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_2_upvr then return end
	if (var10_upvr.XpGoal or math.huge) <= var9_upvr.XpEarned or (var10_upvr.LevelGoal or math.huge) <= var9_upvr.LevelsEarned then
		return true
	end
	local next_result1_2_upvr, next_result2_4_upvr, next_result3_upvw = next(var10_upvr.LevelPath)
	if type(next_result1_2_upvr) == "string" then
		local next_result1_3, next_result2_6 = next(next_result2_4_upvr)
		_ = next_result1_3 -- Setting global
		next_result3_upvw = next_result2_6
	end
	if next_result2_4_upvr == "Overall" then
		-- KONSTANTWARNING: GOTO [111] #80
	end
	if next_result3_upvw == "Overall" then
	else
	end
	local var19
	if var10_upvr.CurrentLevelGoal and var10_upvr.CurrentLevelGoal <= CoreUtil_upvr:SubMasteryLevelFromXP(any_GetData_result1_2_upvr.Masteries[next_result1_2_upvr][next_result3_upvw]) then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var19 = TaskService_upvr.TaskProgress
	repeat
		var19 = CoreUtil_upvr:CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var36 = var19
	until var36 == true and var36 == Player_upvr
	var19 = BindableEvent_upvr:Destroy
	var19()
	var19 = var19.Event:Connect(function(arg1_2, arg2_2, arg3, arg4, arg5) -- Line 53
		--[[ Upvalues[11]:
			[1]: Player_upvr (readonly)
			[2]: next_result2_4_upvr (readonly)
			[3]: next_result3_upvw (read and write)
			[4]: next_result1_2_upvr (readonly)
			[5]: var10_upvr (readonly)
			[6]: var9_upvr (readonly)
			[7]: TaskService_upvr (readonly)
			[8]: arg1 (readonly)
			[9]: CoreUtil_upvr (readonly)
			[10]: any_GetData_result1_2_upvr (readonly)
			[11]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "LevelUpdated" or arg2_2 ~= Player_upvr then
		else
			local next_result1_6, next_result2_5, next_result3_2 = next(arg3)
			if type(next_result1_6) == "string" then
				local next_result1_8, next_result2_8 = next(next_result2_5)
				_ = next_result1_8 -- Setting global
			end
			local var27
			if next_result2_5 == next_result2_4_upvr or next_result2_8 == next_result3_upvw and next_result1_6 == next_result1_2_upvr then
				if var10_upvr.XpGoal then
					local var28 = var9_upvr
					var27 = 0
					var28.XpEarned += math.clamp(arg4, var27, var10_upvr.XpGoal)
				end
				if var10_upvr.LevelGoal then
					local var29 = var9_upvr
					var27 = 0
					var29.LevelsEarned += math.clamp(arg5, var27, var10_upvr.LevelGoal)
				end
				TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
				var27 = var10_upvr
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var27 = var10_upvr
					return (var27.LevelGoal or math.huge) <= var9_upvr.LevelsEarned
				end
				if (var27.XpGoal or math.huge) <= var9_upvr.XpEarned or INLINED() then
				end
				local next_result1_7, next_result2_7, next_result3_3 = next(var10_upvr.LevelPath)
				if type(next_result1_7) == "string" then
					local next_result1, next_result2_2 = next(next_result2_7)
					_ = next_result1 -- Setting global
					next_result3_3 = next_result2_2
				end
				if next_result2_7 == "Overall" then
				elseif next_result3_3 == "Overall" then
				else
				end
				local var35
				if var10_upvr.CurrentLevelGoal and var10_upvr.CurrentLevelGoal <= CoreUtil_upvr:SubMasteryLevelFromXP(any_GetData_result1_2_upvr.Masteries[next_result1_7][next_result3_3]) then
					var35 = true
				end
				if var35 then
					BindableEvent_upvr:Fire(true)
				end
			end
		end
	end):Disconnect
	var19()
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var19 = var36
		return var19
	end
	if type(var36) ~= "boolean" or not INLINED_2() then
		var19 = nil
	end
	return var19
end, function(arg1, arg2, arg3) -- Line 104
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetData_result1 = CoreUtil:GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
	local var40
	if not any_GetData_result1 then
	else
		if (arg3.XpGoal or math.huge) <= arg2.XpEarned or (arg3.LevelGoal or math.huge) <= arg2.LevelsEarned then
			return true
		end
		local next_result1_5, next_result2, next_result3 = next(arg3.LevelPath)
		if type(next_result1_5) == "string" then
			local next_result1_4, next_result2_3 = next(next_result2)
			_ = next_result1_4 -- Setting global
			next_result3 = next_result2_3
		end
		if next_result2 == "Overall" then
			-- KONSTANTWARNING: GOTO [90] #65
		end
		if next_result3 == "Overall" then
		else
		end
		if arg3.CurrentLevelGoal and arg3.CurrentLevelGoal <= CoreUtil:SubMasteryLevelFromXP(any_GetData_result1.Masteries[next_result1_5][next_result3]) then
			return true
		end
	end
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.MarketPurchase
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:38
-- Luau version 6, Types version 3
-- Time taken: 0.001900 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsBought = 0;
	RobuxSpent = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if (var10_upvr.ItemGoal or math.huge) <= var9_upvr.ItemsBought or (var10_upvr.RobuxGoal or math.huge) <= var9_upvr.RobuxSpent then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var16 = var7
	until var16 == true and var16 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MarketPurchase" or arg2_2 ~= Player_upvr or var10_upvr.ItemIds and not table.find(var10_upvr.ItemIds, arg3) then
		else
			if var10_upvr.ItemGoal then
				local var14 = var9_upvr
				var14.ItemsBought += math.clamp(1, 0, var10_upvr.ItemGoal)
			end
			if var10_upvr.RobuxGoal then
				local var15 = var9_upvr
				var15.RobuxSpent += math.clamp(arg4, 0, var10_upvr.RobuxGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.ItemGoal or math.huge) <= var9_upvr.ItemsBought or (var10_upvr.RobuxGoal or math.huge) <= var9_upvr.RobuxSpent then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var16
		return var7
	end
	if type(var16) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 56
	if (arg3.ItemGoal or math.huge) <= arg2.ItemsBought or (arg3.RobuxGoal or math.huge) <= arg2.RobuxSpent then
		return true
	end
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.DamageMob
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:39
-- Luau version 6, Types version 3
-- Time taken: 0.001776 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	DamageDealt = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.DamageGoal <= var9_upvr.DamageDealt then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MobDamage" or arg2_2 ~= Player_upvr or var10_upvr.MobIds and not table.find(var10_upvr.MobIds, arg3) then
		else
			local var14 = var9_upvr
			var14.DamageDealt += math.clamp(1, 0, var10_upvr.DamageGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.DamageGoal <= var9_upvr.DamageDealt then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 55
	if arg3.DamageGoal <= arg2.DamageDealt then
		return true
	end
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.KillMob
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:40
-- Luau version 6, Types version 3
-- Time taken: 0.001782 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	MobsKilled = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.KillGoal <= var9_upvr.MobsKilled then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MobKill" or arg2_2 ~= Player_upvr or var10_upvr.MobIds and not table.find(var10_upvr.MobIds, arg3) then
		else
			local var14 = var9_upvr
			var14.MobsKilled += math.clamp(1, 0, var10_upvr.KillGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.KillGoal <= var9_upvr.MobsKilled then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 55
	if arg3.KillGoal <= arg2.MobsKilled then
		return true
	end
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.CosmeticChange
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:41
-- Luau version 6, Types version 3
-- Time taken: 0.001742 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	Changes = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.ChangeGoal <= var9_upvr.Changes then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "CosmeticChange" or arg2_2 ~= Player_upvr or var10_upvr.CosmeticIds and not table.find(var10_upvr.CosmeticIds, arg3) then
		else
			local var14 = var9_upvr
			var14.Changes += math.clamp(1, 0, var10_upvr.ChangeGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.ChangeGoal <= var9_upvr.Changes then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 55
	if arg3.ChangeGoal <= arg2.Changes then
		return true
	end
end)

-- ReplicatedStorage.CommonModules.DefinitionModules.TaskType.DefinitionModules.TimePlayed
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:42
-- Luau version 6, Types version 3
-- Time taken: 0.002624 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	TimePlayed = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	var7 = Knit_upvr.GetService("DataHandlerService")
	local any_GetData_result1_2_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(Player_upvr, var7)
	if not any_GetData_result1_2_upvr then return end
	var7 = var10_upvr.TimeGoal
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var10_upvr.TotalTimeGoal
		var7 = any_GetData_result1_2_upvr.Statistics
		return (var7 or math.huge) <= var7.Miscellaneous["Time Played"]
	end
	if (var7 or math.huge) <= var9_upvr.TimePlayed or INLINED() then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = coroutine.wrap
	var7 = var7(function() -- Line 35
		--[[ Upvalues[5]:
			[1]: Player_upvr (readonly)
			[2]: var9_upvr (readonly)
			[3]: var10_upvr (readonly)
			[4]: any_GetData_result1_2_upvr (readonly)
			[5]: BindableEvent_upvr (readonly)
		]]
		while game.Players:FindFirstChild(Player_upvr.Name) and task.wait(1) do
			if (var10_upvr.TimeGoal or math.huge) <= var9_upvr.TimePlayed or (var10_upvr.TotalTimeGoal or math.huge) <= any_GetData_result1_2_upvr.Statistics.Miscellaneous["Time Played"] then
				BindableEvent_upvr:Fire(true)
				return
			end
			local var15 = var9_upvr
			var15.TimePlayed += 1
		end
	end)
	var7()
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var16 = var7
	until var16 == true and var16 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var7 = var16
		return var7
	end
	if type(var16) ~= "boolean" or not INLINED_2() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 61
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
	]]
	local var18
	if RunService_upvr:IsServer() then
		var18 = arg1
		local any_GetData_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(var18, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local var20 = true
		var18 = arg2.TimePlayed
		if (arg3.TimeGoal or math.huge) > var18 then
			var18 = any_GetData_result1.Statistics.Miscellaneous["Time Played"]
			if (arg3.TotalTimeGoal or math.huge) > var18 then
				var20 = false
			else
				var20 = true
			end
		end
		return var20
	end
	local any_await_result1, any_await_result2 = Knit_upvr.GetService("TaskService"):GetStats():andThen():await()
	var18 = true
	if (arg3.TimeGoal or math.huge) > arg2.TimePlayed then
		if (arg3.TotalTimeGoal or math.huge) > any_await_result2.Miscellaneous["Time Played"] then
			var18 = false
		else
			var18 = true
		end
	end
	return var18
end)

-- ServerScriptService.CopiedScripts_1
-- Workspace.NPC.Gideon.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Gideon.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Maya.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Maya.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Oberon.Animate
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:32
-- Luau version 6, Types version 3
-- Time taken: 0.020132 seconds

local Parent_upvr = script.Parent
local Humanoid_upvr = Parent_upvr:WaitForChild("Humanoid")
local var11_upvw = "Standing"
local pcall_result1_3, pcall_result2_2 = pcall(function() -- Line 7
	return UserSettings():IsUserFeatureEnabled("UserNoUpdateOnLoop")
end)
local var15_upvr = pcall_result1_3 and pcall_result2_2
local pcall_result1_2, pcall_result2 = pcall(function() -- Line 10
	return UserSettings():IsUserFeatureEnabled("UserAnimateScaleRun")
end)
local var19_upvr = pcall_result1_2 and pcall_result2
local function getRigScale_upvr() -- Line 13, Named "getRigScale"
	--[[ Upvalues[2]:
		[1]: var19_upvr (readonly)
		[2]: Parent_upvr (readonly)
	]]
	if var19_upvr then
		return Parent_upvr:GetScale()
	end
	return 1
end
local var20_upvw = ""
local var21_upvw
local var22_upvw
local var23_upvw
local var24_upvw = 1
local var25_upvw
local var26_upvw
local tbl_upvr_3 = {}
local tbl_upvr = {
	idle = {{
		id = "http://www.roblox.com/asset/?id=507766666";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766951";
		weight = 1;
	}, {
		id = "http://www.roblox.com/asset/?id=507766388";
		weight = 9;
	}};
	walk = {{
		id = "http://www.roblox.com/asset/?id=507777826";
		weight = 10;
	}};
	run = {{
		id = "http://www.roblox.com/asset/?id=507767714";
		weight = 10;
	}};
	swim = {{
		id = "http://www.roblox.com/asset/?id=507784897";
		weight = 10;
	}};
	swimidle = {{
		id = "http://www.roblox.com/asset/?id=507785072";
		weight = 10;
	}};
	jump = {{
		id = "http://www.roblox.com/asset/?id=507765000";
		weight = 10;
	}};
	fall = {{
		id = "http://www.roblox.com/asset/?id=507767968";
		weight = 10;
	}};
	climb = {{
		id = "http://www.roblox.com/asset/?id=507765644";
		weight = 10;
	}};
	sit = {{
		id = "http://www.roblox.com/asset/?id=2506281703";
		weight = 10;
	}};
	toolnone = {{
		id = "http://www.roblox.com/asset/?id=507768375";
		weight = 10;
	}};
	toolslash = {{
		id = "http://www.roblox.com/asset/?id=522635514";
		weight = 10;
	}};
	toollunge = {{
		id = "http://www.roblox.com/asset/?id=522638767";
		weight = 10;
	}};
	wave = {{
		id = "http://www.roblox.com/asset/?id=507770239";
		weight = 10;
	}};
	point = {{
		id = "http://www.roblox.com/asset/?id=507770453";
		weight = 10;
	}};
	dance = {{
		id = "http://www.roblox.com/asset/?id=507771019";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507771955";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507772104";
		weight = 10;
	}};
	dance2 = {{
		id = "http://www.roblox.com/asset/?id=507776043";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776720";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507776879";
		weight = 10;
	}};
	dance3 = {{
		id = "http://www.roblox.com/asset/?id=507777268";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777451";
		weight = 10;
	}, {
		id = "http://www.roblox.com/asset/?id=507777623";
		weight = 10;
	}};
	laugh = {{
		id = "http://www.roblox.com/asset/?id=507770818";
		weight = 10;
	}};
	cheer = {{
		id = "http://www.roblox.com/asset/?id=507770677";
		weight = 10;
	}};
}
local tbl_upvr_4 = {
	wave = false;
	point = false;
	dance = true;
	dance2 = true;
	dance3 = true;
	laugh = false;
	cheer = false;
}
math.randomseed(tick())
function findExistingAnimationInSet(arg1, arg2) -- Line 111
	if arg1 == nil or arg2 == nil then
		return 0
	end
	for i = 1, arg1.count do
		if arg1[i].anim.AnimationId == arg2.AnimationId then
			return i
		end
	end
	return 0
end
local tbl_upvr_2 = {}
function configureAnimationSet(arg1, arg2) -- Line 125
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var96
	if var96 ~= nil then
		var96 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_2_upvw, pairs_result2, pairs_result3_3 = pairs(tbl_upvr_3[arg1].connections)
		for _, v in pairs_result1_2_upvw, pairs_result2, pairs_result3_3 do
			v:disconnect()
		end
	end
	pairs_result1_2_upvw = tbl_upvr_3
	pairs_result1_2_upvw[arg1] = {}
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.count = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.totalWeight = 0
	pairs_result1_2_upvw = tbl_upvr_3[arg1]
	pairs_result1_2_upvw.connections = {}
	pairs_result1_2_upvw = true
	local pcall_result1, _ = pcall(function() -- Line 138
		--[[ Upvalues[1]:
			[1]: pairs_result1_2_upvw (read and write)
		]]
		pairs_result1_2_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1 then
		pairs_result1_2_upvw = true
	end
	local SOME = script:FindFirstChild(arg1)
	if pairs_result1_2_upvw and SOME ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildAdded:connect(function(arg1_2) -- Line 146
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME.ChildRemoved:connect(function(arg1_3) -- Line 147
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		for _, v_2 in pairs(SOME:GetChildren()) do
			if v_2:IsA("Animation") then
				local var109 = 1
				local Weight = v_2:FindFirstChild("Weight")
				if Weight ~= nil then
					var109 = Weight.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				local count = tbl_upvr_3[arg1].count
				tbl_upvr_3[arg1][count] = {}
				tbl_upvr_3[arg1][count].anim = v_2
				tbl_upvr_3[arg1][count].weight = var109
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][count].weight
				table.insert(tbl_upvr_3[arg1].connections, v_2.Changed:connect(function(arg1_4) -- Line 163
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildAdded:connect(function(arg1_5) -- Line 164
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				table.insert(tbl_upvr_3[arg1].connections, v_2.ChildRemoved:connect(function(arg1_6) -- Line 165
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_4, v_3 in pairs(arg2) do
			v_2 = tbl_upvr_3[arg1]
			v_2[i_4] = {}
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.anim = Instance.new("Animation")
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.Name = arg1
			v_2 = tbl_upvr_3[arg1][i_4].anim
			v_2.AnimationId = v_3.id
			v_2 = tbl_upvr_3[arg1][i_4]
			v_2.weight = v_3.weight
			v_2 = tbl_upvr_3[arg1]
			v_2.count = tbl_upvr_3[arg1].count + 1
			v_2 = tbl_upvr_3[arg1]
			v_2.totalWeight = tbl_upvr_3[arg1].totalWeight + v_3.weight
		end
	end
	for _, v_4 in pairs(tbl_upvr_3) do
		for i_6 = 1, v_4.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if tbl_upvr_2[v_4[i_6].anim.AnimationId] == nil then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				Humanoid_upvr:LoadAnimation(v_4[i_6].anim)
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl_upvr_2[v_4[i_6].anim.AnimationId] = true
			end
		end
	end
end
function configureAnimationSetOld(arg1, arg2) -- Line 196
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Humanoid_upvr (readonly)
	]]
	local var139
	if var139 ~= nil then
		var139 = pairs(tbl_upvr_3[arg1].connections)
		local pairs_result1_upvw, pairs_result2_6, pairs_result3_7 = pairs(tbl_upvr_3[arg1].connections)
		for _, v_5 in pairs_result1_upvw, pairs_result2_6, pairs_result3_7 do
			v_5:disconnect()
		end
	end
	pairs_result1_upvw = tbl_upvr_3
	pairs_result1_upvw[arg1] = {}
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.count = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.totalWeight = 0
	pairs_result1_upvw = tbl_upvr_3[arg1]
	pairs_result1_upvw.connections = {}
	pairs_result1_upvw = true
	local pcall_result1_4, _ = pcall(function() -- Line 209
		--[[ Upvalues[1]:
			[1]: pairs_result1_upvw (read and write)
		]]
		pairs_result1_upvw = game:GetService("StarterPlayer").AllowCustomAnimations
	end)
	if not pcall_result1_4 then
		pairs_result1_upvw = true
	end
	local SOME_2 = script:FindFirstChild(arg1)
	if pairs_result1_upvw and SOME_2 ~= nil then
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildAdded:connect(function(arg1_7) -- Line 217
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		table.insert(tbl_upvr_3[arg1].connections, SOME_2.ChildRemoved:connect(function(arg1_8) -- Line 218
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			configureAnimationSet(arg1, arg2)
		end))
		local var149 = 1
		for _, v_6 in pairs(SOME_2:GetChildren()) do
			if v_6:IsA("Animation") then
				table.insert(tbl_upvr_3[arg1].connections, v_6.Changed:connect(function(arg1_9) -- Line 222
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					configureAnimationSet(arg1, arg2)
				end))
				tbl_upvr_3[arg1][var149] = {}
				tbl_upvr_3[arg1][var149].anim = v_6
				local Weight_2 = v_6:FindFirstChild("Weight")
				if Weight_2 == nil then
					tbl_upvr_3[arg1][var149].weight = 1
				else
					tbl_upvr_3[arg1][var149].weight = Weight_2.Value
				end
				tbl_upvr_3[arg1].count = tbl_upvr_3[arg1].count + 1
				tbl_upvr_3[arg1].totalWeight = tbl_upvr_3[arg1].totalWeight + tbl_upvr_3[arg1][var149].weight
			end
		end
	end
	if tbl_upvr_3[arg1].count <= 0 then
		for i_9, v_7 in pairs(arg2) do
			v_6 = tbl_upvr_3[arg1]
			v_6[i_9] = {}
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.anim = Instance.new("Animation")
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.Name = arg1
			v_6 = tbl_upvr_3[arg1][i_9].anim
			v_6.AnimationId = v_7.id
			v_6 = tbl_upvr_3[arg1][i_9]
			v_6.weight = v_7.weight
			v_6 = tbl_upvr_3[arg1]
			v_6.count = tbl_upvr_3[arg1].count + 1
			v_6 = tbl_upvr_3[arg1]
			v_6.totalWeight = tbl_upvr_3[arg1].totalWeight + v_7.weight
		end
	end
	for _, v_8 in pairs(tbl_upvr_3) do
		for i_11 = 1, v_8.count do
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			Humanoid_upvr:LoadAnimation(v_8[i_11].anim)
		end
	end
end
function scriptChildModified(arg1) -- Line 261
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var161 = tbl_upvr[arg1.Name]
	if var161 ~= nil then
		configureAnimationSet(arg1.Name, var161)
	end
end
script.ChildAdded:connect(scriptChildModified)
script.ChildRemoved:connect(scriptChildModified)
local var162
if Humanoid_upvr then
	var162 = Humanoid_upvr:FindFirstChildOfClass("Animator")
else
	var162 = nil
end
if var162 then
	for _, v_9 in ipairs(var162:GetPlayingAnimationTracks()) do
		v_9:Stop(0)
		v_9:Destroy()
	end
end
for i_13, _ in pairs(tbl_upvr) do
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [441.27]
	configureAnimationSet(i_13, nil)
end
local var169_upvw = "None"
local var170_upvw = 0
local var171_upvw = false
function stopAllAnimations() -- Line 302
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: var171_upvw (read and write)
		[4]: var21_upvw (read and write)
		[5]: var23_upvw (read and write)
		[6]: var22_upvw (read and write)
		[7]: var26_upvw (read and write)
		[8]: var25_upvw (read and write)
	]]
	local var172
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var172] == false then
		var172 = "idle"
	end
	if var171_upvw then
		var172 = "idle"
		var171_upvw = false
	end
	var20_upvw = ""
	var21_upvw = nil
	if var23_upvw ~= nil then
		var23_upvw:disconnect()
	end
	if var22_upvw ~= nil then
		var22_upvw:Stop()
		var22_upvw:Destroy()
		var22_upvw = nil
	end
	if var26_upvw ~= nil then
		var26_upvw:disconnect()
	end
	if var25_upvw ~= nil then
		var25_upvw:Stop()
		var25_upvw:Destroy()
		var25_upvw = nil
	end
	return var172
end
local ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
function getHeightScale() -- Line 341
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: getRigScale_upvr (readonly)
		[3]: ScaleDampeningPercent_upvw (read and write)
	]]
	local var174
	if var174 then
		var174 = Humanoid_upvr.AutomaticScalingEnabled
		if not var174 then
			var174 = getRigScale_upvr()
			return var174
		end
		var174 = Humanoid_upvr.HipHeight / 2
		if ScaleDampeningPercent_upvw == nil then
			ScaleDampeningPercent_upvw = script:FindFirstChild("ScaleDampeningPercent")
		end
		if ScaleDampeningPercent_upvw ~= nil then
			var174 = 1 + (Humanoid_upvr.HipHeight - 2) * ScaleDampeningPercent_upvw.Value / 2
		end
		return var174
	end
	return getRigScale_upvr()
end
local function _(arg1) -- Line 361, Named "rootMotionCompensation"
	return arg1 * 1.25 / getHeightScale()
end
local function setRunSpeed_upvr(arg1) -- Line 369, Named "setRunSpeed"
	--[[ Upvalues[2]:
		[1]: var22_upvw (read and write)
		[2]: var25_upvw (read and write)
	]]
	local var175 = arg1 * 1.25 / getHeightScale()
	local var176 = 0.0001
	local var177 = 0.0001
	local var178 = var175 / 0.5
	local var179 = var175 / 1
	if var175 <= 0.5 then
		var176 = 1
	elseif var175 < 1 then
		local var180 = (var175 - 0.5) / 0.5
		var176 = 1 - var180
		var177 = var180
		var178 = 1
		var179 = 1
	else
		var177 = 1
	end
	var22_upvw:AdjustWeight(var176)
	var25_upvw:AdjustWeight(var177)
	var22_upvw:AdjustSpeed(var178)
	var25_upvw:AdjustSpeed(var179)
end
function setAnimationSpeed(arg1) -- Line 396
	--[[ Upvalues[4]:
		[1]: var20_upvw (read and write)
		[2]: setRunSpeed_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var22_upvw (read and write)
	]]
	if var20_upvw == "walk" then
		setRunSpeed_upvr(arg1)
	elseif arg1 ~= var24_upvw then
		var24_upvw = arg1
		var22_upvw:AdjustSpeed(var24_upvw)
	end
end
function keyFrameReachedFunc(arg1) -- Line 407
	--[[ Upvalues[8]:
		[1]: var20_upvw (read and write)
		[2]: var15_upvr (readonly)
		[3]: var25_upvw (read and write)
		[4]: var22_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var171_upvw (read and write)
		[7]: var24_upvw (read and write)
		[8]: Humanoid_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 12. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 26. Error Block 22 start (CF ANALYSIS FAILED)
	local var181
	if tbl_upvr_4[var20_upvw] ~= nil and tbl_upvr_4[var181] == false then
		var181 = "idle"
	end
	if var171_upvw then
		if var22_upvw.Looped then return end
		var181 = "idle"
		var171_upvw = false
	end
	playAnimation(var181, 0.15, Humanoid_upvr)
	setAnimationSpeed(var24_upvw)
	-- KONSTANTERROR: [36] 26. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [67] 52. Error Block 17 end (CF ANALYSIS FAILED)
end
function rollAnimation(arg1) -- Line 445
	--[[ Upvalues[1]:
		[1]: tbl_upvr_3 (readonly)
	]]
	local var183
	while tbl_upvr_3[arg1][var183].weight < math.random(1, tbl_upvr_3[arg1].totalWeight) do
		var183 += 1
	end
	return var183
end
local function switchToAnim_upvr(arg1, arg2, arg3, arg4) -- Line 456, Named "switchToAnim"
	--[[ Upvalues[9]:
		[1]: var21_upvw (read and write)
		[2]: var22_upvw (read and write)
		[3]: var25_upvw (read and write)
		[4]: var15_upvr (readonly)
		[5]: var24_upvw (read and write)
		[6]: var20_upvw (read and write)
		[7]: var23_upvw (read and write)
		[8]: tbl_upvr_3 (readonly)
		[9]: var26_upvw (read and write)
	]]
	if arg1 ~= var21_upvw then
		if var22_upvw ~= nil then
			var22_upvw:Stop(arg3)
			var22_upvw:Destroy()
		end
		if var25_upvw ~= nil then
			var25_upvw:Stop(arg3)
			var25_upvw:Destroy()
			if var15_upvr == true then
				var25_upvw = nil
			end
		end
		var24_upvw = 1
		var22_upvw = arg4:LoadAnimation(arg1)
		var22_upvw.Priority = Enum.AnimationPriority.Core
		var22_upvw:Play(arg3)
		var20_upvw = arg2
		var21_upvw = arg1
		if var23_upvw ~= nil then
			var23_upvw:disconnect()
		end
		var23_upvw = var22_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		if arg2 == "walk" then
			var25_upvw = arg4:LoadAnimation(tbl_upvr_3.run[rollAnimation("run")].anim)
			var25_upvw.Priority = Enum.AnimationPriority.Core
			var25_upvw:Play(arg3)
			if var26_upvw ~= nil then
				var26_upvw:disconnect()
			end
			var26_upvw = var25_upvw.KeyframeReached:connect(keyFrameReachedFunc)
		end
	end
end
function playAnimation(arg1, arg2, arg3) -- Line 507
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: switchToAnim_upvr (readonly)
		[3]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(tbl_upvr_3[arg1][rollAnimation(arg1)].anim, arg1, arg2, arg3)
	var171_upvw = false
end
function playEmote(arg1, arg2, arg3) -- Line 515
	--[[ Upvalues[2]:
		[1]: switchToAnim_upvr (readonly)
		[2]: var171_upvw (read and write)
	]]
	switchToAnim_upvr(arg1, arg1.Name, arg2, arg3)
	var171_upvw = true
end
local var184_upvw = ""
local var185_upvw
local var186_upvw
local var187_upvw
function toolKeyFrameReachedFunc(arg1) -- Line 528
	--[[ Upvalues[2]:
		[1]: var184_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if arg1 == "End" then
		playToolAnimation(var184_upvw, 0, Humanoid_upvr)
	end
end
function playToolAnimation(arg1, arg2, arg3, arg4) -- Line 535
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var186_upvw (read and write)
		[3]: var185_upvw (read and write)
		[4]: var184_upvw (read and write)
		[5]: var187_upvw (read and write)
	]]
	local anim = tbl_upvr_3[arg1][rollAnimation(arg1)].anim
	local var189
	if var186_upvw ~= anim then
		if var185_upvw ~= nil then
			var185_upvw:Stop()
			var185_upvw:Destroy()
			var189 = 0
		end
		var185_upvw = arg3:LoadAnimation(anim)
		if arg4 then
			var185_upvw.Priority = arg4
		end
		var185_upvw:Play(var189)
		var184_upvw = arg1
		var186_upvw = anim
		var187_upvw = var185_upvw.KeyframeReached:connect(toolKeyFrameReachedFunc)
	end
end
function stopToolAnimations() -- Line 562
	--[[ Upvalues[4]:
		[1]: var184_upvw (read and write)
		[2]: var187_upvw (read and write)
		[3]: var186_upvw (read and write)
		[4]: var185_upvw (read and write)
	]]
	if var187_upvw ~= nil then
		var187_upvw:disconnect()
	end
	var184_upvw = ""
	var186_upvw = nil
	if var185_upvw ~= nil then
		var185_upvw:Stop()
		var185_upvw:Destroy()
		var185_upvw = nil
	end
	return var184_upvw
end
function onRunning(arg1) -- Line 584
	--[[ Upvalues[6]:
		[1]: var19_upvr (readonly)
		[2]: var171_upvw (read and write)
		[3]: Humanoid_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: var20_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var190
	if var190 then
		local _ = getHeightScale()
	else
	end
	var190 = var171_upvw
	if var190 then
		if Humanoid_upvr.MoveDirection ~= Vector3.new(0, 0, 0) then
			var190 = false
		else
			var190 = true
		end
	end
	if not var190 or not (Humanoid_upvr.WalkSpeed / 1) then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if 0.75 * 1 < arg1 then
		playAnimation("walk", 0.2, Humanoid_upvr)
		setAnimationSpeed(arg1 / 16)
		var11_upvw = "Running"
	elseif tbl_upvr_4[var20_upvw] == nil and not var171_upvw then
		playAnimation("idle", 0.2, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function onDied() -- Line 602
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Dead"
end
function onJumping() -- Line 606
	--[[ Upvalues[3]:
		[1]: Humanoid_upvr (readonly)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	playAnimation("jump", 0.1, Humanoid_upvr)
	var170_upvw = 0.31
	var11_upvw = "Jumping"
end
function onClimbing(arg1) -- Line 612
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var192
	if var19_upvr then
		var192 /= getHeightScale()
	end
	playAnimation("climb", 0.1, Humanoid_upvr)
	setAnimationSpeed(var192 / 5)
	var11_upvw = "Climbing"
end
function onGettingUp() -- Line 622
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "GettingUp"
end
function onFreeFall() -- Line 626
	--[[ Upvalues[3]:
		[1]: var170_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	if var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	end
	var11_upvw = "FreeFall"
end
function onFallingDown() -- Line 633
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "FallingDown"
end
function onSeated() -- Line 637
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "Seated"
end
function onPlatformStanding() -- Line 641
	--[[ Upvalues[1]:
		[1]: var11_upvw (read and write)
	]]
	var11_upvw = "PlatformStanding"
end
function onSwimming(arg1) -- Line 648
	--[[ Upvalues[3]:
		[1]: var19_upvr (readonly)
		[2]: Humanoid_upvr (readonly)
		[3]: var11_upvw (read and write)
	]]
	local var193
	if var19_upvr then
		var193 /= getHeightScale()
	end
	if 1 < var193 then
		playAnimation("swim", 0.4, Humanoid_upvr)
		setAnimationSpeed(var193 / 10)
		var11_upvw = "Swimming"
	else
		playAnimation("swimidle", 0.4, Humanoid_upvr)
		var11_upvw = "Standing"
	end
end
function animateTool() -- Line 663
	--[[ Upvalues[2]:
		[1]: var169_upvw (read and write)
		[2]: Humanoid_upvr (readonly)
	]]
	if var169_upvw == "None" then
		playToolAnimation("toolnone", 0.1, Humanoid_upvr, Enum.AnimationPriority.Idle)
	else
		if var169_upvw == "Slash" then
			playToolAnimation("toolslash", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
		if var169_upvw == "Lunge" then
			playToolAnimation("toollunge", 0, Humanoid_upvr, Enum.AnimationPriority.Action)
			return
		end
	end
end
function getToolAnim(arg1) -- Line 680
	for _, v_11 in ipairs(arg1:GetChildren()) do
		if v_11.Name == "toolanim" and v_11.className == "StringValue" then
			return v_11
		end
	end
	return nil
end
local var199_upvw = 0
local var200_upvw = 0
function stepAnimate(arg1) -- Line 691
	--[[ Upvalues[8]:
		[1]: var199_upvw (read and write)
		[2]: var170_upvw (read and write)
		[3]: var11_upvw (read and write)
		[4]: Humanoid_upvr (readonly)
		[5]: Parent_upvr (readonly)
		[6]: var169_upvw (read and write)
		[7]: var200_upvw (read and write)
		[8]: var186_upvw (read and write)
	]]
	var199_upvw = arg1
	if 0 < var170_upvw then
		var170_upvw -= arg1 - var199_upvw
	end
	if var11_upvw == "FreeFall" and var170_upvw <= 0 then
		playAnimation("fall", 0.2, Humanoid_upvr)
	else
		if var11_upvw == "Seated" then
			playAnimation("sit", 0.5, Humanoid_upvr)
			return
		end
		if var11_upvw == "Running" then
			playAnimation("walk", 0.2, Humanoid_upvr)
		elseif var11_upvw == "Dead" or var11_upvw == "GettingUp" or var11_upvw == "FallingDown" or var11_upvw == "Seated" or var11_upvw == "PlatformStanding" then
			stopAllAnimations()
		end
	end
	local class_Tool = Parent_upvr:FindFirstChildOfClass("Tool")
	if class_Tool and class_Tool:FindFirstChild("Handle") then
		local getToolAnim_result1 = getToolAnim(class_Tool)
		if getToolAnim_result1 then
			var169_upvw = getToolAnim_result1.Value
			getToolAnim_result1.Parent = nil
			var200_upvw = arg1 + 0.3
		end
		if var200_upvw < arg1 then
			var200_upvw = 0
			var169_upvw = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		var169_upvw = "None"
		var186_upvw = nil
		var200_upvw = 0
	end
end
Humanoid_upvr.Died:connect(onDied)
Humanoid_upvr.Running:connect(onRunning)
Humanoid_upvr.Jumping:connect(onJumping)
Humanoid_upvr.Climbing:connect(onClimbing)
Humanoid_upvr.GettingUp:connect(onGettingUp)
Humanoid_upvr.FreeFalling:connect(onFreeFall)
Humanoid_upvr.FallingDown:connect(onFallingDown)
Humanoid_upvr.Seated:connect(onSeated)
Humanoid_upvr.PlatformStanding:connect(onPlatformStanding)
Humanoid_upvr.Swimming:connect(onSwimming)
game:GetService("Players").LocalPlayer.Chatted:connect(function(arg1) -- Line 757
	--[[ Upvalues[3]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
	]]
	local var204
	if string.sub(arg1, 1, 3) == "/e " then
		var204 = string.sub(arg1, 4)
	elseif string.sub(arg1, 1, 7) == "/emote " then
		var204 = string.sub(arg1, 8)
	end
	if var11_upvw == "Standing" and tbl_upvr_4[var204] ~= nil then
		playAnimation(var204, 0.1, Humanoid_upvr)
	end
end)
script:WaitForChild("PlayEmote").OnInvoke = function(arg1) -- Line 771
	--[[ Upvalues[4]:
		[1]: var11_upvw (read and write)
		[2]: tbl_upvr_4 (readonly)
		[3]: Humanoid_upvr (readonly)
		[4]: var22_upvw (read and write)
	]]
	if var11_upvw ~= "Standing" then return end
	if tbl_upvr_4[arg1] ~= nil then
		playAnimation(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	if typeof(arg1) == "Instance" and arg1:IsA("Animation") then
		playEmote(arg1, 0.1, Humanoid_upvr)
		return true, var22_upvw
	end
	return false
end
if Parent_upvr.Parent ~= nil then
	playAnimation("idle", 0.1, Humanoid_upvr)
	var11_upvw = "Standing"
end
while Parent_upvr.Parent ~= nil do
	local _, wait_result2 = wait(0.1)
	stepAnimate(wait_result2)
end

-- Workspace.NPC.Oberon.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.NPC.Moola.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.4.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.5.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.2.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.6.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.3.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.Collectables.Farlight.1.1.FarlightRelative.Script
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- Workspace.PropDVwastaken.AnimationPlayer
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Server Scripts are IMPOSSIBLE to save

-- ReplicatedFirst.PlaceInitialiser
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:46:33
-- Luau version 6, Types version 3
-- Time taken: 0.000263 seconds

game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)
game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)

-- StarterPlayer.StarterPlayerScripts.KnitControllerLoader
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:48
-- Luau version 6, Types version 3
-- Time taken: 0.000800 seconds

for _, v_upvr in pairs(game:GetService("Players").LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("Controllers"):GetChildren()) do
	if v_upvr:IsA("ModuleScript") then
		local pcall_result1, pcall_result2 = pcall(function() -- Line 17
			--[[ Upvalues[1]:
				[1]: v_upvr (readonly)
			]]
			require(v_upvr)
		end)
		if pcall_result1 then
		else
			print(pcall_result2)
			warn(string.format("Controller '%s' errored while loading!", v_upvr.Name))
		end
	end
end
require(game:GetService("ReplicatedStorage").Packages.Knit).Start():catch(warn):await()

-- StarterPlayer.StarterPlayerScripts.RbxCharacterSounds
-- Ignored

-- StarterPlayer.StarterPlayerScripts.RbxCharacterSounds.AtomicBinding
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.ClickToMoveController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.VRNavigation
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.DynamicThumbstick
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.PathDisplay
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.VehicleController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.TouchThumbstick
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.BaseCharacterController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.ClickToMoveDisplay
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.Gamepad
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.TouchJump
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.Keyboard
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ZoomController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ZoomController.Popper
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraUtils
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraToggleStateController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.Poppercam
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.OrbitalCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.Invisicam
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.BaseOcclusion
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.LegacyCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.ClassicCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRVehicleCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.TransparencyController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraInput
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.CameraUI
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera.VehicleCameraCore
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VehicleCamera.VehicleCameraConfig
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.BaseCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.VRBaseCamera
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CameraModule.MouseLockController
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CommonUtils.ConnectionUtil
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerModule.CommonUtils.FlagUtil
-- Ignored

-- StarterPlayer.StarterPlayerScripts.PlayerScriptsLoader
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:49
-- Luau version 6, Types version 3
-- Time taken: 0.000262 seconds

require(script.Parent:WaitForChild("PlayerModule"))

-- StarterPlayer.StarterPlayerScripts.Controllers.PlayerController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:50
-- Luau version 6, Types version 3
-- Time taken: 0.014359 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "PlayerController";
})
any_CreateController_result1_upvr.Inventory = {}
any_CreateController_result1_upvr.Masteries = nil
any_CreateController_result1_upvr.Coins = 0
any_CreateController_result1_upvr.EquippedIndex = 1
any_CreateController_result1_upvr.UsingAnimation = nil
any_CreateController_result1_upvr.IsUsingTool = false
any_CreateController_result1_upvr.ToolUsed = Instance.new("BindableEvent")
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_5_upvr = {}
local tbl_4_upvr = {}
local var10_upvw
local tbl_3_upvr = {}
local var12_upvw
function any_CreateController_result1_upvr.EquipItem(arg1, arg2) -- Line 34
	--[[ Upvalues[7]:
		[1]: var10_upvw (read and write)
		[2]: tbl_3_upvr (readonly)
		[3]: var12_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: LocalPlayer_upvr (readonly)
		[6]: any_RequireDefinitions_result1_upvr (readonly)
		[7]: tbl_5_upvr (readonly)
	]]
	local var17
	if var10_upvw then
		var10_upvw:Stop()
		var10_upvw = nil
	end
	var17 = tbl_3_upvr
	local pairs_result1, pairs_result2, pairs_result3_3 = pairs(var17)
	for i, _ in pairs_result1, pairs_result2, pairs_result3_3 do
		tbl_3_upvr[i] = false
	end
	if var12_upvw then
		var12_upvw:Destroy()
		var12_upvw = nil
	end
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		pairs_result2 = LocalPlayer_upvr.Character:FindFirstChild("ServerTool")
		if pairs_result2 then
			pairs_result2 = LocalPlayer_upvr.Character.ServerTool:Destroy
			pairs_result2()
		end
		pairs_result2 = arg2
		if pairs_result2 then
			pairs_result2 = any_RequireDefinitions_result1_upvr[arg2.Catagory][arg2.Id]
		end
		if not pairs_result2 then return end
		local any_GetModelFromDef_result1 = CoreUtil_upvr:GetModelFromDef(arg2)
		if any_GetModelFromDef_result1 and LocalPlayer_upvr.Character and LocalPlayer_upvr.Character:FindFirstChild("RightHand") then
			local var22
			if var22 then
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var22 = pairs_result2.Animations.HoldingAnim
					return var22
				end
				if not pairs_result2.Animations or not INLINED() then
					var22 = CoreUtil_upvr.DefultHoldingAnimationId
				end
				var10_upvw = CoreUtil_upvr:LoadAnimation(LocalPlayer_upvr.Character.Humanoid.Animator, var22)
				var10_upvw:Play()
			end
			var12_upvw = CoreUtil_upvr:EquipTool(LocalPlayer_upvr.Character, pairs_result2, any_GetModelFromDef_result1)
		end
		local any_EquipItem_result1 = tbl_5_upvr.InventoryService:EquipItem(arg2.Index)
		tbl_3_upvr[any_EquipItem_result1] = true
		local _, _ = any_EquipItem_result1:andThen():await()
		if tbl_3_upvr[any_EquipItem_result1] and var12_upvw then
			var12_upvw:Destroy()
		elseif LocalPlayer_upvr.Character:FindFirstChild("ServerTool") then
			LocalPlayer_upvr.Character.ServerTool:Destroy()
		end
		tbl_3_upvr[any_EquipItem_result1] = nil
	end
end
local function ZoneChanged_upvr(arg1) -- Line 84, Named "ZoneChanged"
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: tbl_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	if CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
		workspace.Camera.CFrame = CFrame.lookAt(LocalPlayer_upvr.Character.Head.Position + (-LocalPlayer_upvr.Character.HumanoidRootPart.CFrame.LookVector + Vector3.new(0, 0.5, 0)) * (workspace.CurrentCamera.CFrame.Position - LocalPlayer_upvr.Character.Head.Position).Magnitude, LocalPlayer_upvr.Character.Head.Position)
	end
	if arg1 == "ToForestPortal" or arg1 == "ToMinesPortal" then
		-- KONSTANTWARNING: GOTO [93] #57
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [76] 48. Error Block 14 start (CF ANALYSIS FAILED)
	if arg1 == "ForestPortal" then
	elseif arg1 == "MinesPortal" then
	end
	-- KONSTANTERROR: [76] 48. Error Block 14 end (CF ANALYSIS FAILED)
end
local function CharacterAdded_upvr(arg1) -- Line 108, Named "CharacterAdded"
	--[[ Upvalues[3]:
		[1]: tbl_5_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
	]]
	arg1:WaitForChild("Humanoid").Died:Connect(function() -- Line 114
		--[[ Upvalues[1]:
			[1]: tbl_5_upvr (copied, readonly)
		]]
		tbl_5_upvr.PlayerService:RequestRespawn():andThen():await()
	end)
	task.wait()
	any_CreateController_result1_upvr:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_CreateController_result1_upvr.Inventory, any_CreateController_result1_upvr.EquippedIndex))
end
local ContextActionService_upvr = game:GetService("ContextActionService")
local UserInputService_upvr = game:GetService("UserInputService")
local TweenService_upvr = game:GetService("TweenService")
local RunService_upvr = game:GetService("RunService")
local var31_upvw = 1
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 124
	--[[ Upvalues[14]:
		[1]: tbl_5_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_4_upvr (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
		[5]: ContextActionService_upvr (readonly)
		[6]: ZoneChanged_upvr (readonly)
		[7]: UserInputService_upvr (readonly)
		[8]: CoreUtil_upvr (readonly)
		[9]: LocalPlayer_upvr (readonly)
		[10]: TweenService_upvr (readonly)
		[11]: CharacterAdded_upvr (readonly)
		[12]: RunService_upvr (readonly)
		[13]: any_RequireDefinitions_result1_upvr (readonly)
		[14]: var31_upvw (read and write)
	]]
	tbl_5_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_5_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_4_upvr.UIController = Knit_upvr.GetController("UIController")
	tbl_4_upvr.SoundController = Knit_upvr.GetController("SoundController")
	local any_await_result1_2, any_await_result2 = tbl_5_upvr.PlayerService:GetMasteries():andThen():await()
	_ = any_await_result1_2 -- Setting global
	any_CreateController_result1_upvr.Masteries = any_await_result2
	local any_await_result1_3, any_await_result2_2 = tbl_5_upvr.PlayerService:GetCoins():andThen():await()
	_ = any_await_result1_3 -- Setting global
	any_CreateController_result1_upvr.Coins = any_await_result2_2
	local any_await_result1, any_await_result2_6 = tbl_5_upvr.PlayerService:GetSettings():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Settings = any_await_result2_6
	tbl_4_upvr.SoundController:AdjustVolume("SFX", any_CreateController_result1_upvr.Settings.Audio.SFX * 4)
	tbl_4_upvr.SoundController:AdjustVolume("SFX", any_CreateController_result1_upvr.Settings.Audio.Music * 4)
	tbl_4_upvr.UIController:UpdateCoinCounts()
	tbl_5_upvr.PlayerService.CoinsUpdated:Connect(function(arg1_9) -- Line 140
		--[[ Upvalues[2]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
			[2]: tbl_4_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.Coins = arg1_9
		tbl_4_upvr.UIController:UpdateCoinCounts()
	end)
	ContextActionService_upvr:BindAction("Dash", function(arg1_10, arg2) -- Line 145
		--[[ Upvalues[1]:
			[1]: tbl_5_upvr (copied, readonly)
		]]
		if arg2 == Enum.UserInputState.Begin then
			tbl_5_upvr.PlayerService:Dash()
		end
	end, true, Enum.KeyCode.Q)
	ContextActionService_upvr:SetImage("Dash", "rbxassetid://17738191561")
	local any_GetButton_result1_4 = ContextActionService_upvr:GetButton("Dash")
	if any_GetButton_result1_4 then
		any_GetButton_result1_4.ZIndex = 3
		any_GetButton_result1_4.AnchorPoint = Vector2.new(0, 1)
		any_GetButton_result1_4.Position = UDim2.new(0.2, 0, 0, 0)
	end
	tbl_5_upvr.PlayerService.ZoneChanged:Connect(ZoneChanged_upvr)
	UserInputService_upvr.InputBegan:Connect(function(arg1_11, arg2) -- Line 163
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 and arg1_11.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_12, arg2) -- Line 169
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool and arg1_12.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	UserInputService_upvr.TouchStarted:Connect(function(arg1_13, arg2) -- Line 175
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.TouchEnded:Connect(function(arg1_14, arg2) -- Line 181
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	ContextActionService_upvr:BindAction("Sprint", function(arg1_15, arg2, arg3) -- Line 187
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
		else
			local var84
			if arg2 ~= Enum.UserInputState.Begin and arg2 ~= Enum.UserInputState.End then return end
			local Character_3 = LocalPlayer_upvr.Character
			if arg2 ~= Enum.UserInputState.Begin then
				Character_3 = false
			else
				Character_3 = true
			end
			var84 = 70
			if Character_3 then
				-- KONSTANTWARNING: GOTO [34] #25
			end
			if Character_3 then
				var84 = 20
			else
				var84 = 16
			end
			Character_3.Humanoid.WalkSpeed = var84
			var84 = TweenService_upvr
			local _ = {
				FieldOfView = var84 + 0;
			}
			var84 = var84:Create(workspace.Camera, TweenInfo.new(0.25), _):Play
			var84()
		end
	end, true, Enum.KeyCode.LeftShift, Enum.KeyCode.ButtonR2)
	ContextActionService_upvr:SetImage("Sprint", "rbxassetid://18398835421")
	local any_GetButton_result1_3 = ContextActionService_upvr:GetButton("Sprint")
	if any_GetButton_result1_3 then
		any_GetButton_result1_3.ZIndex = 3
		any_GetButton_result1_3.AnchorPoint = Vector2.new(0, 0)
		any_GetButton_result1_3.Position = UDim2.new(0.6, 0, 0.1, 0)
	end
	tbl_5_upvr.PlayerService:RequestRespawn():andThen():await()
	if LocalPlayer_upvr.Character then
		CharacterAdded_upvr(LocalPlayer_upvr.Character)
	end
	LocalPlayer_upvr.CharacterAdded:Connect(CharacterAdded_upvr)
	while RunService_upvr.RenderStepped:Wait() do
		if any_CreateController_result1_upvr.IsUsingTool then
			local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_CreateController_result1_upvr.Inventory, any_CreateController_result1_upvr.EquippedIndex)
			local var89
			if any_GetSlotFromIndex_result1_2 then
				var89 = any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1_2.Id]
				if not var89 then
					var89 = any_RequireDefinitions_result1_upvr.Food[any_GetSlotFromIndex_result1_2.Id]
				end
				if var89 then
					if var89.LevelReq and not CoreUtil_upvr:IsMasterySucceeded(arg1.Masteries, var89.LevelReq) then
						tbl_4_upvr.UIController:WarningMessage("You are too low level to use this tool")
						wait(1)
					else
						local var90
						local Character_2 = var90.Character
						local function INLINED_5() -- Internal function, doesn't exist in bytecode
							var90 = Character_2:FindFirstChild("Humanoid")
							return var90
						end
						local function INLINED_6() -- Internal function, doesn't exist in bytecode
							local Animator_2 = var90:FindFirstChild("Animator")
							return Animator_2
						end
						if Character_2 and INLINED_5() and (var89.Catagory ~= "Food" or var90.Health ~= var90.MaxHealth) or INLINED_6() then
							local ServerTool_2 = Character_2:FindFirstChild("ServerTool")
							if ServerTool_2 and ServerTool_2:FindFirstChild("Handle") then
								local tbl_2 = {}
								for i_2, v_2 in pairs(ServerTool_2.Handle:GetChildren()) do
									if v_2:IsA("Sound") then
										table.insert(tbl_2, v_2)
									end
								end
								if #tbl_2 ~= 0 then
									i_2 = #tbl_2
									tbl_2[math.random(1, i_2)]:Play()
								end
							end
							local var98
							if any_CreateController_result1_upvr.UsingAnimation then
								var98 = any_CreateController_result1_upvr
								var98.UsingAnimation:Stop()
								var98 = nil
								any_CreateController_result1_upvr.UsingAnimation = var98
							end
							var98 = var89.Animations
							local ActionCombo_2 = var98.ActionCombo
							if not ActionCombo_2 then
								ActionCombo_2 = {}
								var98 = CoreUtil_upvr.DefultSwingAnimationId
								ActionCombo_2[1] = var98
							end
							var98 = ActionCombo_2[var31_upvw]
							if not var98 then
								var98 = 1
								var31_upvw = var98
							end
							var98 = any_CreateController_result1_upvr
							var98.UsingAnimation = CoreUtil_upvr:LoadAnimation(Animator_2, ActionCombo_2[var31_upvw])
							var98 = any_CreateController_result1_upvr.UsingAnimation:Play
							var98()
							var98 = any_CreateController_result1_upvr.UsingAnimation:AdjustSpeed
							var98(var89.AnimSpeed)
							var98 = var31_upvw
							var98 += 1
							var31_upvw = var98
							local function INLINED_7() -- Internal function, doesn't exist in bytecode
								var98 = LocalPlayer_upvr:GetMouse().Button1Up
								return var98
							end
							if var89.Catagory ~= "Food" or not INLINED_7() then
								var98 = nil
							end
							CoreUtil_upvr:CustomYeild(1, any_CreateController_result1_upvr.UsingAnimation.Stopped, any_CreateController_result1_upvr.UsingAnimation.Ended, var98)
							any_CreateController_result1_upvr.UsingAnimation:Stop()
							task.wait()
							if var89.Catagory == "Food" and any_CreateController_result1_upvr.IsUsingTool then
								tbl_5_upvr.PlayerService:EatFood():andThen():await()
								task.wait()
							else
								any_CreateController_result1_upvr.ToolUsed:Fire()
								if var89.Use then
									var89.Use(game.Players.LocalPlayer)
									tbl_5_upvr.PlayerService:ToolUsed(var89)
								end
							end
						end
					end
				end
			end
		end
	end
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:51
-- Luau version 6, Types version 3
-- Time taken: 0.005667 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "BlockController";
})
any_CreateController_result1_upvr.BlockPartSelected = nil
local tbl_3 = {}
any_CreateController_result1_upvr.Blocks = tbl_3
if game.PlaceId == CoreUtil_upvr.PlaceIds.Island then
	tbl_3 = false
else
	tbl_3 = true
end
any_CreateController_result1_upvr.IsMainHub = tbl_3
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_2_upvr = {}
local tbl_upvr = {}
function SoundEffects(arg1, arg2) -- Line 30
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local Part_upvr = Instance.new("Part")
	Part_upvr.Anchored = true
	Part_upvr.CanCollide = false
	Part_upvr.Transparency = 1
	Part_upvr.Position = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1))
	Part_upvr.Size = Vector3.new(1, 1, 1)
	Part_upvr.Parent = workspace
	local Sound_upvr = Instance.new("Sound")
	Sound_upvr.SoundId = arg2
	Sound_upvr:AddTag("SFX")
	Sound_upvr.Volume = 2
	Sound_upvr.Parent = Part_upvr
	Sound_upvr:Play()
	coroutine.wrap(function() -- Line 47
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: Sound_upvr (readonly)
			[3]: Part_upvr (readonly)
		]]
		CoreUtil_upvr:CustomYeild(Sound_upvr.TimeLength, Sound_upvr.Ended)
		Part_upvr:Destroy()
	end)()
end
function any_CreateController_result1_upvr.UpdateBlockSurroundings(arg1, arg2, arg3) -- Line 55
	--[[ Upvalues[4]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	local var34
	if any_CreateController_result1_upvr.IsMainHub then return end
	local any_GetAdjacentPositions_result1 = CoreUtil_upvr:GetAdjacentPositions(arg2)
	var34 = arg2
	table.insert(any_GetAdjacentPositions_result1, var34)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(any_GetAdjacentPositions_result1)
	for _, v in pairs_result1, pairs_result2, pairs_result3 do
		local any_GetValueAtPosition_result1_2 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, v)
		if any_GetValueAtPosition_result1_2 ~= 0 then
			local tbl = {}
			for i_2, v_2 in pairs(CoreUtil_upvr:GetAdjacentPositions(v)) do
				local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, v_2)
				local var45
				if any_GetValueAtPosition_result1 then
					var45 = any_GetValueAtPosition_result1
					if var45 then
						var45 = any_RequireDefinitions_result1_upvr.Block[any_GetValueAtPosition_result1.Id]
					end
					if any_GetValueAtPosition_result1 and var45 and not var45.SeeThrough then
						table.insert(tbl, v_2)
					end
				end
			end
			local var46
			if #tbl == 6 and var46 then
				var46.Parent = ReplicatedStorage_upvr
				table.insert({}, var46)
			elseif #tbl ~= 6 and var46 then
				i_2 = tbl
				CoreUtil_upvr:UpdateBlockTextures(var46, i_2)
				table.insert({}, {
					Part = var46;
					Positions = tbl;
				})
			elseif #tbl ~= 6 and not var46 then
				i_2 = any_GetValueAtPosition_result1_2.Id
				v_2 = CoreUtil_upvr:ToWorldPos(any_GetValueAtPosition_result1_2.Position)
				var45 = workspace.ClientBlocks
				i_2 = CoreUtil_upvr:CreateBlockModel(i_2, v_2, any_GetValueAtPosition_result1_2.Rotation, var45)
				table.insert({}, i_2)
			end
		end
	end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		pairs_result3 = arg3:await()
		return pairs_result3
	end
	if arg3:getStatus() ~= "Started" or not INLINED() then
		if arg3:getStatus() ~= "Resolved" then
			pairs_result3 = false
		else
			pairs_result3 = true
		end
	end
	local var48 = pairs_result3
	if var48 then
		pairs_result3 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		pairs_result3 = pairs_result3({})
		local var38_result1, var38_result2, var38_result3 = pairs_result3({})
		for _, v_3 in var38_result1, var38_result2, var38_result3 do
			v_3:Destroy()
		end
		var38_result1 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var38_result1 = var38_result1({})
		local var38_result1_result1, var38_result1_result2, var38_result1_result3 = var38_result1({})
		for _, v_4 in var38_result1_result1, var38_result1_result2, var38_result1_result3 do
			v_4:Destroy()
		end
		var38_result1_result1 = pairs
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var38_result1_result1 = var38_result1_result1({})
		for _, v_5 in var38_result1_result1({}) do
			CoreUtil_upvr:UpdateBlockTextures(v_5.Part, v_5.Positions)
		end
	end
	return var48
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_CreateController_result1_upvr.DamageBlock(arg1, arg2, arg3, arg4) -- Line 126
	--[[ Upvalues[5]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: tbl_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local BlockObj = arg2.BlockObj
	local var61
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [109] 75. Error Block 23 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [109.6]
	if nil then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if nil.Parent then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			nil.Parent = workspace
		end
	end
	var61 = any_CreateController_result1_upvr.Blocks[BlockObj.RegenObjPath.World][BlockObj.RegenObjPath.Level]
	var61[BlockObj.RegenObjPath.Index].BlockObj = BlockObj
	do
		return
	end
	-- KONSTANTERROR: [109] 75. Error Block 23 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [138] 93. Error Block 24 start (CF ANALYSIS FAILED)
	var61 = any_RequireDefinitions_result1_upvr.Block[BlockObj.Id].SoundData.Mining
	SoundEffects(BlockObj.Position, var61[math.random(1, #any_RequireDefinitions_result1_upvr.Block[BlockObj.Id].SoundData.Mining)])
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var61 = BlockObj.RegenObjPath
		return var61
	end
	if not any_CreateController_result1_upvr.IsMainHub or not INLINED_2() then
		var61 = BlockObj.Position
	end
	tbl_2_upvr.BlockService:DamageBlock(arg3, var61)
	-- KONSTANTERROR: [138] 93. Error Block 24 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.PlaceBlock(arg1, arg2, arg3, arg4) -- Line 169
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: tbl_2_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
	]]
	local any_ToDataPos_result1 = CoreUtil_upvr:ToDataPos(arg3)
	if not CoreUtil_upvr:BlockValidation(LocalPlayer_upvr, arg2, any_ToDataPos_result1, arg4) then
	else
		SoundEffects(arg3, any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing[math.random(1, #any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing)])
		any_CreateController_result1_upvr:UpdateBlockSurroundings(any_ToDataPos_result1, tbl_2_upvr.BlockService:PlaceBlock(arg2, any_ToDataPos_result1, arg4))
		CoreUtil_upvr:CreateBlockModel(arg2, arg3, arg4, workspace.ClientBlocks):Destroy()
	end
end
function ServerMainHubUpdate(arg1) -- Line 185
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks = arg1
end
function UpdateBlockHealth(arg1, arg2) -- Line 190
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	tbl_upvr.MiningHandler:UpdateBlockHealth(arg1, arg2)
end
function DestroyBlocks(arg1) -- Line 194
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks[arg1.World][arg1.Level][arg1.Index].BlockObj = nil
end
function PlaceBlocks(arg1) -- Line 198
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.Blocks[arg1.BlockObj.RegenObjPath.World][arg1.BlockObj.RegenObjPath.Level][arg1.BlockObj.RegenObjPath.Index].BlockObj = arg1.BlockObj
end
local tbl_upvr_2 = {}
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 202
	--[[ Upvalues[5]:
		[1]: tbl_2_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: tbl_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_2_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_2_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_2_upvr.BlockService = Knit_upvr.GetService("BlockService")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr.MiningHandler = require(script.MiningHandler)
	tbl_2_upvr.BlockService.UpdateBlockHealth:Connect(UpdateBlockHealth)
	tbl_2_upvr.BlockService.UpdateClientMainHub:Connect(ServerMainHubUpdate)
	tbl_2_upvr.BlockService.DestroyClientBlocks:Connect(DestroyBlocks)
	tbl_2_upvr.BlockService.PlaceClientBlocks:Connect(PlaceBlocks)
	local any_await_result1, any_await_result2 = tbl_2_upvr.BlockService:GetBlocks():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Blocks = any_await_result2
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.MiningHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:52
-- Luau version 6, Types version 3
-- Time taken: 0.005064 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr = Knit.GetController("BlockController")
local module = {}
local LocalPlayer_upvr = game.Players.LocalPlayer
local Mining_upvr = workspace.HighlightContrainer.Mining
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local var10_upvw
local function _() -- Line 29, Named "RemoveSelectedMinePart"
	--[[ Upvalues[2]:
		[1]: var10_upvw (read and write)
		[2]: Mining_upvr (readonly)
	]]
	if var10_upvw then
		Mining_upvr.Adornee = nil
		var10_upvw:Disconnect()
		var10_upvw = nil
	end
end
local TweenService_upvr = game:GetService("TweenService")
function MiningEffects(arg1) -- Line 37
	--[[ Upvalues[4]:
		[1]: var10_upvw (read and write)
		[2]: TweenService_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: mouse_upvr (readonly)
	]]
	if not arg1 and var10_upvw.Block and var10_upvw.Block:IsA("BasePart") then
		TweenService_upvr:Create(var10_upvw.Block, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, true), {
			Size = var10_upvw.Block.Size * 1.05;
		}):Play()
	end
	for _ = 1, 5 do
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		local var16
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var16 = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(var10_upvw.BlockObj.Position))
			return var16
		end
		if not arg1 or not INLINED() then
			var16 = mouse_upvr.Hit.Position
		end
		Part_upvr.Position = var16
		var16 = 1
		Part_upvr.Transparency = var16
		var16 = "Particle"
		Part_upvr.CollisionGroup = var16
		var16 = game.ReplicatedStorage.Prefabs.UI.BreakParticle:Clone()
		var16.Parent = Part_upvr
		var16.Adornee = Part_upvr
		var16.Frame.BackgroundColor3 = var10_upvw.BlockDef.AccentColor
		local var17 = math.random() / 3 + 0.4
		var16.Size = UDim2.fromScale(var17, var17)
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, math.clamp(math.random(), 0.5, 1), math.random() * 2 - 1) * math.random() * 20
		task.delay(1, function() -- Line 65
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
	mouse_upvr.TargetFilter = workspace.ParticleStorage
end
function module.UpdateBlockHealth(arg1, arg2, arg3) -- Line 77
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: var10_upvw (read and write)
	]]
	any_GetController_result1_upvr.Blocks[arg2.RegenObjPath.World][arg2.RegenObjPath.Level][arg2.RegenObjPath.Index].BlockObj = arg2
	if var10_upvw and var10_upvw.BlockObj and arg2.Index == var10_upvw.BlockObj.Index then
		local var19 = arg3
		if not var19 then
			var19 = arg2.Health
		end
		var10_upvw.BlockObj.Health = var19
		var10_upvw:UpdateHealth()
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
any_GetController_result1_upvr_2.ToolUsed.Event:Connect(function() -- Line 91
	--[[ Upvalues[5]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: var10_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	if not any_GetController_result1_upvr_2.IsUsingTool or not var10_upvw then
	else
		local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
		if not any_GetSlotFromIndex_result1 then return end
		local var23 = any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1.Id]
		if not var23 then return end
		if var10_upvw.BlockDef ~= nil then
			local var24 = var23.DamageTable[var10_upvw.BlockDef.DamageCatagory]
			if not var24 then
				var24 = var23.DamageTable.Misc
			end
			MiningEffects(false)
			any_GetController_result1_upvr:DamageBlock(var10_upvw, var24)
		end
	end
end)
local MinePart_upvr = require(script.MinePart)
game:GetService("RunService").RenderStepped:Connect(function(arg1) -- Line 114
	--[[ Upvalues[8]:
		[1]: CoreUtil_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: mouse_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: Mining_upvr (readonly)
		[7]: var10_upvw (read and write)
		[8]: MinePart_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var27
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var27 = mouse_upvr.Target
			return workspace.Island:IsAncestorOf(var27)
		end
		if not mouse_upvr.Target or not INLINED_2() then return end
		var27 = LocalPlayer_upvr
		local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
		var27 = false
		if mouse_upvr.Target:FindFirstAncestorWhichIsA("Model") ~= workspace then
			var27 = mouse_upvr.Target:FindFirstAncestorWhichIsA("Model")
		end
		if not var27 or not var27.PrimaryPart then
		end
		if any_GetSlotFromIndex_result1_2 and any_GetSlotFromIndex_result1_2.Catagory == "Tool" and (var27.Character:GetPivot().Position - mouse_upvr.Target.Position).Magnitude <= CoreUtil_upvr.PlacementRange then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			any_GetController_result1_upvr.BlockPartSelected = var27 or mouse_upvr.Target
		else
			any_GetController_result1_upvr.BlockPartSelected = nil
		end
		Mining_upvr.Adornee = any_GetController_result1_upvr.BlockPartSelected
		if not any_GetController_result1_upvr_2.IsUsingTool or not any_GetController_result1_upvr.BlockPartSelected then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			return
		end
		if not var10_upvw or any_GetController_result1_upvr.BlockPartSelected ~= var10_upvw.Block then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, {
				World = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("World");
				Level = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("Level");
				Index = any_GetController_result1_upvr.BlockPartSelected:GetAttribute("Index");
			})
			if not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1 == 0 then
				var10_upvw = nil
				return
			end
			var10_upvw = MinePart_upvr.new(any_GetValueAtPosition_result1)
		end
	end
end)
return module

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.MiningHandler.MinePart
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:53
-- Luau version 6, Types version 3
-- Time taken: 0.002143 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module_upvr = {}
module_upvr.__index = module_upvr
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):RequireDefinitions()
local BlockService_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetService("BlockService")
function module_upvr.new(arg1) -- Line 15
	--[[ Upvalues[3]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: BlockService_upvr (readonly)
	]]
	if not arg1 then return end
	local tbl = {}
	local SOME = workspace.Island:WaitForChild(arg1.Index, 5)
	if not SOME then
		SOME = workspace.ClientBlocks:WaitForChild(arg1.Index)
	end
	tbl.Block = SOME
	tbl.BlockHealthUI = nil
	tbl.BlockObj = arg1
	tbl.BlockDef = any_RequireDefinitions_result1_upvr.Block[arg1.Id]
	local setmetatable_result1_upvr = setmetatable(tbl, module_upvr)
	setmetatable_result1_upvr:Initialise()
	setmetatable_result1_upvr:UpdateHealth()
	BlockService_upvr:GetBlockHealth({
		World = arg1.RegenObjPath.World;
		Level = arg1.RegenObjPath.Level;
		Index = arg1.RegenObjPath.Index;
	}):andThen(function(arg1_2) -- Line 33
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if not setmetatable_result1_upvr.BlockObj then
		else
			setmetatable_result1_upvr.BlockObj.Health = arg1_2
			setmetatable_result1_upvr:UpdateHealth()
		end
	end)
	return setmetatable_result1_upvr
end
function module_upvr.Initialise(arg1) -- Line 43
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	arg1.BlockHealthUI = ReplicatedStorage_upvr.Prefabs.UI.BlockHealth:Clone()
	if arg1.Block:IsA("Model") then
		arg1.BlockHealthUI.Parent = arg1.Block.PrimaryPart
		arg1.BlockHealthUI.Adornee = arg1.Block.PrimaryPart
	else
		arg1.BlockHealthUI.Parent = arg1.Block
		arg1.BlockHealthUI.Adornee = arg1.Block
	end
end
function module_upvr.Damage(arg1, arg2) -- Line 58
	if not arg1.BlockObj.Health then
	else
		arg1.BlockObj.Health = math.clamp(arg1.BlockObj.Health - arg2, 0, arg1.BlockDef.Health)
		if arg1.BlockObj.Health == 0 then
			return true
		end
		arg1:UpdateHealth()
	end
end
function module_upvr.UpdateHealth(arg1) -- Line 75
	if arg1.BlockHealthUI and arg1.BlockObj.Health and arg1.BlockDef.Health then
		if arg1.BlockObj.Health == arg1.BlockDef.Health or arg1.BlockObj.Health == 0 then
			arg1.BlockHealthUI.Frame.Visible = false
		else
			arg1.BlockHealthUI.Frame.Visible = true
		end
		arg1.BlockHealthUI.Frame.Bar.Size = UDim2.fromScale(arg1.BlockObj.Health / arg1.BlockDef.Health, 1)
	end
end
function module_upvr.Disconnect(arg1) -- Line 92
	if arg1.BlockHealthUI then
		arg1.BlockHealthUI:Destroy()
	end
	arg1.BlockHealthUI = nil
	arg1.Block = nil
	arg1.BlockObj = nil
	arg1.BlockDef = nil
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.BlockController.PlacingHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:54
-- Luau version 6, Types version 3
-- Time taken: 0.008182 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local UserInputService_upvr = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local var8_upvw
local var9_upvw
local var10_upvw = Vector3.new(0, 0, 0)
local var11_upvw = false
local LocalPlayer_upvr = game.Players.LocalPlayer
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RaycastParams_new_result1_upvr = RaycastParams.new()
local function UpdatePreviewPart_upvr(arg1) -- Line 35, Named "UpdatePreviewPart"
	--[[ Upvalues[4]:
		[1]: var8_upvw (read and write)
		[2]: RaycastParams_new_result1_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	local var40
	if var40 then
		var40 = var8_upvw.Name
		if var40 == arg1 then return end
	end
	var40 = var8_upvw
	if var40 then
		var40 = var8_upvw:Destroy
		var40()
		var40 = nil
		var8_upvw = var40
	end
	if not arg1 then
	else
		var40 = RaycastParams_new_result1_upvr:AddToFilter
		var40(LocalPlayer_upvr.Character)
		var40 = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg1):Clone()
		var8_upvw = var40
		var40 = var8_upvw
		var40.Parent = workspace.GhostPart
		var40 = 0
		if var8_upvw:FindFirstChild("Stages") then
			for _, v_2 in pairs(var8_upvw.Stages:GetChildren()) do
				if var40 < tonumber(v_2.Name) then
					var40 = tonumber(v_2.Name)
				end
			end
		end
		for _, v_3 in pairs(workspace.GhostPart:GetDescendants()) do
			if v_3:IsA("BasePart") then
				local Name_3 = v_3.Parent.Name
				if Name_3 == "Stages" then
					if tonumber(v_3.Name) ~= var40 then
						Name_3 = 1
					else
						Name_3 = 0.5
					end
					v_3.Transparency = Name_3
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
				v_3.CanCollide = false
				v_3.CanQuery = false
			elseif v_3:IsA("Texture") then
				local Name_2 = v_3.Parent.Parent.Name
				if Name_2 == "Stages" then
					if tonumber(v_3.Parent.Name) ~= var40 then
						Name_2 = 1
					else
						Name_2 = 0.5
					end
					v_3.Transparency = Name_2
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
			end
		end
	end
end
function MouseTargetGridPosition() -- Line 88
	--[[ Upvalues[4]:
		[1]: UserInputService_upvr (readonly)
		[2]: RaycastParams_new_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
	]]
	local any_GetMouseLocation_result1 = UserInputService_upvr:GetMouseLocation()
	local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1.X, any_GetMouseLocation_result1.Y)
	local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, RaycastParams_new_result1_upvr)
	if not workspace_Raycast_result1 then return end
	local any_RoundPosToGridPos_result1 = CoreUtil_upvr:RoundPosToGridPos(workspace_Raycast_result1.Position + workspace_Raycast_result1.Normal * 3 / 2)
	if (LocalPlayer_upvr.Character:GetPivot().Position - any_RoundPosToGridPos_result1).magnitude < CoreUtil_upvr.PlacementRange then
		return any_RoundPosToGridPos_result1, true
	end
	return any_RoundPosToGridPos_result1, false
end
function PositionPreviewPart() -- Line 105
	--[[ Upvalues[6]:
		[1]: var9_upvw (read and write)
		[2]: var8_upvw (read and write)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: mouse_upvr (readonly)
		[5]: var10_upvw (read and write)
		[6]: CoreUtil_upvr (readonly)
	]]
	local MouseTargetGridPosition_result1, _ = MouseTargetGridPosition()
	var9_upvw = MouseTargetGridPosition_result1
	if not var9_upvw or not var8_upvw then
	else
		if any_RequireDefinitions_result1_upvr.Block[var8_upvw.Name].CanBeRotated then
			if var9_upvw and mouse_upvr.Hit and var9_upvw.Y < mouse_upvr.Hit.Position.Y then
				var10_upvw = Vector3.new(180, var10_upvw.Y, var10_upvw.Z)
			elseif var9_upvw and mouse_upvr.Hit then
				var10_upvw = Vector3.new(0, var10_upvw.Y, var10_upvw.Z)
			end
			CoreUtil_upvr:SetRotation(var8_upvw, var10_upvw)
		end
		CoreUtil_upvr:SetPosition(var8_upvw, var9_upvw)
	end
end
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
function PlaceBlock(arg1) -- Line 126
	--[[ Upvalues[9]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: var9_upvw (read and write)
		[5]: UpdatePreviewPart_upvr (readonly)
		[6]: var10_upvw (read and write)
		[7]: any_GetController_result1_upvr_2 (readonly)
		[8]: var11_upvw (read and write)
		[9]: mouse_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1_3_upvr = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
	if any_GetSlotFromIndex_result1_3_upvr and any_GetSlotFromIndex_result1_3_upvr.Catagory == "Block" and any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_3_upvr.Id].CanBePlaced then
		local var80_upvr
		if var80_upvr then
			var80_upvr = any_GetSlotFromIndex_result1_3_upvr.Stack
			var80_upvr -= 1
			any_GetSlotFromIndex_result1_3_upvr.Stack = var80_upvr
			var80_upvr = UpdatePreviewPart_upvr
			var80_upvr(nil)
			local function INLINED_2() -- Internal function, doesn't exist in bytecode
				var80_upvr = var10_upvw
				return var80_upvr
			end
			if not any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_3_upvr.Id].CanBeRotated or not INLINED_2() then
				var80_upvr = Vector3.new(0, 0, 0)
			end
			coroutine.wrap(function() -- Line 136
				--[[ Upvalues[4]:
					[1]: any_GetController_result1_upvr_2 (copied, readonly)
					[2]: any_GetSlotFromIndex_result1_3_upvr (readonly)
					[3]: var9_upvw (copied, read and write)
					[4]: var80_upvr (readonly)
				]]
				any_GetController_result1_upvr_2:PlaceBlock(any_GetSlotFromIndex_result1_3_upvr.Id, var9_upvw, var80_upvr)
			end)()
			if any_GetSlotFromIndex_result1_3_upvr.Stack == 0 or not arg1 then return end
			var11_upvw = true
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			local tbl = {}
			table.insert(tbl, mouse_upvr.Button1Up:Connect(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_2 (readonly)
				]]
				BindableEvent_upvr_2:Fire()
			end))
			local var86_upvw
			table.insert(tbl, mouse_upvr.Move:Connect(function() -- Line 152
				--[[ Upvalues[7]:
					[1]: var9_upvw (read and write)
					[2]: mouse_upvr (copied, readonly)
					[3]: var86_upvw (read and write)
					[4]: any_GetSlotFromIndex_result1_3_upvr (readonly)
					[5]: BindableEvent_upvr_2 (readonly)
					[6]: any_GetController_result1_upvr_2 (copied, readonly)
					[7]: var80_upvr (readonly)
				]]
				local MouseTargetGridPosition_result1_2_upvr, MouseTargetGridPosition_result2 = MouseTargetGridPosition()
				if MouseTargetGridPosition_result1_2_upvr and MouseTargetGridPosition_result2 and (var9_upvw - MouseTargetGridPosition_result1_2_upvr).magnitude == 3 then
					if not mouse_upvr.Target or mouse_upvr.Target.Position == var9_upvw then return end
					if not var86_upvw then
						var86_upvw = (MouseTargetGridPosition_result1_2_upvr - var9_upvw).unit
					end
					if var86_upvw == (MouseTargetGridPosition_result1_2_upvr - var9_upvw).unit then
						var9_upvw = MouseTargetGridPosition_result1_2_upvr
						local var89 = any_GetSlotFromIndex_result1_3_upvr
						var89.Stack -= 1
						if any_GetSlotFromIndex_result1_3_upvr.Stack == 0 then
							BindableEvent_upvr_2:Fire()
						end
						coroutine.wrap(function() -- Line 163
							--[[ Upvalues[4]:
								[1]: any_GetController_result1_upvr_2 (copied, readonly)
								[2]: any_GetSlotFromIndex_result1_3_upvr (copied, readonly)
								[3]: MouseTargetGridPosition_result1_2_upvr (readonly)
								[4]: var80_upvr (copied, readonly)
							]]
							any_GetController_result1_upvr_2:PlaceBlock(any_GetSlotFromIndex_result1_3_upvr.Id, MouseTargetGridPosition_result1_2_upvr, var80_upvr)
						end)()
					end
				end
			end))
			BindableEvent_upvr_2.Event:Wait()
			BindableEvent_upvr_2:Destroy()
			for _, v in pairs(tbl) do
				v:Disconnect()
			end
			var11_upvw = false
		end
	end
end
UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 183
	if arg1.UserInputType == Enum.UserInputType.MouseButton1 and not arg2 then
		PlaceBlock(true)
	end
end)
UserInputService_upvr.TouchTap:Connect(function(arg1, arg2) -- Line 189
	if arg2 then
	else
		wait()
		PlaceBlock()
	end
end)
ContextActionService:BindAction("Rotate", function(arg1, arg2, arg3) -- Line 23, Named "RotatePreview"
	--[[ Upvalues[1]:
		[1]: var10_upvw (read and write)
	]]
	if arg2 ~= Enum.UserInputState.Begin then
	elseif var10_upvw then
		var10_upvw += Vector3.new(var10_upvw.X, 90, var10_upvw.Z)
		if 360 < var10_upvw.Y then
			var10_upvw = Vector3.new(var10_upvw.X, var10_upvw.Y - 360, var10_upvw.Z)
			return
		end
		if var10_upvw.Y < 0 then
			var10_upvw = Vector3.new(var10_upvw.X, var10_upvw.Y + 360, var10_upvw.Z)
		end
	end
end, true, Enum.KeyCode.R, Enum.KeyCode.ButtonL2)
ContextActionService:SetPosition("Rotate", UDim2.new(-1.8, 0, 0, 0))
ContextActionService:SetImage("Rotate", "rbxassetid://17738191723")
local any_GetButton_result1 = ContextActionService:GetButton("Rotate")
if any_GetButton_result1 then
	any_GetButton_result1.ZIndex = 3
end
game:GetService("RunService").RenderStepped:Connect(function() -- Line 201
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: var11_upvw (read and write)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: UpdatePreviewPart_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
	if not var11_upvw and any_GetSlotFromIndex_result1 and any_GetSlotFromIndex_result1.Catagory == "Block" and any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1.Id].CanBePlaced then
		UpdatePreviewPart_upvr(any_GetSlotFromIndex_result1.Id)
		PositionPreviewPart()
	else
		UpdatePreviewPart_upvr(nil)
	end
end)
return {}

-- StarterPlayer.StarterPlayerScripts.Controllers.CombatController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:56
-- Luau version 6, Types version 3
-- Time taken: 0.002418 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "CombatController";
})
any_CreateController_result1_upvr.Camps = {}
local tbl_upvr = {}
local tbl_upvr_2 = {}
local TweenService_upvr = game:GetService("TweenService")
function AttackEffects(arg1, arg2) -- Line 22
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	if not arg1 or not arg1.Parent or not arg1:FindFirstChild("Humanoid") or arg1.Humanoid.Health == 0 then
	else
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		Part_upvr.Position = arg1.PrimaryPart.Position
		Part_upvr.Transparency = 1
		Part_upvr.CanCollide = false
		local clone = game.ReplicatedStorage.Prefabs.UI.CritUI:Clone()
		clone.Parent = Part_upvr
		clone.Adornee = Part_upvr
		clone.TextLabel.Text = arg2
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, 5, math.random() * 2 - 1) * 8
		TweenService_upvr:Create(clone.TextLabel, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		}):Play()
		task.delay(1, function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr and Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local LocalPlayer_upvr = game.Players.LocalPlayer
function Attack() -- Line 55
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: tbl_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 50 start (CF ANALYSIS FAILED)
	local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(tbl_upvr_2.PlayerController.Inventory, tbl_upvr_2.PlayerController.EquippedIndex)
	if not any_GetSlotFromIndex_result1 then return end
	if not any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1.Id] then return end
	local Character = LocalPlayer_upvr.Character
	if not Character then return end
	if not Character:FindFirstChild("Humanoid") then return end
	if not Character:FindFirstChild("HumanoidRootPart") then return end
	local OverlapParams_new_result1 = OverlapParams.new()
	OverlapParams_new_result1.FilterType = Enum.RaycastFilterType.Exclude
	OverlapParams_new_result1.FilterDescendantsInstances = {LocalPlayer_upvr.Character}
	local pairs_result1, pairs_result2, pairs_result3 = pairs(workspace:GetPartBoundsInRadius(LocalPlayer_upvr.Character.PrimaryPart.Position, CoreUtil_upvr.AttackRadius, OverlapParams_new_result1))
	-- KONSTANTERROR: [0] 1. Error Block 50 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [116] 83. Error Block 19 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [116] 83. Error Block 19 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [81] 57. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [116.14]
	-- KONSTANTERROR: [81] 57. Error Block 12 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 140
	--[[ Upvalues[4]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.MobService = Knit_upvr.GetService("MobService")
	tbl_upvr_2.BlockController = Knit_upvr.GetController("BlockController")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr_2.PlayerController.ToolUsed.Event:Connect(Attack)
	tbl_upvr.MobService.UpdateClientCamps:Connect(function(arg1_2) -- Line 152
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.Camps = arg1_2
	end)
	local any_await_result1, any_await_result2 = tbl_upvr.MobService:GetCamps():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Camps = any_await_result2
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.NPCController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:57
-- Luau version 6, Types version 3
-- Time taken: 0.001579 seconds

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1 = Knit_upvr.CreateController({
	Name = "NPCController";
})
local tbl_upvr_3 = {}
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local Streamable_upvr = require(ReplicatedStorage.Packages.Streamable).Streamable
local tbl_upvr_4 = {}
function Initialise() -- Line 24
	--[[ Upvalues[4]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: Streamable_upvr (readonly)
		[3]: tbl_upvr_4 (readonly)
		[4]: tbl_upvr_3 (readonly)
	]]
	for _, v_upvr in pairs(any_RequireDefinitions_result1_upvr.Npc) do
		local function _(arg1, arg2) -- Line 28
			--[[ Upvalues[3]:
				[1]: tbl_upvr_4 (copied, readonly)
				[2]: v_upvr (readonly)
				[3]: tbl_upvr_3 (copied, readonly)
			]]
			tbl_upvr_4[v_upvr.Id] = tbl_upvr_3.NPCModule.new(arg1.Parent, v_upvr.Gender)
			arg1:WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 33
				--[[ Upvalues[2]:
					[1]: tbl_upvr_4 (copied, readonly)
					[2]: v_upvr (copied, readonly)
				]]
				tbl_upvr_4[v_upvr.Id]:Activate()
			end)
			arg2:Add(function() -- Line 37
				--[[ Upvalues[2]:
					[1]: tbl_upvr_4 (copied, readonly)
					[2]: v_upvr (copied, readonly)
				]]
				tbl_upvr_4[v_upvr.Id]:Destroy()
				tbl_upvr_4[v_upvr.Id] = nil
			end)
		end
	end
end
local tbl_upvr_2 = {}
local tbl_upvr = {}
function any_CreateController_result1.KnitStart(arg1) -- Line 48
	--[[ Upvalues[5]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: tbl_upvr_3 (readonly)
	]]
	tbl_upvr_2.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_2.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.UIController = Knit_upvr.GetController("UIController")
	if CoreUtil_upvr.PlaceIds.Citadel ~= game.PlaceId then
	else
		tbl_upvr_3.NPCModule = require(script.NPCObject)
		Initialise()
	end
end
return any_CreateController_result1

-- StarterPlayer.StarterPlayerScripts.Controllers.NPCController.NPCObject
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:58
-- Luau version 6, Types version 3
-- Time taken: 0.000701 seconds

local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1, arg2) -- Line 12
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {
		Id = arg1.Name;
	}
	module.Model = arg1
	module.Gender = arg2
	return setmetatable(module, module_2_upvr)
end
local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
function module_2_upvr.Activate(arg1) -- Line 26
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Shop", true, arg1)
end
function module_2_upvr.Destroy(arg1) -- Line 31
end
return module_2_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:58:59
-- Luau version 6, Types version 3
-- Time taken: 0.012078 seconds

local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "UIController";
})
any_CreateController_result1_upvr.ShiftDown = false
any_CreateController_result1_upvr.Processing = true
any_CreateController_result1_upvr.ButtonNoises = {}
local var7_upvw
local LocalPlayer_upvr = Players_upvr.LocalPlayer
local tbl_5_upvr = {}
any_CreateController_result1_upvr.Modules = {}
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):RequireDefinitions()
function any_CreateController_result1_upvr.UpdateItemDisplay(arg1, arg2, arg3) -- Line 29
	--[[ Upvalues[2]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	arg2.ImageLabel.Image = ""
	local pairs_result1_2, _, pairs_result3 = pairs(arg2.ViewportFrame:GetChildren())
	local var22
	for _, v in pairs_result1_2, var22, pairs_result3 do
		if v:IsA("BasePart") or v:IsA("Model") or v:IsA("Camera") then
			v:Destroy()
		end
	end
	if arg2:FindFirstChild("Empty") then
		if not arg3 then
			var22 = true
		else
			var22 = false
		end
		arg2.Empty.Visible = var22
	end
	if not arg3 then
		if arg2:FindFirstChild("Stack") then
			var22 = false
			arg2.Stack.Visible = var22
		end
	else
		var22 = any_RequireDefinitions_result1_upvr[arg3.Catagory]
		local var23 = var22[arg3.Id]
		var22 = type(var23.DisplayImage)
		if var22 == "string" then
			var22 = arg2.ImageLabel
			var22.Image = var23.DisplayImage
		else
			var22 = arg3.Catagory
			local function INLINED() -- Internal function, doesn't exist in bytecode
				var22 = ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg3.Catagory)
				return var22
			end
			if not var22 or not INLINED() then return end
			var22 = ReplicatedStorage_upvr.Prefabs[arg3.Catagory]:FindFirstChild(arg3.Id)
			local var24 = var22
			if not var24 then return end
			arg2.ViewportFrame.CurrentCamera = Instance.new("Camera", arg2.ViewportFrame)
			local clone_4 = var24:Clone()
			clone_4.Parent = arg2.ViewportFrame
			if clone_4:IsA("Model") then
				clone_4:SetPrimaryPartCFrame(CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295))
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_4.PrimaryPart.Position + Vector3.new(4, 4, 0), clone_4.PrimaryPart.Position)
			else
				clone_4.CFrame = CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295)
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_4.Position + Vector3.new(4, 4, 0), clone_4.Position)
			end
		end
		var24 = arg2:FindFirstChild("Stack")
		if var24 then
			var24 = arg3.Stack
			if 1 < var24 then
				var24 = arg2.Stack
				var24.Text = tostring(arg3.Stack)
				var24 = arg2.Stack
				var24.Visible = true
				return
			end
			var24 = arg2.Stack
			var24.Visible = false
		end
	end
end
function any_CreateController_result1_upvr.WarningMessage(arg1, arg2) -- Line 88
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: var7_upvw (read and write)
		[3]: TweenService_upvr (readonly)
	]]
	local clone_2_upvr = ReplicatedStorage_upvr.Prefabs.UI.WarningMessage:Clone()
	clone_2_upvr.Parent = var7_upvw.HUD.WarningsBox
	clone_2_upvr.Text = arg2
	TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(0.2), {
		Size = UDim2.fromScale(1, 0.33);
	}):Play()
	task.delay(6, function() -- Line 96
		--[[ Upvalues[2]:
			[1]: TweenService_upvr (copied, readonly)
			[2]: clone_2_upvr (readonly)
		]]
		local any_Create_result1 = TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		})
		any_Create_result1:Play()
		any_Create_result1.Completed:Wait()
		clone_2_upvr:Destroy()
	end)
end
function any_CreateController_result1_upvr.Notification(arg1, arg2, arg3) -- Line 106
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: var7_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	if arg2 == "Level" then
		local clone = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.LevelTemp:Clone()
		clone.Main.Details.Title.Text = arg3.Catagory
		clone.Main.Details.SubCat.Text = arg3.SubCatagory.." Lvl "..arg3.LevelEarned
		any_CreateController_result1_upvr:UpdateItemDisplay(clone.Main.Details.Item, arg3.Definition)
	elseif arg2 == "PlayerLevel" then
		local clone_5 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.PlayerLevelTemp:Clone()
		clone_5.Main.Details.Title.Text = "New Level Earned"
		clone_5.Main.Details.SubCat.Text = "Player".." Lvl "..arg3.LevelEarned
	elseif arg2 == "Gift" then
		workspace.Sound.UI.RecievedGift:Play()
		local clone_3 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.GiftReceived:Clone()
		clone_3.Main.GiftName.Title.Text = arg3[2]:upper()
		clone_3.Main.Data.SubTitle.Text = "from "..arg3[1]:upper()
	end
	clone_3.Parent = var7_upvw.HUD.Notifications
	TweenService_upvr:Create(clone_3, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(1, 0.2);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_3.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(3.25)
	TweenService_upvr:Create(clone_3.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(1, 0);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_3, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(0.25)
	clone_3:Destroy()
end
function any_CreateController_result1_upvr.TeleportUI(arg1, arg2) -- Line 147
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: TweenService_upvr (readonly)
	]]
	if arg2 then
		local _ = 0
	else
	end
	if arg2 then
		var7_upvw.TeleportLoad.Visible = true
	end
	local tbl_9 = {"rbxassetid://136221297607101", "rbxassetid://95153176556549", "rbxassetid://131416737565810", "rbxassetid://91565459811987", "rbxassetid://115354466163250", "rbxassetid://107682877629212", "rbxassetid://113329646531178", "rbxassetid://76143816516289", "rbxassetid://85863130967708"}
	local tbl_4 = {"\"The sky calls to us.\" - Carl Sagan", "Underlings can help auto farm, mine and cut wood on your island", "Level up your combat, forestry, farming and mining masteries to unlock new items", "Use chests to store and organize items for easy access", "You can change your portal and sky from Island settings", "Certain achievements can unlock new items or perks like extra HP", "Eating certain crops can restore your health", "Farming crops is a great way to earn coins", "Farming crops is a great way to earn coins", "Level up your mining mastery to unlock better tools", "Underlings can be unlocked from leveling your masteries", "You can join your friend's island using the command /join <username>", "You can craft colored clay using color dyes and clay", "On PC you can press the E key to open your inventory", "\"Not all those who wander are lost.\" - J.R.R. Tolkien", "“The sky is not the limit, it’s just the beginning.” – Chuck Yeager", "“The sky is home to the dreamers of the earth.” – Leonardo da Vinci ", "You can rotate items using the R key on PC", "You can use any tool or weapon to attack mobs or break blocks but they may do less damage than the intended tool", "Feeling lonely? Your friends can join you using /join <youruser>", "If unwanted players are joining your Island you can disable joins in your Island Settings", "Killing mobs can cause them to drop rare items used for crafting", "Gather wood from the Forest or place an underling to auto cut wood", "Upgrading your sword can help you kill mobs faster", "\"Those who visit the GrimThorn are never seen again...\" - Villager", "High Realms is currently in Beta, you may experience issues", "When crops are ready to be harvested you'll see a sparkle effect"}
	var7_upvw.TeleportLoad.Quote.TextLabel.Text = tbl_4[math.random(1, #tbl_4)]
	var7_upvw.TeleportLoad.ImageLabel.Image = tbl_9[math.random(1, #tbl_9)]
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Quote, TweenInfo.new(1), {
		BackgroundTransparency = 1;
	}):Play()
	local tbl_2 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_2.TextTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Quote.TextLabel, TweenInfo.new(1), tbl_2):Play()
	local tbl_6 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_6.TextTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Title.TextLabel, TweenInfo.new(1), tbl_6):Play()
	local tbl = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl.ImageTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.ImageLabel, TweenInfo.new(1), tbl):Play()
	local tbl_8 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_8.ImageTransparency = 1
	TweenService_upvr:Create(var7_upvw.TeleportLoad.Logo, TweenInfo.new(1), tbl_8):Play()
	if not arg2 then
		task.delay(1, function() -- Line 209
			--[[ Upvalues[1]:
				[1]: var7_upvw (copied, read and write)
			]]
			var7_upvw.TeleportLoad.Visible = false
		end)
	else
		coroutine.wrap(function() -- Line 211
			--[[ Upvalues[2]:
				[1]: var7_upvw (copied, read and write)
				[2]: TweenService_upvr (copied, readonly)
			]]
			local var48 = 1
			while var7_upvw.TeleportLoad.Visible do
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['1'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				wait(0.33)
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['2'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				wait(0.33)
				TweenService_upvr:Create(var7_upvw.TeleportLoad.LOADANIM['3'], TweenInfo.new(1), {
					BackgroundTransparency = var48;
				}):Play()
				local wait = wait
				wait(0.33)
				if var48 == 1 then
					wait = 0
				else
					wait = 1
				end
			end
		end)()
	end
end
function any_CreateController_result1_upvr.UpdateCoinCounts(arg1) -- Line 231
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: tbl_5_upvr (readonly)
	]]
	var7_upvw.HUD.CoinCounter.Main.Display.Text = tbl_5_upvr.PlayerController.Coins
	var7_upvw.Shop.Titles.CoinCount.TextLabel.Text = tbl_5_upvr.PlayerController.Coins
end
function any_CreateController_result1_upvr.ToggleUI(arg1, arg2, arg3, ...) -- Line 237
	--[[ Upvalues[2]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: var7_upvw (read and write)
	]]
	if any_CreateController_result1_upvr.Processing then
	else
		var7_upvw.HUD.Visible = false
		any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(false)
		any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(false, ...)
		any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(false, ...)
		any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(false)
		any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(false, ...)
		any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(false, ...)
		if arg3 and arg2 == "Shop" then
			any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(true, ...)
			return
		end
		if arg3 and arg2 == "Inventory" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true)
			return
		end
		if arg3 and arg2 == "Crafting" then
			any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(true, ...)
			return
		end
		if arg3 and arg2 == "Stats" then
			any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(true)
			return
		end
		if arg3 and arg2 == "Underling" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Underling", ...)
			return
		end
		if arg3 and arg2 == "Chest" then
			any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Chest", ...)
			return
		end
		if arg3 and arg2 == "Store" then
			any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(true, ...)
			return
		end
		if arg3 and arg2 == "Settings" then
			any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(true, ...)
			return
		end
		var7_upvw.HUD.Visible = true
	end
end
local var53_upvw = 0
function UpdateHealthUI(arg1) -- Line 274
	--[[ Upvalues[4]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: var7_upvw (read and write)
		[3]: var53_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	local Humanoid_2 = LocalPlayer_upvr.Character.Humanoid
	if arg1 / Humanoid_2.MaxHealth == 1 then
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(0, 0.839216, 0.0980392), Color3.new(0.0705882, 0.517647, 0))
	elseif 0.35 <= arg1 / Humanoid_2.MaxHealth then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(0.890196, 0.858824, 0), Color3.new(0.635294, 0.552941, 0.141176))
	elseif arg1 / Humanoid_2.MaxHealth < 0.35 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		var7_upvw.HUD.HPBar.Progress.UIGradient.Color = ColorSequence.new(Color3.new(158, 0, 0), Color3.new(0.886275, 0.45098, 0.0156863))
	end
	var7_upvw.HUD.HPBar.Progress.Size = UDim2.fromScale(arg1 / Humanoid_2.MaxHealth, 0.5)
	var7_upvw.HUD.HPBar.HP.Text = tostring(math.ceil(arg1)..'/'..Humanoid_2.MaxHealth)
	if 1 < var53_upvw - arg1 then
		TweenService_upvr:Create(var7_upvw.RadialBg, TweenInfo.new(0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.In, 0, true), {
			ImageTransparency = 0.33;
		}):Play()
	end
	var53_upvw = arg1
end
local function CharAdded_upvr(arg1) -- Line 299, Named "CharAdded"
	local Humanoid = arg1:WaitForChild("Humanoid")
	Humanoid.HealthChanged:Connect(UpdateHealthUI)
	UpdateHealthUI(Humanoid.Health)
end
local function ChatMessage_upvr(arg1, arg2) -- Line 305, Named "ChatMessage"
	--[[ Upvalues[1]:
		[1]: tbl_5_upvr (readonly)
	]]
	if not tbl_5_upvr.PlayerController.Settings.General.ChatNotifications then
	else
		game:GetService("TextChatService"):WaitForChild("TextChannels").RBXSystem:DisplaySystemMessage(string.format("<font color=\"rgb(%d, %d, %d)\">", math.floor(arg1.R * 255), math.floor(arg1.G * 255), math.floor(arg1.B * 255)).."[SERVER] : "..arg2.."</font>")
	end
end
local function InitialiseBasicUISFX_upvr() -- Line 322, Named "InitialiseBasicUISFX"
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	for _, v_2_upvr in pairs(var7_upvw:GetDescendants()) do
		if v_2_upvr:IsA("TextButton") or v_2_upvr:IsA("ImageButton") then
			if any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] then
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 329
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr]:Play()
				end)
			else
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 335
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					local var64
					local function INLINED_2() -- Internal function, doesn't exist in bytecode
						var64 = workspace.Sound.UI.ButtonClick1
						return var64
					end
					if math.random(1, 2) ~= 1 or not INLINED_2() then
						var64 = workspace.Sound.UI.ButtonClick2
					end
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] = var64
					var64:Play()
				end)
			end
		end
	end
end
function any_CreateController_result1_upvr.KnitInit(arg1) -- Line 345
	--[[ Upvalues[2]:
		[1]: var7_upvw (read and write)
		[2]: LocalPlayer_upvr (readonly)
	]]
	var7_upvw = game.StarterGui:WaitForChild("MainGui")
	var7_upvw.Parent = LocalPlayer_upvr:WaitForChild("PlayerGui")
	LocalPlayer_upvr.PlayerGui.ChildAdded:Connect(function(arg1_2) -- Line 350
		if arg1_2.Name == "MainGui" then
			arg1_2:Destroy()
		end
	end)
end
local tbl_7_upvr = {}
local UserInputService_upvr = game:GetService("UserInputService")
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 354
	--[[ Upvalues[11]:
		[1]: tbl_7_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_5_upvr (readonly)
		[4]: ChatMessage_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: var7_upvw (read and write)
		[7]: LocalPlayer_upvr (readonly)
		[8]: CharAdded_upvr (readonly)
		[9]: UserInputService_upvr (readonly)
		[10]: InitialiseBasicUISFX_upvr (readonly)
		[11]: Players_upvr (readonly)
	]]
	tbl_7_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_7_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_7_upvr.MarketService = Knit_upvr.GetService("MarketService")
	tbl_7_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_5_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_7_upvr.DataHandlerService.ChatMessage:Connect(ChatMessage_upvr)
	tbl_7_upvr.PlayerService.Warn:Connect(function(arg1_3) -- Line 365
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:WarningMessage(arg1_3)
	end)
	tbl_7_upvr.MarketService.GiftNotif:Connect(function(arg1_4, arg2) -- Line 369
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		local tbl_3 = {}
		tbl_3[1] = arg1_4
		tbl_3[2] = arg2
		any_CreateController_result1_upvr:Notification("Gift", tbl_3)
	end)
	for i_3, v_3_upvr in pairs(workspace.Underlings:GetChildren()) do
		v_3_upvr:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 374
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: v_3_upvr (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, v_3_upvr)
		end)
	end
	workspace.Underlings.ChildAdded:Connect(function(arg1_5) -- Line 373, Named "RigUnderling"
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		arg1_5:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 374
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: arg1_5 (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, arg1_5)
		end)
	end)
	var7_upvw.ItemDetails.Title:GetPropertyChangedSignal("TextBounds"):Connect(function() -- Line 382
		--[[ Upvalues[1]:
			[1]: var7_upvw (copied, read and write)
		]]
		local TextBounds = var7_upvw.ItemDetails.Title.TextBounds
		var7_upvw.ItemDetails.Size = UDim2.new(0, TextBounds.X + 10, 0, TextBounds.Y + 10)
	end)
	LocalPlayer_upvr.CharacterAdded:Connect(CharAdded_upvr)
	if LocalPlayer_upvr.Character then
		i_3 = "Humanoid"
		local SOME = LocalPlayer_upvr.Character:WaitForChild(i_3)
		v_3_upvr = UpdateHealthUI
		SOME.HealthChanged:Connect(v_3_upvr)
		i_3 = SOME.Health
		UpdateHealthUI(i_3)
	end
	any_CreateController_result1_upvr.Modules.InventoryHandler = require(script.InventoryHandler)
	any_CreateController_result1_upvr.Modules.CraftingHandler = require(script.CraftingHandler)
	any_CreateController_result1_upvr.Modules.StatsHandler = require(script.StatsHandler)
	any_CreateController_result1_upvr.Modules.ShopHandler = require(script.ShopHandler)
	any_CreateController_result1_upvr.Modules.StoreHandler = require(script.StoreHandler)
	any_CreateController_result1_upvr.Modules.TaskHandler = require(script.TaskHandler)
	any_CreateController_result1_upvr.Modules.SettingsHandler = require(script.SettingsHandler)
	any_CreateController_result1_upvr.Modules.PopUpHandler = require(script.PopUpHandler)
	UserInputService_upvr.InputBegan:Connect(function(arg1_6) -- Line 401
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_6.KeyCode == Enum.KeyCode.LeftShift then
			any_CreateController_result1_upvr.ShiftDown = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_7) -- Line 405
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_7.KeyCode == Enum.KeyCode.LeftShift then
			any_CreateController_result1_upvr.ShiftDown = false
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_8) -- Line 410
		if arg1_8.KeyCode.Name == "F2" then
			if game.Players.LocalPlayer.PlayerGui.MainGui.Enabled then
				game.Players.LocalPlayer.PlayerGui.MainGui.Enabled = false
				return
			end
			game.Players.LocalPlayer.PlayerGui.MainGui.Enabled = true
		end
	end)
	tbl_7_upvr.PlayerService.Teleporting:Connect(function() -- Line 420
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:TeleportUI(true)
	end)
	InitialiseBasicUISFX_upvr()
	any_CreateController_result1_upvr.Processing = false
	local MouseLockController = Players_upvr.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("CameraModule"):WaitForChild("MouseLockController")
	local BoundKeys = MouseLockController:FindFirstChild("BoundKeys")
	if BoundKeys then
		BoundKeys.Value = "LeftControl,RightControl"
	else
		local StringValue = Instance.new("StringValue")
		StringValue.Name = "BoundKeys"
		StringValue.Value = "LeftControl,RightControl"
		StringValue.Parent = MouseLockController
	end
end
return any_CreateController_result1_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:00
-- Luau version 6, Types version 3
-- Time taken: 0.015624 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local any_GetController_result1_upvr_3 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {
	InventorySpace = 0;
	FocusedStorages = {};
	CollectionUIObjects = {};
}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local tbl_upvr = {}
local tbl_4_upvr = {}
local tbl_6_upvr = {}
function UpdateSearch() -- Line 28
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
	]]
	local string_lower_result1 = string.lower(MainGui_upvr.Inventory.Main.SearchBG.SearchBar.Text)
	for _, v in pairs(tbl_6_upvr) do
		local var21 = 9
		if v.Index > var21 then
			if v.Item then
				local var22 = false
				if string_lower_result1 ~= "" then
					var22 = not string.find(string.lower(v.Item.Id), string_lower_result1)
				end
				var21 = not var22
				v.UI.Visible = var21
			else
				if string_lower_result1 ~= "" then
					var21 = false
				else
					var21 = true
				end
				v.UI.Visible = var21
			end
		end
	end
end
function InitialiseToolBar() -- Line 40
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_4_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	local ToolBar = MainGui_upvr:WaitForChild("HUD"):WaitForChild("ToolBar")
	for i_2 = 1, 9 do
		table.insert(tbl_4_upvr, tbl_upvr.ToolBar.new(i_2, ToolBar:FindFirstChild(i_2)))
	end
end
function InitialiseBackpack() -- Line 48
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	for i_3 = 1, module_upvr.InventorySpace do
		table.insert(tbl_6_upvr, tbl_upvr.Backpack.new(i_3))
	end
end
function UpdateToolBar(arg1, arg2) -- Line 54
	--[[ Upvalues[1]:
		[1]: tbl_4_upvr (readonly)
	]]
	tbl_4_upvr[arg1]:UpdateItem(arg2)
end
function UpdateBackpack(arg1, arg2) -- Line 59
	--[[ Upvalues[1]:
		[1]: tbl_6_upvr (readonly)
	]]
	tbl_6_upvr[arg1]:UpdateItem(arg2)
end
function UpdateStorageSlot(arg1, arg2) -- Line 64
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	local next_result1_2 = next(module_upvr.FocusedStorages)
	local var28
	if next_result1_2 == "Underling" then
		var28 = tbl_upvr.Underling.InventoryObjects[arg1]
	elseif next_result1_2 == "Chest" then
		var28 = tbl_upvr.Chests.InventoryObjects[arg1]
	end
	var28:UpdateItem(arg2)
end
function UpdateStorage(arg1, arg2) -- Line 79
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if not arg1 or not arg2 then
	else
		local var31 = module_upvr.FocusedStorages[arg1]
		if var31 then
		end
		local var32 = var31
		if var32 then
			var32 = var31.Data.StorageCap
		end
		for i_9 = 1, var32 do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_9)
			if any_GetSlotFromIndex_result1 or CoreUtil_upvr:GetSlotFromIndex(var31.Data.Storage, i_9) then
				UpdateStorageSlot(i_9, any_GetSlotFromIndex_result1)
			end
		end
	end
end
function UpdateInventory(arg1) -- Line 100
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_3 (readonly)
	]]
	for i_4 = 1, module_upvr.InventorySpace do
		local any_GetSlotFromIndex_result1_3 = CoreUtil_upvr:GetSlotFromIndex(arg1, i_4)
		local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, i_4)
		if any_GetSlotFromIndex_result1_3 or any_GetSlotFromIndex_result1_2 then
			if any_GetSlotFromIndex_result1_2 and not any_GetSlotFromIndex_result1_3 and 0 < i_4 and i_4 < 10 and i_4 == any_GetController_result1_upvr_3.EquippedIndex then
				any_GetController_result1_upvr_3:EquipItem(nil)
			end
			UpdateBackpack(i_4, any_GetSlotFromIndex_result1_3)
			if 0 < i_4 and i_4 < 10 then
			end
		end
	end
	any_GetController_result1_upvr_3.Inventory = arg1
end
function UpdateInventorySpace(arg1) -- Line 124
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.InventorySpace = arg1
end
function GetInventoryFromData(arg1) -- Line 128
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
	]]
	if not arg1 or not arg1.Inventory then return end
	local var37 = module_upvr.FocusedStorages[string.split(arg1.Inventory, '&')[1]]
	if not var37 or not var37.Data.Storage then
	end
	return any_GetController_result1_upvr_3.Inventory
end
function QuickSwap(arg1) -- Line 138
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local next_result1, next_result2 = next(module_upvr.FocusedStorages)
	if not next_result1 then
		next_result1 = "Inventory"
	end
	local tbl_2 = {}
	if arg1.Inventory == "Inventory" then
		if next_result2 then
			-- KONSTANTWARNING: GOTO [24] #17
		end
	end
	local var45 = 1
	local var46 = 1
	if next_result1 == "Inventory" then
		if 0 < arg1.Index and arg1.Index < 10 then
			var45 = 10
			var46 = module_upvr.InventorySpace
		else
			var45 = 1
			var46 = 9
		end
	elseif arg1.Inventory == "Inventory" then
		var45 = 1
		var46 = next_result2.Data.StorageCap
	else
		var45 = 1
		var46 = module_upvr.InventorySpace
	end
	tbl_2.Index = CoreUtil_upvr:GetFirstFreeInventorySpace(var46, any_GetController_result1_upvr_3.Inventory, {
		Min = var45;
		Max = var46;
	})
	if next_result1 == "Inventory" or arg1.Inventory ~= "Inventory" or not next_result1..'&'..next_result2.Index then
	end
	tbl_2.Inventory = "Inventory"
	if tbl_2.Index then
		SwapBackpackItem(arg1, tbl_2)
	end
end
function UpdateStorageServer(arg1, arg2, arg3) -- Line 178
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var48 = module_upvr.FocusedStorages[arg1]
	if var48 and var48.Index == arg2 then
		UpdateStorage(arg1, arg3)
	end
end
function SwapBackpackItem(arg1, arg2) -- Line 185
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
		[4]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 53 start (CF ANALYSIS FAILED)
	local var49
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var49 = next(module_upvr.FocusedStorages)
		return var49
	end
	if arg1.Inventory ~= "Storage" or not INLINED_2() then
		var49 = arg1.Inventory
	end
	arg1.Inventory = var49
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var49 = next(module_upvr.FocusedStorages)
		return var49
	end
	if arg2.Inventory ~= "Storage" or not INLINED_3() then
		var49 = arg2.Inventory
	end
	arg2.Inventory = var49
	var49 = module_upvr.FocusedStorages[arg1.Inventory]
	local var50 = module_upvr.FocusedStorages[arg2.Inventory]
	if not var49 or not arg1.Inventory..'&'..var49.Index then
	end
	arg1.Inventory = arg1.Inventory
	if not var50 or not arg2.Inventory..'&'..var50.Index then
	end
	arg2.Inventory = arg2.Inventory
	if arg1.Inventory ~= arg2.Inventory then
		-- KONSTANTWARNING: GOTO [74] #48
	end
	-- KONSTANTERROR: [0] 1. Error Block 53 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [73] 47. Error Block 57 start (CF ANALYSIS FAILED)
	CoreUtil_upvr:SwapInventorySlots(true, GetInventoryFromData(arg1), GetInventoryFromData(arg2), arg1.Index, arg2.Index)
	InventoryService_upvr:SwapInventoryIndexes(arg1.Inventory, arg2.Inventory, arg1.Index, arg2.Index)
	UpdateInventory(any_GetController_result1_upvr_3.Inventory)
	UpdateStorage(next(module_upvr.FocusedStorages))
	if arg1.Inventory == "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, arg1.Index) then
		UpdateBackpack(arg1.Index, nil)
		if 0 < arg1.Index and arg1.Index < 10 then
			-- KONSTANTWARNING: GOTO [181] #119
		end
	elseif arg1.Inventory ~= "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(var49.Data.Storage, arg1.Index) then
		UpdateStorageSlot(arg1.Index, nil)
	end
	if any_GetController_result1_upvr_3.EquippedIndex == arg1.Index and arg1.Inventory == "Inventory" or any_GetController_result1_upvr_3.EquippedIndex == arg2.Index and arg2.Inventory == "Inventory" then
		any_GetController_result1_upvr_3:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, any_GetController_result1_upvr_3.EquippedIndex))
	end
	-- KONSTANTERROR: [73] 47. Error Block 57 end (CF ANALYSIS FAILED)
end
function CollectionUI(arg1, arg2) -- Line 222
	--[[ Upvalues[5]:
		[1]: module_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: MainGui_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: TweenService_upvr (readonly)
	]]
	local children = workspace.Sound.ItemPickup:GetChildren()
	children[math.random(1, #children)]:Play()
	local var52 = module_upvr.CollectionUIObjects[arg1.Id]
	if var52 then
		var52.Stack += arg2
		var52.UI.Title.Text = tostring("+ "..arg1.Id..' '..var52.Stack)
		var52.Timer = 5
	else
		local tbl = {
			Timer = 5;
		}
		tbl.Stack = arg2
		local var54 = tbl
		module_upvr.CollectionUIObjects[arg1.Id] = var54
		var54.UI = ReplicatedStorage_upvr.Prefabs.UI.CollectionItem:Clone()
		var54.UI.Title.Text = tostring("+ "..arg1.Id..' '..arg2)
		var54.UI.Parent = MainGui_upvr.HUD.LootNotifications
		any_GetController_result1_upvr:UpdateItemDisplay(var54.UI, arg1)
		TweenService_upvr:Create(var54.UI, TweenInfo.new(0.2), {
			Size = UDim2.new(0.99, 0, 0, 50);
		}):Play()
		wait(0.2)
		TweenService_upvr:Create(var54.UI.ImageLabel, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.ViewportFrame, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.Title, TweenInfo.new(0.2), {
			TextTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var54.UI.Title.UIStroke, TweenInfo.new(0.2), {
			Transparency = 0;
		}):Play()
	end
end
function CollectionCleanUp() -- Line 267
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	while wait(1) do
		for i_5, v_2 in pairs(module_upvr.CollectionUIObjects) do
			v_2.Timer -= 1
			if v_2.Timer == 0 then
				module_upvr.CollectionUIObjects[i_5] = nil
				TweenService_upvr:Create(v_2.UI.ViewportFrame, TweenInfo.new(0.2), {
					ImageTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title, TweenInfo.new(0.2), {
					TextTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title.UIStroke, TweenInfo.new(0.2), {
					Transparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.ImageLabel, TweenInfo.new(0.2), {
					ImageTransparency = 1;
					BackgroundTransparency = 1;
				}):Play()
				wait(0.2)
				TweenService_upvr:Create(v_2.UI, TweenInfo.new(0.2), {
					Size = UDim2.new(0, 0, 0, 0);
				}):Play()
				wait(0.2)
				v_2.UI:Destroy()
			end
		end
	end
end
function EquipUpdate(arg1) -- Line 289
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_3 (readonly)
		[2]: tbl_4_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	local var74 = false
	if any_GetController_result1_upvr_3.EquippedIndex ~= arg1.Index then
		var74 = arg1.Index
	end
	any_GetController_result1_upvr_3.EquippedIndex = var74
	local pairs_result1_2, pairs_result2_2, pairs_result3_3 = pairs(tbl_4_upvr)
	for _, v_3 in pairs_result1_2, pairs_result2_2, pairs_result3_3 do
		if v_3.Index == any_GetController_result1_upvr_3.EquippedIndex then
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.2, 1.3);
			}):Play()
			v_3.UI.UIStroke.Thickness = 4
		else
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.111, 1);
			}):Play()
			v_3.UI.UIStroke.Thickness = 1
		end
	end
	pairs_result3_3 = any_GetController_result1_upvr_3.EquippedIndex
	local var80 = pairs_result3_3
	if var80 then
		var80 = arg1.Item
	end
	any_GetController_result1_upvr_3:EquipItem(var80)
end
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
local Streamable_upvr = require(ReplicatedStorage_upvr.Packages.Streamable).Streamable
function ChestAdded(arg1) -- Line 308
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: Streamable_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: InventoryService_upvr (readonly)
	]]
	local any_split_result1 = arg1:split('/')
	if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, {
		X = tonumber(any_split_result1[1]);
		Y = tonumber(any_split_result1[2]);
		Z = tonumber(any_split_result1[3]);
	}) then
		warn("Chest not registered")
	else
		local _ = function(arg1_2, arg2) -- Line 317
			--[[ Upvalues[3]:
				[1]: any_GetController_result1_upvr (copied, readonly)
				[2]: InventoryService_upvr (copied, readonly)
				[3]: arg1 (readonly)
			]]
			arg1_2:WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 319
				--[[ Upvalues[3]:
					[1]: any_GetController_result1_upvr (copied, readonly)
					[2]: InventoryService_upvr (copied, readonly)
					[3]: arg1 (copied, readonly)
				]]
				if any_GetController_result1_upvr.Proccessing then return end
				any_GetController_result1_upvr.Proccessing = true
				local _, any_await_result2_2 = InventoryService_upvr:GetChestData(arg1):andThen():await()
				if not any_await_result2_2 then return end
				any_GetController_result1_upvr:ToggleUI("Chest", true, any_await_result2_2, arg1)
				any_GetController_result1_upvr.Proccessing = false
			end)
			arg2:Add(function() -- Line 328
				warn("Chest despawned")
			end)
		end
	end
end
local MobService_upvr = Knit.GetService("MobService")
function module_upvr.ToggleInventory(arg1, arg2, arg3, arg4, arg5) -- Line 336
	--[[ Upvalues[6]:
		[1]: module_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: MobService_upvr (readonly)
		[5]: tbl_upvr (readonly)
		[6]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	for i_7, _ in pairs(module_upvr.FocusedStorages) do
		module_upvr.FocusedStorages[i_7] = nil
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 19 start (CF ANALYSIS FAILED)
	MainGui_upvr.Inventory.Main.Position = UDim2.fromScale(0.33, 0.5)
	any_GetController_result1_upvr.Processing = true
	if arg3 == "Underling" then
		local _, any_await_result2 = MobService_upvr:GetUnderlingFromIndex(arg4.Name):andThen():await()
		if any_await_result2 then
			module_upvr.FocusedStorages.Underling = any_await_result2
			tbl_upvr.Underling:InitialiseUnderlingUI(any_await_result2)
			-- KONSTANTWARNING: GOTO [78] #54
		end
	elseif arg3 == "Chest" then
		local tbl_5 = {}
		tbl_5.Index = arg5
		tbl_5.Data = arg4
		module_upvr.FocusedStorages.Chest = tbl_5
		tbl_upvr.Chests:InitialiseChestUI(tbl_5)
	end
	-- KONSTANTERROR: [15] 12. Error Block 19 end (CF ANALYSIS FAILED)
end
tbl_upvr.ToolBar = require(script.ToolBar)
tbl_upvr.Backpack = require(script.Backpack)
tbl_upvr.Underling = require(script.Underling)
tbl_upvr.Chests = require(script.Chests)
game:GetService("ContextActionService"):BindAction("ToggleInventory", function(arg1, arg2) -- Line 387
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
	end
end, false, Enum.KeyCode.E, Enum.KeyCode.ButtonY)
MainGui_upvr.HUD.ToolBar.InventoryButton.Button.MouseButton1Up:Connect(function() -- Line 391
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
end)
MainGui_upvr.Inventory.Main.Close.MouseButton1Up:Connect(function() -- Line 395
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Inventory", false)
end)
coroutine.wrap(CollectionCleanUp)()
tbl_upvr.ToolBar.EquipUpdate.Event:Connect(EquipUpdate)
tbl_upvr.Backpack.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Backpack.QuickSwapUpdate.Event:Connect(QuickSwap)
tbl_upvr.Underling.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Underling.QuickSwapUpdate.Event:Connect(QuickSwap)
tbl_upvr.Chests.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_upvr.Chests.QuickSwapUpdate.Event:Connect(QuickSwap)
local any_await_result1_2, any_await_result2_4 = InventoryService_upvr:GetInventory():andThen():await()
_ = any_await_result1_2 -- Setting global
any_GetController_result1_upvr_3.Inventory = any_await_result2_4
local any_await_result1, any_await_result2_3 = InventoryService_upvr:GetInventorySpace():andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.InventorySpace = any_await_result2_3
InventoryService_upvr.InventoryUpdate:Connect(UpdateInventory)
InventoryService_upvr.StorageUpdate:Connect(UpdateStorageServer)
InventoryService_upvr.InventorySpaceUpdate:Connect(UpdateInventorySpace)
InventoryService_upvr.ItemCollected:Connect(CollectionUI)
MainGui_upvr.Inventory.Main.SearchBG.SearchBar.Changed:Connect(UpdateSearch)
Knit.GetService("MarketService").InventorySpace:Connect(function(arg1) -- Line 421
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: tbl_6_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	for i_8 = module_upvr.InventorySpace, arg1 do
		table.insert(tbl_6_upvr, tbl_upvr.Backpack.new(i_8))
	end
	module_upvr.InventorySpace = arg1
end)
InitialiseToolBar()
InitialiseBackpack()
UpdateInventory(any_GetController_result1_upvr_3.Inventory)
EquipUpdate(tbl_4_upvr[1])
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.ToolBar
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:01
-- Luau version 6, Types version 3
-- Time taken: 0.002077 seconds

local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.EquipUpdate = Instance.new("BindableEvent")
NumberToEnum = {Enum.KeyCode.One, Enum.KeyCode.Two, Enum.KeyCode.Three, Enum.KeyCode.Four, Enum.KeyCode.Five, Enum.KeyCode.Six, Enum.KeyCode.Seven, Enum.KeyCode.Eight, Enum.KeyCode.Nine} -- Setting global
function module_upvr.new(arg1, arg2) -- Line 30
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl = {}
	tbl.Index = arg1
	tbl.UI = arg2
	tbl.Item = nil
	tbl.Selected = false
	local setmetatable_result1 = setmetatable(tbl, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local ContextActionService_upvr = game:GetService("ContextActionService")
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local RunService_upvr = game:GetService("RunService")
local mouse_upvr = game.Players.LocalPlayer:GetMouse()
function module_upvr.Initialise(arg1) -- Line 47
	--[[ Upvalues[4]:
		[1]: ContextActionService_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: mouse_upvr (readonly)
	]]
	ContextActionService_upvr:BindAction("Equip"..tostring(arg1.Index), function(arg1_2, arg2) -- Line 49
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 ~= Enum.UserInputState.End then
		else
			arg1:ToolSelected()
		end
	end, false, NumberToEnum[arg1.Index])
	arg1.UI.Button.MouseButton1Up:Connect(function() -- Line 54
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:ToolSelected()
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 59
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (copied, readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 71
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
function module_upvr.UpdateItem(arg1, arg2) -- Line 79
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
function module_upvr.ToolSelected(arg1) -- Line 84
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.EquipUpdate:Fire(arg1)
end
return module_upvr

-- StarterPlayer.StarterPlayerScripts.Controllers.UIController.InventoryHandler.Backpack
-- Saved by UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw

-- Decompiled with Konstant V2.1, a fast Luau decompiler made in Luau by plusgiant5 (https://discord.gg/wyButjTMhM)
-- Decompiled on 2024-09-19 19:59:02
-- Luau version 6, Types version 3
-- Time taken: 0.006250 seconds

local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.SwapUpdate = Instance.new("BindableEvent")
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
function module_upvr.new(arg1) -- Line 20
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl_3 = {}
	tbl_3.Index = arg1
	tbl_3.UI = nil
	tbl_3.Item = nil
	local setmetatable_result1 = setmetatable(tbl_3, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local UserInputService_upvr = game:GetService("UserInputService")
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local RunService_upvr = game:GetService("RunService")
function module_upvr.Initialise(arg1) -- Line 36
	--[[ Upvalues[6]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: module_upvr (readonly)
		[5]: MainGui_upvr (readonly)
		[6]: RunService_upvr (readonly)
	]]
	local LocalPlayer_upvr = game.Players.LocalPlayer
	local Main_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui"):WaitForChild("Inventory"):WaitForChild("Main")
	local mouse_upvr = LocalPlayer_upvr:GetMouse()
	if 0 < arg1.Index and arg1.Index < 10 then
		arg1.UI = Main_upvr:WaitForChild("Toolbar"):WaitForChild(arg1.Index)
	else
		arg1.UI = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
		arg1.UI.Name = arg1.Index
		arg1.UI.Parent = Main_upvr:WaitForChild("Backpack"):WaitForChild("ScrollingFrame")
	end
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 52
		--[[ Upvalues[9]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (readonly)
			[3]: mouse_upvr (readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: MainGui_upvr (copied, readonly)
			[7]: Main_upvr (readonly)
			[8]: RunService_upvr (copied, readonly)
			[9]: UserInputService_upvr (copied, readonly)
		]]
		local UserInputType_upvr = arg1_2.UserInputType
		local var48
		if not arg1.Item or UserInputType_upvr ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr ~= Enum.UserInputType.Touch then
		else
			var48 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var48.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Inventory";
				})
				MainGui_upvr.ItemDetails.Visible = false
				return
			end
			var48 = arg1
			local clone_upvr = arg1.UI:Clone()
			clone_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var48.UI.AbsoluteSize.Y)
			var48 = 0
			clone_upvr.Position = UDim2.new(-50, -50, var48, 0)
			clone_upvr.ZIndex = 11
			clone_upvr.Parent = Main_upvr.Parent
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr:FindFirstChild("DisplayNum") then
				clone_upvr.DisplayNum.Visible = false
			end
			local tbl = {}
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			var48 = tbl
			table.insert(var48, RunService_upvr.RenderStepped:Connect(function() -- Line 85
				--[[ Upvalues[2]:
					[1]: clone_upvr (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var48 = tbl
			table.insert(var48, UserInputService_upvr.InputEnded:Connect(function(arg1_4) -- Line 89
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr (readonly)
					[2]: BindableEvent_upvr_2 (readonly)
				]]
				if arg1_4.UserInputType == UserInputType_upvr then
					BindableEvent_upvr_2:Fire()
				end
			end))
			var48 = MainGui_upvr.Inventory.Main.Backpack
			var48 = false
			var48.ScrollingFrame.ScrollingEnabled = var48
			BindableEvent_upvr_2.Event:Wait()
			var48 = MainGui_upvr.Inventory.Main.Backpack
			var48 = true
			var48.ScrollingFrame.ScrollingEnabled = var48
			var48 = tbl
			local pairs_result1_3, pairs_result2_4, pairs_result3_2 = pairs(var48)
			for _, v in pairs_result1_3, pairs_result2_4, pairs_result3_2 do
				v:Disconnect()
			end
			clone_upvr:Destroy()
			pairs_result2_4 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1, pairs_result2, pairs_result3 = pairs(pairs_result2_4)
			for _, v_2 in pairs_result1, pairs_result2, pairs_result3 do
				local tonumber_result1_2 = tonumber(v_2.Name)
				if tonumber_result1_2 then
					if v_2.Parent.Parent.Name == "Backpack" or v_2.Parent.Name == "Toolbar" then
						tonumber_result1_2 = "Inventory"
					else
						tonumber_result1_2 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Inventory";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1_2;
					})
					MainGui_upvr.ItemDetails.Visible = false
				end
			end
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ViewportFrame.Visible = pairs_result2
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ImageLabel.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if arg1.Item then
				if 1 < arg1.Item.Stack then
					pairs_result2 = true
					-- KONSTANTWARNING: GOTO [341] #228
				end
			end
			pairs_result2 = false
			pairs_result2.Stack.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if not arg1.Item then
				pairs_result2 = true
			else
				pairs_result2 = false
			end
			pairs_result2.Empty.Visible = pairs_result2
		end
	end)
	arg1.UI.MouseEnter:Connect(function() -- Line 123
		--[[ Upvalues[4]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: mouse_upvr (readonly)
		]]
		if not arg1.Item then
		else
			MainGui_upvr.ItemDetails.Title.Text = ' '..arg1.Item.Id
			MainGui_upvr.ItemDetails.Visible = true
			while MainGui_upvr.ItemDetails.Visible and RunService_upvr.RenderStepped:Wait() do
				MainGui_upvr.ItemDetails.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
			end
		end
	end)
	arg1.UI.MouseLeave:Connect(function() -- Line 135
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: MainGui_upvr (copied, readonly)
		]]
		if arg1.Item and MainGui_upvr.ItemDetails.Title.Text == ' '..arg1.Item.Id then
			MainGui_upvr.ItemDetails.Visible = false
		end
	end)
end
function module_upvr.UpdateItem(arg1, arg2) -- Line 143
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
return module_upvr



-- PluginGuiService.PluginGui.Main.Contents.Frame.Code.SmartScale
local camera = game.Workspace.CurrentCamera
local textService = game:GetService("TextService")
local group = script.Group:GetChildren()
local config = script.Configuration
local singleLine = config.SingleLine.Value
local textChange = config.RunOnTextChanged.Value
local sizeChange = config.RunOnSizeChanged.Value
local fontChange = config.RunOnFontChanged.Value
local screenChange = config.RunOnScreenSizeChanged.Value
local margin = config.Margin.Value

local marginSpace = ""

if margin ~= 0 then
	for _ = 1, margin do
		marginSpace = marginSpace .. " "
	end
end	

local textSize

function findMaxSize(element)
	element.TextScaled = false
	if singleLine then
		element.TextWrapped = true
	end

	for size = 1, 100 do
		textSize = textService:GetTextSize(marginSpace .. element.Text .. marginSpace, size, element.Font, Vector2.new(element.AbsoluteSize.X, 99999))

		if singleLine then
			if textSize.Y > size then
				if size == 1 then
					return 1
				end
				return size - 1
			end
		else
			if textSize.Y > element.AbsoluteSize.Y then
				if size == 1 then
					return 1
				end
				return size - 1
			end
		end
	end

	return 100
end

local sizes = {}
local min

function run()
	sizes = {}
	min = 100

	for _, object in pairs(group) do
		if object.ClassName == "ObjectValue" and object.Value ~= nil then
			if not object.Value.Text:split('\n')[2] then
				if object.Value.ClassName == "TextLabel" or object.Value.ClassName == "TextButton" or object.Value.ClassName == "TextBox" then
					sizes[#sizes+1] = findMaxSize(object.Value)
				end
			end
		end
	end

	for _, size in pairs(sizes) do
		if size < min then
			min = size
		end
	end

	for _, object in pairs(group) do
		if not object.Value.Text:split('\n')[2] then
			pcall(function()
				object.Value.TextSize = min
				if margin ~= 0 then
					object.Value.TextXAlignment = Enum.TextXAlignment.Center
				end
			end)
		end
	end
	
	for _, object in pairs(group) do
		if object.Value.Text:split('\n')[2] then
			object.Value.TextScaled = true
			local s = object.Value.Text:split('\n')
			object.Value.Size = UDim2.new(0.855, 0, 0.844 - (s[1]:len() / 50), 0)
		end
	end
end

if screenChange then
	camera:GetPropertyChangedSignal("ViewportSize"):Connect(run)
end

for _, object in pairs(group) do
	repeat
		wait(0.1)
	until object.Value ~= nil

	if textChange then
		object.Value:GetPropertyChangedSignal("Text"):Connect(run)
	end
	if fontChange then
		object.Value:GetPropertyChangedSignal("Font"):Connect(run)
	end
	if sizeChange then
		object.Value:GetPropertyChangedSignal("AbsoluteSize"):Connect(run)
	end
end

run()

-- README
--[[
		Thank you for using UniversalSynSaveInstance https://discord.gg/wx4ThpAsmw.

		If you didn't save in Binary - we recommended to save the game right away to take advantage of the binary format & to preserve values of certain properties if you used IgnoreDefaultProperties setting (as they might change in the future).
		You can do that by going to FILE -> Save to File As -> Make sure File Name ends with .rbxl -> Save

		If your player cannot spawn into the game, please move the scripts in StarterPlayer somewhere else. Then run `game:GetService("Players").CharacterAutoLoads = true`.
		And use "Play Here" to start game instead of "Play" to spawn your Character where your Camera currently is.

		If the chat system does not work, please use the explorer and delete everything inside the TextChatService/Chat service(s). 
		Or run `game:GetService("Chat"):ClearAllChildren()`
				
		If Union and MeshPart collisions don't work, run the script below in the Studio Command Bar:
				
				
		local C = game:GetService("CoreGui")
		local D = Enum.CollisionFidelity.Default
				
		for _, v in game:GetDescendants() do
			if v:IsA("TriangleMeshPart") and not v:IsDescendantOf(C) then
				v.CollisionFidelity = D
			end
		end
		print("Done")
				
		If you can't move the Camera, run this script in the Studio Command Bar:
			
		workspace.CurrentCamera.CameraType = Enum.CameraType.Fixed
		
		Or Destroy the Camera.

		This file was generated with the following settings:
				{"SaveBytecode":false,"ShowStatus":true,"IgnoreDefaultPlayerScripts":true,"NilInstancesFixes":{"BaseWrap":null,"Animator":null,"Attachment":null,"PackageLink":null,"AdPortal":null},"IgnoreList":[null,null],"__DEBUG_MODE":false,"decomptype":"","IgnoreNotArchivable":true,"RemovePlayerCharacters":true,"Object":false,"DecompileIgnore":[null,null,null,null],"IgnoreSpecialProperties":false,"TreatUnionsAsParts":false,"IsModel":false,"NilInstances":false,"ExtraInstances":[],"noscripts":false,"ReadMe":true,"OptionsAliases":{"IsolatePlayers":"SavePlayers","FilePath":"FileName","IgnoreNotArchivable":"IgnoreArchivable","SaveNonCreatable":"SaveNotCreatable","IgnoreDefaultProperties":"IgnoreDefaultProps","timeout":"DecompileTimeout","scriptcache":"DecompileJobless"},"scriptcache":true,"SharedStringOverwrite":false,"AlternativeWritefile":true,"mode":"optimized","SaveCacheInterval":56320,"IgnoreSharedStrings":true,"IsolatePlayers":false,"NotCreatableFixes":["Player","PlayerScripts","PlayerGui","TouchTransmitter"],"timeout":10,"SaveNonCreatable":false,"Anonymous":false,"IsolateStarterPlayer":false,"IsolateLocalPlayerCharacter":false,"IgnorePropertiesOfNotScriptsOnScriptsMode":false,"FilePath":false,"IgnoreDefaultProperties":true,"IsolateLocalPlayer":false,"ShutdownWhenDone":false,"AntiIdle":true,"SafeMode":false,"IgnoreProperties":[],"DecompileJobless":false}

		Elapsed time: 779.0158956999658 PlaceId: 18629157045 Executor: Xeno 1.0.5
]]

